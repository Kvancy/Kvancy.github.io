{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/Kvancy.svg","path":"img/Kvancy.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/Myfavicon.svg","path":"img/Myfavicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon1.svg","path":"img/favicon1.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo_20240913_uugai.com-1726200565845.png","path":"img/logo_20240913_uugai.com-1726200565845.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo_20240913_uugai.com_1726200551920.png","path":"img/logo_20240913_uugai.com_1726200551920.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2023腾讯游戏安全PC决赛.md","hash":"55554b24a2a77fe980f38631f0b4f92fc9d11229","modified":1727861492282},{"_id":"source/_posts/2023腾讯游戏安全PC初赛.md","hash":"304648ddfa31b5bb5992350a26d80a5290d2e80b","modified":1727861431729},{"_id":"source/_posts/2024腾讯游戏安全PC初赛.md","hash":"513b514d9d889d48625200b0d5f91dc9c6a6da3d","modified":1727861502088},{"_id":"source/_posts/CS2.md","hash":"33fcde650aded1bed79624ac092f00b7a6c31cb8","modified":1727861689340},{"_id":"source/_posts/PE文件解析.md","hash":"f3aef83128f043edd131adb948acb806935f3cd9","modified":1727861667255},{"_id":"source/_posts/Rookie diary.md","hash":"cd136453e9d6753ae4d079823cecc1614777ca38","modified":1727445353052},{"_id":"source/_posts/Typora破解记录.md","hash":"0c04fd6f18f6d720398268c038870bfcb10f8a6a","modified":1727861520250},{"_id":"source/_posts/c++.md","hash":"0060b0bc92821c1cf58b856938340394320147e9","modified":1727445031288},{"_id":"source/_posts/smc总结.md","hash":"78cc0b10b1beb33a1b0699ae60b0cba4982dc19b","modified":1727861544954},{"_id":"source/_posts/植物大战僵尸杂交版.md","hash":"e3449d7c1dcec18d630d44690de2469f3d24db72","modified":1727861719256},{"_id":"source/_posts/驱动开发.md","hash":"64bf6c0af0c82ba9aba07acb81a815ce1d97eb9c","modified":1727853434277},{"_id":"source/postLater/2024腾讯游戏安全PC初赛.md","hash":"3027ab4c51bf1ff7255c0c6757e227b030c7427f","modified":1727852629878},{"_id":"source/_posts/扫雷辅助.md","hash":"b71d8f208eef431458ca4cb86354c2dee0419e1f","modified":1727861743153},{"_id":"source/_posts/2022腾讯游戏安全PC初赛.md","hash":"b58aa333f02f2adcd565205c4f65d57ad66bd70e","modified":1727861350816},{"_id":"source/_posts/re.md","hash":"408857668f819978f4723417feb0d44ddb92eea0","modified":1727445172080},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537101},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537102},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537102},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537103},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537103},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537097},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537098},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537098},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537099},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726198537100},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1726198537104},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"a132b217d3015ea776c31a57bec6ed4c6f9471db","modified":1727857339458},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1726198539192},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"b8e4e9cb53fa6de24255c423a092dd2f109ed937","modified":1726198537117},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1726198537106},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1726198537107},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1726198537110},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1726198542010},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1726198542011},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1726198542011},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1726198542013},{"_id":"node_modules/hexo-theme-icarus/languages/it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1726198542013},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1726198542013},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1726198542011},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1726198542014},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1726198542014},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1726198542013},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1726198542014},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1726198542015},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1726198542016},{"_id":"node_modules/hexo-theme-icarus/languages/sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1726198542015},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1726198542017},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1726198537125},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1726198537123},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1726198542018},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1726198542016},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1726198539179},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1726198539179},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1726198539175},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1726198539180},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1726198539182},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1726198537114},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1726198539189},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1726198539189},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1726198537108},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1726198537107},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1726198541938},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1726198541939},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1726198541939},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1726198541940},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1726198541940},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1726198541942},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1726198541943},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1726198541942},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1726198541943},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1726198542005},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1726198541944},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1726198542006},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1726198542007},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1726198537110},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1726198542006},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1726198537108},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1726198542008},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1726198537110},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1726198537111},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1726198537111},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1726198537124},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1726198539176},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"0610cadb3976954c6f299d30320a93a1bd2a151c","modified":1726198539175},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1726198539176},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"bf783d5ef6d58924150472637c6c17782c83e102","modified":1726198539177},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1726198539180},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1726198539182},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"5d07312406b401e8d4e9584b4d41ed7377993935","modified":1726198539187},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1726198539188},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1726198539188},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1726198539190},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"f86a0bae3a92bc07bd674f03a046fb1b6c1b48af","modified":1726198537125},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1726198537122},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/pjax.jsx","hash":"65956102d5faabcedaaafb14b0201548f15e60ce","modified":1726198539181},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"feb70ec2c849f0e08dadccbfbaa4b0940b878de2","modified":1726198539185},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1726198541941},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1726198541941},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1726198542007},{"_id":"node_modules/hexo-theme-icarus/source/img/Kvancy.svg","hash":"498c2e9dfd1b3964f45a83ff01548c5091c665c1","modified":1727856599560},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon1.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1726198542008},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1726198542009},{"_id":"node_modules/hexo-theme-icarus/source/img/logo_20240913_uugai.com-1726200565845.png","hash":"7932b6210f0af8163e726b653700f1d43e02dd7d","modified":1726200572265},{"_id":"node_modules/hexo-theme-icarus/source/img/logo_20240913_uugai.com_1726200551920.png","hash":"50b421a9b259a0b326fdfe389f0674ac37480c8a","modified":1726200560200},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1726198542010},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1726198541937},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1727860573319},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1726198542010},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1726198537106},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1726198537105},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1726198537109},{"_id":"node_modules/hexo-theme-icarus/source/js/pjax.js","hash":"b41aa64aa965201740505376bcebbdedf607a2d4","modified":1726198537109},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1726198537112},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1726198537115},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"265120b80df9808358df3ff7c4eada8a66512a4b","modified":1726198537114},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1726198537115},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1726198537115},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"04c0738dc0a3ed89aecae2aee4ab60173f09e66b","modified":1726198537117},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1726198537116},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1726198537118},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1726198537120},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1726198537120},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1726198537121},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1726198537121},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1726198537112},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/pjax.json","hash":"1f6218016569eb9cd354a06a9537c7110efb5f17","modified":1726198537117},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1726198537113},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1726198537118},{"_id":"node_modules/hexo-theme-icarus/source/img/Myfavicon.svg","hash":"e8a2fa14b34ee33bd006aa04c4a1f568d0d1982d","modified":1727856135453},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"49eb8769ed399da0c8c7caf23e196f7960dbcb0b","modified":1726209168944},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1727861757272},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1727861757272},{"_id":"public/content.json","hash":"3e124e21dcaed7a64993575078ace263dc9ef741","modified":1727861757272},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1727861757272},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1727861757272},{"_id":"public/manifest.json","hash":"307ebeac2d5b5a5d6a1bc0b7c17aebb9e0756627","modified":1727861757272},{"_id":"public/postLater/2024腾讯游戏安全PC初赛.html","hash":"e8b64e9df539c617a3db15fb93d241fa4d16556b","modified":1727861757272},{"_id":"public/2024/09/23/2024腾讯游戏安全PC初赛/index.html","hash":"da05f4bbd477612340a78c776e6d99b1f7eafa63","modified":1727861757272},{"_id":"public/2024/08/06/2022腾讯游戏安全PC初赛/index.html","hash":"0d1c9923dd7ad71cdfb4c7858497ecf4e58a9f17","modified":1727861757272},{"_id":"public/2024/08/13/2023腾讯游戏安全PC决赛/index.html","hash":"67fcc48c9d0e4886cbcf44e1ca7431cebe4d0b3d","modified":1727861757272},{"_id":"public/2024/07/28/2023腾讯游戏安全PC初赛/index.html","hash":"b7a360af0a852ded7bbf0c8747af86ca817e573d","modified":1727861757272},{"_id":"public/2024/05/01/驱动开发/index.html","hash":"a783d6112eb54f22523f5ba66649443fc32ec970","modified":1727861757272},{"_id":"public/2024/04/23/CS2/index.html","hash":"02b628684a16534591b434d43d6ac5e4dea6b7cd","modified":1727861757272},{"_id":"public/2024/03/12/植物大战僵尸杂交版/index.html","hash":"da59c080ac4d313e51bb6c3f0731a84e30387c15","modified":1727861757272},{"_id":"public/2024/01/27/扫雷辅助/index.html","hash":"a0f0ea036355d818e6a105f01123af58bd451c04","modified":1727861757272},{"_id":"public/2023/09/18/Typora破解记录/index.html","hash":"356a9472420f0115c4663276ff72ec78cce70143","modified":1727861757272},{"_id":"public/2023/09/17/smc总结/index.html","hash":"fc188ada932c589cad9ea1252230b5629ce7e82e","modified":1727861757272},{"_id":"public/2023/07/08/Rookie diary/index.html","hash":"9be303849a93eb6eef0ee74e221ff9a7ef8734b9","modified":1727861757272},{"_id":"public/2023/05/23/PE文件解析/index.html","hash":"212fc794a151f1ffdccf922c102bb9376a5808c5","modified":1727861757272},{"_id":"public/2023/05/10/c++/index.html","hash":"4b09d61316c6ec006bec32bae2b8e0363ee58222","modified":1727861757272},{"_id":"public/2023/04/09/re/index.html","hash":"29e5b7c02cf852424a13e9701feaeca2df83c774","modified":1727861757272},{"_id":"public/index.html","hash":"08241b38d4f258a73e1dab1b91af027219f20507","modified":1727861757272},{"_id":"public/categories/实践/index.html","hash":"db90538d293389df606ebc448eb95834db75cd40","modified":1727861757272},{"_id":"public/categories/笔记/index.html","hash":"6fd0f4765f60a911ce5e88e369c2ea75e43fd49f","modified":1727861757272},{"_id":"public/page/2/index.html","hash":"95eeb599105427cae51f782d9fe2a7c149db8b0a","modified":1727861757272},{"_id":"public/archives/page/2/index.html","hash":"9009dcf46b58538231d788d54d7f7df725a7e622","modified":1727861757272},{"_id":"public/archives/index.html","hash":"04577cdd4d00bf2e776aa4919e5e7b58f1fbec8e","modified":1727861757272},{"_id":"public/archives/2023/index.html","hash":"d0001f8aa496a222663a793fa2fb5e60f1f8fc3c","modified":1727861757272},{"_id":"public/archives/2023/04/index.html","hash":"0da97ba93acc27d4cbb4be0570dd5a3bd15d3ea4","modified":1727861757272},{"_id":"public/archives/2023/05/index.html","hash":"e75f74a874210cfd1eea42be8a8e3d3010cf35ba","modified":1727861757272},{"_id":"public/archives/2023/07/index.html","hash":"59d5b56ed5b8efc01008af41d46ea71db51e55a3","modified":1727861757272},{"_id":"public/archives/2023/09/index.html","hash":"6ab1d65d52d6d80d3d3b4ead7b3a3375bddb7120","modified":1727861757272},{"_id":"public/archives/2024/index.html","hash":"14e432243bb1b8277701041e48bc14bd673f9193","modified":1727861757272},{"_id":"public/archives/2024/01/index.html","hash":"db701eafb1e607578b3475c1ab13dfc81031525d","modified":1727861757272},{"_id":"public/archives/2024/03/index.html","hash":"48d68a5a373dcfa8904ede4b694a414349410a04","modified":1727861757272},{"_id":"public/archives/2024/04/index.html","hash":"f58a2abb9388f16efef06a323b25ef4ddbc3d5ca","modified":1727861757272},{"_id":"public/archives/2024/05/index.html","hash":"3aabbddb2dc3ebad682936ea668c904174e73ffa","modified":1727861757272},{"_id":"public/archives/2024/07/index.html","hash":"bcc9e583267d766a71cbe1b36aff4b12adda42c1","modified":1727861757272},{"_id":"public/archives/2024/08/index.html","hash":"d0befb00fea27a8d78ed4506301bc0977a8446c6","modified":1727861757272},{"_id":"public/archives/2024/09/index.html","hash":"6f7d9f5258d2c1070e2144216de1fb81bc19e6a2","modified":1727861757272},{"_id":"public/tags/破解/index.html","hash":"cff6dc6388fb14bb7cea2ad9a11ac0571344dec6","modified":1727861757272},{"_id":"public/tags/逆向/index.html","hash":"d4b3ec1d4ec10c4abb3f411a2cd0431fddafad7d","modified":1727861757272},{"_id":"public/tags/逆向/page/2/index.html","hash":"8373b5c47aecf91fc6471ee90c235247985f339d","modified":1727861757272},{"_id":"public/tags/杂记/index.html","hash":"c793b52321b79ca92960f1e2a078d6962d1f6c14","modified":1727861757272},{"_id":"public/tags/C/index.html","hash":"296bce321ed89f70212849fe109f2e715ac3e051","modified":1727861757272},{"_id":"public/tags/驱动/index.html","hash":"050b23d0420df8eb5d830c2a2e14a021bcc5b602","modified":1727861757272},{"_id":"public/categories/index.html","hash":"9db65180a9bdb415ab21da13862bd658a8b270de","modified":1727861757272},{"_id":"public/tags/index.html","hash":"76fef467c82cafc5fa2b56c33185440bdea1729a","modified":1727861757272},{"_id":"public/img/Kvancy.svg","hash":"498c2e9dfd1b3964f45a83ff01548c5091c665c1","modified":1727861757272},{"_id":"public/img/favicon1.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1727861757272},{"_id":"public/img/logo_20240913_uugai.com-1726200565845.png","hash":"7932b6210f0af8163e726b653700f1d43e02dd7d","modified":1727861757272},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1727861757272},{"_id":"public/img/logo_20240913_uugai.com_1726200551920.png","hash":"50b421a9b259a0b326fdfe389f0674ac37480c8a","modified":1727861757272},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1727861757272},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1727861757272},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1727861757272},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1727861757272},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1727861757272},{"_id":"public/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1727861757272},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1727861757272},{"_id":"public/js/pjax.js","hash":"b41aa64aa965201740505376bcebbdedf607a2d4","modified":1727861757272},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1727861757272},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1727861757272},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1727861757272},{"_id":"public/img/Myfavicon.svg","hash":"e8a2fa14b34ee33bd006aa04c4a1f568d0d1982d","modified":1727861757272},{"_id":"public/img/avatar.png","hash":"49eb8769ed399da0c8c7caf23e196f7960dbcb0b","modified":1727861757272}],"Category":[{"name":"实践","_id":"cm1roa13d0003ugie23nyav87"},{"name":"笔记","_id":"cm1roa13k000kugie1vp385jb"}],"Data":[],"Page":[{"title":"2024腾讯游戏安全PC初赛","date":"2024-09-22T16:00:00.000Z","categories":"实践","tags":["破解","逆向"],"sticky":100,"pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。<!-- more -->\n\n## 题目\n\n![image-20240923132824209](https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png)\n\n## （一）解题过程\n\n拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点\n\n![image-20240923131144727](https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png)\n\n运行发现程序会多次在`WriteProcessMemory`下断下，hook一下观察传参\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T * lpNumberOfBytesWritten\n)\n{\n    char fileName[12] = { 0 };\n    sprintf(fileName, \"out%d.txt\", (int)hProcess % 1000);\n    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n    {\n        DBGMGEBOX(\"CreateFile Fail\");\n        return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n    }\n    SetFilePointer(hFile, 0, NULL, FILE_END);\n    DWORD bytesWritten;\n    BOOL result = WriteFile(hFile, lpBuffer, nSize, &bytesWritten, NULL);\n    CloseHandle(hFile);\n    DBGMGEBOX(\"findProcess WriteProcessMemory:%p,size:%d\\n\", hProcess,nSize);\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n这里输出了三个txt文件\n\n![image-20240923131546102](https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png)\n\n其中out200.txt文件有明显的PE头\n\n![image-20240923131748329](https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png)\n\n去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过`WriteProcessMemory`往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。\n\nida64打开发现程序的dllMain入口还是被加密了\n\n![image-20240923132428865](https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png)\n\n还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在\n\n入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为\n\n![image-20240913213116556](https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png)\n\n这里我对下面这几个API下了断点\n\n![image-20240913213203300](https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png)\n\n运行，第一次成功在openProcess函数断下\n\n![image-20240913213252406](https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png)\n\n观察传参窗口，找到了一个系统进程名称字符串`winlogon.exe`，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码\n\n![image-20240913213951735](https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png)\n\n汇编代码不是很好看，根据偏移在IDA里反汇编看看\n\n```c\n__int64 __fastcall sub_1800063D0(_DWORD *Dst, DWORD dwProcessId)\n{\n  __m128i si128; // xmm0\n  __m128i v6; // xmm0\n  __int64 result; // rax\n  __m128i v10; // xmm2\n  size_t v14; // rbx\n  __int64 v15; // rax\n  int v16; // r14d\n  HANDLE Toolhelp32Snapshot; // rsi\n  HANDLE v18; // rax\n  __int64 v21; // rbx\n  CHAR Caption[16]; // [rsp+40h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64;\n  if ( !dwProcessId )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)_RBP = 0xE795A71250E2465Aui64;\n    si128 = _mm_load_si128((const __m128i *)_RBP);\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    v6 = _mm_xor_si128(si128, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD5301FE45158ui64;\n    *(__m128i *)_RBP = v6;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xBF19D3ADD5D97A59ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xBD1C9CA3F4C12EC9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C05763438E84ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    MessageBoxA(0i64, (LPCSTR)(_RBP + 32), (LPCSTR)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64), 0);\nLABEL_3:\n    GetLastError();\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)_RBP = 0x88D6871250E2465Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF98DB9906C58ui64;\n    *(__m128i *)_RBP = _mm_xor_si128(\n                         _mm_load_si128((const __m128i *)_RBP),\n                         *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    return sub_180006A00((void *)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64));\n  }\n  if ( !(unsigned __int8)sub_180006FC0() )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) = 0x44F651D568826090i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0) = 0x52C9FCDC77FF5FC3i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xDDD2E92971C27548ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA43EB7C9E8CF4E1Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xA62FD5B4C980079Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xD55585772756849Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x40) = 0x52C9FCDC7DDE2DACi64;\n    v10 = _mm_load_si128((const __m128i *)(_RBP + 64));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C8) = 0x44F651D568826090i64;\n    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa [rbp+210h+var_1D0], xmm2\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    sub_180006A00((void *)(_RBP + 32));\n  }\n  v14 = -1i64;\n  if ( dwProcessId == -1 )\n  {\n    Dst[34] = GetCurrentProcessId();\n    *((_QWORD *)Dst + 13) = -1i64;\n  }\n  else\n  {\n    Dst[34] = dwProcessId;\n    v18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n    *((_QWORD *)Dst + 13) = v18;\n    if ( !v18 )\n    {\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C0574231E1F6ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD53051F54450ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA92981ACBCD97A59ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xCF59BCC699AA419Bui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n      __asm\n      {\n        vmovdqu ymm0, [rbp+210h+var_70]\n        vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n        vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n        vzeroupper\n      }\n      sub_180006A00((void *)(_RBP + 32));//打印报错信息\n      goto LABEL_3;\n    }\n  }\n  Dst[30] = 0x1FFFFF;\n  v15 = -1i64;\n  do\n    ++v15;\n  while ( *((_BYTE *)Dst + v15) );\n  if ( !v15 )\n  {\n    v16 = Dst[34];\n    Toolhelp32Snapshot = CreateToolhelp32Snapshot(2u, 0);\n    if ( Toolhelp32Snapshot != (HANDLE)-1i64 )\n    {\n      *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = 304;\n      memset((void *)(_RBP + 100), 0, 0x12Cui64);\n      if ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n      {\n        while ( *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x68) != v16 )\n        {\n          if ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n            goto LABEL_20;\n        }\n        do\n          ++v14;\n        while ( *(_BYTE *)(_RBP + 140 + v14) );\n        memmove(Dst, (const void *)(_RBP + 140), v14);\n      }\nLABEL_20:\n      CloseHandle(Toolhelp32Snapshot);\n    }\n  }\n  *((_QWORD *)Dst + 18) = sub_1800068D0(Dst, Dst);\n  v21 = 0i64;\n  *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = Dst[34];\n  *(_QWORD *)_RBP = 0i64;\n  EnumWindows(EnumFunc, (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64);\n  result = *(_QWORD *)_RBP;\n  if ( *(_QWORD *)_RBP )\n    v21 = *(_QWORD *)_RBP;\n  *((_QWORD *)Dst + 16) = v21;\n  return result;\n}\n```\n\n这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。\n\n![image-20240913221222730](https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png)\n\n分析完这个函数，继续回溯一层，运行到返回，定位到这个地方\n\n![image-20240913221520425](https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png)\n\n继续根据偏移转到IDA里看反汇编\n\n```c\nint sub_180001990()\n{\n  size_t v0; // rbx\n  DWORD v1; // eax\n  __m128i Dst; // [rsp+20h] [rbp-48h] BYREF\n  __int64 v4; // [rsp+30h] [rbp-38h]\n  __int64 v5; // [rsp+38h] [rbp-30h]\n  __m128i Src; // [rsp+40h] [rbp-28h] BYREF\n\n  Dst.m128i_i64[0] = 0xE795A7603F90341Fui64;\n  Dst.m128i_i64[1] = 0xC65BF3E99CAA093Cui64;\n  Src.m128i_i64[0] = 0x89FAC00F53FE5D68ui64;\n  Src.m128i_i64[1] = 0xC65BF3E9F9D26C12ui64;\n  Src = _mm_xor_si128(_mm_load_si128(&Src), Dst);\n  v0 = -1i64;\n  do\n    ++v0;\n  while ( Src.m128i_i8[v0] );\n  memmove(dword_1800349A0, &Src, v0);\n  Dst.m128i_i64[0] = 0i64;\n  v4 = 0i64;\n  v5 = 15i64;\n  sub_180004770(&Dst, &Src, v0);\n  v1 = sub_1800070A0(&Dst);\n  sub_1800063D0(dword_1800349A0, v1);\n  return atexit(sub_180020C90);\n}\n```\n\n前面应该是一个加密的字符串操作，用python打印出字符串\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xE795A7603F90341F\nx2 = 0xC65BF3E99CAA093C\ny1 = 0x89FAC00F53FE5D68\ny2 = 0xC65BF3E9F9D26C12\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n#Result 1: nogolniw\n#Result 2: exe.\n```\n\n得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方\n\n```c\nv18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n*((_QWORD *)Dst + 13) = v18;\n```\n\n随后return exit退出。\n\n随后我在退出函数传参的时候看到了一个hProcess\n\n![image-20240914102337797](https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png)\n\n一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数\n\n```c\nvoid sub_180007C10()\n{\n  HANDLE v1; // rcx\n  void *v2; // rdx\n  __int128 v3; // xmm0\n  __int128 v4; // xmm1\n  HANDLE FileA; // rbx\n  __int64 v8; // rcx\n  _BYTE *v9; // rdx\n  unsigned __int64 v10; // rdx\n  _QWORD *v11; // rcx\n  char Buffer; // [rsp+60h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64;\n  while ( byte_180032C00 )\n  {\n    if ( !byte_180034961 && !byte_180034960 )\n      sub_1800041D0();\n    v1 = hProcess;\n    v2 = (void *)(qword_180034968 + 2766);\n    *(_BYTE *)_RBP = 15;\n    WriteProcessMemory(v1, v2, (LPCVOID)((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64), 1ui64, 0i64);\n    byte_180032C00 = 0;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xAA32D3B2B7C50388ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10) = 0xA0A195500DCC0E5Cui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x18) = 0x943E9588CFCF645Dui64;\n    v3 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA727C0574231D098ui64;\n    v4 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x80) = 0xE795A7603F90341Fui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = v3;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x88) = 0xC65BF3E99CAA093Cui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x70) = v4;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x90) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x98) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+0D0h+var_50]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+0D0h+FileName]\n      vmovdqa ymmword ptr [rbp+0D0h+FileName], ymm1\n      vzeroupper\n    }\n    FileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n    if ( FileA != (HANDLE)-1i64 )\n    {\n      ((void (__fastcall *)(unsigned __int64))loc_180007A20)(_RBP + 48);\n      v8 = -1i64;\n      if ( *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) < 0x10ui64 )\n      {\n        do\n          ++v8;\n        while ( *(_BYTE *)(_RBP + 48 + v8) );\n        v9 = (_BYTE *)(_RBP + 48);\n      }\n      else\n      {\n        v9 = *(_BYTE **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        do\n          ++v8;\n        while ( v9[v8] );\n      }\n      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + 8), 0i64);\n      CloseHandle(FileA);\n      v10 = *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48);\n      if ( v10 >= 0x10 )\n      {\n        v11 = *(_QWORD **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        if ( v10 + 1 >= 0x1000 )\n        {\n          v11 = (_QWORD *)*(v11 - 1);\n          if ( (unsigned __int64)(*(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30)\n                                - (_QWORD)v11\n                                - 8i64) > 0x1F )\n            invalid_parameter_noinfo_noreturn();\n        }\n        j_j_free(v11);\n      }\n    }\n  }\n}\n```\n\n看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xA0A195500DCC0E5C\nx2 = 0x943E9588CFCF645D\nx3 = 0xAA32D3B2B7C50388\nx4 = 0xA727C0574231D098\ny1 = 0xE795A7603F90341F\ny2 = 0xC65BF3E99CAA093C\ny3 = 0xCF59BCC699A060E9\ny4 = 0xA727C0574231E1F6\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\nresult3 = hex_xor_to_string(x3, y3)\nresult4 = hex_xor_to_string(x4, y4)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\nprint(\"Result 3:\", result3)\nprint(\"Result 4:\", result4)\n\nres = result1[::-1] + result2[::-1] + result3[::-1] + result4[::-1]\nprint(res)\n```\n\n![image-20240914110434860](https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png)\n\n整个拼起来是字符串`C:\\2024GameSafeRace.token1`，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下\n\n![image-20240914110826942](https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png)\n\nloc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入`C:\\2024GameSafeRace.token1`中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。\n\n![image-20240914111407201](https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png)\n\n找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数\n\n```C\nFileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n```\n\n![image-20240914111653640](https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png)\n\n看来是参数在作怪，CreateFileA函数传入**OPEN_EXISTING**参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。\n\n![image-20240914112419617](https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png)\n\nC:\\2024GameSafeRace.token1成功被写入\n\n![image-20240914112536772](https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png)\n\n010打开找到token1:`757F4749AEBB1891EF5AC2A9B5439CEA`\n\ntoken2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取\n\n![image-20240914113718466](https://s2.loli.net/2024/10/02/QDpOlfmIBnoNLKS.png)\n\n组合一下就是token2：`803f14a24d64f3e697957c252e3a5686`\n\n\n\n## （二）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）\n\n根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到`C:\\2024GameSafeRace.token1`中，但是会因为CreateFileA参数`OPEN_EXISTING`条件不满足而失败，所以我们只需要修改这个传参，改成`OPEN_ALWAYS`，即可实现输出token1，那我们只需要hook `CreateFileA`函数修改传参即可，但是有个问题，因为不是hack.exe本身调用`CreateFileA`函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用`CreateFileA`函数，所以我们可以考虑在注入前修改`WriteProcessMemory`函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。\n\n这里我们要patch 传参，通过ida找到传参的汇编代码\n\n![image-20240920142928600](https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png)\n\n在winhex里找到对应所在文件偏移\n![image-20240920143006628](https://s2.loli.net/2024/10/02/dZ5cpxBXQakgSvh.png)\n\n也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n成功输出token1文件：\n\n![image-20240914120306770](https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png)\n\n然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。\n\nhook DbgPrintEx函数看一眼传参。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s DbgPrintEx ComponentId:%lu,Level:%lu\\n\",dbgFilter, ComponentId, Level);\n    va_list args;\n    va_start(args, Format);\n    NTSTATUS s = func(ComponentId, Level, Format, args);\n    va_end(args);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\",dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n发现加载ace驱动后，有大量的level:5的调试信息输出\n\n![image-20240918212128643](https://s2.loli.net/2024/10/02/prtTqv2fl91bxsn.png)\n\n也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nchar buffer[1024]; \nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    va_list args;\n    va_start(args, Format);\n    vsprintf(buffer, Format, args);\n    va_end(args);\n    NTSTATUS s = func(ComponentId, 0, \"%s\", buffer);//修改level为0\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"Kvancy: DriverUnload\\n\");\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"Kvancy: DriverEntry\\n\");\n    return STATUS_SUCCESS;\n}\n```\n\n![{4981D7A9-1EAA-4A38-9280-429D63ECABF9}](https://s2.loli.net/2024/10/02/gcZOPylkwdjXVvL.png)\n\n成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。\n\n![{170126A6-1C28-4BF3-AB47-AB2397C76595}](https://s2.loli.net/2024/10/02/fSGHQJXgADMceua.png)\n\n可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。\n\n```c\nVOID WriteToFile(PUNICODE_STRING FilePath, PCHAR Data)\n{\n    OBJECT_ATTRIBUTES objAttr;\n    IO_STATUS_BLOCK ioStatusBlock;\n    HANDLE fileHandle;\n    NTSTATUS status;\n    UNICODE_STRING unicodeFilePath;\n\n    RtlInitUnicodeString(&unicodeFilePath, FilePath->Buffer);\n\n    InitializeObjectAttributes(&objAttr, &unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, NULL, NULL);\n\n    status = ZwCreateFile(\n        &fileHandle,\n        FILE_APPEND_DATA | SYNCHRONIZE,\n        &objAttr,\n        &ioStatusBlock,\n        NULL,\n        FILE_ATTRIBUTE_NORMAL,\n        0,\n        FILE_OPEN_IF,\n        FILE_SYNCHRONOUS_IO_NONALERT,\n        NULL,\n        0\n    );\n\n    if (NT_SUCCESS(status)) {\n        size_t dataLength = strlen(Data);\n        ZwWriteFile(fileHandle, NULL, NULL, NULL, &ioStatusBlock, Data, (ULONG)dataLength, NULL, NULL);\n        ZwClose(fileHandle);\n    }\n    else {\n        DbgPrint(\"Failed to create file: %08X\\n\", status);\n    }\n}\n\nVOID EnumProcesses()\n{\n    NTSTATUS status;\n    PVOID buffer;\n    ULONG bufferSize = 0x10000; // Initial buffer size, can grow if needed\n    ULONG returnLength;\n    CHAR logBuffer[1024];\n\n    UNICODE_STRING filePath;\n    RtlInitUnicodeString(&filePath, L\"\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt\");\n\n    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!buffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(buffer);\n        bufferSize = returnLength;\n        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!buffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n    }\n\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;\n        while (TRUE) {\n            if (processInfo->ImageName.Buffer) {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: %wZ\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId, &processInfo->ImageName);\n            }\n            else {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: [System Process]\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId);\n            }\n\n            WriteToFile(&filePath, logBuffer);\n\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    ExFreePool(buffer);\n}\n```\n\n结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用`PsCreateSystemThread`创建了一个内核线程。hook`PsCreateSystemThread`函数看看驱动加载时是否调用了这个函数。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext);\nHOOK_MANAGER hookManager;\n\n\nNTSTATUS myPsCreateSystemThread(\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext\n)\n{\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s myPsCreateSystemThread StartRoutine:%p\\n\", dbgFilter, StartRoutine);\n    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = PsCreateSystemThread;\n    InitializeHookManager(&hookManager, dbgPrintEx, myPsCreateSystemThread);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\", dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n![{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}](https://s2.loli.net/2024/10/02/jt8TS7WcXqhm9JF.png)\n\n发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数\n\n```asm\n0: kd> u FFFFBA0729013DB0 l 100\nffffba07`29013db0 488bc4          mov     rax,rsp\nffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx\nffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi\nffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14\nffffba07`29013dbf 55              push    rbp\nffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]\nffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h\nffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh\nffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h\nffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0\nffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]\nffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0\nffffba07`29013dea e8d1030000      call    ffffba07`290141c0\nffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h\nffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]\nffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e01 ba05000000      mov     edx,5\nffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e0a 33c9            xor     ecx,ecx\nffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax\nffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax\nffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax\nffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]\nffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax\nffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]\nffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0\nffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013e50 33db            xor     ebx,ebx\nffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h\nffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]\nffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e64 ba05000000      mov     edx,5\nffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e6d 33c9            xor     ecx,ecx\nffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax\nffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax\nffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax\nffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]\nffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]\nffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax\nffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]\nffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0\nffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013eb9 48ffc3          inc     rbx\nffffba07`29013ebc 4883fb10        cmp     rbx,10h\nffffba07`29013ec0 7c90            jl      ffffba07`29013e52\nffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh\nffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]\nffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013ed4 ba05000000      mov     edx,5\nffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013edd 33c9            xor     ecx,ecx\nffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax\nffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax\nffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax\nffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]\nffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax\nffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]\nffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0\nffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]\nffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh\nffffba07`29013f28 e833e9ffff      call    ffffba07`29012860\nffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf\nffffba07`29013f32 cc              int     3\nffffba07`29013f33 cc              int     3\nffffba07`29013f34 4152            push    r10\n```\n\n导入到ida里看伪代码\n\n```c\nvoid __noreturn sub_180005148()\n{\n  __m128i v0; // xmm0\n  __int64 i; // rbx\n  __m128i v2; // xmm0\n  __int64 v3; // r9\n  __m128i v4; // xmm0\n  __m128i v5; // [rsp+30h] [rbp-19h] BYREF\n  __m128i v6; // [rsp+40h] [rbp-9h] BYREF\n  __m128i v7; // [rsp+50h] [rbp+7h] BYREF\n  __m128i v8; // [rsp+60h] [rbp+17h]\n  __m128i v9; // [rsp+70h] [rbp+27h]\n  __int128 v10; // [rsp+80h] [rbp+37h] BYREF\n  __m128i v11; // [rsp+90h] [rbp+47h]\n\n  while ( 1 )\n  {\n    v10 = 0i64;\n    ((void (__fastcall *)(__int128 *))((char *)&loc_180005556 + 2))(&v10);\n    v5.m128i_i64[0] = 0x4B6D27B32F124FA1i64;\n    v5.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v8.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v0 = _mm_load_si128(&v5);\n    v8.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v5 = _mm_xor_si128(v0, v8);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v5);\n    for ( i = 0i64; i < 16; ++i )\n    {\n      v6.m128i_i64[0] = 0x4B6D1DDD324B10F0i64;\n      v6.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v9.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n      v2 = _mm_load_si128(&v6);\n      v3 = *((unsigned __int8 *)&v10 + i);\n      v9.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v6 = _mm_xor_si128(v2, v9);\n      MEMORY[0x31305A8047353130](0i64, 5i64, &v6, v3);\n    }\n    v7.m128i_i64[0] = 0x4B6D1DDD4A7920DFi64;\n    v7.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v11.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v4 = _mm_load_si128(&v7);\n    v11.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v7 = _mm_xor_si128(v4, v11);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v7);\n    sub_180003BF8(2766i64);\n  }\n}\n```\n\n好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0x4B6D27B32F124FA1\nx2 = 0x1E336B548B32934E\ny1 = 0x4B6D1DDD4A7920D5\ny2 = 0x1E336B548B32934E\n\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n\n\nres = result1[::-1] + result2[::-1]\nprint(res)\n\n```\n\n![{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}](https://s2.loli.net/2024/10/02/AM2Gl8UOyBkPEVs.png)\n\n打印出了`token`基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。\n\n![image-20240919195412464](https://s2.loli.net/2024/10/02/RbYklUDHIpy5EFj.png)\n\n这里有个`mov edx,5`语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。\n\n那么怎么确定这个线程地址呢，如果通过`ZwQuerySystemInformation`枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了`ZwQuerySystemInformation`枚举，还有通过`PsLookupThreadByThreadId`函数从进程id和线程id查找的。\n\n那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出\n\n![image-20240919214001840](https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png)\n\n![image-20240919215044101](https://s2.loli.net/2024/10/02/u9H3PTzIa7gUCb6.png)\n\n诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid=4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。\n\n![image-20240919215837787](https://s2.loli.net/2024/10/02/gWJduRBKiDQ7wha.png)\n\n貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用`PsCreateSystemThread`），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。\n\n这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid=4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。\n\n```c\n#include \"header.h\"\n\nPVOID MoudleBaseAddress[1024];\nULONG64 MoudleSize[1024];\nULONG ModuleCount = 0;\nULONG Offset1 = 0x52, Offset2 = 0xB5, Offset3 = 0x125;\n\nBOOLEAN IsAddressInKnownModules(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)\n{\n    for (size_t i = 0; i < ModuleCount; i++)\n    {\n        if (Address >= ModuleBaseAddresses[i] && Address < (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])\n        {\n            return TRUE;\n        }\n    }\n    return FALSE;\n}\n\nPVOID EnumSystemModulesForProcess(HANDLE TargetProcessId)\n{\n    NTSTATUS status;\n    ULONG bufferSize = 0x10000;\n    PVOID processBuffer = NULL;\n    PVOID moduleBuffer = NULL;\n    ULONG returnLength;\n\n    // 查询进程信息\n    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!processBuffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(processBuffer);\n        bufferSize = returnLength;\n        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!processBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    }\n\n    // 查询模块信息\n    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n    if (!moduleBuffer) {\n        DbgPrint(\"Failed to allocate buffer for module information\\n\");\n        ExFreePool(processBuffer);\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(moduleBuffer);\n        bufferSize = returnLength;\n        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n        if (!moduleBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for module information\\n\");\n            ExFreePool(processBuffer);\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    }\n\n    // 遍历模块信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;\n        ModuleCount = moduleInfo->ModulesCount;\n        for (ULONG i = 0; i < moduleInfo->ModulesCount; i++) {\n            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &moduleInfo->Modules[i];\n            MoudleBaseAddress[i] = moduleEntry->Base;\n            MoudleSize[i] = moduleEntry->Size;\n        }\n    }\n\n    // 遍历进程信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;\n        while (TRUE) {\n            if (processInfo->ProcessId == TargetProcessId) {\n                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + 1);\n                for (ULONG i = 0; i < processInfo->NumberOfThreads; i++) {\n                    if (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))\n                    {\n                        DbgPrint(\"Find it:%p\\n\",threadInfo[i].StartAddress);\n                        return threadInfo[i].StartAddress;\n                    }\n                }\n                break;\n            }\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    // 清理分配的内存\n    ExFreePool(processBuffer);\n    ExFreePool(moduleBuffer);\n    return 0;\n}\n\nVOID UnloadDriver(PDRIVER_OBJECT DriverObject) {\n    KdPrint((\"Driver Unloaded\\n\"));\n}\n\nNTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {\n    DriverObject->DriverUnload = UnloadDriver;\n    KdPrint((\"Driver Loaded\\n\"));\n\n    HANDLE targetPid = (HANDLE)4; // 系统进程的 PID\n    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);\n\n    UCHAR valueToWrite = 0x00; // 要写入的字节值\n    UCHAR valueToRead = 0x05; // 要写入的字节值\n    ULONG numHasChanged = 0x00;\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;\n        numHasChanged++;\n    }\n    DbgPrint(\"numHasChanged:%d\\n\", numHasChanged);\n    return STATUS_SUCCESS;\n}\n\n```\n\n成功输出token2\n\n![image-20240920125107119](https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png)\n\n## （三）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）\n\n要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的`C:\\2024GameSafeRace.token1`字符串是由十六进制异或得到的，也就是下面这些\n![image-20240920145014956](https://s2.loli.net/2024/10/02/8aHE6eqMYZpBx7u.png)\n\n可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7082) = 0x94e7c2136acc0e5c;//\n        *(PULONG64)((ULONG64)lpBuffer + 0x7093) = 0x8207c5d1af9f3860;\n        *(PULONG64)((ULONG64)lpBuffer + 0x70F1) = 0xa905cca9edcb138c;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7108) = 0xa753b8236c56809a;\n        //C:\\Users\\15386\\Desktop\\flag.txt\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n注入hook成功后，成功在桌面的`flag.txt`输出token1\n\n![{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}](https://s2.loli.net/2024/10/02/8C4giIuylEjGYsF.png)\n","source":"postLater/2024腾讯游戏安全PC初赛.md","raw":"---\ntitle: 2024腾讯游戏安全PC初赛\ndate: 2024/9/23\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n\n---\n\n小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。<!-- more -->\n\n## 题目\n\n![image-20240923132824209](https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png)\n\n## （一）解题过程\n\n拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点\n\n![image-20240923131144727](https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png)\n\n运行发现程序会多次在`WriteProcessMemory`下断下，hook一下观察传参\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T * lpNumberOfBytesWritten\n)\n{\n    char fileName[12] = { 0 };\n    sprintf(fileName, \"out%d.txt\", (int)hProcess % 1000);\n    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n    {\n        DBGMGEBOX(\"CreateFile Fail\");\n        return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n    }\n    SetFilePointer(hFile, 0, NULL, FILE_END);\n    DWORD bytesWritten;\n    BOOL result = WriteFile(hFile, lpBuffer, nSize, &bytesWritten, NULL);\n    CloseHandle(hFile);\n    DBGMGEBOX(\"findProcess WriteProcessMemory:%p,size:%d\\n\", hProcess,nSize);\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n这里输出了三个txt文件\n\n![image-20240923131546102](https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png)\n\n其中out200.txt文件有明显的PE头\n\n![image-20240923131748329](https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png)\n\n去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过`WriteProcessMemory`往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。\n\nida64打开发现程序的dllMain入口还是被加密了\n\n![image-20240923132428865](https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png)\n\n还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在\n\n入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为\n\n![image-20240913213116556](https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png)\n\n这里我对下面这几个API下了断点\n\n![image-20240913213203300](https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png)\n\n运行，第一次成功在openProcess函数断下\n\n![image-20240913213252406](https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png)\n\n观察传参窗口，找到了一个系统进程名称字符串`winlogon.exe`，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码\n\n![image-20240913213951735](https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png)\n\n汇编代码不是很好看，根据偏移在IDA里反汇编看看\n\n```c\n__int64 __fastcall sub_1800063D0(_DWORD *Dst, DWORD dwProcessId)\n{\n  __m128i si128; // xmm0\n  __m128i v6; // xmm0\n  __int64 result; // rax\n  __m128i v10; // xmm2\n  size_t v14; // rbx\n  __int64 v15; // rax\n  int v16; // r14d\n  HANDLE Toolhelp32Snapshot; // rsi\n  HANDLE v18; // rax\n  __int64 v21; // rbx\n  CHAR Caption[16]; // [rsp+40h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64;\n  if ( !dwProcessId )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)_RBP = 0xE795A71250E2465Aui64;\n    si128 = _mm_load_si128((const __m128i *)_RBP);\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    v6 = _mm_xor_si128(si128, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD5301FE45158ui64;\n    *(__m128i *)_RBP = v6;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xBF19D3ADD5D97A59ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xBD1C9CA3F4C12EC9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C05763438E84ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    MessageBoxA(0i64, (LPCSTR)(_RBP + 32), (LPCSTR)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64), 0);\nLABEL_3:\n    GetLastError();\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)_RBP = 0x88D6871250E2465Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF98DB9906C58ui64;\n    *(__m128i *)_RBP = _mm_xor_si128(\n                         _mm_load_si128((const __m128i *)_RBP),\n                         *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    return sub_180006A00((void *)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64));\n  }\n  if ( !(unsigned __int8)sub_180006FC0() )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) = 0x44F651D568826090i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0) = 0x52C9FCDC77FF5FC3i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xDDD2E92971C27548ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA43EB7C9E8CF4E1Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xA62FD5B4C980079Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xD55585772756849Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x40) = 0x52C9FCDC7DDE2DACi64;\n    v10 = _mm_load_si128((const __m128i *)(_RBP + 64));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C8) = 0x44F651D568826090i64;\n    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa [rbp+210h+var_1D0], xmm2\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    sub_180006A00((void *)(_RBP + 32));\n  }\n  v14 = -1i64;\n  if ( dwProcessId == -1 )\n  {\n    Dst[34] = GetCurrentProcessId();\n    *((_QWORD *)Dst + 13) = -1i64;\n  }\n  else\n  {\n    Dst[34] = dwProcessId;\n    v18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n    *((_QWORD *)Dst + 13) = v18;\n    if ( !v18 )\n    {\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C0574231E1F6ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD53051F54450ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA92981ACBCD97A59ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xCF59BCC699AA419Bui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n      __asm\n      {\n        vmovdqu ymm0, [rbp+210h+var_70]\n        vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n        vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n        vzeroupper\n      }\n      sub_180006A00((void *)(_RBP + 32));//打印报错信息\n      goto LABEL_3;\n    }\n  }\n  Dst[30] = 0x1FFFFF;\n  v15 = -1i64;\n  do\n    ++v15;\n  while ( *((_BYTE *)Dst + v15) );\n  if ( !v15 )\n  {\n    v16 = Dst[34];\n    Toolhelp32Snapshot = CreateToolhelp32Snapshot(2u, 0);\n    if ( Toolhelp32Snapshot != (HANDLE)-1i64 )\n    {\n      *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = 304;\n      memset((void *)(_RBP + 100), 0, 0x12Cui64);\n      if ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n      {\n        while ( *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x68) != v16 )\n        {\n          if ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n            goto LABEL_20;\n        }\n        do\n          ++v14;\n        while ( *(_BYTE *)(_RBP + 140 + v14) );\n        memmove(Dst, (const void *)(_RBP + 140), v14);\n      }\nLABEL_20:\n      CloseHandle(Toolhelp32Snapshot);\n    }\n  }\n  *((_QWORD *)Dst + 18) = sub_1800068D0(Dst, Dst);\n  v21 = 0i64;\n  *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = Dst[34];\n  *(_QWORD *)_RBP = 0i64;\n  EnumWindows(EnumFunc, (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64);\n  result = *(_QWORD *)_RBP;\n  if ( *(_QWORD *)_RBP )\n    v21 = *(_QWORD *)_RBP;\n  *((_QWORD *)Dst + 16) = v21;\n  return result;\n}\n```\n\n这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。\n\n![image-20240913221222730](https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png)\n\n分析完这个函数，继续回溯一层，运行到返回，定位到这个地方\n\n![image-20240913221520425](https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png)\n\n继续根据偏移转到IDA里看反汇编\n\n```c\nint sub_180001990()\n{\n  size_t v0; // rbx\n  DWORD v1; // eax\n  __m128i Dst; // [rsp+20h] [rbp-48h] BYREF\n  __int64 v4; // [rsp+30h] [rbp-38h]\n  __int64 v5; // [rsp+38h] [rbp-30h]\n  __m128i Src; // [rsp+40h] [rbp-28h] BYREF\n\n  Dst.m128i_i64[0] = 0xE795A7603F90341Fui64;\n  Dst.m128i_i64[1] = 0xC65BF3E99CAA093Cui64;\n  Src.m128i_i64[0] = 0x89FAC00F53FE5D68ui64;\n  Src.m128i_i64[1] = 0xC65BF3E9F9D26C12ui64;\n  Src = _mm_xor_si128(_mm_load_si128(&Src), Dst);\n  v0 = -1i64;\n  do\n    ++v0;\n  while ( Src.m128i_i8[v0] );\n  memmove(dword_1800349A0, &Src, v0);\n  Dst.m128i_i64[0] = 0i64;\n  v4 = 0i64;\n  v5 = 15i64;\n  sub_180004770(&Dst, &Src, v0);\n  v1 = sub_1800070A0(&Dst);\n  sub_1800063D0(dword_1800349A0, v1);\n  return atexit(sub_180020C90);\n}\n```\n\n前面应该是一个加密的字符串操作，用python打印出字符串\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xE795A7603F90341F\nx2 = 0xC65BF3E99CAA093C\ny1 = 0x89FAC00F53FE5D68\ny2 = 0xC65BF3E9F9D26C12\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n#Result 1: nogolniw\n#Result 2: exe.\n```\n\n得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方\n\n```c\nv18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n*((_QWORD *)Dst + 13) = v18;\n```\n\n随后return exit退出。\n\n随后我在退出函数传参的时候看到了一个hProcess\n\n![image-20240914102337797](https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png)\n\n一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数\n\n```c\nvoid sub_180007C10()\n{\n  HANDLE v1; // rcx\n  void *v2; // rdx\n  __int128 v3; // xmm0\n  __int128 v4; // xmm1\n  HANDLE FileA; // rbx\n  __int64 v8; // rcx\n  _BYTE *v9; // rdx\n  unsigned __int64 v10; // rdx\n  _QWORD *v11; // rcx\n  char Buffer; // [rsp+60h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64;\n  while ( byte_180032C00 )\n  {\n    if ( !byte_180034961 && !byte_180034960 )\n      sub_1800041D0();\n    v1 = hProcess;\n    v2 = (void *)(qword_180034968 + 2766);\n    *(_BYTE *)_RBP = 15;\n    WriteProcessMemory(v1, v2, (LPCVOID)((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64), 1ui64, 0i64);\n    byte_180032C00 = 0;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xAA32D3B2B7C50388ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10) = 0xA0A195500DCC0E5Cui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x18) = 0x943E9588CFCF645Dui64;\n    v3 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA727C0574231D098ui64;\n    v4 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x80) = 0xE795A7603F90341Fui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = v3;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x88) = 0xC65BF3E99CAA093Cui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x70) = v4;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x90) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x98) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+0D0h+var_50]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+0D0h+FileName]\n      vmovdqa ymmword ptr [rbp+0D0h+FileName], ymm1\n      vzeroupper\n    }\n    FileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n    if ( FileA != (HANDLE)-1i64 )\n    {\n      ((void (__fastcall *)(unsigned __int64))loc_180007A20)(_RBP + 48);\n      v8 = -1i64;\n      if ( *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) < 0x10ui64 )\n      {\n        do\n          ++v8;\n        while ( *(_BYTE *)(_RBP + 48 + v8) );\n        v9 = (_BYTE *)(_RBP + 48);\n      }\n      else\n      {\n        v9 = *(_BYTE **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        do\n          ++v8;\n        while ( v9[v8] );\n      }\n      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + 8), 0i64);\n      CloseHandle(FileA);\n      v10 = *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48);\n      if ( v10 >= 0x10 )\n      {\n        v11 = *(_QWORD **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        if ( v10 + 1 >= 0x1000 )\n        {\n          v11 = (_QWORD *)*(v11 - 1);\n          if ( (unsigned __int64)(*(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30)\n                                - (_QWORD)v11\n                                - 8i64) > 0x1F )\n            invalid_parameter_noinfo_noreturn();\n        }\n        j_j_free(v11);\n      }\n    }\n  }\n}\n```\n\n看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xA0A195500DCC0E5C\nx2 = 0x943E9588CFCF645D\nx3 = 0xAA32D3B2B7C50388\nx4 = 0xA727C0574231D098\ny1 = 0xE795A7603F90341F\ny2 = 0xC65BF3E99CAA093C\ny3 = 0xCF59BCC699A060E9\ny4 = 0xA727C0574231E1F6\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\nresult3 = hex_xor_to_string(x3, y3)\nresult4 = hex_xor_to_string(x4, y4)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\nprint(\"Result 3:\", result3)\nprint(\"Result 4:\", result4)\n\nres = result1[::-1] + result2[::-1] + result3[::-1] + result4[::-1]\nprint(res)\n```\n\n![image-20240914110434860](https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png)\n\n整个拼起来是字符串`C:\\2024GameSafeRace.token1`，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下\n\n![image-20240914110826942](https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png)\n\nloc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入`C:\\2024GameSafeRace.token1`中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。\n\n![image-20240914111407201](https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png)\n\n找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数\n\n```C\nFileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n```\n\n![image-20240914111653640](https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png)\n\n看来是参数在作怪，CreateFileA函数传入**OPEN_EXISTING**参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。\n\n![image-20240914112419617](https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png)\n\nC:\\2024GameSafeRace.token1成功被写入\n\n![image-20240914112536772](https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png)\n\n010打开找到token1:`757F4749AEBB1891EF5AC2A9B5439CEA`\n\ntoken2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取\n\n![image-20240914113718466](https://s2.loli.net/2024/10/02/QDpOlfmIBnoNLKS.png)\n\n组合一下就是token2：`803f14a24d64f3e697957c252e3a5686`\n\n\n\n## （二）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）\n\n根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到`C:\\2024GameSafeRace.token1`中，但是会因为CreateFileA参数`OPEN_EXISTING`条件不满足而失败，所以我们只需要修改这个传参，改成`OPEN_ALWAYS`，即可实现输出token1，那我们只需要hook `CreateFileA`函数修改传参即可，但是有个问题，因为不是hack.exe本身调用`CreateFileA`函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用`CreateFileA`函数，所以我们可以考虑在注入前修改`WriteProcessMemory`函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。\n\n这里我们要patch 传参，通过ida找到传参的汇编代码\n\n![image-20240920142928600](https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png)\n\n在winhex里找到对应所在文件偏移\n![image-20240920143006628](https://s2.loli.net/2024/10/02/dZ5cpxBXQakgSvh.png)\n\n也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n成功输出token1文件：\n\n![image-20240914120306770](https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png)\n\n然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。\n\nhook DbgPrintEx函数看一眼传参。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s DbgPrintEx ComponentId:%lu,Level:%lu\\n\",dbgFilter, ComponentId, Level);\n    va_list args;\n    va_start(args, Format);\n    NTSTATUS s = func(ComponentId, Level, Format, args);\n    va_end(args);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\",dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n发现加载ace驱动后，有大量的level:5的调试信息输出\n\n![image-20240918212128643](https://s2.loli.net/2024/10/02/prtTqv2fl91bxsn.png)\n\n也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nchar buffer[1024]; \nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    va_list args;\n    va_start(args, Format);\n    vsprintf(buffer, Format, args);\n    va_end(args);\n    NTSTATUS s = func(ComponentId, 0, \"%s\", buffer);//修改level为0\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"Kvancy: DriverUnload\\n\");\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"Kvancy: DriverEntry\\n\");\n    return STATUS_SUCCESS;\n}\n```\n\n![{4981D7A9-1EAA-4A38-9280-429D63ECABF9}](https://s2.loli.net/2024/10/02/gcZOPylkwdjXVvL.png)\n\n成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。\n\n![{170126A6-1C28-4BF3-AB47-AB2397C76595}](https://s2.loli.net/2024/10/02/fSGHQJXgADMceua.png)\n\n可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。\n\n```c\nVOID WriteToFile(PUNICODE_STRING FilePath, PCHAR Data)\n{\n    OBJECT_ATTRIBUTES objAttr;\n    IO_STATUS_BLOCK ioStatusBlock;\n    HANDLE fileHandle;\n    NTSTATUS status;\n    UNICODE_STRING unicodeFilePath;\n\n    RtlInitUnicodeString(&unicodeFilePath, FilePath->Buffer);\n\n    InitializeObjectAttributes(&objAttr, &unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, NULL, NULL);\n\n    status = ZwCreateFile(\n        &fileHandle,\n        FILE_APPEND_DATA | SYNCHRONIZE,\n        &objAttr,\n        &ioStatusBlock,\n        NULL,\n        FILE_ATTRIBUTE_NORMAL,\n        0,\n        FILE_OPEN_IF,\n        FILE_SYNCHRONOUS_IO_NONALERT,\n        NULL,\n        0\n    );\n\n    if (NT_SUCCESS(status)) {\n        size_t dataLength = strlen(Data);\n        ZwWriteFile(fileHandle, NULL, NULL, NULL, &ioStatusBlock, Data, (ULONG)dataLength, NULL, NULL);\n        ZwClose(fileHandle);\n    }\n    else {\n        DbgPrint(\"Failed to create file: %08X\\n\", status);\n    }\n}\n\nVOID EnumProcesses()\n{\n    NTSTATUS status;\n    PVOID buffer;\n    ULONG bufferSize = 0x10000; // Initial buffer size, can grow if needed\n    ULONG returnLength;\n    CHAR logBuffer[1024];\n\n    UNICODE_STRING filePath;\n    RtlInitUnicodeString(&filePath, L\"\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt\");\n\n    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!buffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(buffer);\n        bufferSize = returnLength;\n        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!buffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n    }\n\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;\n        while (TRUE) {\n            if (processInfo->ImageName.Buffer) {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: %wZ\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId, &processInfo->ImageName);\n            }\n            else {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: [System Process]\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId);\n            }\n\n            WriteToFile(&filePath, logBuffer);\n\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    ExFreePool(buffer);\n}\n```\n\n结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用`PsCreateSystemThread`创建了一个内核线程。hook`PsCreateSystemThread`函数看看驱动加载时是否调用了这个函数。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext);\nHOOK_MANAGER hookManager;\n\n\nNTSTATUS myPsCreateSystemThread(\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext\n)\n{\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s myPsCreateSystemThread StartRoutine:%p\\n\", dbgFilter, StartRoutine);\n    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = PsCreateSystemThread;\n    InitializeHookManager(&hookManager, dbgPrintEx, myPsCreateSystemThread);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\", dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n![{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}](https://s2.loli.net/2024/10/02/jt8TS7WcXqhm9JF.png)\n\n发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数\n\n```asm\n0: kd> u FFFFBA0729013DB0 l 100\nffffba07`29013db0 488bc4          mov     rax,rsp\nffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx\nffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi\nffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14\nffffba07`29013dbf 55              push    rbp\nffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]\nffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h\nffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh\nffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h\nffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0\nffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]\nffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0\nffffba07`29013dea e8d1030000      call    ffffba07`290141c0\nffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h\nffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]\nffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e01 ba05000000      mov     edx,5\nffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e0a 33c9            xor     ecx,ecx\nffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax\nffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax\nffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax\nffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]\nffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax\nffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]\nffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0\nffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013e50 33db            xor     ebx,ebx\nffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h\nffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]\nffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e64 ba05000000      mov     edx,5\nffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e6d 33c9            xor     ecx,ecx\nffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax\nffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax\nffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax\nffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]\nffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]\nffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax\nffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]\nffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0\nffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013eb9 48ffc3          inc     rbx\nffffba07`29013ebc 4883fb10        cmp     rbx,10h\nffffba07`29013ec0 7c90            jl      ffffba07`29013e52\nffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh\nffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]\nffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013ed4 ba05000000      mov     edx,5\nffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013edd 33c9            xor     ecx,ecx\nffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax\nffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax\nffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax\nffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]\nffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax\nffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]\nffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0\nffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]\nffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh\nffffba07`29013f28 e833e9ffff      call    ffffba07`29012860\nffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf\nffffba07`29013f32 cc              int     3\nffffba07`29013f33 cc              int     3\nffffba07`29013f34 4152            push    r10\n```\n\n导入到ida里看伪代码\n\n```c\nvoid __noreturn sub_180005148()\n{\n  __m128i v0; // xmm0\n  __int64 i; // rbx\n  __m128i v2; // xmm0\n  __int64 v3; // r9\n  __m128i v4; // xmm0\n  __m128i v5; // [rsp+30h] [rbp-19h] BYREF\n  __m128i v6; // [rsp+40h] [rbp-9h] BYREF\n  __m128i v7; // [rsp+50h] [rbp+7h] BYREF\n  __m128i v8; // [rsp+60h] [rbp+17h]\n  __m128i v9; // [rsp+70h] [rbp+27h]\n  __int128 v10; // [rsp+80h] [rbp+37h] BYREF\n  __m128i v11; // [rsp+90h] [rbp+47h]\n\n  while ( 1 )\n  {\n    v10 = 0i64;\n    ((void (__fastcall *)(__int128 *))((char *)&loc_180005556 + 2))(&v10);\n    v5.m128i_i64[0] = 0x4B6D27B32F124FA1i64;\n    v5.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v8.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v0 = _mm_load_si128(&v5);\n    v8.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v5 = _mm_xor_si128(v0, v8);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v5);\n    for ( i = 0i64; i < 16; ++i )\n    {\n      v6.m128i_i64[0] = 0x4B6D1DDD324B10F0i64;\n      v6.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v9.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n      v2 = _mm_load_si128(&v6);\n      v3 = *((unsigned __int8 *)&v10 + i);\n      v9.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v6 = _mm_xor_si128(v2, v9);\n      MEMORY[0x31305A8047353130](0i64, 5i64, &v6, v3);\n    }\n    v7.m128i_i64[0] = 0x4B6D1DDD4A7920DFi64;\n    v7.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v11.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v4 = _mm_load_si128(&v7);\n    v11.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v7 = _mm_xor_si128(v4, v11);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v7);\n    sub_180003BF8(2766i64);\n  }\n}\n```\n\n好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0x4B6D27B32F124FA1\nx2 = 0x1E336B548B32934E\ny1 = 0x4B6D1DDD4A7920D5\ny2 = 0x1E336B548B32934E\n\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n\n\nres = result1[::-1] + result2[::-1]\nprint(res)\n\n```\n\n![{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}](https://s2.loli.net/2024/10/02/AM2Gl8UOyBkPEVs.png)\n\n打印出了`token`基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。\n\n![image-20240919195412464](https://s2.loli.net/2024/10/02/RbYklUDHIpy5EFj.png)\n\n这里有个`mov edx,5`语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。\n\n那么怎么确定这个线程地址呢，如果通过`ZwQuerySystemInformation`枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了`ZwQuerySystemInformation`枚举，还有通过`PsLookupThreadByThreadId`函数从进程id和线程id查找的。\n\n那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出\n\n![image-20240919214001840](https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png)\n\n![image-20240919215044101](https://s2.loli.net/2024/10/02/u9H3PTzIa7gUCb6.png)\n\n诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid=4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。\n\n![image-20240919215837787](https://s2.loli.net/2024/10/02/gWJduRBKiDQ7wha.png)\n\n貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用`PsCreateSystemThread`），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。\n\n这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid=4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。\n\n```c\n#include \"header.h\"\n\nPVOID MoudleBaseAddress[1024];\nULONG64 MoudleSize[1024];\nULONG ModuleCount = 0;\nULONG Offset1 = 0x52, Offset2 = 0xB5, Offset3 = 0x125;\n\nBOOLEAN IsAddressInKnownModules(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)\n{\n    for (size_t i = 0; i < ModuleCount; i++)\n    {\n        if (Address >= ModuleBaseAddresses[i] && Address < (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])\n        {\n            return TRUE;\n        }\n    }\n    return FALSE;\n}\n\nPVOID EnumSystemModulesForProcess(HANDLE TargetProcessId)\n{\n    NTSTATUS status;\n    ULONG bufferSize = 0x10000;\n    PVOID processBuffer = NULL;\n    PVOID moduleBuffer = NULL;\n    ULONG returnLength;\n\n    // 查询进程信息\n    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!processBuffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(processBuffer);\n        bufferSize = returnLength;\n        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!processBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    }\n\n    // 查询模块信息\n    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n    if (!moduleBuffer) {\n        DbgPrint(\"Failed to allocate buffer for module information\\n\");\n        ExFreePool(processBuffer);\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(moduleBuffer);\n        bufferSize = returnLength;\n        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n        if (!moduleBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for module information\\n\");\n            ExFreePool(processBuffer);\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    }\n\n    // 遍历模块信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;\n        ModuleCount = moduleInfo->ModulesCount;\n        for (ULONG i = 0; i < moduleInfo->ModulesCount; i++) {\n            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &moduleInfo->Modules[i];\n            MoudleBaseAddress[i] = moduleEntry->Base;\n            MoudleSize[i] = moduleEntry->Size;\n        }\n    }\n\n    // 遍历进程信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;\n        while (TRUE) {\n            if (processInfo->ProcessId == TargetProcessId) {\n                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + 1);\n                for (ULONG i = 0; i < processInfo->NumberOfThreads; i++) {\n                    if (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))\n                    {\n                        DbgPrint(\"Find it:%p\\n\",threadInfo[i].StartAddress);\n                        return threadInfo[i].StartAddress;\n                    }\n                }\n                break;\n            }\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    // 清理分配的内存\n    ExFreePool(processBuffer);\n    ExFreePool(moduleBuffer);\n    return 0;\n}\n\nVOID UnloadDriver(PDRIVER_OBJECT DriverObject) {\n    KdPrint((\"Driver Unloaded\\n\"));\n}\n\nNTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {\n    DriverObject->DriverUnload = UnloadDriver;\n    KdPrint((\"Driver Loaded\\n\"));\n\n    HANDLE targetPid = (HANDLE)4; // 系统进程的 PID\n    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);\n\n    UCHAR valueToWrite = 0x00; // 要写入的字节值\n    UCHAR valueToRead = 0x05; // 要写入的字节值\n    ULONG numHasChanged = 0x00;\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;\n        numHasChanged++;\n    }\n    DbgPrint(\"numHasChanged:%d\\n\", numHasChanged);\n    return STATUS_SUCCESS;\n}\n\n```\n\n成功输出token2\n\n![image-20240920125107119](https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png)\n\n## （三）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）\n\n要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的`C:\\2024GameSafeRace.token1`字符串是由十六进制异或得到的，也就是下面这些\n![image-20240920145014956](https://s2.loli.net/2024/10/02/8aHE6eqMYZpBx7u.png)\n\n可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7082) = 0x94e7c2136acc0e5c;//\n        *(PULONG64)((ULONG64)lpBuffer + 0x7093) = 0x8207c5d1af9f3860;\n        *(PULONG64)((ULONG64)lpBuffer + 0x70F1) = 0xa905cca9edcb138c;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7108) = 0xa753b8236c56809a;\n        //C:\\Users\\15386\\Desktop\\flag.txt\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n注入hook成功后，成功在桌面的`flag.txt`输出token1\n\n![{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}](https://s2.loli.net/2024/10/02/8C4giIuylEjGYsF.png)\n","updated":"2024-10-02T07:03:49.878Z","path":"postLater/2024腾讯游戏安全PC初赛.html","layout":"page","_id":"cm1roa1350000ugie8zutgzq8","content":"<p>小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。<span id=\"more\"></span></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><img src=\"https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png\" alt=\"image-20240923132824209\"></p>\n<h2 id=\"（一）解题过程\"><a href=\"#（一）解题过程\" class=\"headerlink\" title=\"（一）解题过程\"></a>（一）解题过程</h2><p>拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png\" alt=\"image-20240923131144727\"></p>\n<p>运行发现程序会多次在<code>WriteProcessMemory</code>下断下，hook一下观察传参</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T * lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> fileName[<span class=\"number\">12</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(fileName, <span class=\"string\">&quot;out%d.txt&quot;</span>, (<span class=\"type\">int</span>)hProcess % <span class=\"number\">1000</span>);</span><br><span class=\"line\">    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;CreateFile Fail&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SetFilePointer(hFile, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, FILE_END);</span><br><span class=\"line\">    DWORD bytesWritten;</span><br><span class=\"line\">    BOOL result = WriteFile(hFile, lpBuffer, nSize, &amp;bytesWritten, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    CloseHandle(hFile);</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;findProcess WriteProcessMemory:%p,size:%d\\n&quot;</span>, hProcess,nSize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里输出了三个txt文件</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png\" alt=\"image-20240923131546102\"></p>\n<p>其中out200.txt文件有明显的PE头</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png\" alt=\"image-20240923131748329\"></p>\n<p>去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过<code>WriteProcessMemory</code>往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。</p>\n<p>ida64打开发现程序的dllMain入口还是被加密了</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png\" alt=\"image-20240923132428865\"></p>\n<p>还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在</p>\n<p>入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png\" alt=\"image-20240913213116556\"></p>\n<p>这里我对下面这几个API下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png\" alt=\"image-20240913213203300\"></p>\n<p>运行，第一次成功在openProcess函数断下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png\" alt=\"image-20240913213252406\"></p>\n<p>观察传参窗口，找到了一个系统进程名称字符串<code>winlogon.exe</code>，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png\" alt=\"image-20240913213951735\"></p>\n<p>汇编代码不是很好看，根据偏移在IDA里反汇编看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_1800063D0</span><span class=\"params\">(_DWORD *Dst, DWORD dwProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i si128; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __m128i v10; <span class=\"comment\">// xmm2</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> v14; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v16; <span class=\"comment\">// r14d</span></span><br><span class=\"line\">  HANDLE Toolhelp32Snapshot; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  HANDLE v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v21; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  CHAR Caption[<span class=\"number\">16</span>]; <span class=\"comment\">// [rsp+40h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !dwProcessId )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0xE795A71250E2465A</span>ui64;</span><br><span class=\"line\">    si128 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    v6 = _mm_xor_si128(si128, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD5301FE45158</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = v6;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xBF19D3ADD5D97A59</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xBD1C9CA3F4C12EC9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C05763438E84</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MessageBoxA(<span class=\"number\">0</span>i64, (LPCSTR)(_RBP + <span class=\"number\">32</span>), (LPCSTR)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">0</span>);</span><br><span class=\"line\">LABEL_3:</span><br><span class=\"line\">    GetLastError();</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0x88D6871250E2465A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF98DB9906C58</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = _mm_xor_si128(</span><br><span class=\"line\">                         _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP),</span><br><span class=\"line\">                         *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_180006A00((<span class=\"type\">void</span> *)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> __int8)sub_180006FC0() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>) = <span class=\"number\">0x52C9FCDC77FF5FC3</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xDDD2E92971C27548</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA43EB7C9E8CF4E1C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xA62FD5B4C980079C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xD55585772756849A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x40</span>) = <span class=\"number\">0x52C9FCDC7DDE2DAC</span>i64;</span><br><span class=\"line\">    v10 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)(_RBP + <span class=\"number\">64</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C8</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa [rbp+<span class=\"number\">210</span>h+var_1D0], xmm2</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v14 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dwProcessId == <span class=\"number\">-1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = GetCurrentProcessId();</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = dwProcessId;</span><br><span class=\"line\">    v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v18 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD53051F54450</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA92981ACBCD97A59</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xCF59BCC699AA419B</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      __asm</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">        vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">        vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">        vzeroupper</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));<span class=\"comment\">//打印报错信息</span></span><br><span class=\"line\">      <span class=\"keyword\">goto</span> LABEL_3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Dst[<span class=\"number\">30</span>] = <span class=\"number\">0x1FFFFF</span>;</span><br><span class=\"line\">  v15 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v15;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( *((_BYTE *)Dst + v15) );</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v15 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v16 = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">    Toolhelp32Snapshot = CreateToolhelp32Snapshot(<span class=\"number\">2u</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( Toolhelp32Snapshot != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = <span class=\"number\">304</span>;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">0x12C</span>ui64);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x68</span>) != v16 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> LABEL_20;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v14;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">140</span> + v14) );</span><br><span class=\"line\">        memmove(Dst, (<span class=\"type\">const</span> <span class=\"type\">void</span> *)(_RBP + <span class=\"number\">140</span>), v14);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">LABEL_20:</span><br><span class=\"line\">      CloseHandle(Toolhelp32Snapshot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">18</span>) = sub_1800068D0(Dst, Dst);</span><br><span class=\"line\">  v21 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">  *(_QWORD *)_RBP = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  EnumWindows(EnumFunc, (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64);</span><br><span class=\"line\">  result = *(_QWORD *)_RBP;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_QWORD *)_RBP )</span><br><span class=\"line\">    v21 = *(_QWORD *)_RBP;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">16</span>) = v21;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png\" alt=\"image-20240913221222730\"></p>\n<p>分析完这个函数，继续回溯一层，运行到返回，定位到这个地方</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png\" alt=\"image-20240913221520425\"></p>\n<p>继续根据偏移转到IDA里看反汇编</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sub_180001990</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v0; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  DWORD v1; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  __m128i Dst; <span class=\"comment\">// [rsp+20h] [rbp-48h] BYREF</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+30h] [rbp-38h]</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// [rsp+38h] [rbp-30h]</span></span><br><span class=\"line\">  __m128i Src; <span class=\"comment\">// [rsp+40h] [rbp-28h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x89FAC00F53FE5D68</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E9F9D26C12</span>ui64;</span><br><span class=\"line\">  Src = _mm_xor_si128(_mm_load_si128(&amp;Src), Dst);</span><br><span class=\"line\">  v0 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v0;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( Src.m128i_i8[v0] );</span><br><span class=\"line\">  memmove(dword_1800349A0, &amp;Src, v0);</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v4 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v5 = <span class=\"number\">15</span>i64;</span><br><span class=\"line\">  sub_180004770(&amp;Dst, &amp;Src, v0);</span><br><span class=\"line\">  v1 = sub_1800070A0(&amp;Dst);</span><br><span class=\"line\">  sub_1800063D0(dword_1800349A0, v1);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> atexit(sub_180020C90);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面应该是一个加密的字符串操作，用python打印出字符串</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">x2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x89FAC00F53FE5D68</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E9F9D26C12</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"comment\">#Result 1: nogolniw</span></span><br><span class=\"line\"><span class=\"comment\">#Result 2: exe.</span></span><br></pre></td></tr></table></figure>\n\n<p>得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">*((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br></pre></td></tr></table></figure>\n\n<p>随后return exit退出。</p>\n<p>随后我在退出函数传参的时候看到了一个hProcess</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png\" alt=\"image-20240914102337797\"></p>\n<p>一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sub_180007C10</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  HANDLE v1; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v2; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int128 v3; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int128 v4; <span class=\"comment\">// xmm1</span></span><br><span class=\"line\">  HANDLE FileA; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  _BYTE *v9; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v10; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  _QWORD *v11; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">char</span> Buffer; <span class=\"comment\">// [rsp+60h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( byte_180032C00 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !byte_180034961 &amp;&amp; !byte_180034960 )</span><br><span class=\"line\">      sub_1800041D0();</span><br><span class=\"line\">    v1 = hProcess;</span><br><span class=\"line\">    v2 = (<span class=\"type\">void</span> *)(qword_180034968 + <span class=\"number\">2766</span>);</span><br><span class=\"line\">    *(_BYTE *)_RBP = <span class=\"number\">15</span>;</span><br><span class=\"line\">    WriteProcessMemory(v1, v2, (LPCVOID)((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">1u</span>i64, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    byte_180032C00 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xAA32D3B2B7C50388</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>) = <span class=\"number\">0xA0A195500DCC0E5C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x18</span>) = <span class=\"number\">0x943E9588CFCF645D</span>ui64;</span><br><span class=\"line\">    v3 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA727C0574231D098</span>ui64;</span><br><span class=\"line\">    v4 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x80</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = v3;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x88</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x70</span>) = v4;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x90</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x98</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">0</span>D0h+var_50]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( FileA != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ((<span class=\"type\">void</span> (__fastcall *)(<span class=\"type\">unsigned</span> __int64))loc_180007A20)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      v8 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) &lt; <span class=\"number\">0x10</span>ui64 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">48</span> + v8) );</span><br><span class=\"line\">        v9 = (_BYTE *)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v9 = *(_BYTE **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( v9[v8] );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + <span class=\"number\">8</span>), <span class=\"number\">0</span>i64);</span><br><span class=\"line\">      CloseHandle(FileA);</span><br><span class=\"line\">      v10 = *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v10 &gt;= <span class=\"number\">0x10</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v11 = *(_QWORD **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v10 + <span class=\"number\">1</span> &gt;= <span class=\"number\">0x1000</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v11 = (_QWORD *)*(v11 - <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> __int64)(*(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>)</span><br><span class=\"line\">                                - (_QWORD)v11</span><br><span class=\"line\">                                - <span class=\"number\">8</span>i64) &gt; <span class=\"number\">0x1F</span> )</span><br><span class=\"line\">            invalid_parameter_noinfo_noreturn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j_j_free(v11);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xA0A195500DCC0E5C</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x943E9588CFCF645D</span></span><br><span class=\"line\">x3 = <span class=\"number\">0xAA32D3B2B7C50388</span></span><br><span class=\"line\">x4 = <span class=\"number\">0xA727C0574231D098</span></span><br><span class=\"line\">y1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y3 = <span class=\"number\">0xCF59BCC699A060E9</span></span><br><span class=\"line\">y4 = <span class=\"number\">0xA727C0574231E1F6</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\">result3 = hex_xor_to_string(x3, y3)</span><br><span class=\"line\">result4 = hex_xor_to_string(x4, y4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 3:&quot;</span>, result3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 4:&quot;</span>, result4)</span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>] + result3[::-<span class=\"number\">1</span>] + result4[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png\" alt=\"image-20240914110434860\"></p>\n<p>整个拼起来是字符串<code>C:\\2024GameSafeRace.token1</code>，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png\" alt=\"image-20240914110826942\"></p>\n<p>loc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入<code>C:\\2024GameSafeRace.token1</code>中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png\" alt=\"image-20240914111407201\"></p>\n<p>找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png\" alt=\"image-20240914111653640\"></p>\n<p>看来是参数在作怪，CreateFileA函数传入<strong>OPEN_EXISTING</strong>参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png\" alt=\"image-20240914112419617\"></p>\n<p>C:\\2024GameSafeRace.token1成功被写入</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png\" alt=\"image-20240914112536772\"></p>\n<p>010打开找到token1:<code>757F4749AEBB1891EF5AC2A9B5439CEA</code></p>\n<p>token2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/QDpOlfmIBnoNLKS.png\" alt=\"image-20240914113718466\"></p>\n<p>组合一下就是token2：<code>803f14a24d64f3e697957c252e3a5686</code></p>\n<h2 id=\"（二）解题过程\"><a href=\"#（二）解题过程\" class=\"headerlink\" title=\"（二）解题过程\"></a>（二）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）</p>\n<p>根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到<code>C:\\2024GameSafeRace.token1</code>中，但是会因为CreateFileA参数<code>OPEN_EXISTING</code>条件不满足而失败，所以我们只需要修改这个传参，改成<code>OPEN_ALWAYS</code>，即可实现输出token1，那我们只需要hook <code>CreateFileA</code>函数修改传参即可，但是有个问题，因为不是hack.exe本身调用<code>CreateFileA</code>函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用<code>CreateFileA</code>函数，所以我们可以考虑在注入前修改<code>WriteProcessMemory</code>函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。</p>\n<p>这里我们要patch 传参，通过ida找到传参的汇编代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png\" alt=\"image-20240920142928600\"></p>\n<p>在winhex里找到对应所在文件偏移<br><img src=\"https://s2.loli.net/2024/10/02/dZ5cpxBXQakgSvh.png\" alt=\"image-20240920143006628\"></p>\n<p>也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功输出token1文件：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png\" alt=\"image-20240914120306770\"></p>\n<p>然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。</p>\n<p>hook DbgPrintEx函数看一眼传参。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DbgPrintEx ComponentId:%lu,Level:%lu\\n&quot;</span>,dbgFilter, ComponentId, Level);</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, Level, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>,dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现加载ace驱动后，有大量的level:5的调试信息输出</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/prtTqv2fl91bxsn.png\" alt=\"image-20240918212128643\"></p>\n<p>也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"><span class=\"type\">char</span> buffer[<span class=\"number\">1024</span>]; </span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    <span class=\"built_in\">vsprintf</span>(buffer, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, <span class=\"number\">0</span>, <span class=\"string\">&quot;%s&quot;</span>, buffer);<span class=\"comment\">//修改level为0</span></span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;Kvancy: DriverUnload\\n&quot;</span>);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;Kvancy: DriverEntry\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/gcZOPylkwdjXVvL.png\" alt=\"{4981D7A9-1EAA-4A38-9280-429D63ECABF9}\"></p>\n<p>成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/fSGHQJXgADMceua.png\" alt=\"{170126A6-1C28-4BF3-AB47-AB2397C76595}\"></p>\n<p>可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOID <span class=\"title function_\">WriteToFile</span><span class=\"params\">(PUNICODE_STRING FilePath, PCHAR Data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OBJECT_ATTRIBUTES objAttr;</span><br><span class=\"line\">    IO_STATUS_BLOCK ioStatusBlock;</span><br><span class=\"line\">    HANDLE fileHandle;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    UNICODE_STRING unicodeFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">    RtlInitUnicodeString(&amp;unicodeFilePath, FilePath-&gt;Buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    InitializeObjectAttributes(&amp;objAttr, &amp;unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwCreateFile(</span><br><span class=\"line\">        &amp;fileHandle,</span><br><span class=\"line\">        FILE_APPEND_DATA | SYNCHRONIZE,</span><br><span class=\"line\">        &amp;objAttr,</span><br><span class=\"line\">        &amp;ioStatusBlock,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        FILE_ATTRIBUTE_NORMAL,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        FILE_OPEN_IF,</span><br><span class=\"line\">        FILE_SYNCHRONOUS_IO_NONALERT,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> dataLength = <span class=\"built_in\">strlen</span>(Data);</span><br><span class=\"line\">        ZwWriteFile(fileHandle, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;ioStatusBlock, Data, (ULONG)dataLength, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        ZwClose(fileHandle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to create file: %08X\\n&quot;</span>, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">EnumProcesses</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    PVOID buffer;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>; <span class=\"comment\">// Initial buffer size, can grow if needed</span></span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\">    CHAR logBuffer[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    UNICODE_STRING filePath;</span><br><span class=\"line\">    RtlInitUnicodeString(&amp;filePath, <span class=\"string\">L&quot;\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(buffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ImageName.Buffer) &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: %wZ\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId, &amp;processInfo-&gt;ImageName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: [System Process]\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            WriteToFile(&amp;filePath, logBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExFreePool(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用<code>PsCreateSystemThread</code>创建了一个内核线程。hook<code>PsCreateSystemThread</code>函数看看驱动加载时是否调用了这个函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">myPsCreateSystemThread</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s myPsCreateSystemThread StartRoutine:%p\\n&quot;</span>, dbgFilter, StartRoutine);</span><br><span class=\"line\">    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = PsCreateSystemThread;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myPsCreateSystemThread);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/jt8TS7WcXqhm9JF.png\" alt=\"{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}\"></p>\n<p>发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; u FFFFBA0729013DB0 l 100</span><br><span class=\"line\">ffffba07`29013db0 488bc4          mov     rax,rsp</span><br><span class=\"line\">ffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx</span><br><span class=\"line\">ffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi</span><br><span class=\"line\">ffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14</span><br><span class=\"line\">ffffba07`29013dbf 55              push    rbp</span><br><span class=\"line\">ffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]</span><br><span class=\"line\">ffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h</span><br><span class=\"line\">ffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh</span><br><span class=\"line\">ffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h</span><br><span class=\"line\">ffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0</span><br><span class=\"line\">ffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]</span><br><span class=\"line\">ffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0</span><br><span class=\"line\">ffffba07`29013dea e8d1030000      call    ffffba07`290141c0</span><br><span class=\"line\">ffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h</span><br><span class=\"line\">ffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]</span><br><span class=\"line\">ffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e01 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e0a 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax</span><br><span class=\"line\">ffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax</span><br><span class=\"line\">ffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax</span><br><span class=\"line\">ffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]</span><br><span class=\"line\">ffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax</span><br><span class=\"line\">ffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]</span><br><span class=\"line\">ffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0</span><br><span class=\"line\">ffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013e50 33db            xor     ebx,ebx</span><br><span class=\"line\">ffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h</span><br><span class=\"line\">ffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]</span><br><span class=\"line\">ffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e64 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e6d 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax</span><br><span class=\"line\">ffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax</span><br><span class=\"line\">ffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax</span><br><span class=\"line\">ffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]</span><br><span class=\"line\">ffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]</span><br><span class=\"line\">ffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax</span><br><span class=\"line\">ffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]</span><br><span class=\"line\">ffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0</span><br><span class=\"line\">ffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013eb9 48ffc3          inc     rbx</span><br><span class=\"line\">ffffba07`29013ebc 4883fb10        cmp     rbx,10h</span><br><span class=\"line\">ffffba07`29013ec0 7c90            jl      ffffba07`29013e52</span><br><span class=\"line\">ffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh</span><br><span class=\"line\">ffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]</span><br><span class=\"line\">ffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013ed4 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013edd 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax</span><br><span class=\"line\">ffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax</span><br><span class=\"line\">ffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax</span><br><span class=\"line\">ffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]</span><br><span class=\"line\">ffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax</span><br><span class=\"line\">ffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]</span><br><span class=\"line\">ffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0</span><br><span class=\"line\">ffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh</span><br><span class=\"line\">ffffba07`29013f28 e833e9ffff      call    ffffba07`29012860</span><br><span class=\"line\">ffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf</span><br><span class=\"line\">ffffba07`29013f32 cc              int     3</span><br><span class=\"line\">ffffba07`29013f33 cc              int     3</span><br><span class=\"line\">ffffba07`29013f34 4152            push    r10</span><br></pre></td></tr></table></figure>\n\n<p>导入到ida里看伪代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __noreturn <span class=\"title function_\">sub_180005148</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i v0; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 i; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __m128i v2; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// r9</span></span><br><span class=\"line\">  __m128i v4; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v5; <span class=\"comment\">// [rsp+30h] [rbp-19h] BYREF</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// [rsp+40h] [rbp-9h] BYREF</span></span><br><span class=\"line\">  __m128i v7; <span class=\"comment\">// [rsp+50h] [rbp+7h] BYREF</span></span><br><span class=\"line\">  __m128i v8; <span class=\"comment\">// [rsp+60h] [rbp+17h]</span></span><br><span class=\"line\">  __m128i v9; <span class=\"comment\">// [rsp+70h] [rbp+27h]</span></span><br><span class=\"line\">  __int128 v10; <span class=\"comment\">// [rsp+80h] [rbp+37h] BYREF</span></span><br><span class=\"line\">  __m128i v11; <span class=\"comment\">// [rsp+90h] [rbp+47h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v10 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">    ((<span class=\"type\">void</span> (__fastcall *)(__int128 *))((<span class=\"type\">char</span> *)&amp;loc_180005556 + <span class=\"number\">2</span>))(&amp;v10);</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D27B32F124FA1</span>i64;</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v0 = _mm_load_si128(&amp;v5);</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v5 = _mm_xor_si128(v0, v8);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v5);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>i64; i &lt; <span class=\"number\">16</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD324B10F0</span>i64;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">      v2 = _mm_load_si128(&amp;v6);</span><br><span class=\"line\">      v3 = *((<span class=\"type\">unsigned</span> __int8 *)&amp;v10 + i);</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v6 = _mm_xor_si128(v2, v9);</span><br><span class=\"line\">      MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v6, v3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920DF</span>i64;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v4 = _mm_load_si128(&amp;v7);</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v7 = _mm_xor_si128(v4, v11);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v7);</span><br><span class=\"line\">    sub_180003BF8(<span class=\"number\">2766</span>i64);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0x4B6D27B32F124FA1</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x4B6D1DDD4A7920D5</span></span><br><span class=\"line\">y2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/AM2Gl8UOyBkPEVs.png\" alt=\"{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}\"></p>\n<p>打印出了<code>token</code>基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/RbYklUDHIpy5EFj.png\" alt=\"image-20240919195412464\"></p>\n<p>这里有个<code>mov edx,5</code>语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。</p>\n<p>那么怎么确定这个线程地址呢，如果通过<code>ZwQuerySystemInformation</code>枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了<code>ZwQuerySystemInformation</code>枚举，还有通过<code>PsLookupThreadByThreadId</code>函数从进程id和线程id查找的。</p>\n<p>那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png\" alt=\"image-20240919214001840\"></p>\n<p><img src=\"https://s2.loli.net/2024/10/02/u9H3PTzIa7gUCb6.png\" alt=\"image-20240919215044101\"></p>\n<p>诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid&#x3D;4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/gWJduRBKiDQ7wha.png\" alt=\"image-20240919215837787\"></p>\n<p>貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用<code>PsCreateSystemThread</code>），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。</p>\n<p>这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid&#x3D;4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;header.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">PVOID MoudleBaseAddress[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG64 MoudleSize[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG ModuleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">ULONG Offset1 = <span class=\"number\">0x52</span>, Offset2 = <span class=\"number\">0xB5</span>, Offset3 = <span class=\"number\">0x125</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOLEAN <span class=\"title function_\">IsAddressInKnownModules</span><span class=\"params\">(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ModuleCount; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Address &gt;= ModuleBaseAddresses[i] &amp;&amp; Address &lt; (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PVOID <span class=\"title function_\">EnumSystemModulesForProcess</span><span class=\"params\">(HANDLE TargetProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>;</span><br><span class=\"line\">    PVOID processBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    PVOID moduleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询进程信息</span></span><br><span class=\"line\">    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询模块信息</span></span><br><span class=\"line\">    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(moduleBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">            ExFreePool(processBuffer);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历模块信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;</span><br><span class=\"line\">        ModuleCount = moduleInfo-&gt;ModulesCount;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; moduleInfo-&gt;ModulesCount; i++) &#123;</span><br><span class=\"line\">            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &amp;moduleInfo-&gt;Modules[i];</span><br><span class=\"line\">            MoudleBaseAddress[i] = moduleEntry-&gt;Base;</span><br><span class=\"line\">            MoudleSize[i] = moduleEntry-&gt;Size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历进程信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ProcessId == TargetProcessId) &#123;</span><br><span class=\"line\">                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; processInfo-&gt;NumberOfThreads; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        DbgPrint(<span class=\"string\">&quot;Find it:%p\\n&quot;</span>,threadInfo[i].StartAddress);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> threadInfo[i].StartAddress;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清理分配的内存</span></span><br><span class=\"line\">    ExFreePool(processBuffer);</span><br><span class=\"line\">    ExFreePool(moduleBuffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">UnloadDriver</span><span class=\"params\">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Unloaded\\n&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Loaded\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE targetPid = (HANDLE)<span class=\"number\">4</span>; <span class=\"comment\">// 系统进程的 PID</span></span><br><span class=\"line\">    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);</span><br><span class=\"line\"></span><br><span class=\"line\">    UCHAR valueToWrite = <span class=\"number\">0x00</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    UCHAR valueToRead = <span class=\"number\">0x05</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    ULONG numHasChanged = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DbgPrint(<span class=\"string\">&quot;numHasChanged:%d\\n&quot;</span>, numHasChanged);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>成功输出token2</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png\" alt=\"image-20240920125107119\"></p>\n<h2 id=\"（三）解题过程\"><a href=\"#（三）解题过程\" class=\"headerlink\" title=\"（三）解题过程\"></a>（三）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）</p>\n<p>要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的<code>C:\\2024GameSafeRace.token1</code>字符串是由十六进制异或得到的，也就是下面这些<br><img src=\"https://s2.loli.net/2024/10/02/8aHE6eqMYZpBx7u.png\" alt=\"image-20240920145014956\"></p>\n<p>可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7082</span>) = <span class=\"number\">0x94e7c2136acc0e5c</span>;<span class=\"comment\">//</span></span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7093</span>) = <span class=\"number\">0x8207c5d1af9f3860</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x70F1</span>) = <span class=\"number\">0xa905cca9edcb138c</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7108</span>) = <span class=\"number\">0xa753b8236c56809a</span>;</span><br><span class=\"line\">        <span class=\"comment\">//C:\\Users\\15386\\Desktop\\flag.txt</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入hook成功后，成功在桌面的<code>flag.txt</code>输出token1</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/8C4giIuylEjGYsF.png\" alt=\"{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}\"></p>\n","site":{"data":{}},"excerpt":"<p>小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。","more":"</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><img src=\"https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png\" alt=\"image-20240923132824209\"></p>\n<h2 id=\"（一）解题过程\"><a href=\"#（一）解题过程\" class=\"headerlink\" title=\"（一）解题过程\"></a>（一）解题过程</h2><p>拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png\" alt=\"image-20240923131144727\"></p>\n<p>运行发现程序会多次在<code>WriteProcessMemory</code>下断下，hook一下观察传参</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T * lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> fileName[<span class=\"number\">12</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(fileName, <span class=\"string\">&quot;out%d.txt&quot;</span>, (<span class=\"type\">int</span>)hProcess % <span class=\"number\">1000</span>);</span><br><span class=\"line\">    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;CreateFile Fail&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SetFilePointer(hFile, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, FILE_END);</span><br><span class=\"line\">    DWORD bytesWritten;</span><br><span class=\"line\">    BOOL result = WriteFile(hFile, lpBuffer, nSize, &amp;bytesWritten, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    CloseHandle(hFile);</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;findProcess WriteProcessMemory:%p,size:%d\\n&quot;</span>, hProcess,nSize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里输出了三个txt文件</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png\" alt=\"image-20240923131546102\"></p>\n<p>其中out200.txt文件有明显的PE头</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png\" alt=\"image-20240923131748329\"></p>\n<p>去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过<code>WriteProcessMemory</code>往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。</p>\n<p>ida64打开发现程序的dllMain入口还是被加密了</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png\" alt=\"image-20240923132428865\"></p>\n<p>还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在</p>\n<p>入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png\" alt=\"image-20240913213116556\"></p>\n<p>这里我对下面这几个API下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png\" alt=\"image-20240913213203300\"></p>\n<p>运行，第一次成功在openProcess函数断下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png\" alt=\"image-20240913213252406\"></p>\n<p>观察传参窗口，找到了一个系统进程名称字符串<code>winlogon.exe</code>，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png\" alt=\"image-20240913213951735\"></p>\n<p>汇编代码不是很好看，根据偏移在IDA里反汇编看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_1800063D0</span><span class=\"params\">(_DWORD *Dst, DWORD dwProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i si128; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __m128i v10; <span class=\"comment\">// xmm2</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> v14; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v16; <span class=\"comment\">// r14d</span></span><br><span class=\"line\">  HANDLE Toolhelp32Snapshot; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  HANDLE v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v21; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  CHAR Caption[<span class=\"number\">16</span>]; <span class=\"comment\">// [rsp+40h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !dwProcessId )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0xE795A71250E2465A</span>ui64;</span><br><span class=\"line\">    si128 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    v6 = _mm_xor_si128(si128, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD5301FE45158</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = v6;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xBF19D3ADD5D97A59</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xBD1C9CA3F4C12EC9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C05763438E84</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MessageBoxA(<span class=\"number\">0</span>i64, (LPCSTR)(_RBP + <span class=\"number\">32</span>), (LPCSTR)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">0</span>);</span><br><span class=\"line\">LABEL_3:</span><br><span class=\"line\">    GetLastError();</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0x88D6871250E2465A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF98DB9906C58</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = _mm_xor_si128(</span><br><span class=\"line\">                         _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP),</span><br><span class=\"line\">                         *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_180006A00((<span class=\"type\">void</span> *)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> __int8)sub_180006FC0() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>) = <span class=\"number\">0x52C9FCDC77FF5FC3</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xDDD2E92971C27548</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA43EB7C9E8CF4E1C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xA62FD5B4C980079C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xD55585772756849A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x40</span>) = <span class=\"number\">0x52C9FCDC7DDE2DAC</span>i64;</span><br><span class=\"line\">    v10 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)(_RBP + <span class=\"number\">64</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C8</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa [rbp+<span class=\"number\">210</span>h+var_1D0], xmm2</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v14 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dwProcessId == <span class=\"number\">-1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = GetCurrentProcessId();</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = dwProcessId;</span><br><span class=\"line\">    v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v18 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD53051F54450</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA92981ACBCD97A59</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xCF59BCC699AA419B</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      __asm</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">        vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">        vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">        vzeroupper</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));<span class=\"comment\">//打印报错信息</span></span><br><span class=\"line\">      <span class=\"keyword\">goto</span> LABEL_3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Dst[<span class=\"number\">30</span>] = <span class=\"number\">0x1FFFFF</span>;</span><br><span class=\"line\">  v15 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v15;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( *((_BYTE *)Dst + v15) );</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v15 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v16 = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">    Toolhelp32Snapshot = CreateToolhelp32Snapshot(<span class=\"number\">2u</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( Toolhelp32Snapshot != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = <span class=\"number\">304</span>;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">0x12C</span>ui64);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x68</span>) != v16 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> LABEL_20;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v14;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">140</span> + v14) );</span><br><span class=\"line\">        memmove(Dst, (<span class=\"type\">const</span> <span class=\"type\">void</span> *)(_RBP + <span class=\"number\">140</span>), v14);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">LABEL_20:</span><br><span class=\"line\">      CloseHandle(Toolhelp32Snapshot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">18</span>) = sub_1800068D0(Dst, Dst);</span><br><span class=\"line\">  v21 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">  *(_QWORD *)_RBP = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  EnumWindows(EnumFunc, (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64);</span><br><span class=\"line\">  result = *(_QWORD *)_RBP;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_QWORD *)_RBP )</span><br><span class=\"line\">    v21 = *(_QWORD *)_RBP;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">16</span>) = v21;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png\" alt=\"image-20240913221222730\"></p>\n<p>分析完这个函数，继续回溯一层，运行到返回，定位到这个地方</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png\" alt=\"image-20240913221520425\"></p>\n<p>继续根据偏移转到IDA里看反汇编</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sub_180001990</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v0; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  DWORD v1; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  __m128i Dst; <span class=\"comment\">// [rsp+20h] [rbp-48h] BYREF</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+30h] [rbp-38h]</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// [rsp+38h] [rbp-30h]</span></span><br><span class=\"line\">  __m128i Src; <span class=\"comment\">// [rsp+40h] [rbp-28h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x89FAC00F53FE5D68</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E9F9D26C12</span>ui64;</span><br><span class=\"line\">  Src = _mm_xor_si128(_mm_load_si128(&amp;Src), Dst);</span><br><span class=\"line\">  v0 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v0;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( Src.m128i_i8[v0] );</span><br><span class=\"line\">  memmove(dword_1800349A0, &amp;Src, v0);</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v4 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v5 = <span class=\"number\">15</span>i64;</span><br><span class=\"line\">  sub_180004770(&amp;Dst, &amp;Src, v0);</span><br><span class=\"line\">  v1 = sub_1800070A0(&amp;Dst);</span><br><span class=\"line\">  sub_1800063D0(dword_1800349A0, v1);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> atexit(sub_180020C90);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面应该是一个加密的字符串操作，用python打印出字符串</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">x2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x89FAC00F53FE5D68</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E9F9D26C12</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"comment\">#Result 1: nogolniw</span></span><br><span class=\"line\"><span class=\"comment\">#Result 2: exe.</span></span><br></pre></td></tr></table></figure>\n\n<p>得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">*((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br></pre></td></tr></table></figure>\n\n<p>随后return exit退出。</p>\n<p>随后我在退出函数传参的时候看到了一个hProcess</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png\" alt=\"image-20240914102337797\"></p>\n<p>一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sub_180007C10</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  HANDLE v1; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v2; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int128 v3; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int128 v4; <span class=\"comment\">// xmm1</span></span><br><span class=\"line\">  HANDLE FileA; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  _BYTE *v9; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v10; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  _QWORD *v11; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">char</span> Buffer; <span class=\"comment\">// [rsp+60h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( byte_180032C00 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !byte_180034961 &amp;&amp; !byte_180034960 )</span><br><span class=\"line\">      sub_1800041D0();</span><br><span class=\"line\">    v1 = hProcess;</span><br><span class=\"line\">    v2 = (<span class=\"type\">void</span> *)(qword_180034968 + <span class=\"number\">2766</span>);</span><br><span class=\"line\">    *(_BYTE *)_RBP = <span class=\"number\">15</span>;</span><br><span class=\"line\">    WriteProcessMemory(v1, v2, (LPCVOID)((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">1u</span>i64, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    byte_180032C00 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xAA32D3B2B7C50388</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>) = <span class=\"number\">0xA0A195500DCC0E5C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x18</span>) = <span class=\"number\">0x943E9588CFCF645D</span>ui64;</span><br><span class=\"line\">    v3 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA727C0574231D098</span>ui64;</span><br><span class=\"line\">    v4 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x80</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = v3;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x88</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x70</span>) = v4;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x90</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x98</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">0</span>D0h+var_50]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( FileA != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ((<span class=\"type\">void</span> (__fastcall *)(<span class=\"type\">unsigned</span> __int64))loc_180007A20)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      v8 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) &lt; <span class=\"number\">0x10</span>ui64 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">48</span> + v8) );</span><br><span class=\"line\">        v9 = (_BYTE *)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v9 = *(_BYTE **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( v9[v8] );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + <span class=\"number\">8</span>), <span class=\"number\">0</span>i64);</span><br><span class=\"line\">      CloseHandle(FileA);</span><br><span class=\"line\">      v10 = *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v10 &gt;= <span class=\"number\">0x10</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v11 = *(_QWORD **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v10 + <span class=\"number\">1</span> &gt;= <span class=\"number\">0x1000</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v11 = (_QWORD *)*(v11 - <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> __int64)(*(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>)</span><br><span class=\"line\">                                - (_QWORD)v11</span><br><span class=\"line\">                                - <span class=\"number\">8</span>i64) &gt; <span class=\"number\">0x1F</span> )</span><br><span class=\"line\">            invalid_parameter_noinfo_noreturn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j_j_free(v11);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xA0A195500DCC0E5C</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x943E9588CFCF645D</span></span><br><span class=\"line\">x3 = <span class=\"number\">0xAA32D3B2B7C50388</span></span><br><span class=\"line\">x4 = <span class=\"number\">0xA727C0574231D098</span></span><br><span class=\"line\">y1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y3 = <span class=\"number\">0xCF59BCC699A060E9</span></span><br><span class=\"line\">y4 = <span class=\"number\">0xA727C0574231E1F6</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\">result3 = hex_xor_to_string(x3, y3)</span><br><span class=\"line\">result4 = hex_xor_to_string(x4, y4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 3:&quot;</span>, result3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 4:&quot;</span>, result4)</span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>] + result3[::-<span class=\"number\">1</span>] + result4[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png\" alt=\"image-20240914110434860\"></p>\n<p>整个拼起来是字符串<code>C:\\2024GameSafeRace.token1</code>，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png\" alt=\"image-20240914110826942\"></p>\n<p>loc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入<code>C:\\2024GameSafeRace.token1</code>中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png\" alt=\"image-20240914111407201\"></p>\n<p>找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png\" alt=\"image-20240914111653640\"></p>\n<p>看来是参数在作怪，CreateFileA函数传入<strong>OPEN_EXISTING</strong>参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png\" alt=\"image-20240914112419617\"></p>\n<p>C:\\2024GameSafeRace.token1成功被写入</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png\" alt=\"image-20240914112536772\"></p>\n<p>010打开找到token1:<code>757F4749AEBB1891EF5AC2A9B5439CEA</code></p>\n<p>token2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/QDpOlfmIBnoNLKS.png\" alt=\"image-20240914113718466\"></p>\n<p>组合一下就是token2：<code>803f14a24d64f3e697957c252e3a5686</code></p>\n<h2 id=\"（二）解题过程\"><a href=\"#（二）解题过程\" class=\"headerlink\" title=\"（二）解题过程\"></a>（二）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）</p>\n<p>根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到<code>C:\\2024GameSafeRace.token1</code>中，但是会因为CreateFileA参数<code>OPEN_EXISTING</code>条件不满足而失败，所以我们只需要修改这个传参，改成<code>OPEN_ALWAYS</code>，即可实现输出token1，那我们只需要hook <code>CreateFileA</code>函数修改传参即可，但是有个问题，因为不是hack.exe本身调用<code>CreateFileA</code>函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用<code>CreateFileA</code>函数，所以我们可以考虑在注入前修改<code>WriteProcessMemory</code>函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。</p>\n<p>这里我们要patch 传参，通过ida找到传参的汇编代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png\" alt=\"image-20240920142928600\"></p>\n<p>在winhex里找到对应所在文件偏移<br><img src=\"https://s2.loli.net/2024/10/02/dZ5cpxBXQakgSvh.png\" alt=\"image-20240920143006628\"></p>\n<p>也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功输出token1文件：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png\" alt=\"image-20240914120306770\"></p>\n<p>然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。</p>\n<p>hook DbgPrintEx函数看一眼传参。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DbgPrintEx ComponentId:%lu,Level:%lu\\n&quot;</span>,dbgFilter, ComponentId, Level);</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, Level, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>,dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现加载ace驱动后，有大量的level:5的调试信息输出</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/prtTqv2fl91bxsn.png\" alt=\"image-20240918212128643\"></p>\n<p>也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"><span class=\"type\">char</span> buffer[<span class=\"number\">1024</span>]; </span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    <span class=\"built_in\">vsprintf</span>(buffer, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, <span class=\"number\">0</span>, <span class=\"string\">&quot;%s&quot;</span>, buffer);<span class=\"comment\">//修改level为0</span></span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;Kvancy: DriverUnload\\n&quot;</span>);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;Kvancy: DriverEntry\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/gcZOPylkwdjXVvL.png\" alt=\"{4981D7A9-1EAA-4A38-9280-429D63ECABF9}\"></p>\n<p>成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/fSGHQJXgADMceua.png\" alt=\"{170126A6-1C28-4BF3-AB47-AB2397C76595}\"></p>\n<p>可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOID <span class=\"title function_\">WriteToFile</span><span class=\"params\">(PUNICODE_STRING FilePath, PCHAR Data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OBJECT_ATTRIBUTES objAttr;</span><br><span class=\"line\">    IO_STATUS_BLOCK ioStatusBlock;</span><br><span class=\"line\">    HANDLE fileHandle;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    UNICODE_STRING unicodeFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">    RtlInitUnicodeString(&amp;unicodeFilePath, FilePath-&gt;Buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    InitializeObjectAttributes(&amp;objAttr, &amp;unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwCreateFile(</span><br><span class=\"line\">        &amp;fileHandle,</span><br><span class=\"line\">        FILE_APPEND_DATA | SYNCHRONIZE,</span><br><span class=\"line\">        &amp;objAttr,</span><br><span class=\"line\">        &amp;ioStatusBlock,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        FILE_ATTRIBUTE_NORMAL,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        FILE_OPEN_IF,</span><br><span class=\"line\">        FILE_SYNCHRONOUS_IO_NONALERT,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> dataLength = <span class=\"built_in\">strlen</span>(Data);</span><br><span class=\"line\">        ZwWriteFile(fileHandle, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;ioStatusBlock, Data, (ULONG)dataLength, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        ZwClose(fileHandle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to create file: %08X\\n&quot;</span>, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">EnumProcesses</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    PVOID buffer;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>; <span class=\"comment\">// Initial buffer size, can grow if needed</span></span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\">    CHAR logBuffer[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    UNICODE_STRING filePath;</span><br><span class=\"line\">    RtlInitUnicodeString(&amp;filePath, <span class=\"string\">L&quot;\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(buffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ImageName.Buffer) &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: %wZ\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId, &amp;processInfo-&gt;ImageName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: [System Process]\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            WriteToFile(&amp;filePath, logBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExFreePool(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用<code>PsCreateSystemThread</code>创建了一个内核线程。hook<code>PsCreateSystemThread</code>函数看看驱动加载时是否调用了这个函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">myPsCreateSystemThread</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s myPsCreateSystemThread StartRoutine:%p\\n&quot;</span>, dbgFilter, StartRoutine);</span><br><span class=\"line\">    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = PsCreateSystemThread;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myPsCreateSystemThread);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/jt8TS7WcXqhm9JF.png\" alt=\"{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}\"></p>\n<p>发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; u FFFFBA0729013DB0 l 100</span><br><span class=\"line\">ffffba07`29013db0 488bc4          mov     rax,rsp</span><br><span class=\"line\">ffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx</span><br><span class=\"line\">ffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi</span><br><span class=\"line\">ffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14</span><br><span class=\"line\">ffffba07`29013dbf 55              push    rbp</span><br><span class=\"line\">ffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]</span><br><span class=\"line\">ffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h</span><br><span class=\"line\">ffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh</span><br><span class=\"line\">ffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h</span><br><span class=\"line\">ffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0</span><br><span class=\"line\">ffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]</span><br><span class=\"line\">ffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0</span><br><span class=\"line\">ffffba07`29013dea e8d1030000      call    ffffba07`290141c0</span><br><span class=\"line\">ffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h</span><br><span class=\"line\">ffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]</span><br><span class=\"line\">ffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e01 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e0a 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax</span><br><span class=\"line\">ffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax</span><br><span class=\"line\">ffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax</span><br><span class=\"line\">ffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]</span><br><span class=\"line\">ffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax</span><br><span class=\"line\">ffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]</span><br><span class=\"line\">ffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0</span><br><span class=\"line\">ffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013e50 33db            xor     ebx,ebx</span><br><span class=\"line\">ffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h</span><br><span class=\"line\">ffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]</span><br><span class=\"line\">ffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e64 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e6d 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax</span><br><span class=\"line\">ffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax</span><br><span class=\"line\">ffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax</span><br><span class=\"line\">ffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]</span><br><span class=\"line\">ffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]</span><br><span class=\"line\">ffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax</span><br><span class=\"line\">ffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]</span><br><span class=\"line\">ffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0</span><br><span class=\"line\">ffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013eb9 48ffc3          inc     rbx</span><br><span class=\"line\">ffffba07`29013ebc 4883fb10        cmp     rbx,10h</span><br><span class=\"line\">ffffba07`29013ec0 7c90            jl      ffffba07`29013e52</span><br><span class=\"line\">ffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh</span><br><span class=\"line\">ffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]</span><br><span class=\"line\">ffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013ed4 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013edd 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax</span><br><span class=\"line\">ffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax</span><br><span class=\"line\">ffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax</span><br><span class=\"line\">ffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]</span><br><span class=\"line\">ffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax</span><br><span class=\"line\">ffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]</span><br><span class=\"line\">ffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0</span><br><span class=\"line\">ffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh</span><br><span class=\"line\">ffffba07`29013f28 e833e9ffff      call    ffffba07`29012860</span><br><span class=\"line\">ffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf</span><br><span class=\"line\">ffffba07`29013f32 cc              int     3</span><br><span class=\"line\">ffffba07`29013f33 cc              int     3</span><br><span class=\"line\">ffffba07`29013f34 4152            push    r10</span><br></pre></td></tr></table></figure>\n\n<p>导入到ida里看伪代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __noreturn <span class=\"title function_\">sub_180005148</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i v0; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 i; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __m128i v2; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// r9</span></span><br><span class=\"line\">  __m128i v4; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v5; <span class=\"comment\">// [rsp+30h] [rbp-19h] BYREF</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// [rsp+40h] [rbp-9h] BYREF</span></span><br><span class=\"line\">  __m128i v7; <span class=\"comment\">// [rsp+50h] [rbp+7h] BYREF</span></span><br><span class=\"line\">  __m128i v8; <span class=\"comment\">// [rsp+60h] [rbp+17h]</span></span><br><span class=\"line\">  __m128i v9; <span class=\"comment\">// [rsp+70h] [rbp+27h]</span></span><br><span class=\"line\">  __int128 v10; <span class=\"comment\">// [rsp+80h] [rbp+37h] BYREF</span></span><br><span class=\"line\">  __m128i v11; <span class=\"comment\">// [rsp+90h] [rbp+47h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v10 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">    ((<span class=\"type\">void</span> (__fastcall *)(__int128 *))((<span class=\"type\">char</span> *)&amp;loc_180005556 + <span class=\"number\">2</span>))(&amp;v10);</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D27B32F124FA1</span>i64;</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v0 = _mm_load_si128(&amp;v5);</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v5 = _mm_xor_si128(v0, v8);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v5);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>i64; i &lt; <span class=\"number\">16</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD324B10F0</span>i64;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">      v2 = _mm_load_si128(&amp;v6);</span><br><span class=\"line\">      v3 = *((<span class=\"type\">unsigned</span> __int8 *)&amp;v10 + i);</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v6 = _mm_xor_si128(v2, v9);</span><br><span class=\"line\">      MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v6, v3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920DF</span>i64;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v4 = _mm_load_si128(&amp;v7);</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v7 = _mm_xor_si128(v4, v11);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v7);</span><br><span class=\"line\">    sub_180003BF8(<span class=\"number\">2766</span>i64);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0x4B6D27B32F124FA1</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x4B6D1DDD4A7920D5</span></span><br><span class=\"line\">y2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/AM2Gl8UOyBkPEVs.png\" alt=\"{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}\"></p>\n<p>打印出了<code>token</code>基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/RbYklUDHIpy5EFj.png\" alt=\"image-20240919195412464\"></p>\n<p>这里有个<code>mov edx,5</code>语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。</p>\n<p>那么怎么确定这个线程地址呢，如果通过<code>ZwQuerySystemInformation</code>枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了<code>ZwQuerySystemInformation</code>枚举，还有通过<code>PsLookupThreadByThreadId</code>函数从进程id和线程id查找的。</p>\n<p>那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png\" alt=\"image-20240919214001840\"></p>\n<p><img src=\"https://s2.loli.net/2024/10/02/u9H3PTzIa7gUCb6.png\" alt=\"image-20240919215044101\"></p>\n<p>诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid&#x3D;4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/gWJduRBKiDQ7wha.png\" alt=\"image-20240919215837787\"></p>\n<p>貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用<code>PsCreateSystemThread</code>），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。</p>\n<p>这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid&#x3D;4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;header.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">PVOID MoudleBaseAddress[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG64 MoudleSize[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG ModuleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">ULONG Offset1 = <span class=\"number\">0x52</span>, Offset2 = <span class=\"number\">0xB5</span>, Offset3 = <span class=\"number\">0x125</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOLEAN <span class=\"title function_\">IsAddressInKnownModules</span><span class=\"params\">(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ModuleCount; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Address &gt;= ModuleBaseAddresses[i] &amp;&amp; Address &lt; (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PVOID <span class=\"title function_\">EnumSystemModulesForProcess</span><span class=\"params\">(HANDLE TargetProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>;</span><br><span class=\"line\">    PVOID processBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    PVOID moduleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询进程信息</span></span><br><span class=\"line\">    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询模块信息</span></span><br><span class=\"line\">    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(moduleBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">            ExFreePool(processBuffer);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历模块信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;</span><br><span class=\"line\">        ModuleCount = moduleInfo-&gt;ModulesCount;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; moduleInfo-&gt;ModulesCount; i++) &#123;</span><br><span class=\"line\">            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &amp;moduleInfo-&gt;Modules[i];</span><br><span class=\"line\">            MoudleBaseAddress[i] = moduleEntry-&gt;Base;</span><br><span class=\"line\">            MoudleSize[i] = moduleEntry-&gt;Size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历进程信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ProcessId == TargetProcessId) &#123;</span><br><span class=\"line\">                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; processInfo-&gt;NumberOfThreads; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        DbgPrint(<span class=\"string\">&quot;Find it:%p\\n&quot;</span>,threadInfo[i].StartAddress);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> threadInfo[i].StartAddress;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清理分配的内存</span></span><br><span class=\"line\">    ExFreePool(processBuffer);</span><br><span class=\"line\">    ExFreePool(moduleBuffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">UnloadDriver</span><span class=\"params\">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Unloaded\\n&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Loaded\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE targetPid = (HANDLE)<span class=\"number\">4</span>; <span class=\"comment\">// 系统进程的 PID</span></span><br><span class=\"line\">    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);</span><br><span class=\"line\"></span><br><span class=\"line\">    UCHAR valueToWrite = <span class=\"number\">0x00</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    UCHAR valueToRead = <span class=\"number\">0x05</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    ULONG numHasChanged = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DbgPrint(<span class=\"string\">&quot;numHasChanged:%d\\n&quot;</span>, numHasChanged);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>成功输出token2</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png\" alt=\"image-20240920125107119\"></p>\n<h2 id=\"（三）解题过程\"><a href=\"#（三）解题过程\" class=\"headerlink\" title=\"（三）解题过程\"></a>（三）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）</p>\n<p>要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的<code>C:\\2024GameSafeRace.token1</code>字符串是由十六进制异或得到的，也就是下面这些<br><img src=\"https://s2.loli.net/2024/10/02/8aHE6eqMYZpBx7u.png\" alt=\"image-20240920145014956\"></p>\n<p>可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7082</span>) = <span class=\"number\">0x94e7c2136acc0e5c</span>;<span class=\"comment\">//</span></span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7093</span>) = <span class=\"number\">0x8207c5d1af9f3860</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x70F1</span>) = <span class=\"number\">0xa905cca9edcb138c</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7108</span>) = <span class=\"number\">0xa753b8236c56809a</span>;</span><br><span class=\"line\">        <span class=\"comment\">//C:\\Users\\15386\\Desktop\\flag.txt</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入hook成功后，成功在桌面的<code>flag.txt</code>输出token1</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/8C4giIuylEjGYsF.png\" alt=\"{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}\"></p>"}],"Post":[{"title":"2023腾讯游戏安全PC决赛","date":"2024-08-12T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png","thumbnail":"https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n最近一直在做往年腾讯游戏安全PC端的复现，但是2023年决赛的题做到第三问就开始有点做不动了，想在网上找找题解但是并没有找到，于是便想分享一下自己的解题经验和第三问的思路。鉴于知识的局限性，文中可能存在疏漏或不足之处，如果发现任何错误或不准确之处，请不吝赐教。<!-- more -->\n\n# 题目\n\n![image-20240813190641633](https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png)\n\n\n\n# （一）解题过程\n\n第一问让我们杀死进程，可以尝试根据windowsAPI提供的TerminateProcess函数去停止进程，写份代码测试下\n\n```c\nbool KillProcessByName(const char* processName) {\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (Process32First(hSnapshot, &pe)) {\n        do {\n            if (strcmp(pe.szExeFile, processName) == 0) {\n                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n                if (hProcess) {\n                    TerminateProcess(hProcess, 0);\n                    CloseHandle(hProcess);\n                    Num++;\n                    printf(\"Kill suc:[%d]\\n\", Num);\n                }\n            }\n        } while (Process32Next(hSnapshot, &pe));\n    }\n\n    CloseHandle(hSnapshot);\n    return true;\n}\nint main()\n{\n    while(1)\n    {\n        KillProcessByName(\"WorkingService.exe\");\n    }\n    return 0;\n}\n```\n\n以管理员身份启动测试\n\n启动前：\n\n![image-20240813191830392](https://s2.loli.net/2024/09/28/j5DheNQGPYqUvWr.png)\n\n启动后\n\n![image-20240813192038178](https://s2.loli.net/2024/09/28/yOgekiKJVdIvBNG.png)\n\n![image-20240813191935364](https://s2.loli.net/2024/09/28/nxAUCqMtVE3oH7g.png)\n\n\n\n# （二）解题过程\n\n先DIE查壳发现有VMP，只能动调入手，先观察程序功能。程序启动后会有两个进程启动，并且其中之一占用CPU性能较高；程序目录会创建十六个文件，并会做重复的删除和重新创建的操作；观察任务管理器发现进程会自动重启，手动杀死进程后就会重生一个新的进程。\n\n拖进xdbg里观察符号，发现引入了ShellExcuteA这个函数，正好是启动进程函数，对这个函数下断点，发现确实断了下来，观察传参窗口。\n\n![一个病毒进程一个守护进程](https://s2.loli.net/2024/09/28/b2wUizNXsJ5Ehmf.png)\n\n第六个参数不同，对应的是lpParameters（传入进程的参数），一个是`working`,一个是`daemon restart`\n\n根据这个在控制台上运行加上参数working，发现只有一个工作进程，CPU占用100%，同理加上daemon restart，只有一个守护进程CPU占用不到1%。\n\n调试参数为working的进程，观察线程发现有16个线程运行同一个函数，刚好对应16个txt日志文件的输出！！！\n\n![image-20240810190419709](https://s2.loli.net/2024/09/28/FkLBbtXUmxfnaT4.png)\n\n于是进入线程入口开始分析，对所有可能的写入文件的windowsAPI下断，发现都没有断下来，于是向CreateFile等API下断，\n\n所有线程在CreateFileA上成功断下，观察传参确定这是对日志文件的操作函数\n\n![image-20240810192612468](https://s2.loli.net/2024/09/28/oxIwPOBdDgybNY7.png)\n\n有了这个依据，能确认的就是16个线程会循环通过CreateFileA打开文件，这可能是占用CPU的一个主要因素。但是跟之前运行的结果不同，调试发现，写入文件的API一直没有被调用，而正常运行的结果是，十六个文件会循环的做一个过程，文件被创建->文件被写入->文件被删除->新文件创建…。我通过加working参数运行，只会有一个循环过程，即不会有新文件诞生，文件内容也不会被修改。所以，十六个线程循环CreateFileA打开文件过程是无用功，只会徒增CPU负担！那么我们是不是可以HOOK CreateFileA这个函数，然后每个线程调用它的第二次的时候我们进行线程终止，是不是可以减少CPU的压力了呢？写份代码跑一下看看\n\n```C\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#pragma comment(lib,\"detours.lib\")\n#define _DEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\nDWORD tlsIndex;//tls索引\ntypedef BOOL(WINAPI* ShellExecuteExA_t)(SHELLEXECUTEINFOA*);\ntypedef HANDLE (WINAPI* CreateFileA_t)(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n);\n\nShellExecuteExA_t TrueShellExecuteExA = NULL;\nCreateFileA_t TrueCreateFileA = NULL;\n\nBOOL WINAPI HookedShellExecuteExA(SHELLEXECUTEINFOA* pExecInfo) {\n#if 1\n    //执行第一个ShellExecuteExA守护进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d\\nhProcess = %p\", Num, pExecInfo->hProcess);\n    if (Num == 0)\n    {\n        Num++;\n        return TrueShellExecuteExA(pExecInfo);\n    }\n    else\n    {\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#else\n    //执行第二个ShellExecuteExA病毒进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n\", Num, pExecInfo->hwnd);\n    if (Num == 0)\n    {\n        Num++;\n        DBGMGEBOX(\"[2]:当前线程ID：%d\", GetCurrentThreadId());\n        pExecInfo->lpFile = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt\";//修改参数导致重启失败;\n        return TrueShellExecuteExA(pExecInfo);\n\n    }\n    else\n    {\n\n        DBGMGEBOX(\"[1]:当前线程ID：%d\", GetCurrentThreadId());\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#endif\n}\nHANDLE WINAPI HookCreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n)\n{\n\n    //判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程\n    // 获取当前线程的TLS值\n    LPVOID tlsValue = TlsGetValue(tlsIndex);\n    \n    if (tlsValue == NULL)\n    {\n        // 第一次运行，设置TLS值\n#ifdef _DEBUG\n        DBGMGEBOX(\"放行\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        TlsSetValue(tlsIndex, (LPVOID)1);\n    }\n    else\n    {\n        // 不是第一次运行，终止线程\n#ifdef _DEBUG\n        DBGMGEBOX(\"终止\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        ExitThread(0);\n    }\n    return CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);\n}\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        /*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(\"shell32.dll\", \"ShellExecuteExA\");\n        DetourAttach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);*/\n\n        tlsIndex = TlsAlloc();//初始化TLS\n        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(\"kernelbase.dll\", \"CreateFileA\");\n        DetourAttach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n        \n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);\n        DetourDetach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n        TlsFree(tlsIndex);//清理TLS\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n\n```\n\n注入进去查看CPU，与不注入的CPU情况对比如图，进程CPU占比显著下降\n\n![image-20240810205144922](https://s2.loli.net/2024/09/28/wmA1DO7kn9MtcTs.png)![image-20240810205250729](https://s2.loli.net/2024/09/28/U6GK43jxaAC5RYB.png)\n\n现在我们能够确定，是这十六个线程循环打开文件（也可能做了其他的事情）占用CPU大量资源。但是直接线程退出的方式也会导致日志文件被删除，题目意思是说**在保持WorkingService.exe正常运行不崩溃、主体功能无损的前提下，使之占用CPU下降到平均5%以下，WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务**，现在直接退出线程的方式会导致日志文件删除过快，虽然写入了信息，但是根本没法看啊，所以我们为了日志文件更方便的浏览，应该在WriteFile之后保存文件。那我们得先hook一下删除文件的函数，看一下在哪调用的，然后选择过滤掉这个函数从而保存日志文件。\n\n尝试hook一下DeleteFileA这个函数\n\n![image-20240810215436792](https://s2.loli.net/2024/09/28/sBDwbkVQAa2S8Gt.png)\n\n发现没有被调用。\n\n翻阅了下CreateFileA的文档，找到dwFlagsAndAttributes这个参数，发现这个参数包含了`FILE_FLAG_DELETE_ON_CLOSE`这个属性，意思是**文件将在关闭所有句柄后立即删除**\n\n```c\nHANDLE CreateFileA(\n    LPCSTR lpFileName,    // 文件名\n    DWORD dwDesiredAccess, // 访问模式\n    DWORD dwShareMode,     // 共享模式\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes, // 安全属性\n    DWORD dwCreationDisposition, // 创建或打开文件的方式\n    DWORD dwFlagsAndAttributes, // 文件属性\n    HANDLE hTemplateFile // 模板文件句柄\n);\n```\n\n| **FILE_FLAG_DELETE_ON_CLOSE**0x04000000 | 文件将在关闭所有句柄后立即删除，其中包括指定的句柄和任何其他打开或重复的句柄。 |\n| --------------------------------------- | ------------------------------------------------------------ |\n\n因此，只要我们改了这个属性，日志文件就不会再被删除，写代码测试下\n\n```c\nHANDLE WINAPI HookCreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n)\n{\n    //缩小每个线程执行CreateFileA的次数，CPU降低到%5以下\n    // 获取当前线程的TLS值\n    LPVOID tlsValue = TlsGetValue(tlsIndex);\n    \n    if ((DWORD_PTR)tlsValue <= 0x10)\n    {\n#ifdef _KDEBUG\n        DBGMGEBOX(\"放行\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;\n        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + 1));\n    }\n    else\n    {\n#ifdef _KDEBUG\n        DBGMGEBOX(\"终止\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        ExitThread(0);\n    }\n    return TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);\n}\n\n```\n\n![image-20240810230358085](https://s2.loli.net/2024/09/28/uPOmgb63TQj2Me4.png)\n\n![image-20240810230525262](https://s2.loli.net/2024/09/28/FNUB9u7Zy8rI6V4.png)\n\n测试得到文件确实没有被删除，并且密文也成功写入文件，CPU占用也少于5%（峰值3%，最后趋近于0）\n\n到这工作进程已经差不多分析完了，但是别忘了还有一个守护进程，守护进程应该也算是正常功能的一部分，那我们现在要开始结合守护进程分析。根据之前分析得到工作进程启动是通过守护进程调用ShellExcuteExA来传入working参数实现的，而这个后面启动的进程才是我们应该去注入的。而且因为程序有循环自生自灭的一个功能，我们可能要考虑循环注入实现对所有工作进程的hook。首先考虑第一个问题，如何去注入ShellExcuteExA启动的工作进程，第一个方式是Hook ShellExcuteExA这个函数，在其启动前获取ShellExcuteExA返回值->进程句柄，然后通过进程句柄进行注入；第二个方式是编写一个辅助程序，循环对每一个WorkingService.exe进程进行注入，这个要考虑到hook是否会影响守护进程的正常功能。我想先试一下第二个方式，较为简单一点，先测试一下守护进程是否会调用CreateFileA函数，如果会的话，我们要进行一下过滤操作。Hook测试了下，守护进程先启动，然后是工作进程，但是迟迟没有调试弹窗出现，说明守护进程没有调用CreateFileA。\n\n![image-20240812004624693](https://s2.loli.net/2024/09/28/oAmOsiHqUhlrIkJ.png)\n\n因此，采用方式二，只要对所有WorkingService.exe进程进行注入，Hook CreateFileA函数即可在正常程序功能执行的情况下，降低CPU能耗，写一个程序测试一下\n\n```c\nint main() {\n    while (1)\n    {\n        int Num = 0;\n        ve  = GetPidByProcName(\"WorkingService.exe\");\n        if (!ve.empty())\n        {\n            printf(\"There are currently %d processes\\n\", ve.size());\n            //依次注入并用map标记是否被注入过\n            for (auto i : ve)\n            {\n                auto it = mp.find(i);\n                if (it == mp.end())//没有被注入过\n                {\n                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);\n                    if (InjectDll(hProcess, dllPath))\n                    {\n                        Num++;\n                        mp.insert({ i,true });\n                        printf(\"Inject  process Success!\\n\", Num);\n                    }\n                }\n                else //曾经注入过该进程\n                {\n                    printf(\"[%d] Has Been Injected\\n\",i);\n                    continue;\n                }\n            }\n        }\n        else\n        {\n            printf(\"Wating WorkingService.exe ...\\n\");\n        }\n        system(\"cls\");\n        //Sleep(200);\n    }\n    return 0;\n}\n```\n\n这里使用Vector去接受所有WorkingService.exe进程的pid，然后用Map去映射一个bool值来判断是否这个进程被注入过，程序运行起来发现CPU能耗还是100%,但是程序告诉我注入成功。???疑惑住了\n\n![image-20240812014325913](https://s2.loli.net/2024/09/28/zXdNPmZD3jQ1at5.png)\n\n因为之前注入的时候可以成功降低CPU能耗的，我很确信我的dll是没问题的，所以问题可能就是注入的方式了。考虑到之前注入使用工具注入，在进程启动的同时注入dll，而现在注入是在程序完全跑起来之后，所以怀疑是被下了钩子破坏了注入。在ARK工具里扫一下钩子看一眼。\n\n![image-20240812015018472](https://s2.loli.net/2024/09/28/OzKT7QSI3GeiDhJ.png)\n\n豁然开朗！第一个钩子勾住了NtProtectVirtualMemory函数，而我们注入模块的时候就会调用这个内核函数去修改内存权限，第二个钩子勾住了DbgUiRemoteBreakin函数，我也不知道这个函数是干什么的，问一下GPT得知\n\n`DbgUiRemoteBreakin`函数是一个Windows API函数，它的作用是向指定的进程发送一个远程调试器的断点请求。当这个函数被调用时，目标进程会触发一个断点异常（通常是访问违规异常），如果目标进程已经有一个调试器附加，那么调试器就会捕获这个异常并进行处理。\n\n这个函数通常用于以下情况：\n\n1. **附加调试器**：如果你想要附加一个调试器到一个正在运行的进程，你可以调用`DbgUiRemoteBreakin`来使进程触发断点，然后使用调试器来附加到该进程。\n2. **检测调试**：如果一个进程检测到自己被调试，它可以调用`DbgUiRemoteBreakin`来尝试断开任何远程调试器的连接。\n\n看来是能附加调试的，勾住这个来反调试，哇哦，不错的方式。但是我们就先不管它了，先成功注入dll再说。所以现在看来还得先还原NtProtectVirtualMemory函数取消钩子，再调用注入函数，修改一下代码跑一下发现日志文件不能循环写入，应该是线程都退出之后，进程并未停止，猜测是线程函数里有计数的东西，到某个值之后会通知进程结束，从而让守护进程再生工作进程，于是我改了一下hook代码，让线程终止16次后终止进程，从而实现日志文件循环再生。\n\n效果图：\n\n![image-20240812031842620](https://s2.loli.net/2024/09/28/b1VZLTpWGSKqERY.png)\n\n![image-20240812033834444](https://s2.loli.net/2024/09/28/RFMGyTspd8OEDfv.png)\n\n题目二的结果应该就是这样了，能保持写入日志文件功能的同时不破坏工作进程循环启动的机制，大功告成！！！\n\n附一份exe源码和一份dll源码\n\n```c\n//main.cpp\n#include <windows.h>\n#include <tlhelp32.h>\n#include <stdio.h>\n#include <vector>\n#include <map>\nchar dllPath[] = R\"(C:\\Users\\15386\\Desktop\\temp\\hookDll.dll)\";\nstd::vector<DWORD64>ve;\nstd::map<DWORD64, bool>mp;\nBYTE jmpBytes[] = {\n0xE9, 0xE0, 0x26, 0x16, 0x00\n};\nBYTE originBytes[] = {\n0x4C, 0x8B, 0xD1, 0xB8, 0x50, 0x00, 0x00, 0x00, 0xF6, 0x04, 0x25, 0x08, 0x03, 0xFE, 0x7F, 0x01,\n 0x75, 0x03, 0x0F, 0x05, 0xC3, 0xCD, 0x2E, 0xC3\n};\nstd::vector<DWORD64> GetPidByProcName(const char* processName) {\n    HANDLE hProcessSnap = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32 pe32 = { 0 };\n\n    std::vector<DWORD64> vec;\n    vec.clear();\n    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hProcessSnap == INVALID_HANDLE_VALUE) {\n        vec;\n    }\n\n    pe32.dwSize = sizeof(PROCESSENTRY32);\n\n    if (Process32First(hProcessSnap, &pe32)) {\n        do {\n            if (strcmp(pe32.szExeFile, processName) == 0) {\n                vec.push_back(pe32.th32ProcessID);\n            }\n        } while (Process32Next(hProcessSnap, &pe32));\n    }\n    CloseHandle(hProcessSnap);\n    return vec;\n}\n\nDWORD64 GetModuleBase(DWORD64 pid,const char* ModuleName)\n{\n    HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);\n    if (hModuleSnap != INVALID_HANDLE_VALUE) {\n        MODULEENTRY32 me32;\n        me32.dwSize = sizeof(MODULEENTRY32);\n        if (Module32First(hModuleSnap, &me32)) {\n            do {\n                if (_stricmp(me32.szModule, ModuleName) == 0) {\n                    return (DWORD64)me32.modBaseAddr;\n                }\n            } while (Module32Next(hModuleSnap, &me32));\n        }\n        CloseHandle(hModuleSnap);\n    }\n    return 0;\n}\n\nBOOL InjectDll(HANDLE hProcess, LPCSTR dllPath) {\n\n    LPVOID pRemoteDllPath = VirtualAllocEx(hProcess, NULL, strlen(dllPath) + 1, MEM_COMMIT, PAGE_READWRITE);\n    if (pRemoteDllPath == NULL) {\n        printf(\"VirtualAllocEx Failed:[%d]\\n\", GetLastError());\n        return FALSE;\n    }\n\n    if (!WriteProcessMemory(hProcess, pRemoteDllPath, dllPath, strlen(dllPath) + 1, NULL)) {\n        printf(\"WriteProcessMemory Failed:[%d]\\n\", GetLastError());\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    LPTHREAD_START_ROUTINE lpLoadLibrary = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA(\"kernel32.dll\"), \"LoadLibraryA\");\n    if (lpLoadLibrary == NULL) {\n        printf(\"GetProcAddress Failed:[%d]\\n\", GetLastError());\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, lpLoadLibrary, pRemoteDllPath, 0, NULL);\n    if (hThread == NULL) {\n        printf(\"CreateRemoteThread Failed:[%d]\\n\", GetLastError());\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    WaitForSingleObject(hThread, INFINITE);\n\n    DWORD dwExitCode;\n    if (GetExitCodeThread(hThread, &dwExitCode) && dwExitCode == 0) {\n        printf(\"LoadLibraryA Failed in remote process\\n\");\n        CloseHandle(hThread);\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    CloseHandle(hThread);\n    VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n\n    return TRUE;\n}\n\nBOOL RemoveHook(HANDLE hProcess,PVOID unHookAddr, BYTE* originBytes)\n{\n   PDWORD oldProtect = 0; \n   if (!WriteProcessMemory(hProcess, (PVOID)unHookAddr, originBytes, sizeof(originBytes), 0))\n   { \n       printf(\"RemoveHook Failed!!!: [%d]\\n\", GetLastError());\n       return FALSE;\n   }\n}\nint main() {\n    while (1)\n    {\n        int Num = 0;\n        ve  = GetPidByProcName(\"WorkingService.exe\");//获取所有进程pid\n        if (!ve.empty())\n        {\n            printf(\"There are currently %d processes\\n\", ve.size());\n            //依次注入并用map标记是否被注入过\n            for (auto i : ve)\n            {\n                auto it = mp.find(i);\n                if (it == mp.end())//没有被注入过\n                {\n                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);//要用管理员权限运行，要不然为返回空\n                    if (!hProcess) printf(\"OpenProcess Error:[%d]\", GetLastError());\n                    DWORD64 unHookAddr = GetModuleBase(i,\"ntdll.dll\") + 0xA0990;//NtProtectVirtualMemory地址，ntdll + 0xA0990\n                    if (RemoveHook(hProcess, (PVOID)unHookAddr, originBytes))//先取消NtProtectVirtualMemory钩子再注入\n                    {\n                        if (InjectDll(hProcess, dllPath))\n                        {\n                            Num++;\n                            mp.insert({ i,true });//注入成功后进行标记\n                            printf(\"Inject  process Success!\\n\", Num);\n                        }\n                    }\n                    \n                }\n                else  continue;//曾经注入过该进程\n            }\n        }\n        else printf(\"Wating WorkingService.exe ...\\n\");\n        Sleep(1000);\n        system(\"cls\");\n       \n    }\n    return 0;\n}\n\n```\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\nDWORD tlsIndex;//tls索引\ntypedef BOOL(WINAPI* ShellExecuteExA_t)(SHELLEXECUTEINFOA*);\ntypedef HANDLE (WINAPI* CreateFileA_t)(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n);\nShellExecuteExA_t TrueShellExecuteExA = NULL;\nCreateFileA_t TrueCreateFileA = NULL;\nBOOL WINAPI HookedShellExecuteExA(SHELLEXECUTEINFOA* pExecInfo) {\n#if 1\n    //执行第一个ShellExecuteExA守护进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d\\nhProcess = %p\", Num, pExecInfo->hProcess);\n    if (Num == 0)\n    {\n        Num++;\n        return TrueShellExecuteExA(pExecInfo);\n    }\n    else\n    {\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#else\n    //执行第二个ShellExecuteExA病毒进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n\", Num, pExecInfo->hwnd);\n    if (Num == 0)\n    {\n        Num++;\n        DBGMGEBOX(\"[2]:当前线程ID：%d\", GetCurrentThreadId());\n        pExecInfo->lpFile = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt\";//修改参数导致重启失败;\n        return TrueShellExecuteExA(pExecInfo);\n\n    }\n    else\n    {\n\n        DBGMGEBOX(\"[1]:当前线程ID：%d\", GetCurrentThreadId());\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#endif\n}\nHANDLE WINAPI HookCreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n)\n{\n\n    //判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程\n    // 获取当前线程的TLS值\n    LPVOID tlsValue = TlsGetValue(tlsIndex);\n    if ((DWORD_PTR)tlsValue <= 0x10)\n    {\n        // \n#ifdef _KDEBUG\n        DBGMGEBOX(\"放行\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;\n        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + 1));\n    }\n    else\n    {\n        static int Num = 0;//如果终止了十六个线程，再终止进程，使得守护线程再生工作进程\n        // 不是第一次运行，终止线程\n#ifdef _KDEBUG\n        DBGMGEBOX(\"终止\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        Num++;\n        ExitThread(0);\n        if (Num == 16) exit(0);\n    }\n    return TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);\n}\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        //ShellExecuteExA hook\n        /*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(\"shell32.dll\", \"ShellExecuteExA\");\n        DetourAttach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);*/\n\n        tlsIndex = TlsAlloc();//初始化TLS\n        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(\"kernelbase.dll\", \"CreateFileA\");\n        DetourAttach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n       \n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);\n        DetourDetach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n        TlsFree(tlsIndex);//清理TLS\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n\n```\n\n# （三）思路分享\n\n接着是第三题，要求是**WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务，完全替代WorkingService.exe写入同样的密文信息，且运行时平均占用CPU时间低于5%。（2分）**\n\n根据之前分析，现在一直的程序功能主要体现在，创建守护进程启动->启动工作进程->创建十六个线程->每个线程创建一个日志文件->向文件写入密文->进程退出->守护进程循环创建工作进程，大致功能应该就是这些，而现在要解决的问题就是日志文件名和日志密文是怎么产生的。\n\n在WriteFile下个断点看一眼密文的大致模样。\n\n![image-20240812044203214](https://s2.loli.net/2024/09/28/dfVolRruk8AU6aB.png)\n\n猜测有可能是base64加密，因为之前查看字符串有看到base64的码表，还是一个魔改码表，直接丢cyberchef试一下解密\n\n![image-20240812045110783](https://s2.loli.net/2024/09/28/yXH8frivnKMQUqw.png)\n\n![image-20240812045242653](https://s2.loli.net/2024/09/28/ly31BHiwdC76TVx.png)\n\n好熟悉的字符串，这不正是初赛题的明文嘛，这个明显就是base64加密明文了，但是还有一个疑问，就是不同的文件会打印出不同的密文，把十六个文件的密文提取出来对比一下\n\n```\n1 F2FU4Wht52lm+2dV4WFu 6128\n2 4WECF2ht52lm+2dV4WFu 20512\n2 4WECF2ht52lm+2dV4WFu 22060\n3 Fx9U4RY7ERcwDRkDFx84 22708\n4 Fx8CFxY7ERcwDRkD4WFu 25296\n5 Fx9U4RZt5xcwDRkDFx84 25376\n6 Fx8CFxY7ERcwDRkDFx84 25620\n3 Fx9U4RY7ERcwDRkDFx84 25756\n2 4WECF2ht52lm+2dV4WFu 26136\n3 Fx9U4RY7ERcwDRkDFx84 27704\n7 4R9U4RY7ERcwDWdV4WE4 27976\n8 4WECF2ht5xcwDRkDFx84 28380\n3 Fx9U4RY7ERcwDRkDFx84 28624\n9 Fx9U4RY7EWlm+xkDFx84 28764\n10 4WECFxY7ERcwDWdV4WFu 29904\n11 Fx9U4RY7ERcwDWdV4WE4 31648\n```\n\n对比发现十六个线程有十一个密文，16:11的不规则性我觉得甚至不止十一个，因为这个采样只是采取了一个进程创建的十六个线程，如果有更多进程可能就意味着更多种密文。\n\n根据base64编码规则，如果码表和明文都一致的话，那密文就只能有一个，说明每个线程的码表和明文至少有一个不一致。那现在只能继续分析他的加密方式，在现有的码表处下断追踪到加密函数\n\n![image-20240812073322391](https://s2.loli.net/2024/09/28/TAKD6kRUtW1MeN4.png)\n\n在内存窗口发现传入的第一个参数是一个字符串地址->c tc me an，貌似跟catchmeifyoucan明文很像，所以这是修改了明文，然后再通过正常的码表进行base64加密？提取出这个明文，试一下对着这个码表加密，对比运行后的密文就知道了，\n\n```c\n明文：0x15, 0x61, 0x02, 0x15, 0x68, 0x1B, 0x13, 0x69, 0x66, 0x79, 0x6F, 0x75, 0x63, 0x17, 0x18\n实际密文：F2ECF2g7EWlm+2dV4R84\n正常base64密文：F2ECF2g7EWlm+2dV4R84\n明文：0x63, 0x17, 0x74, 0x63, 0x1E, 0x6D, 0x65, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x61, 0x6E\n实际密文：4R9U4RZt5xcwDRkDF2Fu\n正常base64密文：4R9U4RZt5xcwDRkDF2Fu\n```\n\n对比了多组，确信了码表是对的`ABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuvQRSTUVWXYZabcdef`,但是调试这个加密的过程中发现，一个线程至少会有两组明文，上面就是出自同一个线程。并且这个函数加密后的密文跟实际文件密文不同，下面是提取的两组密文和实际文件密文\n\n```c\n//34288线程\n文件密文：4WFU4Wht52lm+2dV4WFu\n密文1   ：Fx8C4Wg7ERcwDWdV4WE4\n密文2   ：4WFUFxZt52lm+xkDFx9u\n```\n\n现在还有很多问题在里面，首先是明文为什么一个线程有两组，加密得到的两组密文跟文件密文有什么关系？两组密文实在是太奇怪了，我试着把他们联系起来，于是我将两组密文用base64还原得到明文也进行了对比，发现了一个惊喜。\n\n![image-20240812080716501](https://s2.loli.net/2024/09/28/sWh3rk2faJcuQdv.png)\n\n![image-20240812080739360](https://s2.loli.net/2024/09/28/wc2OH5ITbrkxGvf.png)\n\n这两个明文的有效字符组合起来刚好是catchmeifyoucan！！！ 接着就是其他无效字符了，提取出十六进制看看有没有联系\n\nFx8C4Wg7ERcwDWdV4WE4->**0x15**,**0x17**,**0x02**,0x63,0x68,**0x1b**,**0x13**,**0x1f**,**0x10**,**0x0f**,0x6f,0x75,0x63,0x61,**0x18**\n4WFUFxZt52lm+xkDFx9u->0x63,0x61,0x74,**0x15**,**0x1e**,0x6d,0x65,0x69,0x66,0x79,**0x19**,**0x03**,**0x15**,**0x17**,0x6e\n\n貌似没什么关系，考虑到多个文件的写入密文不同，继续提取其他线程的密文\n\n```c\n//14032 线程\n文件密文：Fx8CFxY7ERcwDRkDFx84\n密文1   ：Fx8C4Wg7ERcwDWdV4WE4\n密文2   ：4WFUFxZt52lm+xkDFx9u\n```\n\n拿这个线程的文件密文拿去解密，得到十六进制数组:**0x15,0x17,0x02,0x15,0x1e,0x1b,0x13,0x1f,0x10,0x0f,0x19,0x03,0x15,0x17,0x18**，刚好由34288线程的两组非可视字符十六进制组成。根据这个思路我把之前提取的密文进行了解密，发现线程之间的非字符不一定是成对的，但是非字符的十六进制跟所在索引是一定的，也就是说所有非可视字符的十六进制都是从上面这个数组里取，我试图多运行几遍进程反驳我这个猜想，因为这个十六进制数组并没有什么规律，但是运行结果都显示这个数组是一定的。\n\n所以现在可以确定的是，明文catchmeifyoucan会和这个数组以某种方式进行混合，最后组成真正的明文进行base64换表加密得到文件密文。现在就需要继续研究这个混合的方式，因为进程会启动十六个线程来写日志，而且在之前的观察中看到在CreateFileA函数之前，密文就已经储存在寄存器中，所以是CreateThread和CreateFileA函数之间进行了明文混合和base64加密，对这三个关键地方下断点调试\n\n![image-20240812095555791](https://s2.loli.net/2024/09/28/lfXZeF1toC4uWMv.png)\n\n```\n{\n0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18\n};\n```\n\n可以看到，第一个参数即为之前分析的十六进制数组的指针，做一层栈回溯找明文混合方式\n\n![image-20240812100645901](https://s2.loli.net/2024/09/28/vEOogFBebkxctzu.png)\n\n对base64的第一个参数位置（明文指针）下硬件访问断点，找到写入明文内存的位置\n\n![image-20240812101030609](https://s2.loli.net/2024/09/28/p7XneKRriqVYAfa.png)\n\n![image-20240812101825299](https://s2.loli.net/2024/09/28/lSrsHiDwkJXz7qn.png)\n\n明文进行了一个字节一个字节的写入，仔细看这段VM给的混淆汇编代码， 其实就是一个\n\n```assembly\nmov r8, qword ptr ds:[rdi]\nmov r9b, byte ptr ds:[rdi+0x8]\nmov byte ptr ds:[r8], r9b\n```\n\n那就意味着我们要追踪[RDI]看看是怎么来的，由于这段代码已经被VM了，控制流混淆导致根本没法手动追踪，用xdbg自动追踪功能打印日志看看\n\n![image-20240813181835965](https://s2.loli.net/2024/09/28/ND8f31oAJzTmvKn.png)\n\n足足有30000行汇编\n\n![image-20240813181952050](https://s2.loli.net/2024/09/28/xApF4h8kodHBqZT.png)\n\n往上回溯第一层发现[rdi]从RFLAGS寄存器来的，如果真要手动回溯的话，就要回溯十多个标志位，手动分析逻辑写源码不大现实（不禁再次感叹VM的强大）\n\n根据题目要求\n\n**提取WorkingService.exe的主体功能可以以二进制指令块的形式，也可以以自写源码的形式**\n\n可以考虑提取二进制指令块的形式写功能，那我们就可以把这段追踪得来的汇编代码转成ShellCode写入到自己程序的内存里，然后通过VirtualProtect修改成可执行的运行一下从而提取这份功能。只要获取这份功能就可以完成第三问了，感觉工程量挺大的就不写了。\n\n# 程序分析总结\n\n启动程序后会先默认按照参数daemon restart启动一个守护进程，守护进程通过设置参数working和调用ShellExcuteA来启动工作进程，工作进程会创建16个线程来循环调用CreateFileA保持文件存在（第二问需要通过修改参数实现相同功能并减少CPU占用率）并调用一次WriteFile来写入密文，密文由两个明文和两种加密组成，明文是catchmeifyoucan字符串和{\n0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18\n}数组，第一种加密是某种替换加密，第二种加密是base64变表加密。\n","source":"_posts/2023腾讯游戏安全PC决赛.md","raw":"---\ntitle: 2023腾讯游戏安全PC决赛\ndate: 2024/8/13\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png\nthumbnail: https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n\n---\n\n最近一直在做往年腾讯游戏安全PC端的复现，但是2023年决赛的题做到第三问就开始有点做不动了，想在网上找找题解但是并没有找到，于是便想分享一下自己的解题经验和第三问的思路。鉴于知识的局限性，文中可能存在疏漏或不足之处，如果发现任何错误或不准确之处，请不吝赐教。<!-- more -->\n\n# 题目\n\n![image-20240813190641633](https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png)\n\n\n\n# （一）解题过程\n\n第一问让我们杀死进程，可以尝试根据windowsAPI提供的TerminateProcess函数去停止进程，写份代码测试下\n\n```c\nbool KillProcessByName(const char* processName) {\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (Process32First(hSnapshot, &pe)) {\n        do {\n            if (strcmp(pe.szExeFile, processName) == 0) {\n                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);\n                if (hProcess) {\n                    TerminateProcess(hProcess, 0);\n                    CloseHandle(hProcess);\n                    Num++;\n                    printf(\"Kill suc:[%d]\\n\", Num);\n                }\n            }\n        } while (Process32Next(hSnapshot, &pe));\n    }\n\n    CloseHandle(hSnapshot);\n    return true;\n}\nint main()\n{\n    while(1)\n    {\n        KillProcessByName(\"WorkingService.exe\");\n    }\n    return 0;\n}\n```\n\n以管理员身份启动测试\n\n启动前：\n\n![image-20240813191830392](https://s2.loli.net/2024/09/28/j5DheNQGPYqUvWr.png)\n\n启动后\n\n![image-20240813192038178](https://s2.loli.net/2024/09/28/yOgekiKJVdIvBNG.png)\n\n![image-20240813191935364](https://s2.loli.net/2024/09/28/nxAUCqMtVE3oH7g.png)\n\n\n\n# （二）解题过程\n\n先DIE查壳发现有VMP，只能动调入手，先观察程序功能。程序启动后会有两个进程启动，并且其中之一占用CPU性能较高；程序目录会创建十六个文件，并会做重复的删除和重新创建的操作；观察任务管理器发现进程会自动重启，手动杀死进程后就会重生一个新的进程。\n\n拖进xdbg里观察符号，发现引入了ShellExcuteA这个函数，正好是启动进程函数，对这个函数下断点，发现确实断了下来，观察传参窗口。\n\n![一个病毒进程一个守护进程](https://s2.loli.net/2024/09/28/b2wUizNXsJ5Ehmf.png)\n\n第六个参数不同，对应的是lpParameters（传入进程的参数），一个是`working`,一个是`daemon restart`\n\n根据这个在控制台上运行加上参数working，发现只有一个工作进程，CPU占用100%，同理加上daemon restart，只有一个守护进程CPU占用不到1%。\n\n调试参数为working的进程，观察线程发现有16个线程运行同一个函数，刚好对应16个txt日志文件的输出！！！\n\n![image-20240810190419709](https://s2.loli.net/2024/09/28/FkLBbtXUmxfnaT4.png)\n\n于是进入线程入口开始分析，对所有可能的写入文件的windowsAPI下断，发现都没有断下来，于是向CreateFile等API下断，\n\n所有线程在CreateFileA上成功断下，观察传参确定这是对日志文件的操作函数\n\n![image-20240810192612468](https://s2.loli.net/2024/09/28/oxIwPOBdDgybNY7.png)\n\n有了这个依据，能确认的就是16个线程会循环通过CreateFileA打开文件，这可能是占用CPU的一个主要因素。但是跟之前运行的结果不同，调试发现，写入文件的API一直没有被调用，而正常运行的结果是，十六个文件会循环的做一个过程，文件被创建->文件被写入->文件被删除->新文件创建…。我通过加working参数运行，只会有一个循环过程，即不会有新文件诞生，文件内容也不会被修改。所以，十六个线程循环CreateFileA打开文件过程是无用功，只会徒增CPU负担！那么我们是不是可以HOOK CreateFileA这个函数，然后每个线程调用它的第二次的时候我们进行线程终止，是不是可以减少CPU的压力了呢？写份代码跑一下看看\n\n```C\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#pragma comment(lib,\"detours.lib\")\n#define _DEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\nDWORD tlsIndex;//tls索引\ntypedef BOOL(WINAPI* ShellExecuteExA_t)(SHELLEXECUTEINFOA*);\ntypedef HANDLE (WINAPI* CreateFileA_t)(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n);\n\nShellExecuteExA_t TrueShellExecuteExA = NULL;\nCreateFileA_t TrueCreateFileA = NULL;\n\nBOOL WINAPI HookedShellExecuteExA(SHELLEXECUTEINFOA* pExecInfo) {\n#if 1\n    //执行第一个ShellExecuteExA守护进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d\\nhProcess = %p\", Num, pExecInfo->hProcess);\n    if (Num == 0)\n    {\n        Num++;\n        return TrueShellExecuteExA(pExecInfo);\n    }\n    else\n    {\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#else\n    //执行第二个ShellExecuteExA病毒进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n\", Num, pExecInfo->hwnd);\n    if (Num == 0)\n    {\n        Num++;\n        DBGMGEBOX(\"[2]:当前线程ID：%d\", GetCurrentThreadId());\n        pExecInfo->lpFile = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt\";//修改参数导致重启失败;\n        return TrueShellExecuteExA(pExecInfo);\n\n    }\n    else\n    {\n\n        DBGMGEBOX(\"[1]:当前线程ID：%d\", GetCurrentThreadId());\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#endif\n}\nHANDLE WINAPI HookCreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n)\n{\n\n    //判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程\n    // 获取当前线程的TLS值\n    LPVOID tlsValue = TlsGetValue(tlsIndex);\n    \n    if (tlsValue == NULL)\n    {\n        // 第一次运行，设置TLS值\n#ifdef _DEBUG\n        DBGMGEBOX(\"放行\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        TlsSetValue(tlsIndex, (LPVOID)1);\n    }\n    else\n    {\n        // 不是第一次运行，终止线程\n#ifdef _DEBUG\n        DBGMGEBOX(\"终止\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        ExitThread(0);\n    }\n    return CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);\n}\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        /*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(\"shell32.dll\", \"ShellExecuteExA\");\n        DetourAttach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);*/\n\n        tlsIndex = TlsAlloc();//初始化TLS\n        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(\"kernelbase.dll\", \"CreateFileA\");\n        DetourAttach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n        \n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);\n        DetourDetach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n        TlsFree(tlsIndex);//清理TLS\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n\n```\n\n注入进去查看CPU，与不注入的CPU情况对比如图，进程CPU占比显著下降\n\n![image-20240810205144922](https://s2.loli.net/2024/09/28/wmA1DO7kn9MtcTs.png)![image-20240810205250729](https://s2.loli.net/2024/09/28/U6GK43jxaAC5RYB.png)\n\n现在我们能够确定，是这十六个线程循环打开文件（也可能做了其他的事情）占用CPU大量资源。但是直接线程退出的方式也会导致日志文件被删除，题目意思是说**在保持WorkingService.exe正常运行不崩溃、主体功能无损的前提下，使之占用CPU下降到平均5%以下，WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务**，现在直接退出线程的方式会导致日志文件删除过快，虽然写入了信息，但是根本没法看啊，所以我们为了日志文件更方便的浏览，应该在WriteFile之后保存文件。那我们得先hook一下删除文件的函数，看一下在哪调用的，然后选择过滤掉这个函数从而保存日志文件。\n\n尝试hook一下DeleteFileA这个函数\n\n![image-20240810215436792](https://s2.loli.net/2024/09/28/sBDwbkVQAa2S8Gt.png)\n\n发现没有被调用。\n\n翻阅了下CreateFileA的文档，找到dwFlagsAndAttributes这个参数，发现这个参数包含了`FILE_FLAG_DELETE_ON_CLOSE`这个属性，意思是**文件将在关闭所有句柄后立即删除**\n\n```c\nHANDLE CreateFileA(\n    LPCSTR lpFileName,    // 文件名\n    DWORD dwDesiredAccess, // 访问模式\n    DWORD dwShareMode,     // 共享模式\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes, // 安全属性\n    DWORD dwCreationDisposition, // 创建或打开文件的方式\n    DWORD dwFlagsAndAttributes, // 文件属性\n    HANDLE hTemplateFile // 模板文件句柄\n);\n```\n\n| **FILE_FLAG_DELETE_ON_CLOSE**0x04000000 | 文件将在关闭所有句柄后立即删除，其中包括指定的句柄和任何其他打开或重复的句柄。 |\n| --------------------------------------- | ------------------------------------------------------------ |\n\n因此，只要我们改了这个属性，日志文件就不会再被删除，写代码测试下\n\n```c\nHANDLE WINAPI HookCreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n)\n{\n    //缩小每个线程执行CreateFileA的次数，CPU降低到%5以下\n    // 获取当前线程的TLS值\n    LPVOID tlsValue = TlsGetValue(tlsIndex);\n    \n    if ((DWORD_PTR)tlsValue <= 0x10)\n    {\n#ifdef _KDEBUG\n        DBGMGEBOX(\"放行\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;\n        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + 1));\n    }\n    else\n    {\n#ifdef _KDEBUG\n        DBGMGEBOX(\"终止\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        ExitThread(0);\n    }\n    return TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);\n}\n\n```\n\n![image-20240810230358085](https://s2.loli.net/2024/09/28/uPOmgb63TQj2Me4.png)\n\n![image-20240810230525262](https://s2.loli.net/2024/09/28/FNUB9u7Zy8rI6V4.png)\n\n测试得到文件确实没有被删除，并且密文也成功写入文件，CPU占用也少于5%（峰值3%，最后趋近于0）\n\n到这工作进程已经差不多分析完了，但是别忘了还有一个守护进程，守护进程应该也算是正常功能的一部分，那我们现在要开始结合守护进程分析。根据之前分析得到工作进程启动是通过守护进程调用ShellExcuteExA来传入working参数实现的，而这个后面启动的进程才是我们应该去注入的。而且因为程序有循环自生自灭的一个功能，我们可能要考虑循环注入实现对所有工作进程的hook。首先考虑第一个问题，如何去注入ShellExcuteExA启动的工作进程，第一个方式是Hook ShellExcuteExA这个函数，在其启动前获取ShellExcuteExA返回值->进程句柄，然后通过进程句柄进行注入；第二个方式是编写一个辅助程序，循环对每一个WorkingService.exe进程进行注入，这个要考虑到hook是否会影响守护进程的正常功能。我想先试一下第二个方式，较为简单一点，先测试一下守护进程是否会调用CreateFileA函数，如果会的话，我们要进行一下过滤操作。Hook测试了下，守护进程先启动，然后是工作进程，但是迟迟没有调试弹窗出现，说明守护进程没有调用CreateFileA。\n\n![image-20240812004624693](https://s2.loli.net/2024/09/28/oAmOsiHqUhlrIkJ.png)\n\n因此，采用方式二，只要对所有WorkingService.exe进程进行注入，Hook CreateFileA函数即可在正常程序功能执行的情况下，降低CPU能耗，写一个程序测试一下\n\n```c\nint main() {\n    while (1)\n    {\n        int Num = 0;\n        ve  = GetPidByProcName(\"WorkingService.exe\");\n        if (!ve.empty())\n        {\n            printf(\"There are currently %d processes\\n\", ve.size());\n            //依次注入并用map标记是否被注入过\n            for (auto i : ve)\n            {\n                auto it = mp.find(i);\n                if (it == mp.end())//没有被注入过\n                {\n                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);\n                    if (InjectDll(hProcess, dllPath))\n                    {\n                        Num++;\n                        mp.insert({ i,true });\n                        printf(\"Inject  process Success!\\n\", Num);\n                    }\n                }\n                else //曾经注入过该进程\n                {\n                    printf(\"[%d] Has Been Injected\\n\",i);\n                    continue;\n                }\n            }\n        }\n        else\n        {\n            printf(\"Wating WorkingService.exe ...\\n\");\n        }\n        system(\"cls\");\n        //Sleep(200);\n    }\n    return 0;\n}\n```\n\n这里使用Vector去接受所有WorkingService.exe进程的pid，然后用Map去映射一个bool值来判断是否这个进程被注入过，程序运行起来发现CPU能耗还是100%,但是程序告诉我注入成功。???疑惑住了\n\n![image-20240812014325913](https://s2.loli.net/2024/09/28/zXdNPmZD3jQ1at5.png)\n\n因为之前注入的时候可以成功降低CPU能耗的，我很确信我的dll是没问题的，所以问题可能就是注入的方式了。考虑到之前注入使用工具注入，在进程启动的同时注入dll，而现在注入是在程序完全跑起来之后，所以怀疑是被下了钩子破坏了注入。在ARK工具里扫一下钩子看一眼。\n\n![image-20240812015018472](https://s2.loli.net/2024/09/28/OzKT7QSI3GeiDhJ.png)\n\n豁然开朗！第一个钩子勾住了NtProtectVirtualMemory函数，而我们注入模块的时候就会调用这个内核函数去修改内存权限，第二个钩子勾住了DbgUiRemoteBreakin函数，我也不知道这个函数是干什么的，问一下GPT得知\n\n`DbgUiRemoteBreakin`函数是一个Windows API函数，它的作用是向指定的进程发送一个远程调试器的断点请求。当这个函数被调用时，目标进程会触发一个断点异常（通常是访问违规异常），如果目标进程已经有一个调试器附加，那么调试器就会捕获这个异常并进行处理。\n\n这个函数通常用于以下情况：\n\n1. **附加调试器**：如果你想要附加一个调试器到一个正在运行的进程，你可以调用`DbgUiRemoteBreakin`来使进程触发断点，然后使用调试器来附加到该进程。\n2. **检测调试**：如果一个进程检测到自己被调试，它可以调用`DbgUiRemoteBreakin`来尝试断开任何远程调试器的连接。\n\n看来是能附加调试的，勾住这个来反调试，哇哦，不错的方式。但是我们就先不管它了，先成功注入dll再说。所以现在看来还得先还原NtProtectVirtualMemory函数取消钩子，再调用注入函数，修改一下代码跑一下发现日志文件不能循环写入，应该是线程都退出之后，进程并未停止，猜测是线程函数里有计数的东西，到某个值之后会通知进程结束，从而让守护进程再生工作进程，于是我改了一下hook代码，让线程终止16次后终止进程，从而实现日志文件循环再生。\n\n效果图：\n\n![image-20240812031842620](https://s2.loli.net/2024/09/28/b1VZLTpWGSKqERY.png)\n\n![image-20240812033834444](https://s2.loli.net/2024/09/28/RFMGyTspd8OEDfv.png)\n\n题目二的结果应该就是这样了，能保持写入日志文件功能的同时不破坏工作进程循环启动的机制，大功告成！！！\n\n附一份exe源码和一份dll源码\n\n```c\n//main.cpp\n#include <windows.h>\n#include <tlhelp32.h>\n#include <stdio.h>\n#include <vector>\n#include <map>\nchar dllPath[] = R\"(C:\\Users\\15386\\Desktop\\temp\\hookDll.dll)\";\nstd::vector<DWORD64>ve;\nstd::map<DWORD64, bool>mp;\nBYTE jmpBytes[] = {\n0xE9, 0xE0, 0x26, 0x16, 0x00\n};\nBYTE originBytes[] = {\n0x4C, 0x8B, 0xD1, 0xB8, 0x50, 0x00, 0x00, 0x00, 0xF6, 0x04, 0x25, 0x08, 0x03, 0xFE, 0x7F, 0x01,\n 0x75, 0x03, 0x0F, 0x05, 0xC3, 0xCD, 0x2E, 0xC3\n};\nstd::vector<DWORD64> GetPidByProcName(const char* processName) {\n    HANDLE hProcessSnap = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32 pe32 = { 0 };\n\n    std::vector<DWORD64> vec;\n    vec.clear();\n    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hProcessSnap == INVALID_HANDLE_VALUE) {\n        vec;\n    }\n\n    pe32.dwSize = sizeof(PROCESSENTRY32);\n\n    if (Process32First(hProcessSnap, &pe32)) {\n        do {\n            if (strcmp(pe32.szExeFile, processName) == 0) {\n                vec.push_back(pe32.th32ProcessID);\n            }\n        } while (Process32Next(hProcessSnap, &pe32));\n    }\n    CloseHandle(hProcessSnap);\n    return vec;\n}\n\nDWORD64 GetModuleBase(DWORD64 pid,const char* ModuleName)\n{\n    HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);\n    if (hModuleSnap != INVALID_HANDLE_VALUE) {\n        MODULEENTRY32 me32;\n        me32.dwSize = sizeof(MODULEENTRY32);\n        if (Module32First(hModuleSnap, &me32)) {\n            do {\n                if (_stricmp(me32.szModule, ModuleName) == 0) {\n                    return (DWORD64)me32.modBaseAddr;\n                }\n            } while (Module32Next(hModuleSnap, &me32));\n        }\n        CloseHandle(hModuleSnap);\n    }\n    return 0;\n}\n\nBOOL InjectDll(HANDLE hProcess, LPCSTR dllPath) {\n\n    LPVOID pRemoteDllPath = VirtualAllocEx(hProcess, NULL, strlen(dllPath) + 1, MEM_COMMIT, PAGE_READWRITE);\n    if (pRemoteDllPath == NULL) {\n        printf(\"VirtualAllocEx Failed:[%d]\\n\", GetLastError());\n        return FALSE;\n    }\n\n    if (!WriteProcessMemory(hProcess, pRemoteDllPath, dllPath, strlen(dllPath) + 1, NULL)) {\n        printf(\"WriteProcessMemory Failed:[%d]\\n\", GetLastError());\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    LPTHREAD_START_ROUTINE lpLoadLibrary = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA(\"kernel32.dll\"), \"LoadLibraryA\");\n    if (lpLoadLibrary == NULL) {\n        printf(\"GetProcAddress Failed:[%d]\\n\", GetLastError());\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, lpLoadLibrary, pRemoteDllPath, 0, NULL);\n    if (hThread == NULL) {\n        printf(\"CreateRemoteThread Failed:[%d]\\n\", GetLastError());\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    WaitForSingleObject(hThread, INFINITE);\n\n    DWORD dwExitCode;\n    if (GetExitCodeThread(hThread, &dwExitCode) && dwExitCode == 0) {\n        printf(\"LoadLibraryA Failed in remote process\\n\");\n        CloseHandle(hThread);\n        VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n        return FALSE;\n    }\n\n    CloseHandle(hThread);\n    VirtualFreeEx(hProcess, pRemoteDllPath, 0, MEM_RELEASE);\n\n    return TRUE;\n}\n\nBOOL RemoveHook(HANDLE hProcess,PVOID unHookAddr, BYTE* originBytes)\n{\n   PDWORD oldProtect = 0; \n   if (!WriteProcessMemory(hProcess, (PVOID)unHookAddr, originBytes, sizeof(originBytes), 0))\n   { \n       printf(\"RemoveHook Failed!!!: [%d]\\n\", GetLastError());\n       return FALSE;\n   }\n}\nint main() {\n    while (1)\n    {\n        int Num = 0;\n        ve  = GetPidByProcName(\"WorkingService.exe\");//获取所有进程pid\n        if (!ve.empty())\n        {\n            printf(\"There are currently %d processes\\n\", ve.size());\n            //依次注入并用map标记是否被注入过\n            for (auto i : ve)\n            {\n                auto it = mp.find(i);\n                if (it == mp.end())//没有被注入过\n                {\n                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);//要用管理员权限运行，要不然为返回空\n                    if (!hProcess) printf(\"OpenProcess Error:[%d]\", GetLastError());\n                    DWORD64 unHookAddr = GetModuleBase(i,\"ntdll.dll\") + 0xA0990;//NtProtectVirtualMemory地址，ntdll + 0xA0990\n                    if (RemoveHook(hProcess, (PVOID)unHookAddr, originBytes))//先取消NtProtectVirtualMemory钩子再注入\n                    {\n                        if (InjectDll(hProcess, dllPath))\n                        {\n                            Num++;\n                            mp.insert({ i,true });//注入成功后进行标记\n                            printf(\"Inject  process Success!\\n\", Num);\n                        }\n                    }\n                    \n                }\n                else  continue;//曾经注入过该进程\n            }\n        }\n        else printf(\"Wating WorkingService.exe ...\\n\");\n        Sleep(1000);\n        system(\"cls\");\n       \n    }\n    return 0;\n}\n\n```\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\nDWORD tlsIndex;//tls索引\ntypedef BOOL(WINAPI* ShellExecuteExA_t)(SHELLEXECUTEINFOA*);\ntypedef HANDLE (WINAPI* CreateFileA_t)(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n);\nShellExecuteExA_t TrueShellExecuteExA = NULL;\nCreateFileA_t TrueCreateFileA = NULL;\nBOOL WINAPI HookedShellExecuteExA(SHELLEXECUTEINFOA* pExecInfo) {\n#if 1\n    //执行第一个ShellExecuteExA守护进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d\\nhProcess = %p\", Num, pExecInfo->hProcess);\n    if (Num == 0)\n    {\n        Num++;\n        return TrueShellExecuteExA(pExecInfo);\n    }\n    else\n    {\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#else\n    //执行第二个ShellExecuteExA病毒进程\n    static int Num = 0;\n    DBGMGEBOX(\"ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n\", Num, pExecInfo->hwnd);\n    if (Num == 0)\n    {\n        Num++;\n        DBGMGEBOX(\"[2]:当前线程ID：%d\", GetCurrentThreadId());\n        pExecInfo->lpFile = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt\";//修改参数导致重启失败;\n        return TrueShellExecuteExA(pExecInfo);\n\n    }\n    else\n    {\n\n        DBGMGEBOX(\"[1]:当前线程ID：%d\", GetCurrentThreadId());\n        return TrueShellExecuteExA(pExecInfo);\n    }\n#endif\n}\nHANDLE WINAPI HookCreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n)\n{\n\n    //判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程\n    // 获取当前线程的TLS值\n    LPVOID tlsValue = TlsGetValue(tlsIndex);\n    if ((DWORD_PTR)tlsValue <= 0x10)\n    {\n        // \n#ifdef _KDEBUG\n        DBGMGEBOX(\"放行\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;\n        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + 1));\n    }\n    else\n    {\n        static int Num = 0;//如果终止了十六个线程，再终止进程，使得守护线程再生工作进程\n        // 不是第一次运行，终止线程\n#ifdef _KDEBUG\n        DBGMGEBOX(\"终止\\nlpFileName:%s\\n\", lpFileName);\n#endif \n        Num++;\n        ExitThread(0);\n        if (Num == 16) exit(0);\n    }\n    return TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);\n}\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        //ShellExecuteExA hook\n        /*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(\"shell32.dll\", \"ShellExecuteExA\");\n        DetourAttach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);*/\n\n        tlsIndex = TlsAlloc();//初始化TLS\n        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(\"kernelbase.dll\", \"CreateFileA\");\n        DetourAttach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n       \n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueShellExecuteExA, HookedShellExecuteExA);\n        DetourDetach(&(PVOID&)TrueCreateFileA, HookCreateFileA);\n        TlsFree(tlsIndex);//清理TLS\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n\n```\n\n# （三）思路分享\n\n接着是第三题，要求是**WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务，完全替代WorkingService.exe写入同样的密文信息，且运行时平均占用CPU时间低于5%。（2分）**\n\n根据之前分析，现在一直的程序功能主要体现在，创建守护进程启动->启动工作进程->创建十六个线程->每个线程创建一个日志文件->向文件写入密文->进程退出->守护进程循环创建工作进程，大致功能应该就是这些，而现在要解决的问题就是日志文件名和日志密文是怎么产生的。\n\n在WriteFile下个断点看一眼密文的大致模样。\n\n![image-20240812044203214](https://s2.loli.net/2024/09/28/dfVolRruk8AU6aB.png)\n\n猜测有可能是base64加密，因为之前查看字符串有看到base64的码表，还是一个魔改码表，直接丢cyberchef试一下解密\n\n![image-20240812045110783](https://s2.loli.net/2024/09/28/yXH8frivnKMQUqw.png)\n\n![image-20240812045242653](https://s2.loli.net/2024/09/28/ly31BHiwdC76TVx.png)\n\n好熟悉的字符串，这不正是初赛题的明文嘛，这个明显就是base64加密明文了，但是还有一个疑问，就是不同的文件会打印出不同的密文，把十六个文件的密文提取出来对比一下\n\n```\n1 F2FU4Wht52lm+2dV4WFu 6128\n2 4WECF2ht52lm+2dV4WFu 20512\n2 4WECF2ht52lm+2dV4WFu 22060\n3 Fx9U4RY7ERcwDRkDFx84 22708\n4 Fx8CFxY7ERcwDRkD4WFu 25296\n5 Fx9U4RZt5xcwDRkDFx84 25376\n6 Fx8CFxY7ERcwDRkDFx84 25620\n3 Fx9U4RY7ERcwDRkDFx84 25756\n2 4WECF2ht52lm+2dV4WFu 26136\n3 Fx9U4RY7ERcwDRkDFx84 27704\n7 4R9U4RY7ERcwDWdV4WE4 27976\n8 4WECF2ht5xcwDRkDFx84 28380\n3 Fx9U4RY7ERcwDRkDFx84 28624\n9 Fx9U4RY7EWlm+xkDFx84 28764\n10 4WECFxY7ERcwDWdV4WFu 29904\n11 Fx9U4RY7ERcwDWdV4WE4 31648\n```\n\n对比发现十六个线程有十一个密文，16:11的不规则性我觉得甚至不止十一个，因为这个采样只是采取了一个进程创建的十六个线程，如果有更多进程可能就意味着更多种密文。\n\n根据base64编码规则，如果码表和明文都一致的话，那密文就只能有一个，说明每个线程的码表和明文至少有一个不一致。那现在只能继续分析他的加密方式，在现有的码表处下断追踪到加密函数\n\n![image-20240812073322391](https://s2.loli.net/2024/09/28/TAKD6kRUtW1MeN4.png)\n\n在内存窗口发现传入的第一个参数是一个字符串地址->c tc me an，貌似跟catchmeifyoucan明文很像，所以这是修改了明文，然后再通过正常的码表进行base64加密？提取出这个明文，试一下对着这个码表加密，对比运行后的密文就知道了，\n\n```c\n明文：0x15, 0x61, 0x02, 0x15, 0x68, 0x1B, 0x13, 0x69, 0x66, 0x79, 0x6F, 0x75, 0x63, 0x17, 0x18\n实际密文：F2ECF2g7EWlm+2dV4R84\n正常base64密文：F2ECF2g7EWlm+2dV4R84\n明文：0x63, 0x17, 0x74, 0x63, 0x1E, 0x6D, 0x65, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x61, 0x6E\n实际密文：4R9U4RZt5xcwDRkDF2Fu\n正常base64密文：4R9U4RZt5xcwDRkDF2Fu\n```\n\n对比了多组，确信了码表是对的`ABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuvQRSTUVWXYZabcdef`,但是调试这个加密的过程中发现，一个线程至少会有两组明文，上面就是出自同一个线程。并且这个函数加密后的密文跟实际文件密文不同，下面是提取的两组密文和实际文件密文\n\n```c\n//34288线程\n文件密文：4WFU4Wht52lm+2dV4WFu\n密文1   ：Fx8C4Wg7ERcwDWdV4WE4\n密文2   ：4WFUFxZt52lm+xkDFx9u\n```\n\n现在还有很多问题在里面，首先是明文为什么一个线程有两组，加密得到的两组密文跟文件密文有什么关系？两组密文实在是太奇怪了，我试着把他们联系起来，于是我将两组密文用base64还原得到明文也进行了对比，发现了一个惊喜。\n\n![image-20240812080716501](https://s2.loli.net/2024/09/28/sWh3rk2faJcuQdv.png)\n\n![image-20240812080739360](https://s2.loli.net/2024/09/28/wc2OH5ITbrkxGvf.png)\n\n这两个明文的有效字符组合起来刚好是catchmeifyoucan！！！ 接着就是其他无效字符了，提取出十六进制看看有没有联系\n\nFx8C4Wg7ERcwDWdV4WE4->**0x15**,**0x17**,**0x02**,0x63,0x68,**0x1b**,**0x13**,**0x1f**,**0x10**,**0x0f**,0x6f,0x75,0x63,0x61,**0x18**\n4WFUFxZt52lm+xkDFx9u->0x63,0x61,0x74,**0x15**,**0x1e**,0x6d,0x65,0x69,0x66,0x79,**0x19**,**0x03**,**0x15**,**0x17**,0x6e\n\n貌似没什么关系，考虑到多个文件的写入密文不同，继续提取其他线程的密文\n\n```c\n//14032 线程\n文件密文：Fx8CFxY7ERcwDRkDFx84\n密文1   ：Fx8C4Wg7ERcwDWdV4WE4\n密文2   ：4WFUFxZt52lm+xkDFx9u\n```\n\n拿这个线程的文件密文拿去解密，得到十六进制数组:**0x15,0x17,0x02,0x15,0x1e,0x1b,0x13,0x1f,0x10,0x0f,0x19,0x03,0x15,0x17,0x18**，刚好由34288线程的两组非可视字符十六进制组成。根据这个思路我把之前提取的密文进行了解密，发现线程之间的非字符不一定是成对的，但是非字符的十六进制跟所在索引是一定的，也就是说所有非可视字符的十六进制都是从上面这个数组里取，我试图多运行几遍进程反驳我这个猜想，因为这个十六进制数组并没有什么规律，但是运行结果都显示这个数组是一定的。\n\n所以现在可以确定的是，明文catchmeifyoucan会和这个数组以某种方式进行混合，最后组成真正的明文进行base64换表加密得到文件密文。现在就需要继续研究这个混合的方式，因为进程会启动十六个线程来写日志，而且在之前的观察中看到在CreateFileA函数之前，密文就已经储存在寄存器中，所以是CreateThread和CreateFileA函数之间进行了明文混合和base64加密，对这三个关键地方下断点调试\n\n![image-20240812095555791](https://s2.loli.net/2024/09/28/lfXZeF1toC4uWMv.png)\n\n```\n{\n0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18\n};\n```\n\n可以看到，第一个参数即为之前分析的十六进制数组的指针，做一层栈回溯找明文混合方式\n\n![image-20240812100645901](https://s2.loli.net/2024/09/28/vEOogFBebkxctzu.png)\n\n对base64的第一个参数位置（明文指针）下硬件访问断点，找到写入明文内存的位置\n\n![image-20240812101030609](https://s2.loli.net/2024/09/28/p7XneKRriqVYAfa.png)\n\n![image-20240812101825299](https://s2.loli.net/2024/09/28/lSrsHiDwkJXz7qn.png)\n\n明文进行了一个字节一个字节的写入，仔细看这段VM给的混淆汇编代码， 其实就是一个\n\n```assembly\nmov r8, qword ptr ds:[rdi]\nmov r9b, byte ptr ds:[rdi+0x8]\nmov byte ptr ds:[r8], r9b\n```\n\n那就意味着我们要追踪[RDI]看看是怎么来的，由于这段代码已经被VM了，控制流混淆导致根本没法手动追踪，用xdbg自动追踪功能打印日志看看\n\n![image-20240813181835965](https://s2.loli.net/2024/09/28/ND8f31oAJzTmvKn.png)\n\n足足有30000行汇编\n\n![image-20240813181952050](https://s2.loli.net/2024/09/28/xApF4h8kodHBqZT.png)\n\n往上回溯第一层发现[rdi]从RFLAGS寄存器来的，如果真要手动回溯的话，就要回溯十多个标志位，手动分析逻辑写源码不大现实（不禁再次感叹VM的强大）\n\n根据题目要求\n\n**提取WorkingService.exe的主体功能可以以二进制指令块的形式，也可以以自写源码的形式**\n\n可以考虑提取二进制指令块的形式写功能，那我们就可以把这段追踪得来的汇编代码转成ShellCode写入到自己程序的内存里，然后通过VirtualProtect修改成可执行的运行一下从而提取这份功能。只要获取这份功能就可以完成第三问了，感觉工程量挺大的就不写了。\n\n# 程序分析总结\n\n启动程序后会先默认按照参数daemon restart启动一个守护进程，守护进程通过设置参数working和调用ShellExcuteA来启动工作进程，工作进程会创建16个线程来循环调用CreateFileA保持文件存在（第二问需要通过修改参数实现相同功能并减少CPU占用率）并调用一次WriteFile来写入密文，密文由两个明文和两种加密组成，明文是catchmeifyoucan字符串和{\n0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18\n}数组，第一种加密是某种替换加密，第二种加密是base64变表加密。\n","slug":"2023腾讯游戏安全PC决赛","published":1,"updated":"2024-10-02T09:31:32.282Z","layout":"post","photos":[],"link":"","_id":"cm1roa1380001ugie1e0l1drk","content":"<p>最近一直在做往年腾讯游戏安全PC端的复现，但是2023年决赛的题做到第三问就开始有点做不动了，想在网上找找题解但是并没有找到，于是便想分享一下自己的解题经验和第三问的思路。鉴于知识的局限性，文中可能存在疏漏或不足之处，如果发现任何错误或不准确之处，请不吝赐教。<span id=\"more\"></span></p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><img src=\"https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png\" alt=\"image-20240813190641633\"></p>\n<h1 id=\"（一）解题过程\"><a href=\"#（一）解题过程\" class=\"headerlink\" title=\"（一）解题过程\"></a>（一）解题过程</h1><p>第一问让我们杀死进程，可以尝试根据windowsAPI提供的TerminateProcess函数去停止进程，写份代码测试下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">KillProcessByName</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* processName)</span> &#123;</span><br><span class=\"line\">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    PROCESSENTRY32 pe;</span><br><span class=\"line\">    pe.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Process32First(hSnapshot, &amp;pe)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(pe.szExeFile, processName) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hProcess) &#123;</span><br><span class=\"line\">                    TerminateProcess(hProcess, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    CloseHandle(hProcess);</span><br><span class=\"line\">                    Num++;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Kill suc:[%d]\\n&quot;</span>, Num);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (Process32Next(hSnapshot, &amp;pe));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CloseHandle(hSnapshot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        KillProcessByName(<span class=\"string\">&quot;WorkingService.exe&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以管理员身份启动测试</p>\n<p>启动前：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/j5DheNQGPYqUvWr.png\" alt=\"image-20240813191830392\"></p>\n<p>启动后</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yOgekiKJVdIvBNG.png\" alt=\"image-20240813192038178\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/nxAUCqMtVE3oH7g.png\" alt=\"image-20240813191935364\"></p>\n<h1 id=\"（二）解题过程\"><a href=\"#（二）解题过程\" class=\"headerlink\" title=\"（二）解题过程\"></a>（二）解题过程</h1><p>先DIE查壳发现有VMP，只能动调入手，先观察程序功能。程序启动后会有两个进程启动，并且其中之一占用CPU性能较高；程序目录会创建十六个文件，并会做重复的删除和重新创建的操作；观察任务管理器发现进程会自动重启，手动杀死进程后就会重生一个新的进程。</p>\n<p>拖进xdbg里观察符号，发现引入了ShellExcuteA这个函数，正好是启动进程函数，对这个函数下断点，发现确实断了下来，观察传参窗口。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/b2wUizNXsJ5Ehmf.png\" alt=\"一个病毒进程一个守护进程\"></p>\n<p>第六个参数不同，对应的是lpParameters（传入进程的参数），一个是<code>working</code>,一个是<code>daemon restart</code></p>\n<p>根据这个在控制台上运行加上参数working，发现只有一个工作进程，CPU占用100%，同理加上daemon restart，只有一个守护进程CPU占用不到1%。</p>\n<p>调试参数为working的进程，观察线程发现有16个线程运行同一个函数，刚好对应16个txt日志文件的输出！！！</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FkLBbtXUmxfnaT4.png\" alt=\"image-20240810190419709\"></p>\n<p>于是进入线程入口开始分析，对所有可能的写入文件的windowsAPI下断，发现都没有断下来，于是向CreateFile等API下断，</p>\n<p>所有线程在CreateFileA上成功断下，观察传参确定这是对日志文件的操作函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oxIwPOBdDgybNY7.png\" alt=\"image-20240810192612468\"></p>\n<p>有了这个依据，能确认的就是16个线程会循环通过CreateFileA打开文件，这可能是占用CPU的一个主要因素。但是跟之前运行的结果不同，调试发现，写入文件的API一直没有被调用，而正常运行的结果是，十六个文件会循环的做一个过程，文件被创建-&gt;文件被写入-&gt;文件被删除-&gt;新文件创建…。我通过加working参数运行，只会有一个循环过程，即不会有新文件诞生，文件内容也不会被修改。所以，十六个线程循环CreateFileA打开文件过程是无用功，只会徒增CPU负担！那么我们是不是可以HOOK CreateFileA这个函数，然后每个线程调用它的第二次的时候我们进行线程终止，是不是可以减少CPU的压力了呢？写份代码跑一下看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\">DWORD tlsIndex;<span class=\"comment\">//tls索引</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* ShellExecuteExA_t)</span><span class=\"params\">(SHELLEXECUTEINFOA*)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">HANDLE</span> <span class=\"params\">(WINAPI* CreateFileA_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ShellExecuteExA_t TrueShellExecuteExA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">CreateFileA_t TrueCreateFileA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">HookedShellExecuteExA</span><span class=\"params\">(SHELLEXECUTEINFOA* pExecInfo)</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1</span></span><br><span class=\"line\">    <span class=\"comment\">//执行第一个ShellExecuteExA守护进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d\\nhProcess = %p&quot;</span>, Num, pExecInfo-&gt;hProcess);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">//执行第二个ShellExecuteExA病毒进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n&quot;</span>, Num, pExecInfo-&gt;hwnd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[2]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        pExecInfo-&gt;lpFile = <span class=\"string\">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt&quot;</span>;<span class=\"comment\">//修改参数导致重启失败;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[1]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">HookCreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的TLS值</span></span><br><span class=\"line\">    LPVOID tlsValue = TlsGetValue(tlsIndex);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tlsValue == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一次运行，设置TLS值</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;放行\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        TlsSetValue(tlsIndex, (LPVOID)<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不是第一次运行，终止线程</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;终止\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        ExitThread(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        <span class=\"comment\">/*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(&quot;shell32.dll&quot;, &quot;ShellExecuteExA&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        DetourAttach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        tlsIndex = TlsAlloc();<span class=\"comment\">//初始化TLS</span></span><br><span class=\"line\">        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(<span class=\"string\">&quot;kernelbase.dll&quot;</span>, <span class=\"string\">&quot;CreateFileA&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">        </span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">        TlsFree(tlsIndex);<span class=\"comment\">//清理TLS</span></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注入进去查看CPU，与不注入的CPU情况对比如图，进程CPU占比显著下降</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wmA1DO7kn9MtcTs.png\" alt=\"image-20240810205144922\"><img src=\"https://s2.loli.net/2024/09/28/U6GK43jxaAC5RYB.png\" alt=\"image-20240810205250729\"></p>\n<p>现在我们能够确定，是这十六个线程循环打开文件（也可能做了其他的事情）占用CPU大量资源。但是直接线程退出的方式也会导致日志文件被删除，题目意思是说<strong>在保持WorkingService.exe正常运行不崩溃、主体功能无损的前提下，使之占用CPU下降到平均5%以下，WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务</strong>，现在直接退出线程的方式会导致日志文件删除过快，虽然写入了信息，但是根本没法看啊，所以我们为了日志文件更方便的浏览，应该在WriteFile之后保存文件。那我们得先hook一下删除文件的函数，看一下在哪调用的，然后选择过滤掉这个函数从而保存日志文件。</p>\n<p>尝试hook一下DeleteFileA这个函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/sBDwbkVQAa2S8Gt.png\" alt=\"image-20240810215436792\"></p>\n<p>发现没有被调用。</p>\n<p>翻阅了下CreateFileA的文档，找到dwFlagsAndAttributes这个参数，发现这个参数包含了<code>FILE_FLAG_DELETE_ON_CLOSE</code>这个属性，意思是<strong>文件将在关闭所有句柄后立即删除</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HANDLE <span class=\"title function_\">CreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR lpFileName,    <span class=\"comment\">// 文件名</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwDesiredAccess, <span class=\"comment\">// 访问模式</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwShareMode,     <span class=\"comment\">// 共享模式</span></span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class=\"comment\">// 安全属性</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwCreationDisposition, <span class=\"comment\">// 创建或打开文件的方式</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwFlagsAndAttributes, <span class=\"comment\">// 文件属性</span></span></span><br><span class=\"line\"><span class=\"params\">    HANDLE hTemplateFile <span class=\"comment\">// 模板文件句柄</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th><strong>FILE_FLAG_DELETE_ON_CLOSE</strong>0x04000000</th>\n<th>文件将在关闭所有句柄后立即删除，其中包括指定的句柄和任何其他打开或重复的句柄。</th>\n</tr>\n</thead>\n</table>\n<p>因此，只要我们改了这个属性，日志文件就不会再被删除，写代码测试下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">HookCreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//缩小每个线程执行CreateFileA的次数，CPU降低到%5以下</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的TLS值</span></span><br><span class=\"line\">    LPVOID tlsValue = TlsGetValue(tlsIndex);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((DWORD_PTR)tlsValue &lt;= <span class=\"number\">0x10</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;放行\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;</span><br><span class=\"line\">        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;终止\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        ExitThread(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/uPOmgb63TQj2Me4.png\" alt=\"image-20240810230358085\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FNUB9u7Zy8rI6V4.png\" alt=\"image-20240810230525262\"></p>\n<p>测试得到文件确实没有被删除，并且密文也成功写入文件，CPU占用也少于5%（峰值3%，最后趋近于0）</p>\n<p>到这工作进程已经差不多分析完了，但是别忘了还有一个守护进程，守护进程应该也算是正常功能的一部分，那我们现在要开始结合守护进程分析。根据之前分析得到工作进程启动是通过守护进程调用ShellExcuteExA来传入working参数实现的，而这个后面启动的进程才是我们应该去注入的。而且因为程序有循环自生自灭的一个功能，我们可能要考虑循环注入实现对所有工作进程的hook。首先考虑第一个问题，如何去注入ShellExcuteExA启动的工作进程，第一个方式是Hook ShellExcuteExA这个函数，在其启动前获取ShellExcuteExA返回值-&gt;进程句柄，然后通过进程句柄进行注入；第二个方式是编写一个辅助程序，循环对每一个WorkingService.exe进程进行注入，这个要考虑到hook是否会影响守护进程的正常功能。我想先试一下第二个方式，较为简单一点，先测试一下守护进程是否会调用CreateFileA函数，如果会的话，我们要进行一下过滤操作。Hook测试了下，守护进程先启动，然后是工作进程，但是迟迟没有调试弹窗出现，说明守护进程没有调用CreateFileA。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oAmOsiHqUhlrIkJ.png\" alt=\"image-20240812004624693\"></p>\n<p>因此，采用方式二，只要对所有WorkingService.exe进程进行注入，Hook CreateFileA函数即可在正常程序功能执行的情况下，降低CPU能耗，写一个程序测试一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ve  = GetPidByProcName(<span class=\"string\">&quot;WorkingService.exe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ve.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There are currently %d processes\\n&quot;</span>, ve.size());</span><br><span class=\"line\">            <span class=\"comment\">//依次注入并用map标记是否被注入过</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : ve)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = mp.find(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == mp.end())<span class=\"comment\">//没有被注入过</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (InjectDll(hProcess, dllPath))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Num++;</span><br><span class=\"line\">                        mp.insert(&#123; i,<span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Inject  process Success!\\n&quot;</span>, Num);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"comment\">//曾经注入过该进程</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d] Has Been Injected\\n&quot;</span>,i);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wating WorkingService.exe ...\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        system(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Sleep(200);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用Vector去接受所有WorkingService.exe进程的pid，然后用Map去映射一个bool值来判断是否这个进程被注入过，程序运行起来发现CPU能耗还是100%,但是程序告诉我注入成功。???疑惑住了</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/zXdNPmZD3jQ1at5.png\" alt=\"image-20240812014325913\"></p>\n<p>因为之前注入的时候可以成功降低CPU能耗的，我很确信我的dll是没问题的，所以问题可能就是注入的方式了。考虑到之前注入使用工具注入，在进程启动的同时注入dll，而现在注入是在程序完全跑起来之后，所以怀疑是被下了钩子破坏了注入。在ARK工具里扫一下钩子看一眼。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/OzKT7QSI3GeiDhJ.png\" alt=\"image-20240812015018472\"></p>\n<p>豁然开朗！第一个钩子勾住了NtProtectVirtualMemory函数，而我们注入模块的时候就会调用这个内核函数去修改内存权限，第二个钩子勾住了DbgUiRemoteBreakin函数，我也不知道这个函数是干什么的，问一下GPT得知</p>\n<p><code>DbgUiRemoteBreakin</code>函数是一个Windows API函数，它的作用是向指定的进程发送一个远程调试器的断点请求。当这个函数被调用时，目标进程会触发一个断点异常（通常是访问违规异常），如果目标进程已经有一个调试器附加，那么调试器就会捕获这个异常并进行处理。</p>\n<p>这个函数通常用于以下情况：</p>\n<ol>\n<li><strong>附加调试器</strong>：如果你想要附加一个调试器到一个正在运行的进程，你可以调用<code>DbgUiRemoteBreakin</code>来使进程触发断点，然后使用调试器来附加到该进程。</li>\n<li><strong>检测调试</strong>：如果一个进程检测到自己被调试，它可以调用<code>DbgUiRemoteBreakin</code>来尝试断开任何远程调试器的连接。</li>\n</ol>\n<p>看来是能附加调试的，勾住这个来反调试，哇哦，不错的方式。但是我们就先不管它了，先成功注入dll再说。所以现在看来还得先还原NtProtectVirtualMemory函数取消钩子，再调用注入函数，修改一下代码跑一下发现日志文件不能循环写入，应该是线程都退出之后，进程并未停止，猜测是线程函数里有计数的东西，到某个值之后会通知进程结束，从而让守护进程再生工作进程，于是我改了一下hook代码，让线程终止16次后终止进程，从而实现日志文件循环再生。</p>\n<p>效果图：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/b1VZLTpWGSKqERY.png\" alt=\"image-20240812031842620\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/RFMGyTspd8OEDfv.png\" alt=\"image-20240812033834444\"></p>\n<p>题目二的结果应该就是这样了，能保持写入日志文件功能的同时不破坏工作进程循环启动的机制，大功告成！！！</p>\n<p>附一份exe源码和一份dll源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> dllPath[] = <span class=\"string\">R&quot;(C:\\Users\\15386\\Desktop\\temp\\hookDll.dll)&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;DWORD64&gt;ve;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;DWORD64, <span class=\"type\">bool</span>&gt;mp;</span><br><span class=\"line\">BYTE jmpBytes[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0xE9</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x26</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">BYTE originBytes[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x4C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x01</span>,</span><br><span class=\"line\"> <span class=\"number\">0x75</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0xC3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;DWORD64&gt; <span class=\"title function_\">GetPidByProcName</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* processName)</span> &#123;</span><br><span class=\"line\">    HANDLE hProcessSnap = INVALID_HANDLE_VALUE;</span><br><span class=\"line\">    PROCESSENTRY32 pe32 = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;DWORD64&gt; vec;</span><br><span class=\"line\">    vec.clear();</span><br><span class=\"line\">    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hProcessSnap == INVALID_HANDLE_VALUE) &#123;</span><br><span class=\"line\">        vec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pe32.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Process32First(hProcessSnap, &amp;pe32)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(pe32.szExeFile, processName) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                vec.push_back(pe32.th32ProcessID);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (Process32Next(hProcessSnap, &amp;pe32));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CloseHandle(hProcessSnap);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD64 <span class=\"title function_\">GetModuleBase</span><span class=\"params\">(DWORD64 pid,<span class=\"type\">const</span> <span class=\"type\">char</span>* ModuleName)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hModuleSnap != INVALID_HANDLE_VALUE) &#123;</span><br><span class=\"line\">        MODULEENTRY32 me32;</span><br><span class=\"line\">        me32.dwSize = <span class=\"keyword\">sizeof</span>(MODULEENTRY32);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Module32First(hModuleSnap, &amp;me32)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_stricmp(me32.szModule, ModuleName) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (DWORD64)me32.modBaseAddr;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (Module32Next(hModuleSnap, &amp;me32));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CloseHandle(hModuleSnap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(HANDLE hProcess, LPCSTR dllPath)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LPVOID pRemoteDllPath = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, <span class=\"built_in\">strlen</span>(dllPath) + <span class=\"number\">1</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRemoteDllPath == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualAllocEx Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, pRemoteDllPath, dllPath, <span class=\"built_in\">strlen</span>(dllPath) + <span class=\"number\">1</span>, <span class=\"literal\">NULL</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WriteProcessMemory Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LPTHREAD_START_ROUTINE lpLoadLibrary = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA(<span class=\"string\">&quot;kernel32.dll&quot;</span>), <span class=\"string\">&quot;LoadLibraryA&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lpLoadLibrary == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;GetProcAddress Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE hThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, lpLoadLibrary, pRemoteDllPath, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hThread == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CreateRemoteThread Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    WaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD dwExitCode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (GetExitCodeThread(hThread, &amp;dwExitCode) &amp;&amp; dwExitCode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LoadLibraryA Failed in remote process\\n&quot;</span>);</span><br><span class=\"line\">        CloseHandle(hThread);</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CloseHandle(hThread);</span><br><span class=\"line\">    VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">RemoveHook</span><span class=\"params\">(HANDLE hProcess,PVOID unHookAddr, BYTE* originBytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   PDWORD oldProtect = <span class=\"number\">0</span>; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, (PVOID)unHookAddr, originBytes, <span class=\"keyword\">sizeof</span>(originBytes), <span class=\"number\">0</span>))</span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;RemoveHook Failed!!!: [%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ve  = GetPidByProcName(<span class=\"string\">&quot;WorkingService.exe&quot;</span>);<span class=\"comment\">//获取所有进程pid</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ve.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There are currently %d processes\\n&quot;</span>, ve.size());</span><br><span class=\"line\">            <span class=\"comment\">//依次注入并用map标记是否被注入过</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : ve)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = mp.find(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == mp.end())<span class=\"comment\">//没有被注入过</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);<span class=\"comment\">//要用管理员权限运行，要不然为返回空</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!hProcess) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OpenProcess Error:[%d]&quot;</span>, GetLastError());</span><br><span class=\"line\">                    DWORD64 unHookAddr = GetModuleBase(i,<span class=\"string\">&quot;ntdll.dll&quot;</span>) + <span class=\"number\">0xA0990</span>;<span class=\"comment\">//NtProtectVirtualMemory地址，ntdll + 0xA0990</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (RemoveHook(hProcess, (PVOID)unHookAddr, originBytes))<span class=\"comment\">//先取消NtProtectVirtualMemory钩子再注入</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (InjectDll(hProcess, dllPath))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            Num++;</span><br><span class=\"line\">                            mp.insert(&#123; i,<span class=\"literal\">true</span> &#125;);<span class=\"comment\">//注入成功后进行标记</span></span><br><span class=\"line\">                            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Inject  process Success!\\n&quot;</span>, Num);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>  <span class=\"keyword\">continue</span>;<span class=\"comment\">//曾经注入过该进程</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wating WorkingService.exe ...\\n&quot;</span>);</span><br><span class=\"line\">        Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        system(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\">DWORD tlsIndex;<span class=\"comment\">//tls索引</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* ShellExecuteExA_t)</span><span class=\"params\">(SHELLEXECUTEINFOA*)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">HANDLE</span> <span class=\"params\">(WINAPI* CreateFileA_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\">ShellExecuteExA_t TrueShellExecuteExA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">CreateFileA_t TrueCreateFileA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">HookedShellExecuteExA</span><span class=\"params\">(SHELLEXECUTEINFOA* pExecInfo)</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1</span></span><br><span class=\"line\">    <span class=\"comment\">//执行第一个ShellExecuteExA守护进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d\\nhProcess = %p&quot;</span>, Num, pExecInfo-&gt;hProcess);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">//执行第二个ShellExecuteExA病毒进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n&quot;</span>, Num, pExecInfo-&gt;hwnd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[2]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        pExecInfo-&gt;lpFile = <span class=\"string\">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt&quot;</span>;<span class=\"comment\">//修改参数导致重启失败;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[1]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">HookCreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的TLS值</span></span><br><span class=\"line\">    LPVOID tlsValue = TlsGetValue(tlsIndex);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((DWORD_PTR)tlsValue &lt;= <span class=\"number\">0x10</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;放行\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;</span><br><span class=\"line\">        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;<span class=\"comment\">//如果终止了十六个线程，再终止进程，使得守护线程再生工作进程</span></span><br><span class=\"line\">        <span class=\"comment\">// 不是第一次运行，终止线程</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;终止\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        ExitThread(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Num == <span class=\"number\">16</span>) <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//ShellExecuteExA hook</span></span><br><span class=\"line\">        <span class=\"comment\">/*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(&quot;shell32.dll&quot;, &quot;ShellExecuteExA&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        DetourAttach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        tlsIndex = TlsAlloc();<span class=\"comment\">//初始化TLS</span></span><br><span class=\"line\">        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(<span class=\"string\">&quot;kernelbase.dll&quot;</span>, <span class=\"string\">&quot;CreateFileA&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">       </span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">        TlsFree(tlsIndex);<span class=\"comment\">//清理TLS</span></span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"（三）思路分享\"><a href=\"#（三）思路分享\" class=\"headerlink\" title=\"（三）思路分享\"></a>（三）思路分享</h1><p>接着是第三题，要求是<strong>WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务，完全替代WorkingService.exe写入同样的密文信息，且运行时平均占用CPU时间低于5%。（2分）</strong></p>\n<p>根据之前分析，现在一直的程序功能主要体现在，创建守护进程启动-&gt;启动工作进程-&gt;创建十六个线程-&gt;每个线程创建一个日志文件-&gt;向文件写入密文-&gt;进程退出-&gt;守护进程循环创建工作进程，大致功能应该就是这些，而现在要解决的问题就是日志文件名和日志密文是怎么产生的。</p>\n<p>在WriteFile下个断点看一眼密文的大致模样。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/dfVolRruk8AU6aB.png\" alt=\"image-20240812044203214\"></p>\n<p>猜测有可能是base64加密，因为之前查看字符串有看到base64的码表，还是一个魔改码表，直接丢cyberchef试一下解密</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yXH8frivnKMQUqw.png\" alt=\"image-20240812045110783\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ly31BHiwdC76TVx.png\" alt=\"image-20240812045242653\"></p>\n<p>好熟悉的字符串，这不正是初赛题的明文嘛，这个明显就是base64加密明文了，但是还有一个疑问，就是不同的文件会打印出不同的密文，把十六个文件的密文提取出来对比一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 F2FU4Wht52lm+2dV4WFu 6128</span><br><span class=\"line\">2 4WECF2ht52lm+2dV4WFu 20512</span><br><span class=\"line\">2 4WECF2ht52lm+2dV4WFu 22060</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 22708</span><br><span class=\"line\">4 Fx8CFxY7ERcwDRkD4WFu 25296</span><br><span class=\"line\">5 Fx9U4RZt5xcwDRkDFx84 25376</span><br><span class=\"line\">6 Fx8CFxY7ERcwDRkDFx84 25620</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 25756</span><br><span class=\"line\">2 4WECF2ht52lm+2dV4WFu 26136</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 27704</span><br><span class=\"line\">7 4R9U4RY7ERcwDWdV4WE4 27976</span><br><span class=\"line\">8 4WECF2ht5xcwDRkDFx84 28380</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 28624</span><br><span class=\"line\">9 Fx9U4RY7EWlm+xkDFx84 28764</span><br><span class=\"line\">10 4WECFxY7ERcwDWdV4WFu 29904</span><br><span class=\"line\">11 Fx9U4RY7ERcwDWdV4WE4 31648</span><br></pre></td></tr></table></figure>\n\n<p>对比发现十六个线程有十一个密文，16:11的不规则性我觉得甚至不止十一个，因为这个采样只是采取了一个进程创建的十六个线程，如果有更多进程可能就意味着更多种密文。</p>\n<p>根据base64编码规则，如果码表和明文都一致的话，那密文就只能有一个，说明每个线程的码表和明文至少有一个不一致。那现在只能继续分析他的加密方式，在现有的码表处下断追踪到加密函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/TAKD6kRUtW1MeN4.png\" alt=\"image-20240812073322391\"></p>\n<p>在内存窗口发现传入的第一个参数是一个字符串地址-&gt;c tc me an，貌似跟catchmeifyoucan明文很像，所以这是修改了明文，然后再通过正常的码表进行base64加密？提取出这个明文，试一下对着这个码表加密，对比运行后的密文就知道了，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文：<span class=\"number\">0x15</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x1B</span>, <span class=\"number\">0x13</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x18</span></span><br><span class=\"line\">实际密文：F2ECF2g7EWlm+<span class=\"number\">2</span>dV4R84</span><br><span class=\"line\">正常base64密文：F2ECF2g7EWlm+<span class=\"number\">2</span>dV4R84</span><br><span class=\"line\">明文：<span class=\"number\">0x63</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0x6D</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x1F</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x6E</span></span><br><span class=\"line\">实际密文：<span class=\"number\">4</span>R9U4RZt5xcwDRkDF2Fu</span><br><span class=\"line\">正常base64密文：<span class=\"number\">4</span>R9U4RZt5xcwDRkDF2Fu</span><br></pre></td></tr></table></figure>\n\n<p>对比了多组，确信了码表是对的<code>ABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuvQRSTUVWXYZabcdef</code>,但是调试这个加密的过程中发现，一个线程至少会有两组明文，上面就是出自同一个线程。并且这个函数加密后的密文跟实际文件密文不同，下面是提取的两组密文和实际文件密文</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//34288线程</span></span><br><span class=\"line\">文件密文：<span class=\"number\">4</span>WFU4Wht52lm+<span class=\"number\">2</span>dV4WFu</span><br><span class=\"line\">密文<span class=\"number\">1</span>   ：Fx8C4Wg7ERcwDWdV4WE4</span><br><span class=\"line\">密文<span class=\"number\">2</span>   ：<span class=\"number\">4</span>WFUFxZt52lm+xkDFx9u</span><br></pre></td></tr></table></figure>\n\n<p>现在还有很多问题在里面，首先是明文为什么一个线程有两组，加密得到的两组密文跟文件密文有什么关系？两组密文实在是太奇怪了，我试着把他们联系起来，于是我将两组密文用base64还原得到明文也进行了对比，发现了一个惊喜。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/sWh3rk2faJcuQdv.png\" alt=\"image-20240812080716501\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wc2OH5ITbrkxGvf.png\" alt=\"image-20240812080739360\"></p>\n<p>这两个明文的有效字符组合起来刚好是catchmeifyoucan！！！ 接着就是其他无效字符了，提取出十六进制看看有没有联系</p>\n<p>Fx8C4Wg7ERcwDWdV4WE4-&gt;<strong>0x15</strong>,<strong>0x17</strong>,<strong>0x02</strong>,0x63,0x68,<strong>0x1b</strong>,<strong>0x13</strong>,<strong>0x1f</strong>,<strong>0x10</strong>,<strong>0x0f</strong>,0x6f,0x75,0x63,0x61,<strong>0x18</strong><br>4WFUFxZt52lm+xkDFx9u-&gt;0x63,0x61,0x74,<strong>0x15</strong>,<strong>0x1e</strong>,0x6d,0x65,0x69,0x66,0x79,<strong>0x19</strong>,<strong>0x03</strong>,<strong>0x15</strong>,<strong>0x17</strong>,0x6e</p>\n<p>貌似没什么关系，考虑到多个文件的写入密文不同，继续提取其他线程的密文</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//14032 线程</span></span><br><span class=\"line\">文件密文：Fx8CFxY7ERcwDRkDFx84</span><br><span class=\"line\">密文<span class=\"number\">1</span>   ：Fx8C4Wg7ERcwDWdV4WE4</span><br><span class=\"line\">密文<span class=\"number\">2</span>   ：<span class=\"number\">4</span>WFUFxZt52lm+xkDFx9u</span><br></pre></td></tr></table></figure>\n\n<p>拿这个线程的文件密文拿去解密，得到十六进制数组:<strong>0x15,0x17,0x02,0x15,0x1e,0x1b,0x13,0x1f,0x10,0x0f,0x19,0x03,0x15,0x17,0x18</strong>，刚好由34288线程的两组非可视字符十六进制组成。根据这个思路我把之前提取的密文进行了解密，发现线程之间的非字符不一定是成对的，但是非字符的十六进制跟所在索引是一定的，也就是说所有非可视字符的十六进制都是从上面这个数组里取，我试图多运行几遍进程反驳我这个猜想，因为这个十六进制数组并没有什么规律，但是运行结果都显示这个数组是一定的。</p>\n<p>所以现在可以确定的是，明文catchmeifyoucan会和这个数组以某种方式进行混合，最后组成真正的明文进行base64换表加密得到文件密文。现在就需要继续研究这个混合的方式，因为进程会启动十六个线程来写日志，而且在之前的观察中看到在CreateFileA函数之前，密文就已经储存在寄存器中，所以是CreateThread和CreateFileA函数之间进行了明文混合和base64加密，对这三个关键地方下断点调试</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/lfXZeF1toC4uWMv.png\" alt=\"image-20240812095555791\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，第一个参数即为之前分析的十六进制数组的指针，做一层栈回溯找明文混合方式</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vEOogFBebkxctzu.png\" alt=\"image-20240812100645901\"></p>\n<p>对base64的第一个参数位置（明文指针）下硬件访问断点，找到写入明文内存的位置</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/p7XneKRriqVYAfa.png\" alt=\"image-20240812101030609\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/lSrsHiDwkJXz7qn.png\" alt=\"image-20240812101825299\"></p>\n<p>明文进行了一个字节一个字节的写入，仔细看这段VM给的混淆汇编代码， 其实就是一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov r8, qword ptr ds:[rdi]</span><br><span class=\"line\">mov r9b, byte ptr ds:[rdi+0x8]</span><br><span class=\"line\">mov byte ptr ds:[r8], r9b</span><br></pre></td></tr></table></figure>\n\n<p>那就意味着我们要追踪[RDI]看看是怎么来的，由于这段代码已经被VM了，控制流混淆导致根本没法手动追踪，用xdbg自动追踪功能打印日志看看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ND8f31oAJzTmvKn.png\" alt=\"image-20240813181835965\"></p>\n<p>足足有30000行汇编</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/xApF4h8kodHBqZT.png\" alt=\"image-20240813181952050\"></p>\n<p>往上回溯第一层发现[rdi]从RFLAGS寄存器来的，如果真要手动回溯的话，就要回溯十多个标志位，手动分析逻辑写源码不大现实（不禁再次感叹VM的强大）</p>\n<p>根据题目要求</p>\n<p><strong>提取WorkingService.exe的主体功能可以以二进制指令块的形式，也可以以自写源码的形式</strong></p>\n<p>可以考虑提取二进制指令块的形式写功能，那我们就可以把这段追踪得来的汇编代码转成ShellCode写入到自己程序的内存里，然后通过VirtualProtect修改成可执行的运行一下从而提取这份功能。只要获取这份功能就可以完成第三问了，感觉工程量挺大的就不写了。</p>\n<h1 id=\"程序分析总结\"><a href=\"#程序分析总结\" class=\"headerlink\" title=\"程序分析总结\"></a>程序分析总结</h1><p>启动程序后会先默认按照参数daemon restart启动一个守护进程，守护进程通过设置参数working和调用ShellExcuteA来启动工作进程，工作进程会创建16个线程来循环调用CreateFileA保持文件存在（第二问需要通过修改参数实现相同功能并减少CPU占用率）并调用一次WriteFile来写入密文，密文由两个明文和两种加密组成，明文是catchmeifyoucan字符串和{<br>0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18<br>}数组，第一种加密是某种替换加密，第二种加密是base64变表加密。</p>\n","site":{"data":{}},"excerpt":"<p>最近一直在做往年腾讯游戏安全PC端的复现，但是2023年决赛的题做到第三问就开始有点做不动了，想在网上找找题解但是并没有找到，于是便想分享一下自己的解题经验和第三问的思路。鉴于知识的局限性，文中可能存在疏漏或不足之处，如果发现任何错误或不准确之处，请不吝赐教。","more":"</p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><img src=\"https://s2.loli.net/2024/09/28/hGvFBQrauAoLzHJ.png\" alt=\"image-20240813190641633\"></p>\n<h1 id=\"（一）解题过程\"><a href=\"#（一）解题过程\" class=\"headerlink\" title=\"（一）解题过程\"></a>（一）解题过程</h1><p>第一问让我们杀死进程，可以尝试根据windowsAPI提供的TerminateProcess函数去停止进程，写份代码测试下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">KillProcessByName</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* processName)</span> &#123;</span><br><span class=\"line\">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    PROCESSENTRY32 pe;</span><br><span class=\"line\">    pe.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Process32First(hSnapshot, &amp;pe)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(pe.szExeFile, processName) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hProcess) &#123;</span><br><span class=\"line\">                    TerminateProcess(hProcess, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    CloseHandle(hProcess);</span><br><span class=\"line\">                    Num++;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Kill suc:[%d]\\n&quot;</span>, Num);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (Process32Next(hSnapshot, &amp;pe));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CloseHandle(hSnapshot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        KillProcessByName(<span class=\"string\">&quot;WorkingService.exe&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以管理员身份启动测试</p>\n<p>启动前：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/j5DheNQGPYqUvWr.png\" alt=\"image-20240813191830392\"></p>\n<p>启动后</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yOgekiKJVdIvBNG.png\" alt=\"image-20240813192038178\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/nxAUCqMtVE3oH7g.png\" alt=\"image-20240813191935364\"></p>\n<h1 id=\"（二）解题过程\"><a href=\"#（二）解题过程\" class=\"headerlink\" title=\"（二）解题过程\"></a>（二）解题过程</h1><p>先DIE查壳发现有VMP，只能动调入手，先观察程序功能。程序启动后会有两个进程启动，并且其中之一占用CPU性能较高；程序目录会创建十六个文件，并会做重复的删除和重新创建的操作；观察任务管理器发现进程会自动重启，手动杀死进程后就会重生一个新的进程。</p>\n<p>拖进xdbg里观察符号，发现引入了ShellExcuteA这个函数，正好是启动进程函数，对这个函数下断点，发现确实断了下来，观察传参窗口。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/b2wUizNXsJ5Ehmf.png\" alt=\"一个病毒进程一个守护进程\"></p>\n<p>第六个参数不同，对应的是lpParameters（传入进程的参数），一个是<code>working</code>,一个是<code>daemon restart</code></p>\n<p>根据这个在控制台上运行加上参数working，发现只有一个工作进程，CPU占用100%，同理加上daemon restart，只有一个守护进程CPU占用不到1%。</p>\n<p>调试参数为working的进程，观察线程发现有16个线程运行同一个函数，刚好对应16个txt日志文件的输出！！！</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FkLBbtXUmxfnaT4.png\" alt=\"image-20240810190419709\"></p>\n<p>于是进入线程入口开始分析，对所有可能的写入文件的windowsAPI下断，发现都没有断下来，于是向CreateFile等API下断，</p>\n<p>所有线程在CreateFileA上成功断下，观察传参确定这是对日志文件的操作函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oxIwPOBdDgybNY7.png\" alt=\"image-20240810192612468\"></p>\n<p>有了这个依据，能确认的就是16个线程会循环通过CreateFileA打开文件，这可能是占用CPU的一个主要因素。但是跟之前运行的结果不同，调试发现，写入文件的API一直没有被调用，而正常运行的结果是，十六个文件会循环的做一个过程，文件被创建-&gt;文件被写入-&gt;文件被删除-&gt;新文件创建…。我通过加working参数运行，只会有一个循环过程，即不会有新文件诞生，文件内容也不会被修改。所以，十六个线程循环CreateFileA打开文件过程是无用功，只会徒增CPU负担！那么我们是不是可以HOOK CreateFileA这个函数，然后每个线程调用它的第二次的时候我们进行线程终止，是不是可以减少CPU的压力了呢？写份代码跑一下看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\">DWORD tlsIndex;<span class=\"comment\">//tls索引</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* ShellExecuteExA_t)</span><span class=\"params\">(SHELLEXECUTEINFOA*)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">HANDLE</span> <span class=\"params\">(WINAPI* CreateFileA_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ShellExecuteExA_t TrueShellExecuteExA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">CreateFileA_t TrueCreateFileA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">HookedShellExecuteExA</span><span class=\"params\">(SHELLEXECUTEINFOA* pExecInfo)</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1</span></span><br><span class=\"line\">    <span class=\"comment\">//执行第一个ShellExecuteExA守护进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d\\nhProcess = %p&quot;</span>, Num, pExecInfo-&gt;hProcess);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">//执行第二个ShellExecuteExA病毒进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n&quot;</span>, Num, pExecInfo-&gt;hwnd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[2]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        pExecInfo-&gt;lpFile = <span class=\"string\">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt&quot;</span>;<span class=\"comment\">//修改参数导致重启失败;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[1]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">HookCreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的TLS值</span></span><br><span class=\"line\">    LPVOID tlsValue = TlsGetValue(tlsIndex);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tlsValue == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一次运行，设置TLS值</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;放行\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        TlsSetValue(tlsIndex, (LPVOID)<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不是第一次运行，终止线程</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;终止\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        ExitThread(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        <span class=\"comment\">/*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(&quot;shell32.dll&quot;, &quot;ShellExecuteExA&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        DetourAttach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        tlsIndex = TlsAlloc();<span class=\"comment\">//初始化TLS</span></span><br><span class=\"line\">        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(<span class=\"string\">&quot;kernelbase.dll&quot;</span>, <span class=\"string\">&quot;CreateFileA&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">        </span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">        TlsFree(tlsIndex);<span class=\"comment\">//清理TLS</span></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注入进去查看CPU，与不注入的CPU情况对比如图，进程CPU占比显著下降</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wmA1DO7kn9MtcTs.png\" alt=\"image-20240810205144922\"><img src=\"https://s2.loli.net/2024/09/28/U6GK43jxaAC5RYB.png\" alt=\"image-20240810205250729\"></p>\n<p>现在我们能够确定，是这十六个线程循环打开文件（也可能做了其他的事情）占用CPU大量资源。但是直接线程退出的方式也会导致日志文件被删除，题目意思是说<strong>在保持WorkingService.exe正常运行不崩溃、主体功能无损的前提下，使之占用CPU下降到平均5%以下，WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务</strong>，现在直接退出线程的方式会导致日志文件删除过快，虽然写入了信息，但是根本没法看啊，所以我们为了日志文件更方便的浏览，应该在WriteFile之后保存文件。那我们得先hook一下删除文件的函数，看一下在哪调用的，然后选择过滤掉这个函数从而保存日志文件。</p>\n<p>尝试hook一下DeleteFileA这个函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/sBDwbkVQAa2S8Gt.png\" alt=\"image-20240810215436792\"></p>\n<p>发现没有被调用。</p>\n<p>翻阅了下CreateFileA的文档，找到dwFlagsAndAttributes这个参数，发现这个参数包含了<code>FILE_FLAG_DELETE_ON_CLOSE</code>这个属性，意思是<strong>文件将在关闭所有句柄后立即删除</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HANDLE <span class=\"title function_\">CreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR lpFileName,    <span class=\"comment\">// 文件名</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwDesiredAccess, <span class=\"comment\">// 访问模式</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwShareMode,     <span class=\"comment\">// 共享模式</span></span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes, <span class=\"comment\">// 安全属性</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwCreationDisposition, <span class=\"comment\">// 创建或打开文件的方式</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwFlagsAndAttributes, <span class=\"comment\">// 文件属性</span></span></span><br><span class=\"line\"><span class=\"params\">    HANDLE hTemplateFile <span class=\"comment\">// 模板文件句柄</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th><strong>FILE_FLAG_DELETE_ON_CLOSE</strong>0x04000000</th>\n<th>文件将在关闭所有句柄后立即删除，其中包括指定的句柄和任何其他打开或重复的句柄。</th>\n</tr>\n</thead>\n</table>\n<p>因此，只要我们改了这个属性，日志文件就不会再被删除，写代码测试下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">HookCreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//缩小每个线程执行CreateFileA的次数，CPU降低到%5以下</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的TLS值</span></span><br><span class=\"line\">    LPVOID tlsValue = TlsGetValue(tlsIndex);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((DWORD_PTR)tlsValue &lt;= <span class=\"number\">0x10</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;放行\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;</span><br><span class=\"line\">        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;终止\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        ExitThread(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/uPOmgb63TQj2Me4.png\" alt=\"image-20240810230358085\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FNUB9u7Zy8rI6V4.png\" alt=\"image-20240810230525262\"></p>\n<p>测试得到文件确实没有被删除，并且密文也成功写入文件，CPU占用也少于5%（峰值3%，最后趋近于0）</p>\n<p>到这工作进程已经差不多分析完了，但是别忘了还有一个守护进程，守护进程应该也算是正常功能的一部分，那我们现在要开始结合守护进程分析。根据之前分析得到工作进程启动是通过守护进程调用ShellExcuteExA来传入working参数实现的，而这个后面启动的进程才是我们应该去注入的。而且因为程序有循环自生自灭的一个功能，我们可能要考虑循环注入实现对所有工作进程的hook。首先考虑第一个问题，如何去注入ShellExcuteExA启动的工作进程，第一个方式是Hook ShellExcuteExA这个函数，在其启动前获取ShellExcuteExA返回值-&gt;进程句柄，然后通过进程句柄进行注入；第二个方式是编写一个辅助程序，循环对每一个WorkingService.exe进程进行注入，这个要考虑到hook是否会影响守护进程的正常功能。我想先试一下第二个方式，较为简单一点，先测试一下守护进程是否会调用CreateFileA函数，如果会的话，我们要进行一下过滤操作。Hook测试了下，守护进程先启动，然后是工作进程，但是迟迟没有调试弹窗出现，说明守护进程没有调用CreateFileA。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oAmOsiHqUhlrIkJ.png\" alt=\"image-20240812004624693\"></p>\n<p>因此，采用方式二，只要对所有WorkingService.exe进程进行注入，Hook CreateFileA函数即可在正常程序功能执行的情况下，降低CPU能耗，写一个程序测试一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ve  = GetPidByProcName(<span class=\"string\">&quot;WorkingService.exe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ve.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There are currently %d processes\\n&quot;</span>, ve.size());</span><br><span class=\"line\">            <span class=\"comment\">//依次注入并用map标记是否被注入过</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : ve)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = mp.find(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == mp.end())<span class=\"comment\">//没有被注入过</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (InjectDll(hProcess, dllPath))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Num++;</span><br><span class=\"line\">                        mp.insert(&#123; i,<span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Inject  process Success!\\n&quot;</span>, Num);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"comment\">//曾经注入过该进程</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[%d] Has Been Injected\\n&quot;</span>,i);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wating WorkingService.exe ...\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        system(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Sleep(200);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用Vector去接受所有WorkingService.exe进程的pid，然后用Map去映射一个bool值来判断是否这个进程被注入过，程序运行起来发现CPU能耗还是100%,但是程序告诉我注入成功。???疑惑住了</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/zXdNPmZD3jQ1at5.png\" alt=\"image-20240812014325913\"></p>\n<p>因为之前注入的时候可以成功降低CPU能耗的，我很确信我的dll是没问题的，所以问题可能就是注入的方式了。考虑到之前注入使用工具注入，在进程启动的同时注入dll，而现在注入是在程序完全跑起来之后，所以怀疑是被下了钩子破坏了注入。在ARK工具里扫一下钩子看一眼。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/OzKT7QSI3GeiDhJ.png\" alt=\"image-20240812015018472\"></p>\n<p>豁然开朗！第一个钩子勾住了NtProtectVirtualMemory函数，而我们注入模块的时候就会调用这个内核函数去修改内存权限，第二个钩子勾住了DbgUiRemoteBreakin函数，我也不知道这个函数是干什么的，问一下GPT得知</p>\n<p><code>DbgUiRemoteBreakin</code>函数是一个Windows API函数，它的作用是向指定的进程发送一个远程调试器的断点请求。当这个函数被调用时，目标进程会触发一个断点异常（通常是访问违规异常），如果目标进程已经有一个调试器附加，那么调试器就会捕获这个异常并进行处理。</p>\n<p>这个函数通常用于以下情况：</p>\n<ol>\n<li><strong>附加调试器</strong>：如果你想要附加一个调试器到一个正在运行的进程，你可以调用<code>DbgUiRemoteBreakin</code>来使进程触发断点，然后使用调试器来附加到该进程。</li>\n<li><strong>检测调试</strong>：如果一个进程检测到自己被调试，它可以调用<code>DbgUiRemoteBreakin</code>来尝试断开任何远程调试器的连接。</li>\n</ol>\n<p>看来是能附加调试的，勾住这个来反调试，哇哦，不错的方式。但是我们就先不管它了，先成功注入dll再说。所以现在看来还得先还原NtProtectVirtualMemory函数取消钩子，再调用注入函数，修改一下代码跑一下发现日志文件不能循环写入，应该是线程都退出之后，进程并未停止，猜测是线程函数里有计数的东西，到某个值之后会通知进程结束，从而让守护进程再生工作进程，于是我改了一下hook代码，让线程终止16次后终止进程，从而实现日志文件循环再生。</p>\n<p>效果图：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/b1VZLTpWGSKqERY.png\" alt=\"image-20240812031842620\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/RFMGyTspd8OEDfv.png\" alt=\"image-20240812033834444\"></p>\n<p>题目二的结果应该就是这样了，能保持写入日志文件功能的同时不破坏工作进程循环启动的机制，大功告成！！！</p>\n<p>附一份exe源码和一份dll源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> dllPath[] = <span class=\"string\">R&quot;(C:\\Users\\15386\\Desktop\\temp\\hookDll.dll)&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;DWORD64&gt;ve;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;DWORD64, <span class=\"type\">bool</span>&gt;mp;</span><br><span class=\"line\">BYTE jmpBytes[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0xE9</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x26</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">BYTE originBytes[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x4C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x01</span>,</span><br><span class=\"line\"> <span class=\"number\">0x75</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0xC3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;DWORD64&gt; <span class=\"title function_\">GetPidByProcName</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* processName)</span> &#123;</span><br><span class=\"line\">    HANDLE hProcessSnap = INVALID_HANDLE_VALUE;</span><br><span class=\"line\">    PROCESSENTRY32 pe32 = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;DWORD64&gt; vec;</span><br><span class=\"line\">    vec.clear();</span><br><span class=\"line\">    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hProcessSnap == INVALID_HANDLE_VALUE) &#123;</span><br><span class=\"line\">        vec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pe32.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Process32First(hProcessSnap, &amp;pe32)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(pe32.szExeFile, processName) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                vec.push_back(pe32.th32ProcessID);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (Process32Next(hProcessSnap, &amp;pe32));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CloseHandle(hProcessSnap);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD64 <span class=\"title function_\">GetModuleBase</span><span class=\"params\">(DWORD64 pid,<span class=\"type\">const</span> <span class=\"type\">char</span>* ModuleName)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hModuleSnap != INVALID_HANDLE_VALUE) &#123;</span><br><span class=\"line\">        MODULEENTRY32 me32;</span><br><span class=\"line\">        me32.dwSize = <span class=\"keyword\">sizeof</span>(MODULEENTRY32);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Module32First(hModuleSnap, &amp;me32)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_stricmp(me32.szModule, ModuleName) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (DWORD64)me32.modBaseAddr;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (Module32Next(hModuleSnap, &amp;me32));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CloseHandle(hModuleSnap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(HANDLE hProcess, LPCSTR dllPath)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LPVOID pRemoteDllPath = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, <span class=\"built_in\">strlen</span>(dllPath) + <span class=\"number\">1</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRemoteDllPath == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualAllocEx Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, pRemoteDllPath, dllPath, <span class=\"built_in\">strlen</span>(dllPath) + <span class=\"number\">1</span>, <span class=\"literal\">NULL</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WriteProcessMemory Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LPTHREAD_START_ROUTINE lpLoadLibrary = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA(<span class=\"string\">&quot;kernel32.dll&quot;</span>), <span class=\"string\">&quot;LoadLibraryA&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lpLoadLibrary == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;GetProcAddress Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE hThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, lpLoadLibrary, pRemoteDllPath, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hThread == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CreateRemoteThread Failed:[%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    WaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD dwExitCode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (GetExitCodeThread(hThread, &amp;dwExitCode) &amp;&amp; dwExitCode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LoadLibraryA Failed in remote process\\n&quot;</span>);</span><br><span class=\"line\">        CloseHandle(hThread);</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CloseHandle(hThread);</span><br><span class=\"line\">    VirtualFreeEx(hProcess, pRemoteDllPath, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">RemoveHook</span><span class=\"params\">(HANDLE hProcess,PVOID unHookAddr, BYTE* originBytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   PDWORD oldProtect = <span class=\"number\">0</span>; </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, (PVOID)unHookAddr, originBytes, <span class=\"keyword\">sizeof</span>(originBytes), <span class=\"number\">0</span>))</span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;RemoveHook Failed!!!: [%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">       <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ve  = GetPidByProcName(<span class=\"string\">&quot;WorkingService.exe&quot;</span>);<span class=\"comment\">//获取所有进程pid</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ve.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There are currently %d processes\\n&quot;</span>, ve.size());</span><br><span class=\"line\">            <span class=\"comment\">//依次注入并用map标记是否被注入过</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : ve)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = mp.find(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == mp.end())<span class=\"comment\">//没有被注入过</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, i);<span class=\"comment\">//要用管理员权限运行，要不然为返回空</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!hProcess) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OpenProcess Error:[%d]&quot;</span>, GetLastError());</span><br><span class=\"line\">                    DWORD64 unHookAddr = GetModuleBase(i,<span class=\"string\">&quot;ntdll.dll&quot;</span>) + <span class=\"number\">0xA0990</span>;<span class=\"comment\">//NtProtectVirtualMemory地址，ntdll + 0xA0990</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (RemoveHook(hProcess, (PVOID)unHookAddr, originBytes))<span class=\"comment\">//先取消NtProtectVirtualMemory钩子再注入</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (InjectDll(hProcess, dllPath))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            Num++;</span><br><span class=\"line\">                            mp.insert(&#123; i,<span class=\"literal\">true</span> &#125;);<span class=\"comment\">//注入成功后进行标记</span></span><br><span class=\"line\">                            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Inject  process Success!\\n&quot;</span>, Num);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>  <span class=\"keyword\">continue</span>;<span class=\"comment\">//曾经注入过该进程</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wating WorkingService.exe ...\\n&quot;</span>);</span><br><span class=\"line\">        Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        system(<span class=\"string\">&quot;cls&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\">DWORD tlsIndex;<span class=\"comment\">//tls索引</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* ShellExecuteExA_t)</span><span class=\"params\">(SHELLEXECUTEINFOA*)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">HANDLE</span> <span class=\"params\">(WINAPI* CreateFileA_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\">ShellExecuteExA_t TrueShellExecuteExA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">CreateFileA_t TrueCreateFileA = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">HookedShellExecuteExA</span><span class=\"params\">(SHELLEXECUTEINFOA* pExecInfo)</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1</span></span><br><span class=\"line\">    <span class=\"comment\">//执行第一个ShellExecuteExA守护进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d\\nhProcess = %p&quot;</span>, Num, pExecInfo-&gt;hProcess);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">//执行第二个ShellExecuteExA病毒进程</span></span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;ShellExecuteExA 被调用:Num = %d \\n调用者窗口句柄 = 0x%p\\n&quot;</span>, Num, pExecInfo-&gt;hwnd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Num == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[2]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        pExecInfo-&gt;lpFile = <span class=\"string\">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\自动F8直到call.txt&quot;</span>;<span class=\"comment\">//修改参数导致重启失败;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;[1]:当前线程ID：%d&quot;</span>, GetCurrentThreadId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueShellExecuteExA(pExecInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">HookCreateFileA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    LPCSTR                lpFileName,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwDesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwShareMode,</span></span><br><span class=\"line\"><span class=\"params\">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwCreationDisposition,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD                 dwFlagsAndAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE                hTemplateFile</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断线程是否是第一次运行CreateFileA，是的话就放行，不是第一次运行就终止线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的TLS值</span></span><br><span class=\"line\">    LPVOID tlsValue = TlsGetValue(tlsIndex);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((DWORD_PTR)tlsValue &lt;= <span class=\"number\">0x10</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;放行\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;</span><br><span class=\"line\">        TlsSetValue(tlsIndex, (LPVOID)((DWORD_PTR)tlsValue + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> Num = <span class=\"number\">0</span>;<span class=\"comment\">//如果终止了十六个线程，再终止进程，使得守护线程再生工作进程</span></span><br><span class=\"line\">        <span class=\"comment\">// 不是第一次运行，终止线程</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _KDEBUG</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;终止\\nlpFileName:%s\\n&quot;</span>, lpFileName);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">        Num++;</span><br><span class=\"line\">        ExitThread(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Num == <span class=\"number\">16</span>) <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueCreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//ShellExecuteExA hook</span></span><br><span class=\"line\">        <span class=\"comment\">/*TrueShellExecuteExA = (ShellExecuteExA_t)DetourFindFunction(&quot;shell32.dll&quot;, &quot;ShellExecuteExA&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        DetourAttach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        tlsIndex = TlsAlloc();<span class=\"comment\">//初始化TLS</span></span><br><span class=\"line\">        TrueCreateFileA = (CreateFileA_t)DetourFindFunction(<span class=\"string\">&quot;kernelbase.dll&quot;</span>, <span class=\"string\">&quot;CreateFileA&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">       </span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueShellExecuteExA, HookedShellExecuteExA);</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueCreateFileA, HookCreateFileA);</span><br><span class=\"line\">        TlsFree(tlsIndex);<span class=\"comment\">//清理TLS</span></span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"（三）思路分享\"><a href=\"#（三）思路分享\" class=\"headerlink\" title=\"（三）思路分享\"></a>（三）思路分享</h1><p>接着是第三题，要求是<strong>WorkingService.exe的主体功能为写入信息。在没有源码的情况下提取这个部分，自行编写一个性能更佳的服务，完全替代WorkingService.exe写入同样的密文信息，且运行时平均占用CPU时间低于5%。（2分）</strong></p>\n<p>根据之前分析，现在一直的程序功能主要体现在，创建守护进程启动-&gt;启动工作进程-&gt;创建十六个线程-&gt;每个线程创建一个日志文件-&gt;向文件写入密文-&gt;进程退出-&gt;守护进程循环创建工作进程，大致功能应该就是这些，而现在要解决的问题就是日志文件名和日志密文是怎么产生的。</p>\n<p>在WriteFile下个断点看一眼密文的大致模样。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/dfVolRruk8AU6aB.png\" alt=\"image-20240812044203214\"></p>\n<p>猜测有可能是base64加密，因为之前查看字符串有看到base64的码表，还是一个魔改码表，直接丢cyberchef试一下解密</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yXH8frivnKMQUqw.png\" alt=\"image-20240812045110783\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ly31BHiwdC76TVx.png\" alt=\"image-20240812045242653\"></p>\n<p>好熟悉的字符串，这不正是初赛题的明文嘛，这个明显就是base64加密明文了，但是还有一个疑问，就是不同的文件会打印出不同的密文，把十六个文件的密文提取出来对比一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 F2FU4Wht52lm+2dV4WFu 6128</span><br><span class=\"line\">2 4WECF2ht52lm+2dV4WFu 20512</span><br><span class=\"line\">2 4WECF2ht52lm+2dV4WFu 22060</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 22708</span><br><span class=\"line\">4 Fx8CFxY7ERcwDRkD4WFu 25296</span><br><span class=\"line\">5 Fx9U4RZt5xcwDRkDFx84 25376</span><br><span class=\"line\">6 Fx8CFxY7ERcwDRkDFx84 25620</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 25756</span><br><span class=\"line\">2 4WECF2ht52lm+2dV4WFu 26136</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 27704</span><br><span class=\"line\">7 4R9U4RY7ERcwDWdV4WE4 27976</span><br><span class=\"line\">8 4WECF2ht5xcwDRkDFx84 28380</span><br><span class=\"line\">3 Fx9U4RY7ERcwDRkDFx84 28624</span><br><span class=\"line\">9 Fx9U4RY7EWlm+xkDFx84 28764</span><br><span class=\"line\">10 4WECFxY7ERcwDWdV4WFu 29904</span><br><span class=\"line\">11 Fx9U4RY7ERcwDWdV4WE4 31648</span><br></pre></td></tr></table></figure>\n\n<p>对比发现十六个线程有十一个密文，16:11的不规则性我觉得甚至不止十一个，因为这个采样只是采取了一个进程创建的十六个线程，如果有更多进程可能就意味着更多种密文。</p>\n<p>根据base64编码规则，如果码表和明文都一致的话，那密文就只能有一个，说明每个线程的码表和明文至少有一个不一致。那现在只能继续分析他的加密方式，在现有的码表处下断追踪到加密函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/TAKD6kRUtW1MeN4.png\" alt=\"image-20240812073322391\"></p>\n<p>在内存窗口发现传入的第一个参数是一个字符串地址-&gt;c tc me an，貌似跟catchmeifyoucan明文很像，所以这是修改了明文，然后再通过正常的码表进行base64加密？提取出这个明文，试一下对着这个码表加密，对比运行后的密文就知道了，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文：<span class=\"number\">0x15</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x1B</span>, <span class=\"number\">0x13</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x18</span></span><br><span class=\"line\">实际密文：F2ECF2g7EWlm+<span class=\"number\">2</span>dV4R84</span><br><span class=\"line\">正常base64密文：F2ECF2g7EWlm+<span class=\"number\">2</span>dV4R84</span><br><span class=\"line\">明文：<span class=\"number\">0x63</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0x6D</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x1F</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x6E</span></span><br><span class=\"line\">实际密文：<span class=\"number\">4</span>R9U4RZt5xcwDRkDF2Fu</span><br><span class=\"line\">正常base64密文：<span class=\"number\">4</span>R9U4RZt5xcwDRkDF2Fu</span><br></pre></td></tr></table></figure>\n\n<p>对比了多组，确信了码表是对的<code>ABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuvQRSTUVWXYZabcdef</code>,但是调试这个加密的过程中发现，一个线程至少会有两组明文，上面就是出自同一个线程。并且这个函数加密后的密文跟实际文件密文不同，下面是提取的两组密文和实际文件密文</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//34288线程</span></span><br><span class=\"line\">文件密文：<span class=\"number\">4</span>WFU4Wht52lm+<span class=\"number\">2</span>dV4WFu</span><br><span class=\"line\">密文<span class=\"number\">1</span>   ：Fx8C4Wg7ERcwDWdV4WE4</span><br><span class=\"line\">密文<span class=\"number\">2</span>   ：<span class=\"number\">4</span>WFUFxZt52lm+xkDFx9u</span><br></pre></td></tr></table></figure>\n\n<p>现在还有很多问题在里面，首先是明文为什么一个线程有两组，加密得到的两组密文跟文件密文有什么关系？两组密文实在是太奇怪了，我试着把他们联系起来，于是我将两组密文用base64还原得到明文也进行了对比，发现了一个惊喜。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/sWh3rk2faJcuQdv.png\" alt=\"image-20240812080716501\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wc2OH5ITbrkxGvf.png\" alt=\"image-20240812080739360\"></p>\n<p>这两个明文的有效字符组合起来刚好是catchmeifyoucan！！！ 接着就是其他无效字符了，提取出十六进制看看有没有联系</p>\n<p>Fx8C4Wg7ERcwDWdV4WE4-&gt;<strong>0x15</strong>,<strong>0x17</strong>,<strong>0x02</strong>,0x63,0x68,<strong>0x1b</strong>,<strong>0x13</strong>,<strong>0x1f</strong>,<strong>0x10</strong>,<strong>0x0f</strong>,0x6f,0x75,0x63,0x61,<strong>0x18</strong><br>4WFUFxZt52lm+xkDFx9u-&gt;0x63,0x61,0x74,<strong>0x15</strong>,<strong>0x1e</strong>,0x6d,0x65,0x69,0x66,0x79,<strong>0x19</strong>,<strong>0x03</strong>,<strong>0x15</strong>,<strong>0x17</strong>,0x6e</p>\n<p>貌似没什么关系，考虑到多个文件的写入密文不同，继续提取其他线程的密文</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//14032 线程</span></span><br><span class=\"line\">文件密文：Fx8CFxY7ERcwDRkDFx84</span><br><span class=\"line\">密文<span class=\"number\">1</span>   ：Fx8C4Wg7ERcwDWdV4WE4</span><br><span class=\"line\">密文<span class=\"number\">2</span>   ：<span class=\"number\">4</span>WFUFxZt52lm+xkDFx9u</span><br></pre></td></tr></table></figure>\n\n<p>拿这个线程的文件密文拿去解密，得到十六进制数组:<strong>0x15,0x17,0x02,0x15,0x1e,0x1b,0x13,0x1f,0x10,0x0f,0x19,0x03,0x15,0x17,0x18</strong>，刚好由34288线程的两组非可视字符十六进制组成。根据这个思路我把之前提取的密文进行了解密，发现线程之间的非字符不一定是成对的，但是非字符的十六进制跟所在索引是一定的，也就是说所有非可视字符的十六进制都是从上面这个数组里取，我试图多运行几遍进程反驳我这个猜想，因为这个十六进制数组并没有什么规律，但是运行结果都显示这个数组是一定的。</p>\n<p>所以现在可以确定的是，明文catchmeifyoucan会和这个数组以某种方式进行混合，最后组成真正的明文进行base64换表加密得到文件密文。现在就需要继续研究这个混合的方式，因为进程会启动十六个线程来写日志，而且在之前的观察中看到在CreateFileA函数之前，密文就已经储存在寄存器中，所以是CreateThread和CreateFileA函数之间进行了明文混合和base64加密，对这三个关键地方下断点调试</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/lfXZeF1toC4uWMv.png\" alt=\"image-20240812095555791\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，第一个参数即为之前分析的十六进制数组的指针，做一层栈回溯找明文混合方式</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vEOogFBebkxctzu.png\" alt=\"image-20240812100645901\"></p>\n<p>对base64的第一个参数位置（明文指针）下硬件访问断点，找到写入明文内存的位置</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/p7XneKRriqVYAfa.png\" alt=\"image-20240812101030609\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/lSrsHiDwkJXz7qn.png\" alt=\"image-20240812101825299\"></p>\n<p>明文进行了一个字节一个字节的写入，仔细看这段VM给的混淆汇编代码， 其实就是一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov r8, qword ptr ds:[rdi]</span><br><span class=\"line\">mov r9b, byte ptr ds:[rdi+0x8]</span><br><span class=\"line\">mov byte ptr ds:[r8], r9b</span><br></pre></td></tr></table></figure>\n\n<p>那就意味着我们要追踪[RDI]看看是怎么来的，由于这段代码已经被VM了，控制流混淆导致根本没法手动追踪，用xdbg自动追踪功能打印日志看看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ND8f31oAJzTmvKn.png\" alt=\"image-20240813181835965\"></p>\n<p>足足有30000行汇编</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/xApF4h8kodHBqZT.png\" alt=\"image-20240813181952050\"></p>\n<p>往上回溯第一层发现[rdi]从RFLAGS寄存器来的，如果真要手动回溯的话，就要回溯十多个标志位，手动分析逻辑写源码不大现实（不禁再次感叹VM的强大）</p>\n<p>根据题目要求</p>\n<p><strong>提取WorkingService.exe的主体功能可以以二进制指令块的形式，也可以以自写源码的形式</strong></p>\n<p>可以考虑提取二进制指令块的形式写功能，那我们就可以把这段追踪得来的汇编代码转成ShellCode写入到自己程序的内存里，然后通过VirtualProtect修改成可执行的运行一下从而提取这份功能。只要获取这份功能就可以完成第三问了，感觉工程量挺大的就不写了。</p>\n<h1 id=\"程序分析总结\"><a href=\"#程序分析总结\" class=\"headerlink\" title=\"程序分析总结\"></a>程序分析总结</h1><p>启动程序后会先默认按照参数daemon restart启动一个守护进程，守护进程通过设置参数working和调用ShellExcuteA来启动工作进程，工作进程会创建16个线程来循环调用CreateFileA保持文件存在（第二问需要通过修改参数实现相同功能并减少CPU占用率）并调用一次WriteFile来写入密文，密文由两个明文和两种加密组成，明文是catchmeifyoucan字符串和{<br>0x15, 0x17, 0x02, 0x15, 0x1E, 0x1B, 0x13, 0x1F, 0x10, 0x0F, 0x19, 0x03, 0x15, 0x17, 0x18<br>}数组，第一种加密是某种替换加密，第二种加密是base64变表加密。</p>"},{"title":"CS2外置透视辅助实现","date":"2024-04-22T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png","thumbnail":"https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n完整源代码：https://github.com/Kvancy/CS2-ESP-Cheat\n\n先思考一个问题，如果要做透视，我们需要什么？<!-- more -->\n\n1. 首先是敌人的世界坐标，有了敌人世界坐标我们才能进行转换和绘制；\n\n2. 其次是敌人和队友的标识符，有个这个我们才能过滤掉友军，只针对敌人进行绘制\n3. 还有一个就是血量，通过判断敌人是否存活来进行过滤掉死去的敌人，不对死去的进行绘制\n\n按照惯例，做外挂功能的第一步要先找到基址和偏移，哪些量的基址和偏移？上面分析的这三个至少要有吧\n\n## 基址寻找\n\n再思考一个问题，关于坐标，敌军友军的标识符，血量的内存布局可能是怎么样的？\n\n根据**C++面向对象编程中的内存布局**，我们能做一些猜测\n\n1. CS2这么大的游戏，大概率是面向对象编程\n2. 根据编程经验，游戏世界往往会存在一个或多个抽象类，而我们要研究的角色，可能只是一个子类\n3. 坐标，血量，标识符可能不尽是角色类的特有成员，内存布局可能存在较大差异\n\n揣着这些猜测，开始寻找基址和偏移\n\n进入练习模式打开控制台（~），输入如下指令\n\n1. sv_cheats ${0/1}$; //舞弊方式，0表明关掉，1表明开启(任意挪动指令必须开启舞弊方式)\n2. bot_stop ${0/1}$; //bot终止行为，0表明关掉BOT逐渐主题活动，1表明开启BOT终止主题活动\n3. mp_roundtime_defuse {n}$ ;//设置每回合的时间\n4. mp_restartgame  1 //重启该回合\n\n打开CE针对角色血量进行搜索，定位到血量地址，找到如下可能的地址。\n\n![image-20240816132931465](https://s2.loli.net/2024/09/27/U7tI6B5dks4Z1uv.png)\n\n利用二分法锁定内存地址的值，打开控制台输入` hurtme 1`指令，观察哪一个地址锁定后血量不再下降，或者用修改数据的方法看看哪个是真实地址，哪些是随着真实地址变动的“虚假地址”。\n\n![image-20240816133110712](https://s2.loli.net/2024/09/27/KWTuEvUr6pGckYB.png)\n\n找到真实血量内存地址。\n\n![image-20240816133526942](https://s2.loli.net/2024/09/27/3vFVQdlU6o7tpjT.png)\n\n进行指针扫描，设置最大偏移地址5560和最大偏移层数5，经验所得，大多数游戏可以用这两个值找到，找不到的时候适当调整即可。\n\n**![image-20240816133810072](https://s2.loli.net/2024/09/27/rNsZUckMwpXW7Ai.png)**\n\n找到294个指针路径，为了进一步筛选，继续hurt me 修改血量，通过指针扫描器->重新扫描内存->要查找的数值，设置当前血量值，重新扫描。\n\n![image-20240816134615515](https://s2.loli.net/2024/09/27/4Shub9jNcWAKBLz.png)\n\n得到235个指针路径，同理可以进行多次筛选，最终测得233个指针路径。\n\n![image-20240816134723096](https://s2.loli.net/2024/09/27/ALX4gRHrNbh9UeS.png)\n\n此时关闭游戏（记得提前保存好ptr文件，一般扫描后就保存了），重新打开游戏。再次重新扫描内存，进一步筛选得到40个指针路径\n\n![image-20240816221716190](https://s2.loli.net/2024/09/27/FAZHqg3fbMWiJdT.png)\n\n可以看到第四层偏移全是2A8，对应的是血量在所属类的偏移值，到这我们基本就可以利用其中之一作为自己角色血量的基址和偏移了\n\n这里选择最后一条\n\n|       血量偏移        |\n| :-------------------: |\n|         0x2A8         |\n|         0xC0          |\n|          0x8          |\n|         0x10          |\n|         0x50          |\n| \"server.dll\"+01343108 |\n\n我们继续找人物坐标的基址和偏移，因为在三维世界里，二维坐标X，Y的方向不是很好确认，但是Z坐标一般都是一样的，往上走，Z坐标增加，往下走，Z坐标减小，有些游戏可能会反过来，但是不影响，只是稍微更麻烦一点。只要找到了三个坐标其中之一，另外两个也就在附近了（存放在一个结构体中），这里我们找Z坐标。\n\n我们到这个地点，有个上下坡的地方，方便修改Z坐标。\n\n![image-20240816200004467](https://s2.loli.net/2024/09/27/Vp4ivPyrwBhEXKC.png)\n\n接着就是一顿CE搜索，我这里最终筛到300多个地址，实在是筛选不下去了，都像是Z坐标，接着按照二分法，一半锁定一半不锁定，去找一个地址，锁定住之后角色跳不起来，筛选到如下地址\n\n![image-20240816202311521](https://s2.loli.net/2024/09/27/ITtXQSrkOE5c1lM.png)\n\n尝试修改数据测试真实性,修改成-20000\n\n![image-20240816203020181](https://s2.loli.net/2024/09/27/t7L4UMGqnE9CAPh.png)\n\n这tm给我干哪来了我擦了，准备下包！修改一下Z坐标回到地面\n\n![image-20240816204316307](https://s2.loli.net/2024/09/27/VB69pweDGc2MRCg.png)\n\n擦，修改多了，完了，掉下去就死了，寄。。。\n\n但是现在基本确认了这个地址是真实Z的坐标，其他的只是因变量，对这个地址进行指针扫描。扫描到93条指针路径，进一步按之前步骤筛选，找到一个能用的\n\n![image-20240816205421898](https://s2.loli.net/2024/09/27/W7QVkjI64fKPNZ1.png)\n\n接着我们在这个地址观察一下附近是否会出现X，Y坐标，发现前面两个就是X,Y坐标，基本确认了我们角色的基址和偏移\n\n![image-20240816210704596](https://s2.loli.net/2024/09/27/msGRWkplaCrchEZ.png)\n\n因为这个只是我们的坐标，其他角色的坐标还没去搜索，挨个搜索肯定不现实，那还有什么办法去快速找到其他角色的基址和偏移呢？\n\n根据我们的一点点开发经验可以猜测游戏里面大概有这么一份代码模型\n\n```c++\nclass Game\n{\n    int time;//随便举的例子\n    Player player[10];\n}\nclass Player\n{\n    float blood;\n    int TeamNum;\n    Point3D pos;\n}\n```\n\n根据这个猜想，只要我们获得了Player的内存大小，我们就可以根据我们角色的地址枚举出其他角色的地址，从而获取其他角色的位置属性。嘶，但是这个角色类的内存大小貌似不好求。我又想到一个方法，如果角色内存大小不是很大的话，我们可以在CE中通过在我们的坐标附近去寻找，是否还有像坐标的地址，如果找到了，那么很可能是其他角色的坐标，我们就可以直接两个坐标地址相减获取角色内存大小，浅试一下。\n\n找了一下，并没有找到，显然这招对这游戏并不是一个好方法，可能CS2是用类指针数组去存十个人物地址的，也可能是用链表去存的，这方法还是太笨了。只能想另一种方式了。\n\n还记得我们最开始的C++内存布局揣测么，那既然我们已经找到了基地址和五层偏移，那就意味着我们角色的地址很可能就在这个基地址的相对四层或者三层（或者更少）偏移计算得到，那我们假设，游戏的十个角色是被new出来的，也就是用类指针数组存储十个人物地址的，那我们的角色地址找到之后，偏移8个字节（64位的游戏），那是不是就是其他角色的类指针？再试一次，如下是我们之前找到的基地址和偏移\n\n![image-20240816220135032](https://s2.loli.net/2024/09/27/83kdJhUx5fuBF7z.png)\n\n试着修改第一层到第四层的偏移值，修改+8。\n\n![image-20240816220248133](https://s2.loli.net/2024/09/27/fwRH5peyGctUEov.png)\n\n到第二层偏移+8时，刚好对应浮点数-120，符合地图的Z坐标范围，点开内存看一眼之前是不是X,Y坐标\n\n![image-20240816220401734](https://s2.loli.net/2024/09/27/OjYyd7UpCTiaNRr.png)\n\n好像是，让机器人动起来试一试\n\n![image-20240816220500499](https://s2.loli.net/2024/09/27/epmv5IlZWQ7JH61.png)\n\n没错了！继续+8或者-8定位另外八个角色的第二层偏移。\n\n直到第二层偏移为60时，内存指向空，所以十个人物的角色第二层偏移是10,18,20,28,30,38,40,48,50,58（十六进制）,刚好对应十个人物角色\n\n至此，人物位置分析完成，获取的基地址和偏移为\n\n|       坐标偏移        |\n| :-------------------: |\n|         0x128         |\n|         0x38          |\n|         0x70          |\n|         0x10          |\n|         0x50          |\n| \"server.dll\"+01343108 |\n\n突然忘了，其他人物血量还没定位，但是这样一看，其他人物的血量地址也出来了，因为血量的前两层偏移和坐标前两层偏移相同，也只需要在第二层偏移（m+8*n）即可。\n\n继续第三个地址寻找，队伍标识符，按经验推测，会将敌军还是友军置为bool类型，只需要判断01就可以区分保卫者和潜伏者，但是我在控制台输入的时候，他会告诉我这些信息。\n\n![image-20240816222533854](https://s2.loli.net/2024/09/27/daBOo34EPKUeyfk.png)\n\n貌似就是队伍标识符了，但是我们海狮要确定这个的基地址和偏移，根据之前两个基地址和偏移，我们可以进行推测基地址和前两个偏移值都是相同的，只要获取后面的偏移即可。继续用CE进行搜索吧，这里要利用CS2的这个功能去转换阵营，要不然没法CE搜索\n\n![image-20240816223153811](https://s2.loli.net/2024/09/27/748BxkYIrFwMSPH.png)\n\n先假设潜伏者为2，保卫者为3，进行CE搜索，找到这些地址，\n\n![image-20240816223504653](https://s2.loli.net/2024/09/27/1GceTsEQnlaogzS.png)\n\n再尝试修改这些数据，修改一次攻击一下友军，看一下提示是否想同，直到出现这个画面\n\n![image-20240816232138115](https://s2.loli.net/2024/09/27/tNvFoPRbT8nZ2LI.png)\n\n我穿着保卫服却显示我在潜伏者，并且视保卫者为敌人，对这个地址进行指针扫描\n\n进行指针扫描，找到前两层偏移一样的并进行记录\n![image-20240816234452411](https://s2.loli.net/2024/09/27/Bk4nlDdb69OuSGV.png)\n\n发现前两层偏移并没有一样的，如果用这些基地址和偏移的话，我们就还得去找其他角色地址的偏移，那太麻烦了，根据这个最后的偏移都是314，试着将我们得到的两个基地址和偏移的最后一个偏移分别改成314看看是否对应结果3，发现带入血量的最后一个偏移时结果对应。\n\n![image-20240816234746538](https://s2.loli.net/2024/09/27/yPTRf3B2vxN5qpX.png)\n\n看来血量和队伍标识符是同属一个子类的，所以队伍标识符的基地址和偏移我们拿到了，这里做一下记录\n\n|    队伍标识符偏移     |\n| :-------------------: |\n|         0x314         |\n|         0xc0          |\n|         0x08          |\n|         0x10          |\n|         0x50          |\n| \"server.dll\"+01343108 |\n\n\n\n接着进行视图矩阵的搜索，搜索方法也很简单，只要搜索矩阵中16个浮点数的其中之一就可以了。我们可以针对某个值进行搜索，这个值会在-1.0-1.0之间（也可能稍微超过一点点）,当视角朝向天空是，该值趋近于1.0，朝向地面时，该值趋近于-1.0，根据这个我们可以控制角色看向天空，然后搜索0.8-1.2之间的数值，同理朝向地面，我们搜索-0.8–1.2之间的数值，还可以变动视角搜索变动的值，我这里就是用这种方法进行搜索视图矩阵的。\n\n![image-20240817173447606](https://s2.loli.net/2024/09/27/LWJpcZQ4nezMGya.png)\n\n![image-20240817173608316](https://s2.loli.net/2024/09/27/QLKTZcYSVFliCgr.png)\n\n两次搜索就能筛选到40000数值，接着筛选。最后搜索到还剩1200个地址，\n\n![image-20240817174309790](https://s2.loli.net/2024/09/27/jkanmKut8UPWFLX.png)\n\n但是我们看见了绿色的基址，把这些基址复制下来一一查看内存布局，看看是否有矩阵特征。\n\n![image-20240817175606456](https://s2.loli.net/2024/09/27/7foKnXROiJGMuwT.png)\n\n看这三个矩阵，随着视角都是会变动的，但是都是不对的，比如第一个矩阵，有些数据保持不变，不显红色，排除；第二个矩阵，只是一个3*4的矩阵，排除；第三个矩阵，第一行和第二行的前三个数据不符合矩阵数据规范，超过了1.0，排除。一直到这个内存地址\n\n![image-20240817175928546](https://s2.loli.net/2024/09/27/LRFomVcwAniDTxb.png)\n\n发现数据刚好符合规范并且是4*4的矩阵，记录下该地址\n\n|    视图矩阵偏移    |\n| :----------------: |\n| client.dll+19CB4D0 |\n\n到这基址和偏移寻找就完成了，接着开始写我们的透视辅助代码\n\n\n\n## 代码实现\n\nmain.cpp\n\n```c++\n#include \"kWindow.h\"\n#include \"kGame.h\"\n#include \"kPlayerPawn.h\"\n#define isWorldwide 1\n#if isWorldwide\n#define WINDOWNAME \"Counter-Strike 2\"\n#else\ndefine WINDOWNAME \"反恐精英：全球攻势\"\n#endif\nkWindow* window = nullptr;\nkGame* game = nullptr;\nkRender* render = nullptr;\n\nint main()\n{\n    window = new kWindow(WINDOWNAME);\n    game = new kGame(TEXT(\"cs2.exe\"), window->getRect());\n\twindow->msgLoop(game);\t\n}\n\t\n```\n\nmsgLoop\n\n```c++\nvoid kWindow::msgLoop(kGame* game)\n{\n    kRender* render = new kRender(hWnd);\n    MSG msg;\n    ZeroMemory(&msg, sizeof(msg));\n    while (msg.message != WM_QUIT) {\n        if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE)) {\n            TranslateMessage(&msg);\n            DispatchMessage(&msg);\n        }\n        else {\n            doCheat(render,game);\n        }\n    }\n}\n```\n\ndoCheat\n\n```c++\nvoid kWindow::doCheat(kRender* render, kGame* game)\n{\n    game->refreshData();\n    game->showAllPlayer();\n    render->beginRender();\n    for (size_t i = 0; i < 10; i++)\n    {\n        if (game->m_playPawn[i].getTeamNum() == game->m_playPawn[0].getTeamNum())\n            continue;\n        if (!game->m_playPawn[i].isAlive())\n            continue;\n        point2D pos = game->world2screen(game->getPlayerPawnPos(i), game->getMatrix());\n        point2D posHead = game->world2screen(game->m_playPawn[i].getPosHead(), game->getMatrix());\n        render->drawRectangle(pos.x, (pos.y + posHead.y) / 2, 60, posHead.y - pos.y);\n    }\n    render->endRender();\n}\n```\n\nrefreshData\n\n```c++\nbool kGame::refreshData()\n{\n\tauto server = cs2->get_module_handle(TEXT(\"server.dll\"));\n\tauto client = cs2->get_module_handle(TEXT(\"client.dll\"));\n\tDWORD64 player = 0;\n\tif (!cs2->read<DWORD64>(server + 0x1343108, player)) return false;\n\tif (!cs2->read<DWORD64>(player + 0x50, player)) return false;\n\n\tDWORD64 TeamNum = 0;\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (!cs2->read<DWORD64>(player + 0x10 + 0x08*i, TeamNum)) return false;\n\t\tif (!cs2->read<DWORD64>(TeamNum + 0x08, TeamNum)) return false;\n\t\tif (!cs2->read<DWORD64>(TeamNum + 0xC0, TeamNum)) return false;\n\t\tif (!cs2->read<int>(TeamNum + 0x314, m_playPawn[i].m_iTeamNum)) return false;\n\t}\n\t\n\tDWORD64 Pos = 0;\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (!cs2->read<DWORD64>(player + 0x10 + 0x08 * i, Pos)) return false;\n\t\tif (!cs2->read<DWORD64>(Pos + 0x70, Pos)) return false;\n\t\tif (!cs2->read<DWORD64>(Pos + 0x38, Pos)) return false;\n\t\tif (!cs2->read<point3D>(Pos + 0x120, m_playPawn[i].m_pPos)) return false;\n\t}\n\n\tDWORD64 Health = 0;\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (!cs2->read<DWORD64>(player + 0x10 + 0x08 * i, Health)) return false;\n\t\tif (!cs2->read<DWORD64>(Health + 0x08, Health)) return false;\n\t\tif (!cs2->read<DWORD64>(Health + 0xC0, Health)) return false;\n\t\tif (!cs2->read<int>(Health + 0x2A8, m_playPawn[i].m_iHealth)) return false;\n\t}\n\tif (!cs2->read<Matrix4x4>(client + 0x19CB4D0, m_mViewMatrix)) return false;\n}\n```\n\n\n\n# 效果展示\n\n![image-20240817180725647](https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png)\n\n\n\n","source":"_posts/CS2.md","raw":"---\ntitle: CS2外置透视辅助实现\ndate: 2024/4/23\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png\nthumbnail: https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n完整源代码：https://github.com/Kvancy/CS2-ESP-Cheat\n\n先思考一个问题，如果要做透视，我们需要什么？<!-- more -->\n\n1. 首先是敌人的世界坐标，有了敌人世界坐标我们才能进行转换和绘制；\n\n2. 其次是敌人和队友的标识符，有个这个我们才能过滤掉友军，只针对敌人进行绘制\n3. 还有一个就是血量，通过判断敌人是否存活来进行过滤掉死去的敌人，不对死去的进行绘制\n\n按照惯例，做外挂功能的第一步要先找到基址和偏移，哪些量的基址和偏移？上面分析的这三个至少要有吧\n\n## 基址寻找\n\n再思考一个问题，关于坐标，敌军友军的标识符，血量的内存布局可能是怎么样的？\n\n根据**C++面向对象编程中的内存布局**，我们能做一些猜测\n\n1. CS2这么大的游戏，大概率是面向对象编程\n2. 根据编程经验，游戏世界往往会存在一个或多个抽象类，而我们要研究的角色，可能只是一个子类\n3. 坐标，血量，标识符可能不尽是角色类的特有成员，内存布局可能存在较大差异\n\n揣着这些猜测，开始寻找基址和偏移\n\n进入练习模式打开控制台（~），输入如下指令\n\n1. sv_cheats ${0/1}$; //舞弊方式，0表明关掉，1表明开启(任意挪动指令必须开启舞弊方式)\n2. bot_stop ${0/1}$; //bot终止行为，0表明关掉BOT逐渐主题活动，1表明开启BOT终止主题活动\n3. mp_roundtime_defuse {n}$ ;//设置每回合的时间\n4. mp_restartgame  1 //重启该回合\n\n打开CE针对角色血量进行搜索，定位到血量地址，找到如下可能的地址。\n\n![image-20240816132931465](https://s2.loli.net/2024/09/27/U7tI6B5dks4Z1uv.png)\n\n利用二分法锁定内存地址的值，打开控制台输入` hurtme 1`指令，观察哪一个地址锁定后血量不再下降，或者用修改数据的方法看看哪个是真实地址，哪些是随着真实地址变动的“虚假地址”。\n\n![image-20240816133110712](https://s2.loli.net/2024/09/27/KWTuEvUr6pGckYB.png)\n\n找到真实血量内存地址。\n\n![image-20240816133526942](https://s2.loli.net/2024/09/27/3vFVQdlU6o7tpjT.png)\n\n进行指针扫描，设置最大偏移地址5560和最大偏移层数5，经验所得，大多数游戏可以用这两个值找到，找不到的时候适当调整即可。\n\n**![image-20240816133810072](https://s2.loli.net/2024/09/27/rNsZUckMwpXW7Ai.png)**\n\n找到294个指针路径，为了进一步筛选，继续hurt me 修改血量，通过指针扫描器->重新扫描内存->要查找的数值，设置当前血量值，重新扫描。\n\n![image-20240816134615515](https://s2.loli.net/2024/09/27/4Shub9jNcWAKBLz.png)\n\n得到235个指针路径，同理可以进行多次筛选，最终测得233个指针路径。\n\n![image-20240816134723096](https://s2.loli.net/2024/09/27/ALX4gRHrNbh9UeS.png)\n\n此时关闭游戏（记得提前保存好ptr文件，一般扫描后就保存了），重新打开游戏。再次重新扫描内存，进一步筛选得到40个指针路径\n\n![image-20240816221716190](https://s2.loli.net/2024/09/27/FAZHqg3fbMWiJdT.png)\n\n可以看到第四层偏移全是2A8，对应的是血量在所属类的偏移值，到这我们基本就可以利用其中之一作为自己角色血量的基址和偏移了\n\n这里选择最后一条\n\n|       血量偏移        |\n| :-------------------: |\n|         0x2A8         |\n|         0xC0          |\n|          0x8          |\n|         0x10          |\n|         0x50          |\n| \"server.dll\"+01343108 |\n\n我们继续找人物坐标的基址和偏移，因为在三维世界里，二维坐标X，Y的方向不是很好确认，但是Z坐标一般都是一样的，往上走，Z坐标增加，往下走，Z坐标减小，有些游戏可能会反过来，但是不影响，只是稍微更麻烦一点。只要找到了三个坐标其中之一，另外两个也就在附近了（存放在一个结构体中），这里我们找Z坐标。\n\n我们到这个地点，有个上下坡的地方，方便修改Z坐标。\n\n![image-20240816200004467](https://s2.loli.net/2024/09/27/Vp4ivPyrwBhEXKC.png)\n\n接着就是一顿CE搜索，我这里最终筛到300多个地址，实在是筛选不下去了，都像是Z坐标，接着按照二分法，一半锁定一半不锁定，去找一个地址，锁定住之后角色跳不起来，筛选到如下地址\n\n![image-20240816202311521](https://s2.loli.net/2024/09/27/ITtXQSrkOE5c1lM.png)\n\n尝试修改数据测试真实性,修改成-20000\n\n![image-20240816203020181](https://s2.loli.net/2024/09/27/t7L4UMGqnE9CAPh.png)\n\n这tm给我干哪来了我擦了，准备下包！修改一下Z坐标回到地面\n\n![image-20240816204316307](https://s2.loli.net/2024/09/27/VB69pweDGc2MRCg.png)\n\n擦，修改多了，完了，掉下去就死了，寄。。。\n\n但是现在基本确认了这个地址是真实Z的坐标，其他的只是因变量，对这个地址进行指针扫描。扫描到93条指针路径，进一步按之前步骤筛选，找到一个能用的\n\n![image-20240816205421898](https://s2.loli.net/2024/09/27/W7QVkjI64fKPNZ1.png)\n\n接着我们在这个地址观察一下附近是否会出现X，Y坐标，发现前面两个就是X,Y坐标，基本确认了我们角色的基址和偏移\n\n![image-20240816210704596](https://s2.loli.net/2024/09/27/msGRWkplaCrchEZ.png)\n\n因为这个只是我们的坐标，其他角色的坐标还没去搜索，挨个搜索肯定不现实，那还有什么办法去快速找到其他角色的基址和偏移呢？\n\n根据我们的一点点开发经验可以猜测游戏里面大概有这么一份代码模型\n\n```c++\nclass Game\n{\n    int time;//随便举的例子\n    Player player[10];\n}\nclass Player\n{\n    float blood;\n    int TeamNum;\n    Point3D pos;\n}\n```\n\n根据这个猜想，只要我们获得了Player的内存大小，我们就可以根据我们角色的地址枚举出其他角色的地址，从而获取其他角色的位置属性。嘶，但是这个角色类的内存大小貌似不好求。我又想到一个方法，如果角色内存大小不是很大的话，我们可以在CE中通过在我们的坐标附近去寻找，是否还有像坐标的地址，如果找到了，那么很可能是其他角色的坐标，我们就可以直接两个坐标地址相减获取角色内存大小，浅试一下。\n\n找了一下，并没有找到，显然这招对这游戏并不是一个好方法，可能CS2是用类指针数组去存十个人物地址的，也可能是用链表去存的，这方法还是太笨了。只能想另一种方式了。\n\n还记得我们最开始的C++内存布局揣测么，那既然我们已经找到了基地址和五层偏移，那就意味着我们角色的地址很可能就在这个基地址的相对四层或者三层（或者更少）偏移计算得到，那我们假设，游戏的十个角色是被new出来的，也就是用类指针数组存储十个人物地址的，那我们的角色地址找到之后，偏移8个字节（64位的游戏），那是不是就是其他角色的类指针？再试一次，如下是我们之前找到的基地址和偏移\n\n![image-20240816220135032](https://s2.loli.net/2024/09/27/83kdJhUx5fuBF7z.png)\n\n试着修改第一层到第四层的偏移值，修改+8。\n\n![image-20240816220248133](https://s2.loli.net/2024/09/27/fwRH5peyGctUEov.png)\n\n到第二层偏移+8时，刚好对应浮点数-120，符合地图的Z坐标范围，点开内存看一眼之前是不是X,Y坐标\n\n![image-20240816220401734](https://s2.loli.net/2024/09/27/OjYyd7UpCTiaNRr.png)\n\n好像是，让机器人动起来试一试\n\n![image-20240816220500499](https://s2.loli.net/2024/09/27/epmv5IlZWQ7JH61.png)\n\n没错了！继续+8或者-8定位另外八个角色的第二层偏移。\n\n直到第二层偏移为60时，内存指向空，所以十个人物的角色第二层偏移是10,18,20,28,30,38,40,48,50,58（十六进制）,刚好对应十个人物角色\n\n至此，人物位置分析完成，获取的基地址和偏移为\n\n|       坐标偏移        |\n| :-------------------: |\n|         0x128         |\n|         0x38          |\n|         0x70          |\n|         0x10          |\n|         0x50          |\n| \"server.dll\"+01343108 |\n\n突然忘了，其他人物血量还没定位，但是这样一看，其他人物的血量地址也出来了，因为血量的前两层偏移和坐标前两层偏移相同，也只需要在第二层偏移（m+8*n）即可。\n\n继续第三个地址寻找，队伍标识符，按经验推测，会将敌军还是友军置为bool类型，只需要判断01就可以区分保卫者和潜伏者，但是我在控制台输入的时候，他会告诉我这些信息。\n\n![image-20240816222533854](https://s2.loli.net/2024/09/27/daBOo34EPKUeyfk.png)\n\n貌似就是队伍标识符了，但是我们海狮要确定这个的基地址和偏移，根据之前两个基地址和偏移，我们可以进行推测基地址和前两个偏移值都是相同的，只要获取后面的偏移即可。继续用CE进行搜索吧，这里要利用CS2的这个功能去转换阵营，要不然没法CE搜索\n\n![image-20240816223153811](https://s2.loli.net/2024/09/27/748BxkYIrFwMSPH.png)\n\n先假设潜伏者为2，保卫者为3，进行CE搜索，找到这些地址，\n\n![image-20240816223504653](https://s2.loli.net/2024/09/27/1GceTsEQnlaogzS.png)\n\n再尝试修改这些数据，修改一次攻击一下友军，看一下提示是否想同，直到出现这个画面\n\n![image-20240816232138115](https://s2.loli.net/2024/09/27/tNvFoPRbT8nZ2LI.png)\n\n我穿着保卫服却显示我在潜伏者，并且视保卫者为敌人，对这个地址进行指针扫描\n\n进行指针扫描，找到前两层偏移一样的并进行记录\n![image-20240816234452411](https://s2.loli.net/2024/09/27/Bk4nlDdb69OuSGV.png)\n\n发现前两层偏移并没有一样的，如果用这些基地址和偏移的话，我们就还得去找其他角色地址的偏移，那太麻烦了，根据这个最后的偏移都是314，试着将我们得到的两个基地址和偏移的最后一个偏移分别改成314看看是否对应结果3，发现带入血量的最后一个偏移时结果对应。\n\n![image-20240816234746538](https://s2.loli.net/2024/09/27/yPTRf3B2vxN5qpX.png)\n\n看来血量和队伍标识符是同属一个子类的，所以队伍标识符的基地址和偏移我们拿到了，这里做一下记录\n\n|    队伍标识符偏移     |\n| :-------------------: |\n|         0x314         |\n|         0xc0          |\n|         0x08          |\n|         0x10          |\n|         0x50          |\n| \"server.dll\"+01343108 |\n\n\n\n接着进行视图矩阵的搜索，搜索方法也很简单，只要搜索矩阵中16个浮点数的其中之一就可以了。我们可以针对某个值进行搜索，这个值会在-1.0-1.0之间（也可能稍微超过一点点）,当视角朝向天空是，该值趋近于1.0，朝向地面时，该值趋近于-1.0，根据这个我们可以控制角色看向天空，然后搜索0.8-1.2之间的数值，同理朝向地面，我们搜索-0.8–1.2之间的数值，还可以变动视角搜索变动的值，我这里就是用这种方法进行搜索视图矩阵的。\n\n![image-20240817173447606](https://s2.loli.net/2024/09/27/LWJpcZQ4nezMGya.png)\n\n![image-20240817173608316](https://s2.loli.net/2024/09/27/QLKTZcYSVFliCgr.png)\n\n两次搜索就能筛选到40000数值，接着筛选。最后搜索到还剩1200个地址，\n\n![image-20240817174309790](https://s2.loli.net/2024/09/27/jkanmKut8UPWFLX.png)\n\n但是我们看见了绿色的基址，把这些基址复制下来一一查看内存布局，看看是否有矩阵特征。\n\n![image-20240817175606456](https://s2.loli.net/2024/09/27/7foKnXROiJGMuwT.png)\n\n看这三个矩阵，随着视角都是会变动的，但是都是不对的，比如第一个矩阵，有些数据保持不变，不显红色，排除；第二个矩阵，只是一个3*4的矩阵，排除；第三个矩阵，第一行和第二行的前三个数据不符合矩阵数据规范，超过了1.0，排除。一直到这个内存地址\n\n![image-20240817175928546](https://s2.loli.net/2024/09/27/LRFomVcwAniDTxb.png)\n\n发现数据刚好符合规范并且是4*4的矩阵，记录下该地址\n\n|    视图矩阵偏移    |\n| :----------------: |\n| client.dll+19CB4D0 |\n\n到这基址和偏移寻找就完成了，接着开始写我们的透视辅助代码\n\n\n\n## 代码实现\n\nmain.cpp\n\n```c++\n#include \"kWindow.h\"\n#include \"kGame.h\"\n#include \"kPlayerPawn.h\"\n#define isWorldwide 1\n#if isWorldwide\n#define WINDOWNAME \"Counter-Strike 2\"\n#else\ndefine WINDOWNAME \"反恐精英：全球攻势\"\n#endif\nkWindow* window = nullptr;\nkGame* game = nullptr;\nkRender* render = nullptr;\n\nint main()\n{\n    window = new kWindow(WINDOWNAME);\n    game = new kGame(TEXT(\"cs2.exe\"), window->getRect());\n\twindow->msgLoop(game);\t\n}\n\t\n```\n\nmsgLoop\n\n```c++\nvoid kWindow::msgLoop(kGame* game)\n{\n    kRender* render = new kRender(hWnd);\n    MSG msg;\n    ZeroMemory(&msg, sizeof(msg));\n    while (msg.message != WM_QUIT) {\n        if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE)) {\n            TranslateMessage(&msg);\n            DispatchMessage(&msg);\n        }\n        else {\n            doCheat(render,game);\n        }\n    }\n}\n```\n\ndoCheat\n\n```c++\nvoid kWindow::doCheat(kRender* render, kGame* game)\n{\n    game->refreshData();\n    game->showAllPlayer();\n    render->beginRender();\n    for (size_t i = 0; i < 10; i++)\n    {\n        if (game->m_playPawn[i].getTeamNum() == game->m_playPawn[0].getTeamNum())\n            continue;\n        if (!game->m_playPawn[i].isAlive())\n            continue;\n        point2D pos = game->world2screen(game->getPlayerPawnPos(i), game->getMatrix());\n        point2D posHead = game->world2screen(game->m_playPawn[i].getPosHead(), game->getMatrix());\n        render->drawRectangle(pos.x, (pos.y + posHead.y) / 2, 60, posHead.y - pos.y);\n    }\n    render->endRender();\n}\n```\n\nrefreshData\n\n```c++\nbool kGame::refreshData()\n{\n\tauto server = cs2->get_module_handle(TEXT(\"server.dll\"));\n\tauto client = cs2->get_module_handle(TEXT(\"client.dll\"));\n\tDWORD64 player = 0;\n\tif (!cs2->read<DWORD64>(server + 0x1343108, player)) return false;\n\tif (!cs2->read<DWORD64>(player + 0x50, player)) return false;\n\n\tDWORD64 TeamNum = 0;\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (!cs2->read<DWORD64>(player + 0x10 + 0x08*i, TeamNum)) return false;\n\t\tif (!cs2->read<DWORD64>(TeamNum + 0x08, TeamNum)) return false;\n\t\tif (!cs2->read<DWORD64>(TeamNum + 0xC0, TeamNum)) return false;\n\t\tif (!cs2->read<int>(TeamNum + 0x314, m_playPawn[i].m_iTeamNum)) return false;\n\t}\n\t\n\tDWORD64 Pos = 0;\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (!cs2->read<DWORD64>(player + 0x10 + 0x08 * i, Pos)) return false;\n\t\tif (!cs2->read<DWORD64>(Pos + 0x70, Pos)) return false;\n\t\tif (!cs2->read<DWORD64>(Pos + 0x38, Pos)) return false;\n\t\tif (!cs2->read<point3D>(Pos + 0x120, m_playPawn[i].m_pPos)) return false;\n\t}\n\n\tDWORD64 Health = 0;\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (!cs2->read<DWORD64>(player + 0x10 + 0x08 * i, Health)) return false;\n\t\tif (!cs2->read<DWORD64>(Health + 0x08, Health)) return false;\n\t\tif (!cs2->read<DWORD64>(Health + 0xC0, Health)) return false;\n\t\tif (!cs2->read<int>(Health + 0x2A8, m_playPawn[i].m_iHealth)) return false;\n\t}\n\tif (!cs2->read<Matrix4x4>(client + 0x19CB4D0, m_mViewMatrix)) return false;\n}\n```\n\n\n\n# 效果展示\n\n![image-20240817180725647](https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png)\n\n\n\n","slug":"CS2","published":1,"updated":"2024-10-02T09:34:49.340Z","layout":"post","photos":[],"link":"","_id":"cm1roa13b0002ugie8cad2ysi","content":"<p>完整源代码：<a href=\"https://github.com/Kvancy/CS2-ESP-Cheat\">https://github.com/Kvancy/CS2-ESP-Cheat</a></p>\n<p>先思考一个问题，如果要做透视，我们需要什么？<span id=\"more\"></span></p>\n<ol>\n<li><p>首先是敌人的世界坐标，有了敌人世界坐标我们才能进行转换和绘制；</p>\n</li>\n<li><p>其次是敌人和队友的标识符，有个这个我们才能过滤掉友军，只针对敌人进行绘制</p>\n</li>\n<li><p>还有一个就是血量，通过判断敌人是否存活来进行过滤掉死去的敌人，不对死去的进行绘制</p>\n</li>\n</ol>\n<p>按照惯例，做外挂功能的第一步要先找到基址和偏移，哪些量的基址和偏移？上面分析的这三个至少要有吧</p>\n<h2 id=\"基址寻找\"><a href=\"#基址寻找\" class=\"headerlink\" title=\"基址寻找\"></a>基址寻找</h2><p>再思考一个问题，关于坐标，敌军友军的标识符，血量的内存布局可能是怎么样的？</p>\n<p>根据<strong>C++面向对象编程中的内存布局</strong>，我们能做一些猜测</p>\n<ol>\n<li>CS2这么大的游戏，大概率是面向对象编程</li>\n<li>根据编程经验，游戏世界往往会存在一个或多个抽象类，而我们要研究的角色，可能只是一个子类</li>\n<li>坐标，血量，标识符可能不尽是角色类的特有成员，内存布局可能存在较大差异</li>\n</ol>\n<p>揣着这些猜测，开始寻找基址和偏移</p>\n<p>进入练习模式打开控制台（~），输入如下指令</p>\n<ol>\n<li>sv_cheats ${0&#x2F;1}$; &#x2F;&#x2F;舞弊方式，0表明关掉，1表明开启(任意挪动指令必须开启舞弊方式)</li>\n<li>bot_stop ${0&#x2F;1}$; &#x2F;&#x2F;bot终止行为，0表明关掉BOT逐渐主题活动，1表明开启BOT终止主题活动</li>\n<li>mp_roundtime_defuse {n}$ ;&#x2F;&#x2F;设置每回合的时间</li>\n<li>mp_restartgame  1 &#x2F;&#x2F;重启该回合</li>\n</ol>\n<p>打开CE针对角色血量进行搜索，定位到血量地址，找到如下可能的地址。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/U7tI6B5dks4Z1uv.png\" alt=\"image-20240816132931465\"></p>\n<p>利用二分法锁定内存地址的值，打开控制台输入<code> hurtme 1</code>指令，观察哪一个地址锁定后血量不再下降，或者用修改数据的方法看看哪个是真实地址，哪些是随着真实地址变动的“虚假地址”。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/KWTuEvUr6pGckYB.png\" alt=\"image-20240816133110712\"></p>\n<p>找到真实血量内存地址。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/3vFVQdlU6o7tpjT.png\" alt=\"image-20240816133526942\"></p>\n<p>进行指针扫描，设置最大偏移地址5560和最大偏移层数5，经验所得，大多数游戏可以用这两个值找到，找不到的时候适当调整即可。</p>\n<p><strong><img src=\"https://s2.loli.net/2024/09/27/rNsZUckMwpXW7Ai.png\" alt=\"image-20240816133810072\"></strong></p>\n<p>找到294个指针路径，为了进一步筛选，继续hurt me 修改血量，通过指针扫描器-&gt;重新扫描内存-&gt;要查找的数值，设置当前血量值，重新扫描。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/4Shub9jNcWAKBLz.png\" alt=\"image-20240816134615515\"></p>\n<p>得到235个指针路径，同理可以进行多次筛选，最终测得233个指针路径。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/ALX4gRHrNbh9UeS.png\" alt=\"image-20240816134723096\"></p>\n<p>此时关闭游戏（记得提前保存好ptr文件，一般扫描后就保存了），重新打开游戏。再次重新扫描内存，进一步筛选得到40个指针路径</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/FAZHqg3fbMWiJdT.png\" alt=\"image-20240816221716190\"></p>\n<p>可以看到第四层偏移全是2A8，对应的是血量在所属类的偏移值，到这我们基本就可以利用其中之一作为自己角色血量的基址和偏移了</p>\n<p>这里选择最后一条</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">血量偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x2A8</td>\n</tr>\n<tr>\n<td align=\"center\">0xC0</td>\n</tr>\n<tr>\n<td align=\"center\">0x8</td>\n</tr>\n<tr>\n<td align=\"center\">0x10</td>\n</tr>\n<tr>\n<td align=\"center\">0x50</td>\n</tr>\n<tr>\n<td align=\"center\">“server.dll”+01343108</td>\n</tr>\n</tbody></table>\n<p>我们继续找人物坐标的基址和偏移，因为在三维世界里，二维坐标X，Y的方向不是很好确认，但是Z坐标一般都是一样的，往上走，Z坐标增加，往下走，Z坐标减小，有些游戏可能会反过来，但是不影响，只是稍微更麻烦一点。只要找到了三个坐标其中之一，另外两个也就在附近了（存放在一个结构体中），这里我们找Z坐标。</p>\n<p>我们到这个地点，有个上下坡的地方，方便修改Z坐标。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/Vp4ivPyrwBhEXKC.png\" alt=\"image-20240816200004467\"></p>\n<p>接着就是一顿CE搜索，我这里最终筛到300多个地址，实在是筛选不下去了，都像是Z坐标，接着按照二分法，一半锁定一半不锁定，去找一个地址，锁定住之后角色跳不起来，筛选到如下地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/ITtXQSrkOE5c1lM.png\" alt=\"image-20240816202311521\"></p>\n<p>尝试修改数据测试真实性,修改成-20000</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/t7L4UMGqnE9CAPh.png\" alt=\"image-20240816203020181\"></p>\n<p>这tm给我干哪来了我擦了，准备下包！修改一下Z坐标回到地面</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/VB69pweDGc2MRCg.png\" alt=\"image-20240816204316307\"></p>\n<p>擦，修改多了，完了，掉下去就死了，寄。。。</p>\n<p>但是现在基本确认了这个地址是真实Z的坐标，其他的只是因变量，对这个地址进行指针扫描。扫描到93条指针路径，进一步按之前步骤筛选，找到一个能用的</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/W7QVkjI64fKPNZ1.png\" alt=\"image-20240816205421898\"></p>\n<p>接着我们在这个地址观察一下附近是否会出现X，Y坐标，发现前面两个就是X,Y坐标，基本确认了我们角色的基址和偏移</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/msGRWkplaCrchEZ.png\" alt=\"image-20240816210704596\"></p>\n<p>因为这个只是我们的坐标，其他角色的坐标还没去搜索，挨个搜索肯定不现实，那还有什么办法去快速找到其他角色的基址和偏移呢？</p>\n<p>根据我们的一点点开发经验可以猜测游戏里面大概有这么一份代码模型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Game</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> time;<span class=\"comment\">//随便举的例子</span></span><br><span class=\"line\">    Player player[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> blood;</span><br><span class=\"line\">    <span class=\"type\">int</span> TeamNum;</span><br><span class=\"line\">    Point3D pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据这个猜想，只要我们获得了Player的内存大小，我们就可以根据我们角色的地址枚举出其他角色的地址，从而获取其他角色的位置属性。嘶，但是这个角色类的内存大小貌似不好求。我又想到一个方法，如果角色内存大小不是很大的话，我们可以在CE中通过在我们的坐标附近去寻找，是否还有像坐标的地址，如果找到了，那么很可能是其他角色的坐标，我们就可以直接两个坐标地址相减获取角色内存大小，浅试一下。</p>\n<p>找了一下，并没有找到，显然这招对这游戏并不是一个好方法，可能CS2是用类指针数组去存十个人物地址的，也可能是用链表去存的，这方法还是太笨了。只能想另一种方式了。</p>\n<p>还记得我们最开始的C++内存布局揣测么，那既然我们已经找到了基地址和五层偏移，那就意味着我们角色的地址很可能就在这个基地址的相对四层或者三层（或者更少）偏移计算得到，那我们假设，游戏的十个角色是被new出来的，也就是用类指针数组存储十个人物地址的，那我们的角色地址找到之后，偏移8个字节（64位的游戏），那是不是就是其他角色的类指针？再试一次，如下是我们之前找到的基地址和偏移</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/83kdJhUx5fuBF7z.png\" alt=\"image-20240816220135032\"></p>\n<p>试着修改第一层到第四层的偏移值，修改+8。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/fwRH5peyGctUEov.png\" alt=\"image-20240816220248133\"></p>\n<p>到第二层偏移+8时，刚好对应浮点数-120，符合地图的Z坐标范围，点开内存看一眼之前是不是X,Y坐标</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/OjYyd7UpCTiaNRr.png\" alt=\"image-20240816220401734\"></p>\n<p>好像是，让机器人动起来试一试</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/epmv5IlZWQ7JH61.png\" alt=\"image-20240816220500499\"></p>\n<p>没错了！继续+8或者-8定位另外八个角色的第二层偏移。</p>\n<p>直到第二层偏移为60时，内存指向空，所以十个人物的角色第二层偏移是10,18,20,28,30,38,40,48,50,58（十六进制）,刚好对应十个人物角色</p>\n<p>至此，人物位置分析完成，获取的基地址和偏移为</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">坐标偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x128</td>\n</tr>\n<tr>\n<td align=\"center\">0x38</td>\n</tr>\n<tr>\n<td align=\"center\">0x70</td>\n</tr>\n<tr>\n<td align=\"center\">0x10</td>\n</tr>\n<tr>\n<td align=\"center\">0x50</td>\n</tr>\n<tr>\n<td align=\"center\">“server.dll”+01343108</td>\n</tr>\n</tbody></table>\n<p>突然忘了，其他人物血量还没定位，但是这样一看，其他人物的血量地址也出来了，因为血量的前两层偏移和坐标前两层偏移相同，也只需要在第二层偏移（m+8*n）即可。</p>\n<p>继续第三个地址寻找，队伍标识符，按经验推测，会将敌军还是友军置为bool类型，只需要判断01就可以区分保卫者和潜伏者，但是我在控制台输入的时候，他会告诉我这些信息。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/daBOo34EPKUeyfk.png\" alt=\"image-20240816222533854\"></p>\n<p>貌似就是队伍标识符了，但是我们海狮要确定这个的基地址和偏移，根据之前两个基地址和偏移，我们可以进行推测基地址和前两个偏移值都是相同的，只要获取后面的偏移即可。继续用CE进行搜索吧，这里要利用CS2的这个功能去转换阵营，要不然没法CE搜索</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/748BxkYIrFwMSPH.png\" alt=\"image-20240816223153811\"></p>\n<p>先假设潜伏者为2，保卫者为3，进行CE搜索，找到这些地址，</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/1GceTsEQnlaogzS.png\" alt=\"image-20240816223504653\"></p>\n<p>再尝试修改这些数据，修改一次攻击一下友军，看一下提示是否想同，直到出现这个画面</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/tNvFoPRbT8nZ2LI.png\" alt=\"image-20240816232138115\"></p>\n<p>我穿着保卫服却显示我在潜伏者，并且视保卫者为敌人，对这个地址进行指针扫描</p>\n<p>进行指针扫描，找到前两层偏移一样的并进行记录<br><img src=\"https://s2.loli.net/2024/09/27/Bk4nlDdb69OuSGV.png\" alt=\"image-20240816234452411\"></p>\n<p>发现前两层偏移并没有一样的，如果用这些基地址和偏移的话，我们就还得去找其他角色地址的偏移，那太麻烦了，根据这个最后的偏移都是314，试着将我们得到的两个基地址和偏移的最后一个偏移分别改成314看看是否对应结果3，发现带入血量的最后一个偏移时结果对应。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/yPTRf3B2vxN5qpX.png\" alt=\"image-20240816234746538\"></p>\n<p>看来血量和队伍标识符是同属一个子类的，所以队伍标识符的基地址和偏移我们拿到了，这里做一下记录</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">队伍标识符偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x314</td>\n</tr>\n<tr>\n<td align=\"center\">0xc0</td>\n</tr>\n<tr>\n<td align=\"center\">0x08</td>\n</tr>\n<tr>\n<td align=\"center\">0x10</td>\n</tr>\n<tr>\n<td align=\"center\">0x50</td>\n</tr>\n<tr>\n<td align=\"center\">“server.dll”+01343108</td>\n</tr>\n</tbody></table>\n<p>接着进行视图矩阵的搜索，搜索方法也很简单，只要搜索矩阵中16个浮点数的其中之一就可以了。我们可以针对某个值进行搜索，这个值会在-1.0-1.0之间（也可能稍微超过一点点）,当视角朝向天空是，该值趋近于1.0，朝向地面时，该值趋近于-1.0，根据这个我们可以控制角色看向天空，然后搜索0.8-1.2之间的数值，同理朝向地面，我们搜索-0.8–1.2之间的数值，还可以变动视角搜索变动的值，我这里就是用这种方法进行搜索视图矩阵的。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/LWJpcZQ4nezMGya.png\" alt=\"image-20240817173447606\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/27/QLKTZcYSVFliCgr.png\" alt=\"image-20240817173608316\"></p>\n<p>两次搜索就能筛选到40000数值，接着筛选。最后搜索到还剩1200个地址，</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/jkanmKut8UPWFLX.png\" alt=\"image-20240817174309790\"></p>\n<p>但是我们看见了绿色的基址，把这些基址复制下来一一查看内存布局，看看是否有矩阵特征。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/7foKnXROiJGMuwT.png\" alt=\"image-20240817175606456\"></p>\n<p>看这三个矩阵，随着视角都是会变动的，但是都是不对的，比如第一个矩阵，有些数据保持不变，不显红色，排除；第二个矩阵，只是一个3*4的矩阵，排除；第三个矩阵，第一行和第二行的前三个数据不符合矩阵数据规范，超过了1.0，排除。一直到这个内存地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/LRFomVcwAniDTxb.png\" alt=\"image-20240817175928546\"></p>\n<p>发现数据刚好符合规范并且是4*4的矩阵，记录下该地址</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">视图矩阵偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">client.dll+19CB4D0</td>\n</tr>\n</tbody></table>\n<p>到这基址和偏移寻找就完成了，接着开始写我们的透视辅助代码</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kWindow.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kGame.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kPlayerPawn.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> isWorldwide 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> isWorldwide</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WINDOWNAME <span class=\"string\">&quot;Counter-Strike 2&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">define WINDOWNAME <span class=\"string\">&quot;反恐精英：全球攻势&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">kWindow* window = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">kGame* game = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">kRender* render = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    window = <span class=\"keyword\">new</span> <span class=\"built_in\">kWindow</span>(WINDOWNAME);</span><br><span class=\"line\">    game = <span class=\"keyword\">new</span> <span class=\"built_in\">kGame</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;cs2.exe&quot;</span>), window-&gt;<span class=\"built_in\">getRect</span>());</span><br><span class=\"line\">\twindow-&gt;<span class=\"built_in\">msgLoop</span>(game);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p>msgLoop</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">kWindow::msgLoop</span><span class=\"params\">(kGame* game)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    kRender* render = <span class=\"keyword\">new</span> <span class=\"built_in\">kRender</span>(hWnd);</span><br><span class=\"line\">    MSG msg;</span><br><span class=\"line\">    <span class=\"built_in\">ZeroMemory</span>(&amp;msg, <span class=\"built_in\">sizeof</span>(msg));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (msg.message != WM_QUIT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">PeekMessage</span>(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0U</span>, <span class=\"number\">0U</span>, PM_REMOVE)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">TranslateMessage</span>(&amp;msg);</span><br><span class=\"line\">            <span class=\"built_in\">DispatchMessage</span>(&amp;msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">doCheat</span>(render,game);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>doCheat</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">kWindow::doCheat</span><span class=\"params\">(kRender* render, kGame* game)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    game-&gt;<span class=\"built_in\">refreshData</span>();</span><br><span class=\"line\">    game-&gt;<span class=\"built_in\">showAllPlayer</span>();</span><br><span class=\"line\">    render-&gt;<span class=\"built_in\">beginRender</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (game-&gt;m_playPawn[i].<span class=\"built_in\">getTeamNum</span>() == game-&gt;m_playPawn[<span class=\"number\">0</span>].<span class=\"built_in\">getTeamNum</span>())</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!game-&gt;m_playPawn[i].<span class=\"built_in\">isAlive</span>())</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        point2D pos = game-&gt;<span class=\"built_in\">world2screen</span>(game-&gt;<span class=\"built_in\">getPlayerPawnPos</span>(i), game-&gt;<span class=\"built_in\">getMatrix</span>());</span><br><span class=\"line\">        point2D posHead = game-&gt;<span class=\"built_in\">world2screen</span>(game-&gt;m_playPawn[i].<span class=\"built_in\">getPosHead</span>(), game-&gt;<span class=\"built_in\">getMatrix</span>());</span><br><span class=\"line\">        render-&gt;<span class=\"built_in\">drawRectangle</span>(pos.x, (pos.y + posHead.y) / <span class=\"number\">2</span>, <span class=\"number\">60</span>, posHead.y - pos.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render-&gt;<span class=\"built_in\">endRender</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>refreshData</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">kGame::refreshData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> server = cs2-&gt;<span class=\"built_in\">get_module_handle</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;server.dll&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> client = cs2-&gt;<span class=\"built_in\">get_module_handle</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;client.dll&quot;</span>));</span><br><span class=\"line\">\tDWORD64 player = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(server + <span class=\"number\">0x1343108</span>, player)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x50</span>, player)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD64 TeamNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x10</span> + <span class=\"number\">0x08</span>*i, TeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(TeamNum + <span class=\"number\">0x08</span>, TeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(TeamNum + <span class=\"number\">0xC0</span>, TeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;(TeamNum + <span class=\"number\">0x314</span>, m_playPawn[i].m_iTeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDWORD64 Pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x10</span> + <span class=\"number\">0x08</span> * i, Pos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Pos + <span class=\"number\">0x70</span>, Pos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Pos + <span class=\"number\">0x38</span>, Pos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;point3D&gt;(Pos + <span class=\"number\">0x120</span>, m_playPawn[i].m_pPos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD64 Health = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x10</span> + <span class=\"number\">0x08</span> * i, Health)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Health + <span class=\"number\">0x08</span>, Health)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Health + <span class=\"number\">0xC0</span>, Health)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;(Health + <span class=\"number\">0x2A8</span>, m_playPawn[i].m_iHealth)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;Matrix4x4&gt;(client + <span class=\"number\">0x19CB4D0</span>, m_mViewMatrix)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p><img src=\"https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png\" alt=\"image-20240817180725647\"></p>\n","site":{"data":{}},"excerpt":"<p>完整源代码：<a href=\"https://github.com/Kvancy/CS2-ESP-Cheat\">https://github.com/Kvancy/CS2-ESP-Cheat</a></p>\n<p>先思考一个问题，如果要做透视，我们需要什么？","more":"</p>\n<ol>\n<li><p>首先是敌人的世界坐标，有了敌人世界坐标我们才能进行转换和绘制；</p>\n</li>\n<li><p>其次是敌人和队友的标识符，有个这个我们才能过滤掉友军，只针对敌人进行绘制</p>\n</li>\n<li><p>还有一个就是血量，通过判断敌人是否存活来进行过滤掉死去的敌人，不对死去的进行绘制</p>\n</li>\n</ol>\n<p>按照惯例，做外挂功能的第一步要先找到基址和偏移，哪些量的基址和偏移？上面分析的这三个至少要有吧</p>\n<h2 id=\"基址寻找\"><a href=\"#基址寻找\" class=\"headerlink\" title=\"基址寻找\"></a>基址寻找</h2><p>再思考一个问题，关于坐标，敌军友军的标识符，血量的内存布局可能是怎么样的？</p>\n<p>根据<strong>C++面向对象编程中的内存布局</strong>，我们能做一些猜测</p>\n<ol>\n<li>CS2这么大的游戏，大概率是面向对象编程</li>\n<li>根据编程经验，游戏世界往往会存在一个或多个抽象类，而我们要研究的角色，可能只是一个子类</li>\n<li>坐标，血量，标识符可能不尽是角色类的特有成员，内存布局可能存在较大差异</li>\n</ol>\n<p>揣着这些猜测，开始寻找基址和偏移</p>\n<p>进入练习模式打开控制台（~），输入如下指令</p>\n<ol>\n<li>sv_cheats ${0&#x2F;1}$; &#x2F;&#x2F;舞弊方式，0表明关掉，1表明开启(任意挪动指令必须开启舞弊方式)</li>\n<li>bot_stop ${0&#x2F;1}$; &#x2F;&#x2F;bot终止行为，0表明关掉BOT逐渐主题活动，1表明开启BOT终止主题活动</li>\n<li>mp_roundtime_defuse {n}$ ;&#x2F;&#x2F;设置每回合的时间</li>\n<li>mp_restartgame  1 &#x2F;&#x2F;重启该回合</li>\n</ol>\n<p>打开CE针对角色血量进行搜索，定位到血量地址，找到如下可能的地址。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/U7tI6B5dks4Z1uv.png\" alt=\"image-20240816132931465\"></p>\n<p>利用二分法锁定内存地址的值，打开控制台输入<code> hurtme 1</code>指令，观察哪一个地址锁定后血量不再下降，或者用修改数据的方法看看哪个是真实地址，哪些是随着真实地址变动的“虚假地址”。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/KWTuEvUr6pGckYB.png\" alt=\"image-20240816133110712\"></p>\n<p>找到真实血量内存地址。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/3vFVQdlU6o7tpjT.png\" alt=\"image-20240816133526942\"></p>\n<p>进行指针扫描，设置最大偏移地址5560和最大偏移层数5，经验所得，大多数游戏可以用这两个值找到，找不到的时候适当调整即可。</p>\n<p><strong><img src=\"https://s2.loli.net/2024/09/27/rNsZUckMwpXW7Ai.png\" alt=\"image-20240816133810072\"></strong></p>\n<p>找到294个指针路径，为了进一步筛选，继续hurt me 修改血量，通过指针扫描器-&gt;重新扫描内存-&gt;要查找的数值，设置当前血量值，重新扫描。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/4Shub9jNcWAKBLz.png\" alt=\"image-20240816134615515\"></p>\n<p>得到235个指针路径，同理可以进行多次筛选，最终测得233个指针路径。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/ALX4gRHrNbh9UeS.png\" alt=\"image-20240816134723096\"></p>\n<p>此时关闭游戏（记得提前保存好ptr文件，一般扫描后就保存了），重新打开游戏。再次重新扫描内存，进一步筛选得到40个指针路径</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/FAZHqg3fbMWiJdT.png\" alt=\"image-20240816221716190\"></p>\n<p>可以看到第四层偏移全是2A8，对应的是血量在所属类的偏移值，到这我们基本就可以利用其中之一作为自己角色血量的基址和偏移了</p>\n<p>这里选择最后一条</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">血量偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x2A8</td>\n</tr>\n<tr>\n<td align=\"center\">0xC0</td>\n</tr>\n<tr>\n<td align=\"center\">0x8</td>\n</tr>\n<tr>\n<td align=\"center\">0x10</td>\n</tr>\n<tr>\n<td align=\"center\">0x50</td>\n</tr>\n<tr>\n<td align=\"center\">“server.dll”+01343108</td>\n</tr>\n</tbody></table>\n<p>我们继续找人物坐标的基址和偏移，因为在三维世界里，二维坐标X，Y的方向不是很好确认，但是Z坐标一般都是一样的，往上走，Z坐标增加，往下走，Z坐标减小，有些游戏可能会反过来，但是不影响，只是稍微更麻烦一点。只要找到了三个坐标其中之一，另外两个也就在附近了（存放在一个结构体中），这里我们找Z坐标。</p>\n<p>我们到这个地点，有个上下坡的地方，方便修改Z坐标。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/Vp4ivPyrwBhEXKC.png\" alt=\"image-20240816200004467\"></p>\n<p>接着就是一顿CE搜索，我这里最终筛到300多个地址，实在是筛选不下去了，都像是Z坐标，接着按照二分法，一半锁定一半不锁定，去找一个地址，锁定住之后角色跳不起来，筛选到如下地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/ITtXQSrkOE5c1lM.png\" alt=\"image-20240816202311521\"></p>\n<p>尝试修改数据测试真实性,修改成-20000</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/t7L4UMGqnE9CAPh.png\" alt=\"image-20240816203020181\"></p>\n<p>这tm给我干哪来了我擦了，准备下包！修改一下Z坐标回到地面</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/VB69pweDGc2MRCg.png\" alt=\"image-20240816204316307\"></p>\n<p>擦，修改多了，完了，掉下去就死了，寄。。。</p>\n<p>但是现在基本确认了这个地址是真实Z的坐标，其他的只是因变量，对这个地址进行指针扫描。扫描到93条指针路径，进一步按之前步骤筛选，找到一个能用的</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/W7QVkjI64fKPNZ1.png\" alt=\"image-20240816205421898\"></p>\n<p>接着我们在这个地址观察一下附近是否会出现X，Y坐标，发现前面两个就是X,Y坐标，基本确认了我们角色的基址和偏移</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/msGRWkplaCrchEZ.png\" alt=\"image-20240816210704596\"></p>\n<p>因为这个只是我们的坐标，其他角色的坐标还没去搜索，挨个搜索肯定不现实，那还有什么办法去快速找到其他角色的基址和偏移呢？</p>\n<p>根据我们的一点点开发经验可以猜测游戏里面大概有这么一份代码模型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Game</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> time;<span class=\"comment\">//随便举的例子</span></span><br><span class=\"line\">    Player player[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> blood;</span><br><span class=\"line\">    <span class=\"type\">int</span> TeamNum;</span><br><span class=\"line\">    Point3D pos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据这个猜想，只要我们获得了Player的内存大小，我们就可以根据我们角色的地址枚举出其他角色的地址，从而获取其他角色的位置属性。嘶，但是这个角色类的内存大小貌似不好求。我又想到一个方法，如果角色内存大小不是很大的话，我们可以在CE中通过在我们的坐标附近去寻找，是否还有像坐标的地址，如果找到了，那么很可能是其他角色的坐标，我们就可以直接两个坐标地址相减获取角色内存大小，浅试一下。</p>\n<p>找了一下，并没有找到，显然这招对这游戏并不是一个好方法，可能CS2是用类指针数组去存十个人物地址的，也可能是用链表去存的，这方法还是太笨了。只能想另一种方式了。</p>\n<p>还记得我们最开始的C++内存布局揣测么，那既然我们已经找到了基地址和五层偏移，那就意味着我们角色的地址很可能就在这个基地址的相对四层或者三层（或者更少）偏移计算得到，那我们假设，游戏的十个角色是被new出来的，也就是用类指针数组存储十个人物地址的，那我们的角色地址找到之后，偏移8个字节（64位的游戏），那是不是就是其他角色的类指针？再试一次，如下是我们之前找到的基地址和偏移</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/83kdJhUx5fuBF7z.png\" alt=\"image-20240816220135032\"></p>\n<p>试着修改第一层到第四层的偏移值，修改+8。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/fwRH5peyGctUEov.png\" alt=\"image-20240816220248133\"></p>\n<p>到第二层偏移+8时，刚好对应浮点数-120，符合地图的Z坐标范围，点开内存看一眼之前是不是X,Y坐标</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/OjYyd7UpCTiaNRr.png\" alt=\"image-20240816220401734\"></p>\n<p>好像是，让机器人动起来试一试</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/epmv5IlZWQ7JH61.png\" alt=\"image-20240816220500499\"></p>\n<p>没错了！继续+8或者-8定位另外八个角色的第二层偏移。</p>\n<p>直到第二层偏移为60时，内存指向空，所以十个人物的角色第二层偏移是10,18,20,28,30,38,40,48,50,58（十六进制）,刚好对应十个人物角色</p>\n<p>至此，人物位置分析完成，获取的基地址和偏移为</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">坐标偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x128</td>\n</tr>\n<tr>\n<td align=\"center\">0x38</td>\n</tr>\n<tr>\n<td align=\"center\">0x70</td>\n</tr>\n<tr>\n<td align=\"center\">0x10</td>\n</tr>\n<tr>\n<td align=\"center\">0x50</td>\n</tr>\n<tr>\n<td align=\"center\">“server.dll”+01343108</td>\n</tr>\n</tbody></table>\n<p>突然忘了，其他人物血量还没定位，但是这样一看，其他人物的血量地址也出来了，因为血量的前两层偏移和坐标前两层偏移相同，也只需要在第二层偏移（m+8*n）即可。</p>\n<p>继续第三个地址寻找，队伍标识符，按经验推测，会将敌军还是友军置为bool类型，只需要判断01就可以区分保卫者和潜伏者，但是我在控制台输入的时候，他会告诉我这些信息。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/daBOo34EPKUeyfk.png\" alt=\"image-20240816222533854\"></p>\n<p>貌似就是队伍标识符了，但是我们海狮要确定这个的基地址和偏移，根据之前两个基地址和偏移，我们可以进行推测基地址和前两个偏移值都是相同的，只要获取后面的偏移即可。继续用CE进行搜索吧，这里要利用CS2的这个功能去转换阵营，要不然没法CE搜索</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/748BxkYIrFwMSPH.png\" alt=\"image-20240816223153811\"></p>\n<p>先假设潜伏者为2，保卫者为3，进行CE搜索，找到这些地址，</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/1GceTsEQnlaogzS.png\" alt=\"image-20240816223504653\"></p>\n<p>再尝试修改这些数据，修改一次攻击一下友军，看一下提示是否想同，直到出现这个画面</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/tNvFoPRbT8nZ2LI.png\" alt=\"image-20240816232138115\"></p>\n<p>我穿着保卫服却显示我在潜伏者，并且视保卫者为敌人，对这个地址进行指针扫描</p>\n<p>进行指针扫描，找到前两层偏移一样的并进行记录<br><img src=\"https://s2.loli.net/2024/09/27/Bk4nlDdb69OuSGV.png\" alt=\"image-20240816234452411\"></p>\n<p>发现前两层偏移并没有一样的，如果用这些基地址和偏移的话，我们就还得去找其他角色地址的偏移，那太麻烦了，根据这个最后的偏移都是314，试着将我们得到的两个基地址和偏移的最后一个偏移分别改成314看看是否对应结果3，发现带入血量的最后一个偏移时结果对应。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/yPTRf3B2vxN5qpX.png\" alt=\"image-20240816234746538\"></p>\n<p>看来血量和队伍标识符是同属一个子类的，所以队伍标识符的基地址和偏移我们拿到了，这里做一下记录</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">队伍标识符偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0x314</td>\n</tr>\n<tr>\n<td align=\"center\">0xc0</td>\n</tr>\n<tr>\n<td align=\"center\">0x08</td>\n</tr>\n<tr>\n<td align=\"center\">0x10</td>\n</tr>\n<tr>\n<td align=\"center\">0x50</td>\n</tr>\n<tr>\n<td align=\"center\">“server.dll”+01343108</td>\n</tr>\n</tbody></table>\n<p>接着进行视图矩阵的搜索，搜索方法也很简单，只要搜索矩阵中16个浮点数的其中之一就可以了。我们可以针对某个值进行搜索，这个值会在-1.0-1.0之间（也可能稍微超过一点点）,当视角朝向天空是，该值趋近于1.0，朝向地面时，该值趋近于-1.0，根据这个我们可以控制角色看向天空，然后搜索0.8-1.2之间的数值，同理朝向地面，我们搜索-0.8–1.2之间的数值，还可以变动视角搜索变动的值，我这里就是用这种方法进行搜索视图矩阵的。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/LWJpcZQ4nezMGya.png\" alt=\"image-20240817173447606\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/27/QLKTZcYSVFliCgr.png\" alt=\"image-20240817173608316\"></p>\n<p>两次搜索就能筛选到40000数值，接着筛选。最后搜索到还剩1200个地址，</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/jkanmKut8UPWFLX.png\" alt=\"image-20240817174309790\"></p>\n<p>但是我们看见了绿色的基址，把这些基址复制下来一一查看内存布局，看看是否有矩阵特征。</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/7foKnXROiJGMuwT.png\" alt=\"image-20240817175606456\"></p>\n<p>看这三个矩阵，随着视角都是会变动的，但是都是不对的，比如第一个矩阵，有些数据保持不变，不显红色，排除；第二个矩阵，只是一个3*4的矩阵，排除；第三个矩阵，第一行和第二行的前三个数据不符合矩阵数据规范，超过了1.0，排除。一直到这个内存地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/LRFomVcwAniDTxb.png\" alt=\"image-20240817175928546\"></p>\n<p>发现数据刚好符合规范并且是4*4的矩阵，记录下该地址</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">视图矩阵偏移</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">client.dll+19CB4D0</td>\n</tr>\n</tbody></table>\n<p>到这基址和偏移寻找就完成了，接着开始写我们的透视辅助代码</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kWindow.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kGame.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kPlayerPawn.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> isWorldwide 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> isWorldwide</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WINDOWNAME <span class=\"string\">&quot;Counter-Strike 2&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">define WINDOWNAME <span class=\"string\">&quot;反恐精英：全球攻势&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">kWindow* window = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">kGame* game = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">kRender* render = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    window = <span class=\"keyword\">new</span> <span class=\"built_in\">kWindow</span>(WINDOWNAME);</span><br><span class=\"line\">    game = <span class=\"keyword\">new</span> <span class=\"built_in\">kGame</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;cs2.exe&quot;</span>), window-&gt;<span class=\"built_in\">getRect</span>());</span><br><span class=\"line\">\twindow-&gt;<span class=\"built_in\">msgLoop</span>(game);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p>msgLoop</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">kWindow::msgLoop</span><span class=\"params\">(kGame* game)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    kRender* render = <span class=\"keyword\">new</span> <span class=\"built_in\">kRender</span>(hWnd);</span><br><span class=\"line\">    MSG msg;</span><br><span class=\"line\">    <span class=\"built_in\">ZeroMemory</span>(&amp;msg, <span class=\"built_in\">sizeof</span>(msg));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (msg.message != WM_QUIT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">PeekMessage</span>(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0U</span>, <span class=\"number\">0U</span>, PM_REMOVE)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">TranslateMessage</span>(&amp;msg);</span><br><span class=\"line\">            <span class=\"built_in\">DispatchMessage</span>(&amp;msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">doCheat</span>(render,game);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>doCheat</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">kWindow::doCheat</span><span class=\"params\">(kRender* render, kGame* game)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    game-&gt;<span class=\"built_in\">refreshData</span>();</span><br><span class=\"line\">    game-&gt;<span class=\"built_in\">showAllPlayer</span>();</span><br><span class=\"line\">    render-&gt;<span class=\"built_in\">beginRender</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (game-&gt;m_playPawn[i].<span class=\"built_in\">getTeamNum</span>() == game-&gt;m_playPawn[<span class=\"number\">0</span>].<span class=\"built_in\">getTeamNum</span>())</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!game-&gt;m_playPawn[i].<span class=\"built_in\">isAlive</span>())</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        point2D pos = game-&gt;<span class=\"built_in\">world2screen</span>(game-&gt;<span class=\"built_in\">getPlayerPawnPos</span>(i), game-&gt;<span class=\"built_in\">getMatrix</span>());</span><br><span class=\"line\">        point2D posHead = game-&gt;<span class=\"built_in\">world2screen</span>(game-&gt;m_playPawn[i].<span class=\"built_in\">getPosHead</span>(), game-&gt;<span class=\"built_in\">getMatrix</span>());</span><br><span class=\"line\">        render-&gt;<span class=\"built_in\">drawRectangle</span>(pos.x, (pos.y + posHead.y) / <span class=\"number\">2</span>, <span class=\"number\">60</span>, posHead.y - pos.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render-&gt;<span class=\"built_in\">endRender</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>refreshData</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">kGame::refreshData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> server = cs2-&gt;<span class=\"built_in\">get_module_handle</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;server.dll&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> client = cs2-&gt;<span class=\"built_in\">get_module_handle</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;client.dll&quot;</span>));</span><br><span class=\"line\">\tDWORD64 player = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(server + <span class=\"number\">0x1343108</span>, player)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x50</span>, player)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD64 TeamNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x10</span> + <span class=\"number\">0x08</span>*i, TeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(TeamNum + <span class=\"number\">0x08</span>, TeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(TeamNum + <span class=\"number\">0xC0</span>, TeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;(TeamNum + <span class=\"number\">0x314</span>, m_playPawn[i].m_iTeamNum)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDWORD64 Pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x10</span> + <span class=\"number\">0x08</span> * i, Pos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Pos + <span class=\"number\">0x70</span>, Pos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Pos + <span class=\"number\">0x38</span>, Pos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;point3D&gt;(Pos + <span class=\"number\">0x120</span>, m_playPawn[i].m_pPos)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD64 Health = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(player + <span class=\"number\">0x10</span> + <span class=\"number\">0x08</span> * i, Health)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Health + <span class=\"number\">0x08</span>, Health)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;DWORD64&gt;(Health + <span class=\"number\">0xC0</span>, Health)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;(Health + <span class=\"number\">0x2A8</span>, m_playPawn[i].m_iHealth)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cs2-&gt;<span class=\"built_in\">read</span>&lt;Matrix4x4&gt;(client + <span class=\"number\">0x19CB4D0</span>, m_mViewMatrix)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p><img src=\"https://s2.loli.net/2024/09/27/jQtFbaGZEWNO9ml.png\" alt=\"image-20240817180725647\"></p>"},{"title":"2023腾讯游戏安全PC初赛","date":"2024-07-27T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png","thumbnail":"https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n小红是一个PC客户端安全爱好者。有一天她发现一台机器上有一个未知的程序名为contest.exe，这个程序会在当前同个目录下的”contest.txt” 目录里每秒重复写入一次密文的信息。她想了解这个程序究竟写入了什么，并试试能否反过来控制这个程序按自己的意图工作。<!-- more -->\n\n**评分标准:**\n\n（1）在64位**Windows10**系统上运行contest.exe, 找到明文的信息，作为答案提交（1分）。\n\n（2）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 由写入密文信息变为**写入明文信息**成功。（满分2分）\n\n（3）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 往入自行指定的**不同的文件**里写入明文信息成功。（满分3分）\n\n（4）文档编写，详细描述（1）-（3）解题过程，详述提供的解题程序的演示方法。做到清晰易懂，操作可以复现结果。（满2分）\n\n（5）提供（2）和（3）解题演示所用的源代码。要求编码工整风格优雅（1分）、注释详尽（1分）。\n\n**解题要求:**\n\n（1）编写代码，通过注入任何dll或者shellcode或者跨进程修改内存的方式来patch contest.exe的内存，但shellcode不能调用任何系统API。\n\n（2）不得删改contest.exe的文件本身。不得使用任何文件和磁盘相关手段（比如同名文件、设置文件权限占坑等方式）阻止或者破坏contest.exe的执行。\n\n（3）此题编程中不可使用内核驱动程序。\n\n（4）必须使用64位Win10系统解题。\n\n## 分析程序\n\nDIE查壳发现是带了VMP的,发现可以拖到x64dbg里调试,因为运行的时候每秒都会向文件中写入字符串信息,所以可以猜测用到了哪些函数\n\n1. Sleep函数\n2. fwrite,fopen,createFile等文件操作函数\n\n观察符号列表,找到contest.exe模块的导入函数\n\n![image-20240728193537191](https://s2.loli.net/2024/09/28/v7qxI1gCsuMRck2.png)\n\n只找到了Sleep函数,猜测其他函数是通过loadLibraryA来间接使用,先在Sleep函数下断\n\n![image-20240728193855818](https://s2.loli.net/2024/09/28/pbRD7EgyMiaA83K.png)\n\n确实断下来了,栈回溯找到父函数\n\n![image-20240728195907208](https://s2.loli.net/2024/09/28/GW8tyjE1vbAPQpJ.png)\n\n在这个函数里调用了Sleep函数,现在就需要判断这个函数是不是直接存在于死循环体\n\n因为按照猜测程序应该是有一个死循环体,然后在其中调用了Sleep函数,但是可能有多层函数调用需要多次栈回溯\n\n就像这样的代码模型:\n\n```cpp\nvoid run()\n{\n\twhile(1)\n    {\n        fopen(````);\n        fwrite(````);\n        fclose(```);\n        A();\n    }\n}\nvoid A()\n{\n    Sleep(```);\n}\n```\n\n这里通过运行到返回发现程序不停止,说明这个函数已经直接存在于死循环体,那么其他关键文件操作函数也应该存在于这个函数的附近,\n\n对附近所有Call指令下断,清空txt文件,根据回显发现在这两个call之间实现了文件写入\n\n![image-20240728201053902](https://s2.loli.net/2024/09/28/Sas6QvmUBgVzN19.png)\n\n![image-20240728201140512](https://s2.loli.net/2024/09/28/dpWOYtmuAP3KiaV.png)\n\n继续调试发现了是在00007FF7E9D2DA37这个函数内实现了文件内容写入,但是不是每次调用这个函数都会向文件写入,而是每两次调用写入一次文件,暂时不知道为什么,步进分析该函数\n\n![image-20240728201458641](https://s2.loli.net/2024/09/28/7cAnkgO3drDEx9X.png)\n\n到了00007FF7E9D2BCB0这个函数,继续对这个函数内所有call指令下断点分析争取找到具体文件操作函数\n\n下完断点,总共有十多个call指令,依次运行分析\n\n![image-20240728201851319](https://s2.loli.net/2024/09/28/CFQ8vYdW1VA49Le.png)\n\n第一个call指令运行完的返回值是一个字符串`ZyAhZyk4YSgzfS4gZyA7`,猜测是明文或者某个加解密的密钥,继续运行分析\n\n![image-20240728202015211](https://s2.loli.net/2024/09/28/ThWmOv8Apwq5ZKa.png)\n\n第二个call指令的函数传参的第一个参数rcx也是一个字符串`catchmeifyoucan`,emm,这个很明显应该就是明文了,步进函数分析这个rbx函数是个什么东西\n\n![image-20240728202205235](https://s2.loli.net/2024/09/28/htouM3xa58lk4fZ.png)\n\n找到了一个疑似base64加密的表`QRSTUVWXYZabcdefABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuv`,试着将明文和这个表进行一个base64变表加密\n\n![image-20240728202356206](https://s2.loli.net/2024/09/28/CjqxoYZhG2kNmrb.png)\n\ncyberchef跑一下一下发现确实是密文,那明文就确定了,就是`catchmeifyoucan`,继续分析\n\n![image-20240728202702213](https://s2.loli.net/2024/09/28/MowhbdaxmvlNzAZ.png)\n\n第四个call函数的第一个传参RCX是CreateFileA地址,那就应该是创建文件了,题目要求向不同的文件里写入明文信息,那么只要确定文件名所在的参数位置就可以了,观察传参\n\n![image-20240728202941236](https://s2.loli.net/2024/09/28/TsJEU398Vc7CNv2.png)\n\n第6个参数是`contest.txt`,应该就是文件名地址了,继续分析\n\n![image-20240728203143148](https://s2.loli.net/2024/09/28/A6E1SPl4qKVMrzv.png)\n\n![image-20240728203523583](https://s2.loli.net/2024/09/28/Q9OgbukhfAFUw7v.png)\n\n第七个call指令运行完文件就被写入了,然后rcx也是WriteFileA函数地址,所以这里面应该就是一个写入文件,第七个参数是写入字符串内容,根据搜索找到WriteFileA函数定义\n\n```c\nBOOL WriteFile(\n    HANDLE hFile,          // 需要写入数据的文件句柄\n    LPCVOID lpBuffer,      // 指向要写入的数据缓冲区的指针\n    DWORD nNumberOfBytesToWrite, // 要写入的字节数\n    LPDWORD lpNumberOfBytesWritten, // 用于接收实际写入的字节数\n    LPOVERLAPPED lpOverlapped // 指向OVERLAPPED结构的指针，用于异步操作\n);\n```\n\n根据传参顺序和写入的字节数是DWORD类型推断第八个参数的低四字节可能是要写入的字节数,这里对应0x14\n\n有了这些我们就可以初步编写代码,思路就是尝试hook创建文件和写入文件的两个call,传入需要的参数即可\n\n这里最开始是想通过VirtualProtect函数和写入ShellCode来实现hook,但是在调试的时候发现了报错\n\n![image-20240728204525969](https://s2.loli.net/2024/09/28/Fpf7YhJ81NHeyVS.png)\n\n显示没有写入的权限,那只能先加载dll进去调试一番\n\n![image-20240728205314971](https://s2.loli.net/2024/09/28/xTMWVr8E34ztOdQ.png)\n\n![image-20240728205359287](https://s2.loli.net/2024/09/28/pYXRWc9oULE7rQC.png)\n\n根据调试结果发现,在virtualProtect时返回了NULL,步进分析\n\n![image-20240728205602337](https://s2.loli.net/2024/09/28/AJ1NZHrxhCaMGLW.png)\n\n![image-20240728205621763](https://s2.loli.net/2024/09/28/lvrJXcdLYF1m38C.png)\n\n到这发现了一个奇怪的jmp指令,和附近的其他函数形成鲜明对比,猜测作者在这动了手脚,hook了ZwProtectVirtualMemory函数,根据附近汇编代码取消钩子后运行,成功跑出结果\n\n![image-20240728210222057](https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png)\n\n## 代码实现\n\n可以通过注入器UnHook ZwProtectVirtualMemory函数,然后再进行注入\n\n注入器代码:\n\n```c\n#include <Windows.h>\n#include <TlHelp32.h>\n#include <stdio.h>\n#include <tchar.h>\nwchar_t dllPath[] = L\"C:\\\\Users\\\\15386\\\\Desktop\\\\腾旭游戏安全竞赛赛题\\\\23年第一轮\\\\wp\\\\Tencent2023.dll\";\nwchar_t exeName[] = L\"contest.exe\";\nDWORD64 UnHookAddr = 0x00007FFBC1F90990; // ZwProtectVirtualMemory地址\nBYTE UnHookShellCode[] = {\n0x4C, 0x8B, 0xD1, 0xB8, 0x50, 0x00, 0x00, 0x00, 0xF6, 0x04, 0x25, 0x08, 0x03, 0xFE, 0x7F, 0x01,\n 0x75, 0x03, 0x0F, 0x05, 0xC3, 0xCD, 0x2E, 0xC3\n};\n/* Unhook还原ZwProtectVirtualMemory\n00007FFBC1F90990 < | 4C:8BD1                              | mov r10,rcx                                   |\n00007FFBC1F90993   | B8 50000000                          | mov eax,50                                    | 50:'P'\n00007FFBC1F90998   | F60425 0803FE7F 01                   | test byte ptr ds:[7FFE0308],1                 |\n00007FFBC1F909A0   | 75 03                                | jne ntdll.7FFBC1F909A5                        |\n00007FFBC1F909A2   | 0F05                                 | syscall                                       |\n00007FFBC1F909A4   | C3                                   | ret                                           |\n00007FFBC1F909A5   | CD 2E                                | int 2E                                        |\n00007FFBC1F909A7   | C3                                   | ret                                           |\n*/\nBOOL InjectDll(DWORD dwPID, wchar_t* szDllPath)\n{\n\tHANDLE hProcess = NULL, hThread = NULL;\n\tHMODULE hMod = NULL;\n\tLPVOID pRemoteBuf = NULL;\n\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);\n\tLPTHREAD_START_ROUTINE pThreadProc;\n\n\tif (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))\n\t{\n\t\tprintf(\"OpenProcess(%d) failed!!! [%d]\\n\", dwPID, GetLastError());\n\t\treturn FALSE;\n\t}\n\n\t//UnHook\n\tDWORD oldProtect = 0;\n\tif (!VirtualProtectEx(hProcess, (LPVOID)UnHookAddr, sizeof(UnHookShellCode), PAGE_EXECUTE_READWRITE, &oldProtect))\n\t{\n\t\tprintf(\"VirtualProtectEx failed!!! [%d]\\n\", GetLastError());\n\t\treturn FALSE;\n\t}\n\tif (!WriteProcessMemory(hProcess, (LPVOID)UnHookAddr, UnHookShellCode, sizeof(UnHookShellCode), 0))\n\t{\n\t\tprintf(\"UnHook failed!!! [%d]\\n\", GetLastError());\n\t\treturn FALSE;\n\t}\n\tprintf(\"UnHook virtualProtect success!!!\\n\");\n\n\tif (!(pRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE)))\n\t{\n\t\tprintf(\"VirtualAllocEx %d falied!!! [%d]\\n\", hProcess,GetLastError());\n\t\treturn FALSE;\n\t}\n\t\n\tif (!WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL))\n\t{\n\t\tprintf(\"WriteProcess %d Memory fail [%d]\\n\",hProcess, GetLastError());\n\t\treturn FALSE;\n\t}\n\t\n\thMod = GetModuleHandle(L\"kernel32.dll\");\n\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, \"LoadLibraryW\");\n\n\thThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);\n\tWaitForSingleObject(hThread, INFINITE);\n\n\tCloseHandle(hThread);\n\tCloseHandle(hProcess);\n\n\treturn TRUE;\n}\nDWORD ProcessFind(wchar_t* Exename)\n{\n\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n\tif (!hProcess)\n\t{\n\t\treturn FALSE;\n\t}\n\tPROCESSENTRY32 info;\n\tinfo.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hProcess, &info))\n\t{\n\t\treturn FALSE;\n\t}\n\twhile (true)\n\t{\n\t\tif (memcmp(info.szExeFile, Exename, _tcslen(Exename)) == 0)\n\t\t{\n\t\t\treturn info.th32ProcessID;\n\t\t}\n\t\tif (!Process32Next(hProcess, &info))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}\nint main()\n{\n\tDWORD64 pid = ProcessFind(exeName);\n\tif (InjectDll(pid, dllPath))\n\t{\n\t\tprintf(\"InjectDll success\\n\");\n\t}\n\tsystem(\"pause\");\n}\n```\n\ndll代码:\n\n```c\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\nDWORD64 HookAddrA = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xCB90; //创建文件处,call rax,add rsp,3C\nDWORD64 funcA = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xD6A0; // call rax的rax对应地址,需要hook的函数\nDWORD64 ShellCodeAddrA = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0x26B16;\nBYTE HookShellCodeA[] = { 0xE9,0x81,0x9F,0x01,0x00,0x90 };\n/* call rax 段代码\n00007FF7E9D2CB8D   | 45:31C9                              | xor r9d,r9d                                   |\n00007FF7E9D2CB90   | E9 819F0100                          | jmp contest.7FF7E9D46B16                      | 创建文件\n00007FF7E9D2CB95   | 90                                   | nop                                           |\n00007FF7E9D2CB96   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |\n*/\nBYTE ShellCodeA[] = {\n0x48, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD6, 0x48, 0x83, 0xC4, 0x60,\n 0xE9, 0x6B, 0x60, 0xFE, 0xFF\n};\n/* shellCodeA\n00007FF7E9D46B16   | 48:BE 13117A9FFB7F0000               | mov rsi,tencent2023.7FFB9F7A1113              |\n00007FF7E9D46B20   | FFD6                                 | call rsi                                      |\n00007FF7E9D46B22   | 48:83C4 60                           | add rsp,60                                    |\n00007FF7E9D46B26   | E9 6B60FEFF                          | jmp contest.7FF7E9D2CB96                      |\n00007FF7E9D46B2B   | CC                                   | int3                                          |\n*/\ntypedef void (*funAptr)(\nDWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,\nDWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,\nDWORD64 Par9, DWORD64 Par10, DWORD64 Par11);\n\nDWORD64 HookAddrB = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xCEFA;\nDWORD64 ShellCodeAddrB = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0x26BC0;\nBYTE HookShellCodeB[] = {0xE9, 0xC1, 0x9C, 0x01, 0x00, 0x90};\n/*call rax 段代码\n00007FF7E9D2CEF7   | 45:31C9                              | xor r9d,r9d                                   |\n00007FF7E9D2CEFA   | E9 C19C0100                          | jmp contest.7FF7E9D46BC0                      | 写入文件\n00007FF7E9D2CEFF   | 90                                   | nop                                           |\n00007FF7E9D2CF00   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |\n*/\nBYTE ShellCodeB[] = {\n0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x50,\n 0xE9, 0x2B, 0x63, 0xFE, 0xFF\n};\n/* shellCodeB\n00007FF7E9D46BC0   | 48:B8 AD127A9FFB7F0000               | mov rax,tencent2023.7FFB9F7A12AD              |\n00007FF7E9D46BCA   | FFD0                                 | call rax                                      |\n00007FF7E9D46BCC   | 48:83C4 50                           | add rsp,50                                    |\n00007FF7E9D46BD0   | E9 2B63FEFF                          | jmp contest.7FF7E9D2CF00                      |\n00007FF7E9D46BD5   | CC                                   | int3                                          |\n*/\nDWORD64 funcB = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xD6A0; // call rax的rax对应地址,需要hook的函数\ntypedef void (*funBptr)(\n    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,\n    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,\n    DWORD64 Par9, DWORD64 Par10,DWORD64 Par11, DWORD64 Par12,\n    DWORD64 Par13, DWORD64 Par14);\nDWORD oldProtect = 0;\nchar plainText[] = \"catchmeifyoucan\";\nchar fileName[] = \"myContest.txt\";\n\nvoid __fastcall HookFuncA(\n    DWORD64 RCX,DWORD64 RDX,DWORD64 R8,DWORD64 R9,\n    DWORD64 Par5,DWORD64 Par6,DWORD64 Par7,DWORD64 Par8,\n    DWORD64 Par9,DWORD64 Par10,DWORD64 Par11)\n{\n    //第6个参数对应文件名地址\n    memcpy((void*)Par6, fileName, sizeof(fileName)); \n    funAptr ptr = (funAptr)funcA;\n    return ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11);\n}\nvoid __fastcall HookFuncB(\n    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,\n    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,\n    DWORD64 Par9, DWORD64 Par10, DWORD64 Par11,DWORD64 Par12,\n    DWORD64 Par13,DWORD64 Par14)\n{\n    //第7个参数对应明文地址\n    //第8个参数的低四字节对应写入字节数\n    Par8 = (Par8 & 0xFFFFFFFFFFFFFF00) |  (strlen(plainText));\n    memcpy((void*)Par7, plainText, sizeof(plainText));\n    funBptr ptr = (funBptr)funcB;\n    return ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11,Par12,Par13,Par14);\n}\nvoid InstallHookA()\n{\n    VirtualProtect((LPVOID)HookAddrA, sizeof(HookShellCodeA), PAGE_EXECUTE_READWRITE, &oldProtect);\n    memcpy((void*)HookAddrA, HookShellCodeA, sizeof(HookShellCodeA));\n    VirtualProtect((LPVOID)ShellCodeAddrA, sizeof(ShellCodeA), PAGE_EXECUTE_READWRITE, &oldProtect);\n    *(DWORD64*)&ShellCodeA[2] = (DWORD64)HookFuncA;\n    memcpy((void*)ShellCodeAddrA, ShellCodeA, sizeof(ShellCodeA));\n}\nvoid InstallHookB()\n{\n    VirtualProtect((LPVOID)HookAddrB, sizeof(HookShellCodeB), PAGE_EXECUTE_READWRITE, &oldProtect);\n    memcpy((void*)HookAddrB, HookShellCodeB, sizeof(HookShellCodeB));\n    VirtualProtect((LPVOID)ShellCodeAddrB, sizeof(ShellCodeB), PAGE_EXECUTE_READWRITE, &oldProtect);\n    *(DWORD64*)&ShellCodeB[2] = (DWORD64)HookFuncB;\n    memcpy((void*)ShellCodeAddrB, ShellCodeB, sizeof(ShellCodeB));\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        InstallHookB();\n        InstallHookA();\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n\n\n```\n\n\n\n","source":"_posts/2023腾讯游戏安全PC初赛.md","raw":"---\ntitle: 2023腾讯游戏安全PC初赛\ndate: 2024/7/28\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png\nthumbnail: https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n\n---\n\n小红是一个PC客户端安全爱好者。有一天她发现一台机器上有一个未知的程序名为contest.exe，这个程序会在当前同个目录下的”contest.txt” 目录里每秒重复写入一次密文的信息。她想了解这个程序究竟写入了什么，并试试能否反过来控制这个程序按自己的意图工作。<!-- more -->\n\n**评分标准:**\n\n（1）在64位**Windows10**系统上运行contest.exe, 找到明文的信息，作为答案提交（1分）。\n\n（2）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 由写入密文信息变为**写入明文信息**成功。（满分2分）\n\n（3）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 往入自行指定的**不同的文件**里写入明文信息成功。（满分3分）\n\n（4）文档编写，详细描述（1）-（3）解题过程，详述提供的解题程序的演示方法。做到清晰易懂，操作可以复现结果。（满2分）\n\n（5）提供（2）和（3）解题演示所用的源代码。要求编码工整风格优雅（1分）、注释详尽（1分）。\n\n**解题要求:**\n\n（1）编写代码，通过注入任何dll或者shellcode或者跨进程修改内存的方式来patch contest.exe的内存，但shellcode不能调用任何系统API。\n\n（2）不得删改contest.exe的文件本身。不得使用任何文件和磁盘相关手段（比如同名文件、设置文件权限占坑等方式）阻止或者破坏contest.exe的执行。\n\n（3）此题编程中不可使用内核驱动程序。\n\n（4）必须使用64位Win10系统解题。\n\n## 分析程序\n\nDIE查壳发现是带了VMP的,发现可以拖到x64dbg里调试,因为运行的时候每秒都会向文件中写入字符串信息,所以可以猜测用到了哪些函数\n\n1. Sleep函数\n2. fwrite,fopen,createFile等文件操作函数\n\n观察符号列表,找到contest.exe模块的导入函数\n\n![image-20240728193537191](https://s2.loli.net/2024/09/28/v7qxI1gCsuMRck2.png)\n\n只找到了Sleep函数,猜测其他函数是通过loadLibraryA来间接使用,先在Sleep函数下断\n\n![image-20240728193855818](https://s2.loli.net/2024/09/28/pbRD7EgyMiaA83K.png)\n\n确实断下来了,栈回溯找到父函数\n\n![image-20240728195907208](https://s2.loli.net/2024/09/28/GW8tyjE1vbAPQpJ.png)\n\n在这个函数里调用了Sleep函数,现在就需要判断这个函数是不是直接存在于死循环体\n\n因为按照猜测程序应该是有一个死循环体,然后在其中调用了Sleep函数,但是可能有多层函数调用需要多次栈回溯\n\n就像这样的代码模型:\n\n```cpp\nvoid run()\n{\n\twhile(1)\n    {\n        fopen(````);\n        fwrite(````);\n        fclose(```);\n        A();\n    }\n}\nvoid A()\n{\n    Sleep(```);\n}\n```\n\n这里通过运行到返回发现程序不停止,说明这个函数已经直接存在于死循环体,那么其他关键文件操作函数也应该存在于这个函数的附近,\n\n对附近所有Call指令下断,清空txt文件,根据回显发现在这两个call之间实现了文件写入\n\n![image-20240728201053902](https://s2.loli.net/2024/09/28/Sas6QvmUBgVzN19.png)\n\n![image-20240728201140512](https://s2.loli.net/2024/09/28/dpWOYtmuAP3KiaV.png)\n\n继续调试发现了是在00007FF7E9D2DA37这个函数内实现了文件内容写入,但是不是每次调用这个函数都会向文件写入,而是每两次调用写入一次文件,暂时不知道为什么,步进分析该函数\n\n![image-20240728201458641](https://s2.loli.net/2024/09/28/7cAnkgO3drDEx9X.png)\n\n到了00007FF7E9D2BCB0这个函数,继续对这个函数内所有call指令下断点分析争取找到具体文件操作函数\n\n下完断点,总共有十多个call指令,依次运行分析\n\n![image-20240728201851319](https://s2.loli.net/2024/09/28/CFQ8vYdW1VA49Le.png)\n\n第一个call指令运行完的返回值是一个字符串`ZyAhZyk4YSgzfS4gZyA7`,猜测是明文或者某个加解密的密钥,继续运行分析\n\n![image-20240728202015211](https://s2.loli.net/2024/09/28/ThWmOv8Apwq5ZKa.png)\n\n第二个call指令的函数传参的第一个参数rcx也是一个字符串`catchmeifyoucan`,emm,这个很明显应该就是明文了,步进函数分析这个rbx函数是个什么东西\n\n![image-20240728202205235](https://s2.loli.net/2024/09/28/htouM3xa58lk4fZ.png)\n\n找到了一个疑似base64加密的表`QRSTUVWXYZabcdefABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuv`,试着将明文和这个表进行一个base64变表加密\n\n![image-20240728202356206](https://s2.loli.net/2024/09/28/CjqxoYZhG2kNmrb.png)\n\ncyberchef跑一下一下发现确实是密文,那明文就确定了,就是`catchmeifyoucan`,继续分析\n\n![image-20240728202702213](https://s2.loli.net/2024/09/28/MowhbdaxmvlNzAZ.png)\n\n第四个call函数的第一个传参RCX是CreateFileA地址,那就应该是创建文件了,题目要求向不同的文件里写入明文信息,那么只要确定文件名所在的参数位置就可以了,观察传参\n\n![image-20240728202941236](https://s2.loli.net/2024/09/28/TsJEU398Vc7CNv2.png)\n\n第6个参数是`contest.txt`,应该就是文件名地址了,继续分析\n\n![image-20240728203143148](https://s2.loli.net/2024/09/28/A6E1SPl4qKVMrzv.png)\n\n![image-20240728203523583](https://s2.loli.net/2024/09/28/Q9OgbukhfAFUw7v.png)\n\n第七个call指令运行完文件就被写入了,然后rcx也是WriteFileA函数地址,所以这里面应该就是一个写入文件,第七个参数是写入字符串内容,根据搜索找到WriteFileA函数定义\n\n```c\nBOOL WriteFile(\n    HANDLE hFile,          // 需要写入数据的文件句柄\n    LPCVOID lpBuffer,      // 指向要写入的数据缓冲区的指针\n    DWORD nNumberOfBytesToWrite, // 要写入的字节数\n    LPDWORD lpNumberOfBytesWritten, // 用于接收实际写入的字节数\n    LPOVERLAPPED lpOverlapped // 指向OVERLAPPED结构的指针，用于异步操作\n);\n```\n\n根据传参顺序和写入的字节数是DWORD类型推断第八个参数的低四字节可能是要写入的字节数,这里对应0x14\n\n有了这些我们就可以初步编写代码,思路就是尝试hook创建文件和写入文件的两个call,传入需要的参数即可\n\n这里最开始是想通过VirtualProtect函数和写入ShellCode来实现hook,但是在调试的时候发现了报错\n\n![image-20240728204525969](https://s2.loli.net/2024/09/28/Fpf7YhJ81NHeyVS.png)\n\n显示没有写入的权限,那只能先加载dll进去调试一番\n\n![image-20240728205314971](https://s2.loli.net/2024/09/28/xTMWVr8E34ztOdQ.png)\n\n![image-20240728205359287](https://s2.loli.net/2024/09/28/pYXRWc9oULE7rQC.png)\n\n根据调试结果发现,在virtualProtect时返回了NULL,步进分析\n\n![image-20240728205602337](https://s2.loli.net/2024/09/28/AJ1NZHrxhCaMGLW.png)\n\n![image-20240728205621763](https://s2.loli.net/2024/09/28/lvrJXcdLYF1m38C.png)\n\n到这发现了一个奇怪的jmp指令,和附近的其他函数形成鲜明对比,猜测作者在这动了手脚,hook了ZwProtectVirtualMemory函数,根据附近汇编代码取消钩子后运行,成功跑出结果\n\n![image-20240728210222057](https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png)\n\n## 代码实现\n\n可以通过注入器UnHook ZwProtectVirtualMemory函数,然后再进行注入\n\n注入器代码:\n\n```c\n#include <Windows.h>\n#include <TlHelp32.h>\n#include <stdio.h>\n#include <tchar.h>\nwchar_t dllPath[] = L\"C:\\\\Users\\\\15386\\\\Desktop\\\\腾旭游戏安全竞赛赛题\\\\23年第一轮\\\\wp\\\\Tencent2023.dll\";\nwchar_t exeName[] = L\"contest.exe\";\nDWORD64 UnHookAddr = 0x00007FFBC1F90990; // ZwProtectVirtualMemory地址\nBYTE UnHookShellCode[] = {\n0x4C, 0x8B, 0xD1, 0xB8, 0x50, 0x00, 0x00, 0x00, 0xF6, 0x04, 0x25, 0x08, 0x03, 0xFE, 0x7F, 0x01,\n 0x75, 0x03, 0x0F, 0x05, 0xC3, 0xCD, 0x2E, 0xC3\n};\n/* Unhook还原ZwProtectVirtualMemory\n00007FFBC1F90990 < | 4C:8BD1                              | mov r10,rcx                                   |\n00007FFBC1F90993   | B8 50000000                          | mov eax,50                                    | 50:'P'\n00007FFBC1F90998   | F60425 0803FE7F 01                   | test byte ptr ds:[7FFE0308],1                 |\n00007FFBC1F909A0   | 75 03                                | jne ntdll.7FFBC1F909A5                        |\n00007FFBC1F909A2   | 0F05                                 | syscall                                       |\n00007FFBC1F909A4   | C3                                   | ret                                           |\n00007FFBC1F909A5   | CD 2E                                | int 2E                                        |\n00007FFBC1F909A7   | C3                                   | ret                                           |\n*/\nBOOL InjectDll(DWORD dwPID, wchar_t* szDllPath)\n{\n\tHANDLE hProcess = NULL, hThread = NULL;\n\tHMODULE hMod = NULL;\n\tLPVOID pRemoteBuf = NULL;\n\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);\n\tLPTHREAD_START_ROUTINE pThreadProc;\n\n\tif (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))\n\t{\n\t\tprintf(\"OpenProcess(%d) failed!!! [%d]\\n\", dwPID, GetLastError());\n\t\treturn FALSE;\n\t}\n\n\t//UnHook\n\tDWORD oldProtect = 0;\n\tif (!VirtualProtectEx(hProcess, (LPVOID)UnHookAddr, sizeof(UnHookShellCode), PAGE_EXECUTE_READWRITE, &oldProtect))\n\t{\n\t\tprintf(\"VirtualProtectEx failed!!! [%d]\\n\", GetLastError());\n\t\treturn FALSE;\n\t}\n\tif (!WriteProcessMemory(hProcess, (LPVOID)UnHookAddr, UnHookShellCode, sizeof(UnHookShellCode), 0))\n\t{\n\t\tprintf(\"UnHook failed!!! [%d]\\n\", GetLastError());\n\t\treturn FALSE;\n\t}\n\tprintf(\"UnHook virtualProtect success!!!\\n\");\n\n\tif (!(pRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE)))\n\t{\n\t\tprintf(\"VirtualAllocEx %d falied!!! [%d]\\n\", hProcess,GetLastError());\n\t\treturn FALSE;\n\t}\n\t\n\tif (!WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL))\n\t{\n\t\tprintf(\"WriteProcess %d Memory fail [%d]\\n\",hProcess, GetLastError());\n\t\treturn FALSE;\n\t}\n\t\n\thMod = GetModuleHandle(L\"kernel32.dll\");\n\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, \"LoadLibraryW\");\n\n\thThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);\n\tWaitForSingleObject(hThread, INFINITE);\n\n\tCloseHandle(hThread);\n\tCloseHandle(hProcess);\n\n\treturn TRUE;\n}\nDWORD ProcessFind(wchar_t* Exename)\n{\n\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n\tif (!hProcess)\n\t{\n\t\treturn FALSE;\n\t}\n\tPROCESSENTRY32 info;\n\tinfo.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hProcess, &info))\n\t{\n\t\treturn FALSE;\n\t}\n\twhile (true)\n\t{\n\t\tif (memcmp(info.szExeFile, Exename, _tcslen(Exename)) == 0)\n\t\t{\n\t\t\treturn info.th32ProcessID;\n\t\t}\n\t\tif (!Process32Next(hProcess, &info))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}\nint main()\n{\n\tDWORD64 pid = ProcessFind(exeName);\n\tif (InjectDll(pid, dllPath))\n\t{\n\t\tprintf(\"InjectDll success\\n\");\n\t}\n\tsystem(\"pause\");\n}\n```\n\ndll代码:\n\n```c\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\nDWORD64 HookAddrA = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xCB90; //创建文件处,call rax,add rsp,3C\nDWORD64 funcA = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xD6A0; // call rax的rax对应地址,需要hook的函数\nDWORD64 ShellCodeAddrA = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0x26B16;\nBYTE HookShellCodeA[] = { 0xE9,0x81,0x9F,0x01,0x00,0x90 };\n/* call rax 段代码\n00007FF7E9D2CB8D   | 45:31C9                              | xor r9d,r9d                                   |\n00007FF7E9D2CB90   | E9 819F0100                          | jmp contest.7FF7E9D46B16                      | 创建文件\n00007FF7E9D2CB95   | 90                                   | nop                                           |\n00007FF7E9D2CB96   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |\n*/\nBYTE ShellCodeA[] = {\n0x48, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD6, 0x48, 0x83, 0xC4, 0x60,\n 0xE9, 0x6B, 0x60, 0xFE, 0xFF\n};\n/* shellCodeA\n00007FF7E9D46B16   | 48:BE 13117A9FFB7F0000               | mov rsi,tencent2023.7FFB9F7A1113              |\n00007FF7E9D46B20   | FFD6                                 | call rsi                                      |\n00007FF7E9D46B22   | 48:83C4 60                           | add rsp,60                                    |\n00007FF7E9D46B26   | E9 6B60FEFF                          | jmp contest.7FF7E9D2CB96                      |\n00007FF7E9D46B2B   | CC                                   | int3                                          |\n*/\ntypedef void (*funAptr)(\nDWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,\nDWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,\nDWORD64 Par9, DWORD64 Par10, DWORD64 Par11);\n\nDWORD64 HookAddrB = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xCEFA;\nDWORD64 ShellCodeAddrB = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0x26BC0;\nBYTE HookShellCodeB[] = {0xE9, 0xC1, 0x9C, 0x01, 0x00, 0x90};\n/*call rax 段代码\n00007FF7E9D2CEF7   | 45:31C9                              | xor r9d,r9d                                   |\n00007FF7E9D2CEFA   | E9 C19C0100                          | jmp contest.7FF7E9D46BC0                      | 写入文件\n00007FF7E9D2CEFF   | 90                                   | nop                                           |\n00007FF7E9D2CF00   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |\n*/\nBYTE ShellCodeB[] = {\n0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x50,\n 0xE9, 0x2B, 0x63, 0xFE, 0xFF\n};\n/* shellCodeB\n00007FF7E9D46BC0   | 48:B8 AD127A9FFB7F0000               | mov rax,tencent2023.7FFB9F7A12AD              |\n00007FF7E9D46BCA   | FFD0                                 | call rax                                      |\n00007FF7E9D46BCC   | 48:83C4 50                           | add rsp,50                                    |\n00007FF7E9D46BD0   | E9 2B63FEFF                          | jmp contest.7FF7E9D2CF00                      |\n00007FF7E9D46BD5   | CC                                   | int3                                          |\n*/\nDWORD64 funcB = (DWORD64)GetModuleHandleA(\"contest.exe\") + 0xD6A0; // call rax的rax对应地址,需要hook的函数\ntypedef void (*funBptr)(\n    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,\n    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,\n    DWORD64 Par9, DWORD64 Par10,DWORD64 Par11, DWORD64 Par12,\n    DWORD64 Par13, DWORD64 Par14);\nDWORD oldProtect = 0;\nchar plainText[] = \"catchmeifyoucan\";\nchar fileName[] = \"myContest.txt\";\n\nvoid __fastcall HookFuncA(\n    DWORD64 RCX,DWORD64 RDX,DWORD64 R8,DWORD64 R9,\n    DWORD64 Par5,DWORD64 Par6,DWORD64 Par7,DWORD64 Par8,\n    DWORD64 Par9,DWORD64 Par10,DWORD64 Par11)\n{\n    //第6个参数对应文件名地址\n    memcpy((void*)Par6, fileName, sizeof(fileName)); \n    funAptr ptr = (funAptr)funcA;\n    return ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11);\n}\nvoid __fastcall HookFuncB(\n    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,\n    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,\n    DWORD64 Par9, DWORD64 Par10, DWORD64 Par11,DWORD64 Par12,\n    DWORD64 Par13,DWORD64 Par14)\n{\n    //第7个参数对应明文地址\n    //第8个参数的低四字节对应写入字节数\n    Par8 = (Par8 & 0xFFFFFFFFFFFFFF00) |  (strlen(plainText));\n    memcpy((void*)Par7, plainText, sizeof(plainText));\n    funBptr ptr = (funBptr)funcB;\n    return ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11,Par12,Par13,Par14);\n}\nvoid InstallHookA()\n{\n    VirtualProtect((LPVOID)HookAddrA, sizeof(HookShellCodeA), PAGE_EXECUTE_READWRITE, &oldProtect);\n    memcpy((void*)HookAddrA, HookShellCodeA, sizeof(HookShellCodeA));\n    VirtualProtect((LPVOID)ShellCodeAddrA, sizeof(ShellCodeA), PAGE_EXECUTE_READWRITE, &oldProtect);\n    *(DWORD64*)&ShellCodeA[2] = (DWORD64)HookFuncA;\n    memcpy((void*)ShellCodeAddrA, ShellCodeA, sizeof(ShellCodeA));\n}\nvoid InstallHookB()\n{\n    VirtualProtect((LPVOID)HookAddrB, sizeof(HookShellCodeB), PAGE_EXECUTE_READWRITE, &oldProtect);\n    memcpy((void*)HookAddrB, HookShellCodeB, sizeof(HookShellCodeB));\n    VirtualProtect((LPVOID)ShellCodeAddrB, sizeof(ShellCodeB), PAGE_EXECUTE_READWRITE, &oldProtect);\n    *(DWORD64*)&ShellCodeB[2] = (DWORD64)HookFuncB;\n    memcpy((void*)ShellCodeAddrB, ShellCodeB, sizeof(ShellCodeB));\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        InstallHookB();\n        InstallHookA();\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n\n\n```\n\n\n\n","slug":"2023腾讯游戏安全PC初赛","published":1,"updated":"2024-10-02T09:30:31.729Z","layout":"post","photos":[],"link":"","_id":"cm1roa13e0005ugie9a2f6qav","content":"<p>小红是一个PC客户端安全爱好者。有一天她发现一台机器上有一个未知的程序名为contest.exe，这个程序会在当前同个目录下的”contest.txt” 目录里每秒重复写入一次密文的信息。她想了解这个程序究竟写入了什么，并试试能否反过来控制这个程序按自己的意图工作。<span id=\"more\"></span></p>\n<p><strong>评分标准:</strong></p>\n<p>（1）在64位<strong>Windows10</strong>系统上运行contest.exe, 找到明文的信息，作为答案提交（1分）。</p>\n<p>（2）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 由写入密文信息变为<strong>写入明文信息</strong>成功。（满分2分）</p>\n<p>（3）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 往入自行指定的<strong>不同的文件</strong>里写入明文信息成功。（满分3分）</p>\n<p>（4）文档编写，详细描述（1）-（3）解题过程，详述提供的解题程序的演示方法。做到清晰易懂，操作可以复现结果。（满2分）</p>\n<p>（5）提供（2）和（3）解题演示所用的源代码。要求编码工整风格优雅（1分）、注释详尽（1分）。</p>\n<p><strong>解题要求:</strong></p>\n<p>（1）编写代码，通过注入任何dll或者shellcode或者跨进程修改内存的方式来patch contest.exe的内存，但shellcode不能调用任何系统API。</p>\n<p>（2）不得删改contest.exe的文件本身。不得使用任何文件和磁盘相关手段（比如同名文件、设置文件权限占坑等方式）阻止或者破坏contest.exe的执行。</p>\n<p>（3）此题编程中不可使用内核驱动程序。</p>\n<p>（4）必须使用64位Win10系统解题。</p>\n<h2 id=\"分析程序\"><a href=\"#分析程序\" class=\"headerlink\" title=\"分析程序\"></a>分析程序</h2><p>DIE查壳发现是带了VMP的,发现可以拖到x64dbg里调试,因为运行的时候每秒都会向文件中写入字符串信息,所以可以猜测用到了哪些函数</p>\n<ol>\n<li>Sleep函数</li>\n<li>fwrite,fopen,createFile等文件操作函数</li>\n</ol>\n<p>观察符号列表,找到contest.exe模块的导入函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/v7qxI1gCsuMRck2.png\" alt=\"image-20240728193537191\"></p>\n<p>只找到了Sleep函数,猜测其他函数是通过loadLibraryA来间接使用,先在Sleep函数下断</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/pbRD7EgyMiaA83K.png\" alt=\"image-20240728193855818\"></p>\n<p>确实断下来了,栈回溯找到父函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/GW8tyjE1vbAPQpJ.png\" alt=\"image-20240728195907208\"></p>\n<p>在这个函数里调用了Sleep函数,现在就需要判断这个函数是不是直接存在于死循环体</p>\n<p>因为按照猜测程序应该是有一个死循环体,然后在其中调用了Sleep函数,但是可能有多层函数调用需要多次栈回溯</p>\n<p>就像这样的代码模型:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fopen</span>(````);</span><br><span class=\"line\">        <span class=\"built_in\">fwrite</span>(````);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(```);</span><br><span class=\"line\">        <span class=\"built_in\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Sleep</span>(```);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里通过运行到返回发现程序不停止,说明这个函数已经直接存在于死循环体,那么其他关键文件操作函数也应该存在于这个函数的附近,</p>\n<p>对附近所有Call指令下断,清空txt文件,根据回显发现在这两个call之间实现了文件写入</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Sas6QvmUBgVzN19.png\" alt=\"image-20240728201053902\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/dpWOYtmuAP3KiaV.png\" alt=\"image-20240728201140512\"></p>\n<p>继续调试发现了是在00007FF7E9D2DA37这个函数内实现了文件内容写入,但是不是每次调用这个函数都会向文件写入,而是每两次调用写入一次文件,暂时不知道为什么,步进分析该函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/7cAnkgO3drDEx9X.png\" alt=\"image-20240728201458641\"></p>\n<p>到了00007FF7E9D2BCB0这个函数,继续对这个函数内所有call指令下断点分析争取找到具体文件操作函数</p>\n<p>下完断点,总共有十多个call指令,依次运行分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CFQ8vYdW1VA49Le.png\" alt=\"image-20240728201851319\"></p>\n<p>第一个call指令运行完的返回值是一个字符串<code>ZyAhZyk4YSgzfS4gZyA7</code>,猜测是明文或者某个加解密的密钥,继续运行分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ThWmOv8Apwq5ZKa.png\" alt=\"image-20240728202015211\"></p>\n<p>第二个call指令的函数传参的第一个参数rcx也是一个字符串<code>catchmeifyoucan</code>,emm,这个很明显应该就是明文了,步进函数分析这个rbx函数是个什么东西</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/htouM3xa58lk4fZ.png\" alt=\"image-20240728202205235\"></p>\n<p>找到了一个疑似base64加密的表<code>QRSTUVWXYZabcdefABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuv</code>,试着将明文和这个表进行一个base64变表加密</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CjqxoYZhG2kNmrb.png\" alt=\"image-20240728202356206\"></p>\n<p>cyberchef跑一下一下发现确实是密文,那明文就确定了,就是<code>catchmeifyoucan</code>,继续分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/MowhbdaxmvlNzAZ.png\" alt=\"image-20240728202702213\"></p>\n<p>第四个call函数的第一个传参RCX是CreateFileA地址,那就应该是创建文件了,题目要求向不同的文件里写入明文信息,那么只要确定文件名所在的参数位置就可以了,观察传参</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/TsJEU398Vc7CNv2.png\" alt=\"image-20240728202941236\"></p>\n<p>第6个参数是<code>contest.txt</code>,应该就是文件名地址了,继续分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/A6E1SPl4qKVMrzv.png\" alt=\"image-20240728203143148\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Q9OgbukhfAFUw7v.png\" alt=\"image-20240728203523583\"></p>\n<p>第七个call指令运行完文件就被写入了,然后rcx也是WriteFileA函数地址,所以这里面应该就是一个写入文件,第七个参数是写入字符串内容,根据搜索找到WriteFileA函数定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">WriteFile</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE hFile,          <span class=\"comment\">// 需要写入数据的文件句柄</span></span></span><br><span class=\"line\"><span class=\"params\">    LPCVOID lpBuffer,      <span class=\"comment\">// 指向要写入的数据缓冲区的指针</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD nNumberOfBytesToWrite, <span class=\"comment\">// 要写入的字节数</span></span></span><br><span class=\"line\"><span class=\"params\">    LPDWORD lpNumberOfBytesWritten, <span class=\"comment\">// 用于接收实际写入的字节数</span></span></span><br><span class=\"line\"><span class=\"params\">    LPOVERLAPPED lpOverlapped <span class=\"comment\">// 指向OVERLAPPED结构的指针，用于异步操作</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据传参顺序和写入的字节数是DWORD类型推断第八个参数的低四字节可能是要写入的字节数,这里对应0x14</p>\n<p>有了这些我们就可以初步编写代码,思路就是尝试hook创建文件和写入文件的两个call,传入需要的参数即可</p>\n<p>这里最开始是想通过VirtualProtect函数和写入ShellCode来实现hook,但是在调试的时候发现了报错</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Fpf7YhJ81NHeyVS.png\" alt=\"image-20240728204525969\"></p>\n<p>显示没有写入的权限,那只能先加载dll进去调试一番</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/xTMWVr8E34ztOdQ.png\" alt=\"image-20240728205314971\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/pYXRWc9oULE7rQC.png\" alt=\"image-20240728205359287\"></p>\n<p>根据调试结果发现,在virtualProtect时返回了NULL,步进分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/AJ1NZHrxhCaMGLW.png\" alt=\"image-20240728205602337\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/lvrJXcdLYF1m38C.png\" alt=\"image-20240728205621763\"></p>\n<p>到这发现了一个奇怪的jmp指令,和附近的其他函数形成鲜明对比,猜测作者在这动了手脚,hook了ZwProtectVirtualMemory函数,根据附近汇编代码取消钩子后运行,成功跑出结果</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png\" alt=\"image-20240728210222057\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>可以通过注入器UnHook ZwProtectVirtualMemory函数,然后再进行注入</p>\n<p>注入器代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;TlHelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tchar.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">wchar_t</span> dllPath[] = <span class=\"string\">L&quot;C:\\\\Users\\\\15386\\\\Desktop\\\\腾旭游戏安全竞赛赛题\\\\23年第一轮\\\\wp\\\\Tencent2023.dll&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">wchar_t</span> exeName[] = <span class=\"string\">L&quot;contest.exe&quot;</span>;</span><br><span class=\"line\">DWORD64 UnHookAddr = <span class=\"number\">0x00007FFBC1F90990</span>; <span class=\"comment\">// ZwProtectVirtualMemory地址</span></span><br><span class=\"line\">BYTE UnHookShellCode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x4C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x01</span>,</span><br><span class=\"line\"> <span class=\"number\">0x75</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0xC3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* Unhook还原ZwProtectVirtualMemory</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F90990 &lt; | 4C:8BD1                              | mov r10,rcx                                   |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F90993   | B8 50000000                          | mov eax,50                                    | 50:&#x27;P&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F90998   | F60425 0803FE7F 01                   | test byte ptr ds:[7FFE0308],1                 |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A0   | 75 03                                | jne ntdll.7FFBC1F909A5                        |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A2   | 0F05                                 | syscall                                       |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A4   | C3                                   | ret                                           |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A5   | CD 2E                                | int 2E                                        |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A7   | C3                                   | ret                                           |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(DWORD dwPID, <span class=\"type\">wchar_t</span>* szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>, hThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tHMODULE hMod = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID pRemoteBuf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(TCHAR);</span><br><span class=\"line\">\tLPTHREAD_START_ROUTINE pThreadProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OpenProcess(%d) failed!!! [%d]\\n&quot;</span>, dwPID, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//UnHook</span></span><br><span class=\"line\">\tDWORD oldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!VirtualProtectEx(hProcess, (LPVOID)UnHookAddr, <span class=\"keyword\">sizeof</span>(UnHookShellCode), PAGE_EXECUTE_READWRITE, &amp;oldProtect))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualProtectEx failed!!! [%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, (LPVOID)UnHookAddr, UnHookShellCode, <span class=\"keyword\">sizeof</span>(UnHookShellCode), <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;UnHook failed!!! [%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;UnHook virtualProtect success!!!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(pRemoteBuf = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualAllocEx %d falied!!! [%d]\\n&quot;</span>, hProcess,GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WriteProcess %d Memory fail [%d]\\n&quot;</span>,hProcess, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\thMod = GetModuleHandle(<span class=\"string\">L&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\">\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, <span class=\"string\">&quot;LoadLibraryW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\thThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, pThreadProc, pRemoteBuf, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hThread);</span><br><span class=\"line\">\tCloseHandle(hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DWORD <span class=\"title function_\">ProcessFind</span><span class=\"params\">(<span class=\"type\">wchar_t</span>* Exename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPROCESSENTRY32 info;</span><br><span class=\"line\">\tinfo.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!Process32First(hProcess, &amp;info))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(info.szExeFile, Exename, _tcslen(Exename)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> info.th32ProcessID;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Process32Next(hProcess, &amp;info))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD64 pid = ProcessFind(exeName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (InjectDll(pid, dllPath))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InjectDll success\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dll代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\">DWORD64 HookAddrA = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xCB90</span>; <span class=\"comment\">//创建文件处,call rax,add rsp,3C</span></span><br><span class=\"line\">DWORD64 funcA = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xD6A0</span>; <span class=\"comment\">// call rax的rax对应地址,需要hook的函数</span></span><br><span class=\"line\">DWORD64 ShellCodeAddrA = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0x26B16</span>;</span><br><span class=\"line\">BYTE HookShellCodeA[] = &#123; <span class=\"number\">0xE9</span>,<span class=\"number\">0x81</span>,<span class=\"number\">0x9F</span>,<span class=\"number\">0x01</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x90</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">/* call rax 段代码</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB8D   | 45:31C9                              | xor r9d,r9d                                   |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB90   | E9 819F0100                          | jmp contest.7FF7E9D46B16                      | 创建文件</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB95   | 90                                   | nop                                           |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB96   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BYTE ShellCodeA[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD6</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x60</span>,</span><br><span class=\"line\"> <span class=\"number\">0xE9</span>, <span class=\"number\">0x6B</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* shellCodeA</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B16   | 48:BE 13117A9FFB7F0000               | mov rsi,tencent2023.7FFB9F7A1113              |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B20   | FFD6                                 | call rsi                                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B22   | 48:83C4 60                           | add rsp,60                                    |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B26   | E9 6B60FEFF                          | jmp contest.7FF7E9D2CB96                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B2B   | CC                                   | int3                                          |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*funAptr)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">DWORD64 Par9, DWORD64 Par10, DWORD64 Par11)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD64 HookAddrB = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xCEFA</span>;</span><br><span class=\"line\">DWORD64 ShellCodeAddrB = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0x26BC0</span>;</span><br><span class=\"line\">BYTE HookShellCodeB[] = &#123;<span class=\"number\">0xE9</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x9C</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x90</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*call rax 段代码</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CEF7   | 45:31C9                              | xor r9d,r9d                                   |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CEFA   | E9 C19C0100                          | jmp contest.7FF7E9D46BC0                      | 写入文件</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CEFF   | 90                                   | nop                                           |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CF00   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BYTE ShellCodeB[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x50</span>,</span><br><span class=\"line\"> <span class=\"number\">0xE9</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* shellCodeB</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BC0   | 48:B8 AD127A9FFB7F0000               | mov rax,tencent2023.7FFB9F7A12AD              |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BCA   | FFD0                                 | call rax                                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BCC   | 48:83C4 50                           | add rsp,50                                    |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BD0   | E9 2B63FEFF                          | jmp contest.7FF7E9D2CF00                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BD5   | CC                                   | int3                                          |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">DWORD64 funcB = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xD6A0</span>; <span class=\"comment\">// call rax的rax对应地址,需要hook的函数</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*funBptr)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par9, DWORD64 Par10,DWORD64 Par11, DWORD64 Par12,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par13, DWORD64 Par14)</span>;</span><br><span class=\"line\">DWORD oldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> plainText[] = <span class=\"string\">&quot;catchmeifyoucan&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> fileName[] = <span class=\"string\">&quot;myContest.txt&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">HookFuncA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 RCX,DWORD64 RDX,DWORD64 R8,DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par5,DWORD64 Par6,DWORD64 Par7,DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par9,DWORD64 Par10,DWORD64 Par11)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第6个参数对应文件名地址</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)Par6, fileName, <span class=\"keyword\">sizeof</span>(fileName)); </span><br><span class=\"line\">    funAptr ptr = (funAptr)funcA;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">HookFuncB</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par9, DWORD64 Par10, DWORD64 Par11,DWORD64 Par12,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par13,DWORD64 Par14)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第7个参数对应明文地址</span></span><br><span class=\"line\">    <span class=\"comment\">//第8个参数的低四字节对应写入字节数</span></span><br><span class=\"line\">    Par8 = (Par8 &amp; <span class=\"number\">0xFFFFFFFFFFFFFF00</span>) |  (<span class=\"built_in\">strlen</span>(plainText));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)Par7, plainText, <span class=\"keyword\">sizeof</span>(plainText));</span><br><span class=\"line\">    funBptr ptr = (funBptr)funcB;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11,Par12,Par13,Par14);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InstallHookA</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VirtualProtect((LPVOID)HookAddrA, <span class=\"keyword\">sizeof</span>(HookShellCodeA), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HookAddrA, HookShellCodeA, <span class=\"keyword\">sizeof</span>(HookShellCodeA));</span><br><span class=\"line\">    VirtualProtect((LPVOID)ShellCodeAddrA, <span class=\"keyword\">sizeof</span>(ShellCodeA), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    *(DWORD64*)&amp;ShellCodeA[<span class=\"number\">2</span>] = (DWORD64)HookFuncA;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)ShellCodeAddrA, ShellCodeA, <span class=\"keyword\">sizeof</span>(ShellCodeA));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InstallHookB</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VirtualProtect((LPVOID)HookAddrB, <span class=\"keyword\">sizeof</span>(HookShellCodeB), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HookAddrB, HookShellCodeB, <span class=\"keyword\">sizeof</span>(HookShellCodeB));</span><br><span class=\"line\">    VirtualProtect((LPVOID)ShellCodeAddrB, <span class=\"keyword\">sizeof</span>(ShellCodeB), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    *(DWORD64*)&amp;ShellCodeB[<span class=\"number\">2</span>] = (DWORD64)HookFuncB;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)ShellCodeAddrB, ShellCodeB, <span class=\"keyword\">sizeof</span>(ShellCodeB));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        InstallHookB();</span><br><span class=\"line\">        InstallHookA();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>小红是一个PC客户端安全爱好者。有一天她发现一台机器上有一个未知的程序名为contest.exe，这个程序会在当前同个目录下的”contest.txt” 目录里每秒重复写入一次密文的信息。她想了解这个程序究竟写入了什么，并试试能否反过来控制这个程序按自己的意图工作。","more":"</p>\n<p><strong>评分标准:</strong></p>\n<p>（1）在64位<strong>Windows10</strong>系统上运行contest.exe, 找到明文的信息，作为答案提交（1分）。</p>\n<p>（2）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 由写入密文信息变为<strong>写入明文信息</strong>成功。（满分2分）</p>\n<p>（3）编写程序，运行时修改尽量少的contest.exe内存，让contest.exe 往入自行指定的<strong>不同的文件</strong>里写入明文信息成功。（满分3分）</p>\n<p>（4）文档编写，详细描述（1）-（3）解题过程，详述提供的解题程序的演示方法。做到清晰易懂，操作可以复现结果。（满2分）</p>\n<p>（5）提供（2）和（3）解题演示所用的源代码。要求编码工整风格优雅（1分）、注释详尽（1分）。</p>\n<p><strong>解题要求:</strong></p>\n<p>（1）编写代码，通过注入任何dll或者shellcode或者跨进程修改内存的方式来patch contest.exe的内存，但shellcode不能调用任何系统API。</p>\n<p>（2）不得删改contest.exe的文件本身。不得使用任何文件和磁盘相关手段（比如同名文件、设置文件权限占坑等方式）阻止或者破坏contest.exe的执行。</p>\n<p>（3）此题编程中不可使用内核驱动程序。</p>\n<p>（4）必须使用64位Win10系统解题。</p>\n<h2 id=\"分析程序\"><a href=\"#分析程序\" class=\"headerlink\" title=\"分析程序\"></a>分析程序</h2><p>DIE查壳发现是带了VMP的,发现可以拖到x64dbg里调试,因为运行的时候每秒都会向文件中写入字符串信息,所以可以猜测用到了哪些函数</p>\n<ol>\n<li>Sleep函数</li>\n<li>fwrite,fopen,createFile等文件操作函数</li>\n</ol>\n<p>观察符号列表,找到contest.exe模块的导入函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/v7qxI1gCsuMRck2.png\" alt=\"image-20240728193537191\"></p>\n<p>只找到了Sleep函数,猜测其他函数是通过loadLibraryA来间接使用,先在Sleep函数下断</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/pbRD7EgyMiaA83K.png\" alt=\"image-20240728193855818\"></p>\n<p>确实断下来了,栈回溯找到父函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/GW8tyjE1vbAPQpJ.png\" alt=\"image-20240728195907208\"></p>\n<p>在这个函数里调用了Sleep函数,现在就需要判断这个函数是不是直接存在于死循环体</p>\n<p>因为按照猜测程序应该是有一个死循环体,然后在其中调用了Sleep函数,但是可能有多层函数调用需要多次栈回溯</p>\n<p>就像这样的代码模型:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fopen</span>(````);</span><br><span class=\"line\">        <span class=\"built_in\">fwrite</span>(````);</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(```);</span><br><span class=\"line\">        <span class=\"built_in\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Sleep</span>(```);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里通过运行到返回发现程序不停止,说明这个函数已经直接存在于死循环体,那么其他关键文件操作函数也应该存在于这个函数的附近,</p>\n<p>对附近所有Call指令下断,清空txt文件,根据回显发现在这两个call之间实现了文件写入</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Sas6QvmUBgVzN19.png\" alt=\"image-20240728201053902\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/dpWOYtmuAP3KiaV.png\" alt=\"image-20240728201140512\"></p>\n<p>继续调试发现了是在00007FF7E9D2DA37这个函数内实现了文件内容写入,但是不是每次调用这个函数都会向文件写入,而是每两次调用写入一次文件,暂时不知道为什么,步进分析该函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/7cAnkgO3drDEx9X.png\" alt=\"image-20240728201458641\"></p>\n<p>到了00007FF7E9D2BCB0这个函数,继续对这个函数内所有call指令下断点分析争取找到具体文件操作函数</p>\n<p>下完断点,总共有十多个call指令,依次运行分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CFQ8vYdW1VA49Le.png\" alt=\"image-20240728201851319\"></p>\n<p>第一个call指令运行完的返回值是一个字符串<code>ZyAhZyk4YSgzfS4gZyA7</code>,猜测是明文或者某个加解密的密钥,继续运行分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ThWmOv8Apwq5ZKa.png\" alt=\"image-20240728202015211\"></p>\n<p>第二个call指令的函数传参的第一个参数rcx也是一个字符串<code>catchmeifyoucan</code>,emm,这个很明显应该就是明文了,步进函数分析这个rbx函数是个什么东西</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/htouM3xa58lk4fZ.png\" alt=\"image-20240728202205235\"></p>\n<p>找到了一个疑似base64加密的表<code>QRSTUVWXYZabcdefABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuv</code>,试着将明文和这个表进行一个base64变表加密</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CjqxoYZhG2kNmrb.png\" alt=\"image-20240728202356206\"></p>\n<p>cyberchef跑一下一下发现确实是密文,那明文就确定了,就是<code>catchmeifyoucan</code>,继续分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/MowhbdaxmvlNzAZ.png\" alt=\"image-20240728202702213\"></p>\n<p>第四个call函数的第一个传参RCX是CreateFileA地址,那就应该是创建文件了,题目要求向不同的文件里写入明文信息,那么只要确定文件名所在的参数位置就可以了,观察传参</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/TsJEU398Vc7CNv2.png\" alt=\"image-20240728202941236\"></p>\n<p>第6个参数是<code>contest.txt</code>,应该就是文件名地址了,继续分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/A6E1SPl4qKVMrzv.png\" alt=\"image-20240728203143148\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Q9OgbukhfAFUw7v.png\" alt=\"image-20240728203523583\"></p>\n<p>第七个call指令运行完文件就被写入了,然后rcx也是WriteFileA函数地址,所以这里面应该就是一个写入文件,第七个参数是写入字符串内容,根据搜索找到WriteFileA函数定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">WriteFile</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE hFile,          <span class=\"comment\">// 需要写入数据的文件句柄</span></span></span><br><span class=\"line\"><span class=\"params\">    LPCVOID lpBuffer,      <span class=\"comment\">// 指向要写入的数据缓冲区的指针</span></span></span><br><span class=\"line\"><span class=\"params\">    DWORD nNumberOfBytesToWrite, <span class=\"comment\">// 要写入的字节数</span></span></span><br><span class=\"line\"><span class=\"params\">    LPDWORD lpNumberOfBytesWritten, <span class=\"comment\">// 用于接收实际写入的字节数</span></span></span><br><span class=\"line\"><span class=\"params\">    LPOVERLAPPED lpOverlapped <span class=\"comment\">// 指向OVERLAPPED结构的指针，用于异步操作</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据传参顺序和写入的字节数是DWORD类型推断第八个参数的低四字节可能是要写入的字节数,这里对应0x14</p>\n<p>有了这些我们就可以初步编写代码,思路就是尝试hook创建文件和写入文件的两个call,传入需要的参数即可</p>\n<p>这里最开始是想通过VirtualProtect函数和写入ShellCode来实现hook,但是在调试的时候发现了报错</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Fpf7YhJ81NHeyVS.png\" alt=\"image-20240728204525969\"></p>\n<p>显示没有写入的权限,那只能先加载dll进去调试一番</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/xTMWVr8E34ztOdQ.png\" alt=\"image-20240728205314971\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/pYXRWc9oULE7rQC.png\" alt=\"image-20240728205359287\"></p>\n<p>根据调试结果发现,在virtualProtect时返回了NULL,步进分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/AJ1NZHrxhCaMGLW.png\" alt=\"image-20240728205602337\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/lvrJXcdLYF1m38C.png\" alt=\"image-20240728205621763\"></p>\n<p>到这发现了一个奇怪的jmp指令,和附近的其他函数形成鲜明对比,猜测作者在这动了手脚,hook了ZwProtectVirtualMemory函数,根据附近汇编代码取消钩子后运行,成功跑出结果</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/nRTpS6r2u95Q8bY.png\" alt=\"image-20240728210222057\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>可以通过注入器UnHook ZwProtectVirtualMemory函数,然后再进行注入</p>\n<p>注入器代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;TlHelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tchar.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">wchar_t</span> dllPath[] = <span class=\"string\">L&quot;C:\\\\Users\\\\15386\\\\Desktop\\\\腾旭游戏安全竞赛赛题\\\\23年第一轮\\\\wp\\\\Tencent2023.dll&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">wchar_t</span> exeName[] = <span class=\"string\">L&quot;contest.exe&quot;</span>;</span><br><span class=\"line\">DWORD64 UnHookAddr = <span class=\"number\">0x00007FFBC1F90990</span>; <span class=\"comment\">// ZwProtectVirtualMemory地址</span></span><br><span class=\"line\">BYTE UnHookShellCode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x4C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x01</span>,</span><br><span class=\"line\"> <span class=\"number\">0x75</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0xC3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* Unhook还原ZwProtectVirtualMemory</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F90990 &lt; | 4C:8BD1                              | mov r10,rcx                                   |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F90993   | B8 50000000                          | mov eax,50                                    | 50:&#x27;P&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F90998   | F60425 0803FE7F 01                   | test byte ptr ds:[7FFE0308],1                 |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A0   | 75 03                                | jne ntdll.7FFBC1F909A5                        |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A2   | 0F05                                 | syscall                                       |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A4   | C3                                   | ret                                           |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A5   | CD 2E                                | int 2E                                        |</span></span><br><span class=\"line\"><span class=\"comment\">00007FFBC1F909A7   | C3                                   | ret                                           |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(DWORD dwPID, <span class=\"type\">wchar_t</span>* szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>, hThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tHMODULE hMod = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID pRemoteBuf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(TCHAR);</span><br><span class=\"line\">\tLPTHREAD_START_ROUTINE pThreadProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OpenProcess(%d) failed!!! [%d]\\n&quot;</span>, dwPID, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//UnHook</span></span><br><span class=\"line\">\tDWORD oldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!VirtualProtectEx(hProcess, (LPVOID)UnHookAddr, <span class=\"keyword\">sizeof</span>(UnHookShellCode), PAGE_EXECUTE_READWRITE, &amp;oldProtect))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualProtectEx failed!!! [%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, (LPVOID)UnHookAddr, UnHookShellCode, <span class=\"keyword\">sizeof</span>(UnHookShellCode), <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;UnHook failed!!! [%d]\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;UnHook virtualProtect success!!!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(pRemoteBuf = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualAllocEx %d falied!!! [%d]\\n&quot;</span>, hProcess,GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WriteProcess %d Memory fail [%d]\\n&quot;</span>,hProcess, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\thMod = GetModuleHandle(<span class=\"string\">L&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\">\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, <span class=\"string\">&quot;LoadLibraryW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\thThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, pThreadProc, pRemoteBuf, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hThread);</span><br><span class=\"line\">\tCloseHandle(hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DWORD <span class=\"title function_\">ProcessFind</span><span class=\"params\">(<span class=\"type\">wchar_t</span>* Exename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPROCESSENTRY32 info;</span><br><span class=\"line\">\tinfo.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!Process32First(hProcess, &amp;info))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(info.szExeFile, Exename, _tcslen(Exename)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> info.th32ProcessID;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Process32Next(hProcess, &amp;info))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD64 pid = ProcessFind(exeName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (InjectDll(pid, dllPath))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InjectDll success\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dll代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\">DWORD64 HookAddrA = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xCB90</span>; <span class=\"comment\">//创建文件处,call rax,add rsp,3C</span></span><br><span class=\"line\">DWORD64 funcA = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xD6A0</span>; <span class=\"comment\">// call rax的rax对应地址,需要hook的函数</span></span><br><span class=\"line\">DWORD64 ShellCodeAddrA = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0x26B16</span>;</span><br><span class=\"line\">BYTE HookShellCodeA[] = &#123; <span class=\"number\">0xE9</span>,<span class=\"number\">0x81</span>,<span class=\"number\">0x9F</span>,<span class=\"number\">0x01</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x90</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">/* call rax 段代码</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB8D   | 45:31C9                              | xor r9d,r9d                                   |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB90   | E9 819F0100                          | jmp contest.7FF7E9D46B16                      | 创建文件</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB95   | 90                                   | nop                                           |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CB96   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BYTE ShellCodeA[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD6</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x60</span>,</span><br><span class=\"line\"> <span class=\"number\">0xE9</span>, <span class=\"number\">0x6B</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* shellCodeA</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B16   | 48:BE 13117A9FFB7F0000               | mov rsi,tencent2023.7FFB9F7A1113              |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B20   | FFD6                                 | call rsi                                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B22   | 48:83C4 60                           | add rsp,60                                    |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B26   | E9 6B60FEFF                          | jmp contest.7FF7E9D2CB96                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46B2B   | CC                                   | int3                                          |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*funAptr)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">DWORD64 Par9, DWORD64 Par10, DWORD64 Par11)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD64 HookAddrB = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xCEFA</span>;</span><br><span class=\"line\">DWORD64 ShellCodeAddrB = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0x26BC0</span>;</span><br><span class=\"line\">BYTE HookShellCodeB[] = &#123;<span class=\"number\">0xE9</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x9C</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x90</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*call rax 段代码</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CEF7   | 45:31C9                              | xor r9d,r9d                                   |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CEFA   | E9 C19C0100                          | jmp contest.7FF7E9D46BC0                      | 写入文件</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CEFF   | 90                                   | nop                                           |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D2CF00   | 48:8B45 A0                           | mov rax,qword ptr ss:[rbp-60]                 |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BYTE ShellCodeB[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x50</span>,</span><br><span class=\"line\"> <span class=\"number\">0xE9</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* shellCodeB</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BC0   | 48:B8 AD127A9FFB7F0000               | mov rax,tencent2023.7FFB9F7A12AD              |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BCA   | FFD0                                 | call rax                                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BCC   | 48:83C4 50                           | add rsp,50                                    |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BD0   | E9 2B63FEFF                          | jmp contest.7FF7E9D2CF00                      |</span></span><br><span class=\"line\"><span class=\"comment\">00007FF7E9D46BD5   | CC                                   | int3                                          |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">DWORD64 funcB = (DWORD64)GetModuleHandleA(<span class=\"string\">&quot;contest.exe&quot;</span>) + <span class=\"number\">0xD6A0</span>; <span class=\"comment\">// call rax的rax对应地址,需要hook的函数</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*funBptr)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par9, DWORD64 Par10,DWORD64 Par11, DWORD64 Par12,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par13, DWORD64 Par14)</span>;</span><br><span class=\"line\">DWORD oldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> plainText[] = <span class=\"string\">&quot;catchmeifyoucan&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> fileName[] = <span class=\"string\">&quot;myContest.txt&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">HookFuncA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 RCX,DWORD64 RDX,DWORD64 R8,DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par5,DWORD64 Par6,DWORD64 Par7,DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par9,DWORD64 Par10,DWORD64 Par11)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第6个参数对应文件名地址</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)Par6, fileName, <span class=\"keyword\">sizeof</span>(fileName)); </span><br><span class=\"line\">    funAptr ptr = (funAptr)funcA;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">HookFuncB</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 RCX, DWORD64 RDX, DWORD64 R8, DWORD64 R9,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par5, DWORD64 Par6, DWORD64 Par7, DWORD64 Par8,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par9, DWORD64 Par10, DWORD64 Par11,DWORD64 Par12,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD64 Par13,DWORD64 Par14)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第7个参数对应明文地址</span></span><br><span class=\"line\">    <span class=\"comment\">//第8个参数的低四字节对应写入字节数</span></span><br><span class=\"line\">    Par8 = (Par8 &amp; <span class=\"number\">0xFFFFFFFFFFFFFF00</span>) |  (<span class=\"built_in\">strlen</span>(plainText));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)Par7, plainText, <span class=\"keyword\">sizeof</span>(plainText));</span><br><span class=\"line\">    funBptr ptr = (funBptr)funcB;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr(RCX, RDX, R8, R9, Par5, Par6, Par7, Par8, Par9, Par10, Par11,Par12,Par13,Par14);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InstallHookA</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VirtualProtect((LPVOID)HookAddrA, <span class=\"keyword\">sizeof</span>(HookShellCodeA), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HookAddrA, HookShellCodeA, <span class=\"keyword\">sizeof</span>(HookShellCodeA));</span><br><span class=\"line\">    VirtualProtect((LPVOID)ShellCodeAddrA, <span class=\"keyword\">sizeof</span>(ShellCodeA), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    *(DWORD64*)&amp;ShellCodeA[<span class=\"number\">2</span>] = (DWORD64)HookFuncA;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)ShellCodeAddrA, ShellCodeA, <span class=\"keyword\">sizeof</span>(ShellCodeA));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InstallHookB</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VirtualProtect((LPVOID)HookAddrB, <span class=\"keyword\">sizeof</span>(HookShellCodeB), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HookAddrB, HookShellCodeB, <span class=\"keyword\">sizeof</span>(HookShellCodeB));</span><br><span class=\"line\">    VirtualProtect((LPVOID)ShellCodeAddrB, <span class=\"keyword\">sizeof</span>(ShellCodeB), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    *(DWORD64*)&amp;ShellCodeB[<span class=\"number\">2</span>] = (DWORD64)HookFuncB;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)ShellCodeAddrB, ShellCodeB, <span class=\"keyword\">sizeof</span>(ShellCodeB));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        InstallHookB();</span><br><span class=\"line\">        InstallHookA();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Rookie diary","date":"2023-07-07T16:00:00.000Z","sticky":100,"pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n除了编程和逆向之外的常用工具的使用，记载一些其他常用的工具的使用过程防止自己继续花时间找解决办法<!-- more -->\n\n## 1. GitHub:\n\n> github已经创建仓库后，将本地文件上传：\n>\n> 1. 在本地文件夹中右键 `Git Bash Here`\n> 2. 输入 `git init` 在本地建立.git文件夹\n> 3. 输入 `git remote add origin git@github.com:Kvancy/GameHall.git` 设置远程仓库，origin后面地址从仓库SSH块复制\n> 4. 输入 `git add .` \n> 5. 输入 `git commit -m \"版本号\"` \n> 6. 输入 `git checkout -b main` 将上传分支设置为main(也可以是其他，自定义)\n> 7. 输入 `git push -u origin main` 上传文件到main分支\n>\n> 删除分支\n>\n> 1.  远端分支 `git push origin --delete [branch_name]`\n> 2. 本地分支 `git branch [branch_name] -d`\n<!-- more -->\n>\n> 查看分支\n>\n> 1. 查看本地分支 `git branch`\n> 2. 查看远程分支 `git branch -r`\n> 3. 查看本地和远程分支 `git branch -a`\n>\n> 更换远程仓库地址\n>\n> 1. `git remote -v`  #查看远端地址\n> 2. `git remote` #查看远端仓库名\n> 3. `git remote set-url origin https://gitee.com/xx/xx.git` (新地址)\n>\n> git push报错，显示仓库中有一部分代码，要先pull \n>\n> 参考链接 [](https://www.cnblogs.com/qingheshiguang/p/14777557.html)\n>\n> - 方法一：\n>\n> 1. `git pull origin [main]`分支名 \n>\n> 1. 重新`add`和`commit`相应文件 \n> 2. `git push origin [main]` 分支名\n>\n> - 方法二：\n>\n> 1. 强推： `git push -f origin [main]` 分支名\n\n\n\n## 2. VScode的环境配置：\n\n1. launch.json文件配置（调试的配置，必须先编译得到exe）\n\n   ```json\n   {\n     \"configurations\": [\n       {\n         \"name\": \"C/C++: g++.exe 生成和调试活动文件\",\n         \"type\": \"cppdbg\",\n         \"request\": \"launch\",\n         \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n         \"args\": [],\n         \"stopAtEntry\": false,\n         \"cwd\": \"${fileDirname}\",\n         \"environment\": [],\n         \"externalConsole\": true,//设置成true才能调试\n         \"MIMode\": \"gdb\",\n         \"miDebuggerPath\": \"C:\\\\MinGW\\\\bin\\\\gdb.exe\",\n         \"setupCommands\": [\n           {\n             \"description\": \"为 gdb 启用整齐打印\",\n             \"text\": \"-enable-pretty-printing\",\n             \"ignoreFailures\": true\n           },\n           {\n             \"description\": \"将反汇编风格设置为 Intel\",\n             \"text\": \"-gdb-set disassembly-flavor intel\",\n             \"ignoreFailures\": true\n           }\n         ],\n         \"preLaunchTask\": \"C/C++: g++.exe 生成活动文件\"\n       },\n     ],\n     \"version\": \"2.0.0\"\n   }\n   ```\n\n2. tasks.json文件配置（编译作用）,这里默认g++，不需要动，在终端-配置任务中修改\n\n   ```json\n   {\n       \"tasks\": [\n           {\n               \"type\": \"cppbuild\",\n               \"label\": \"C/C++: g++.exe 生成活动文件\",\n               \"command\": \"C:\\\\MinGW\\\\bin\\\\g++.exe\",\n               \"args\": [\n                   \"-fdiagnostics-color=always\",\n                   \"-g\",\n                   \"${file}\",\n                   \"-o\",\n                   \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n               ],\n               \"options\": {\n                   \"cwd\": \"${fileDirname}\"\n               },\n               \"problemMatcher\": [\n                   \"$gcc\"\n               ],\n               \"group\": {\n                   \"kind\": \"build\",\n                   \"isDefault\": true\n               },\n               \"detail\": \"调试器生成的任务。\"\n           }\n       ],\n       \"version\": \"2.0.0\"\n   }\n   ```\n\n   \n\nsetting.json\n\n```json\n{\n  \"C_Cpp_Runner.cCompilerPath\": \"C:/MinGW/bin/g++.exe\",\n  \"C_Cpp_Runner.cppCompilerPath\": \"g++\",\n  \"C_Cpp_Runner.debuggerPath\": \"gdb\",\n  \"C_Cpp_Runner.cStandard\": \"c11\",\n  \"C_Cpp_Runner.cppStandard\": \"gnu++14\",\n  \"C_Cpp_Runner.msvcBatchPath\": \"\",\n  \"C_Cpp_Runner.useMsvc\": false,\n  \"C_Cpp_Runner.warnings\": [\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wpedantic\",\n    \"-Wshadow\",\n    \"-Wformat=2\",\n    \"-Wcast-align\",\n    \"-Wconversion\",\n    \"-Wsign-conversion\",\n    \"-Wnull-dereference\"\n  ],\n  \"C_Cpp_Runner.msvcWarnings\": [\n    \"/W4\",\n    \"/permissive-\",\n    \"/w14242\",\n    \"/w14287\",\n    \"/w14296\",\n    \"/w14311\",\n    \"/w14826\",\n    \"/w44062\",\n    \"/w44242\",\n    \"/w14905\",\n    \"/w14906\",\n    \"/w14263\",\n    \"/w44265\",\n    \"/w14928\"\n  ],\n  \"C_Cpp_Runner.enableWarnings\": true,\n  \"C_Cpp_Runner.warningsAsError\": false,\n  \"C_Cpp_Runner.compilerArgs\": [],\n  \"C_Cpp_Runner.linkerArgs\": [],\n  \"C_Cpp_Runner.includePaths\": [\n    \"${workspaceFolder}/**\"\n  ],\n  \"C_Cpp_Runner.includeSearch\": [\n    \"*\",\n    \"**/*\"\n  ],\n  \"C_Cpp_Runner.excludeSearch\": [\n    \"**/build\",\n    \"**/build/**\",\n    \"**/.*\",\n    \"**/.*/**\",\n    \"**/.vscode\",\n    \"**/.vscode/**\"\n  ],\n  \"C_Cpp_Runner.useAddressSanitizer\": false,\n  \"C_Cpp_Runner.useUndefinedSanitizer\": false,\n  \"C_Cpp_Runner.useLeakSanitizer\": false,\n  \"C_Cpp_Runner.showCompilationTime\": false,\n  \"C_Cpp_Runner.useLinkTimeOptimization\": false,\n  \"C_Cpp_Runner.msvcSecureNoWarnings\": false\n}\n```\n\n\n\nc_cpp_properties\n\n```json\n{\n  \"configurations\": [\n    {\n      \"name\": \"windows-clang-x86\",\n      \"includePath\": [\n        \"${workspaceFolder}/**\"\n      ],\n      \"defines\": [\n        \"_DEBUG\",\n        \"UNICODE\",\n        \"_UNICODE\"\n      ],\n      \"cStandard\": \"c11\",\n      \"cppStandard\": \"gnu++14\",\n      \"intelliSenseMode\": \"windows-clang-x86\",\n      \"compilerPath\": \"C:/MinGW/bin/g++.exe\"\n    }\n  ],\n  \"version\": 4\n}\n```\n\n\n\n## 3. 虚拟机配置：\n\n`bcdedit /set hypervisorlaunchtype off`\n\n\n\n\n\n## 4. 服务器博客搭建\n\n### 1. 登录宝塔面板\n\n> 1. `远程连接云服务器的控制台`\n>\n> 2. `访问宝塔面板的安全入口，可通过控制台 su root  bt default 查询网址，`\n>\n> \t`目前设置成了 47.97.68.254:1111/Kvancy`\n>\n> 3. `用户名是Kvancy`\n\n### 2. 本地下载hexo博客系统\n\n> 1.  `curl --silent --location https://rpm.nodesource.com/setup_14.x|sudo bash`\n> 2.  `yum -y install nodejs`\n> 3.  `npm install hexo-cli -g`\n> 4.  `hexo init blog`\n> 5.  `cd blog/`\n> 6.  `npm install` \n> 7.  `hexo server`\n>\n> - [ ] 默认4000端口没用的话，使用 `hexo server -p5000`指定端口，如果想直接通过ip访问博客，可以通过 `hexo server -p80`设置端口。也可以通过 `/blog/node_modules/hexo-server/index.js`修改port值从而修改默认端口号\n> - [ ] 有时候开启多个端口设置hexio会访问失败，通过 `netstat -nultp`查看所有端口号，`kill -9 id`  id为进程id，杀死进程即可，kill - num 代表的意思如下\n>\n> | num  | 1              | 2                      | 3                      | 9                | 15           | 18             | 19           | 20             |\n> | ---- | -------------- | ---------------------- | ---------------------- | ---------------- | ------------ | -------------- | ------------ | -------------- |\n> | 含义 | 进程重新被加载 | 删除进程在内存中的数据 | 删除鼠标在内存中的数据 | 强行结束单个进程 | 正常关闭进程 | 运行暂停的进程 | 暂停某个进程 | 把进程打入后台 |\n>\n> \n\n### 3. 本地Hexo一键部署到远程服务器\n\n> 参考链接 [](https://blog.51cto.com/u_16213710/7330478)\n>\n> 1. `yum install -y wget && wget -O install.sh https://download.bt.cn/install/install_6.0.sh && sh install.sh ed8484bec` 安装宝塔面板\n>\n> 1.  `yum install git` 安装git\n>\n> 2.  `adduser git` 配置git用户\n>\n> 3.  `chmod 740 /etc/sudoers`  赋予用户权限 ``vi /etc/sudoers` ` 进入权限管理文件\n>\n> 4. `root  ALL=(ALL)  ALL`      \n>\n> \t`git  ALL=(ALL)   ALL`   在这条上面加上这行\n>\n> 5.  `chmod 400 /etc/sudoers` 修改sudoers文件权限\n>\n> 6.  `sudo passwd git ` 设置git 用户的密码，这里设置了 'root'\n>\n> 7. `su - git ` 给用户添加ssh密钥，git\n>\n> \t`mkdir -p ~/.ssh `\n>\n> \t`touch ~/.ssh/authorized_keys `\n>\n> \t`chmod 600 ~/.ssh/authorzied_keys `\n>\n> \t`chmod 700 ~/.ssh vim ~/.ssh/authorized_keys    ` 将ssh密钥粘贴进去，用于远程登录服务器\n>\n> 8.  `ssh -v git@你的 ip 地址`   输入密码 即可成功登录云服务器\n>\n> 9.  `su root` 创建一个git仓库，新建一个 post-receive 文件，用来存储本地的提交\n>\n> \t `cd /home/git`\n>\n> \t`git init --bare blog.git`  #在/home/git下创建新仓库blog.git \n>\n> \t`chown git:git -R blog.git` #给予git用户权限\n>\n> 10.  `cd blog.git/hooks vim post-receive` 配置钩子文件，使得每次本地上传时，远程自动同步下载\n>\n> 11.  `#!/bin/bash`\n>\n> \t`git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f`  写入钩子代码\n>\n> 12.  `chmod +x /home/git/blog.git/hooks/post-receive` 授予钩子可执行权限\n>\n> \t以上是服务器配置\n>\n> \t------\n>\n> 13. ```js\n> \tdeploy: #配置本地hexo的_config.yml文件\n> \t    type: git\n> \t    repo: root@你的ip地址:/home/git/blog.git    #仓库地址\n> \t    branch: master    #分支\n> \t```\n>\n> 14. ```js\n> \t#上传到远程服务器端git仓库，远程通过钩子自动下载同步    #这些也是部署之后每次上传时执行的命令\n> \thexo clean \n> \thexo g -d  #编译并部署，\n> \thexo s #本地用来测效果\n> \t```\n>\n> ------\n>\n> 结束撒花，哦对了，如果有nginx需求，参考这个链接，可以设置默认访问80端口，输入ip默认到博客界面 [](https://zhuanlan.zhihu.com/p/120743882) \n>\n\n### 4. 针对Kratos-Rebirth主题的配置\n\n参考链接 [](https://hexo.io/zh-cn/docs/configuration.html)\n\n> #### 根目录下_config.yml\n>\n> 1. 先理清两个概念，根目录下的deploy配置repo是对应仓库地址用http或者ssh地址都行，但是http协议下的 `hexo -d`容易报错，可能延迟太高了，建议使用ssh地址举例如下：`git@github.com:Kvancy/Kvancy.github.io.git` 根目录下url的配置是远程部署的网站地址，不是仓库地址，所以可以这样填  `url: https://kvancy.github.io/`\n>\n> 2. 还有一个叫做文章永久链接格式，permalink的配置，默认配置如下：`:year/:month/:day/:title/`\n>\n> \t意思是，在每次 `hexo -g`生成html时，默认文章目录结构是按照年月日文章名排布的，因为这个我一直以为是我commit版本加了'/'导致的错误，弄了半天没弄明白，搞得我放弃云服务器转到github上来，现在明白了，但是想想还是就到github上吧\n>\n> 3.  `index_generator:`属性配置，这个的per-page属性是指主页面下最多几个文章，也就是说几个文章之后需要进入下一个page，这个主题调成4个我个人感觉最好的\n>\n> 4.  `index: post_type: false ` 这个设置成false可以让主页上的文章预览时有自定义的图片\n>\n> \n>\n> #### 主题文件夹下_config.yml配置\n>\n> 关于特效，参考链接 [](https://juejin.cn/post/7106018120036253710)\n>\n> 1. 先说第一个，也是搞了我很久的一个问题，关于网站havicon标志的配置。我一直在根目录下对havicon进行部署，一度以为我的路径或者图片有问题，因为其中没有havicon的有关配置，我就像其他主题一样自己加上去，甚至去查过可以直接在服务器根目录下放着havicon.ico文件，浏览器会自己查找，试过了发现在 `hexo -g`的时候根目录结构会改变，行不通，后来翻阅作者的配置说明得知，在主题文件夹下site_logo处配置 `site_logo: /images/favicon.ico #网站的favicon`\n>\n> 2. snow下雪动画设置成true，enable_dark设置成false，亮色主题。\n>\n> 3. 去除主页上栏图片改用一整个图片做背景是在customStyles下吧images的banner属性地址设置成空，在src/scss/kr-color/default.css文件有有关对应默认设置的图片地址，把resource文件下该图片名改一下即可，独留background属性，地址为/images/bg.jpg，这个相对路径判断：\"hexo -g\"生成public文件后，进入public文件，这个是浏览器的根目录，在根目录下的images文件夹即对应了这个相对路径，下面的avatar也是如此寻址设图\n>\n> 4. `siteLeaveEvent: true`这个设置成true可以有监控离开和进入网页的动作，从而做出动效\n>\n> 5. 引入了鼠标跟踪特效，[源js代码链接](https://1keven1.github.io/2021/01/20/%E3%80%90JS%E3%80%91%E7%BD%91%E9%A1%B5%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%8B%96%E5%B0%BE%E7%89%B9%E6%95%88/) 并对该特效进行修改，`characters = [\"0\", \"1\"];` 把音符改成了二进制；引入步骤是，copy并自定义修改js代码后，把文件名改成Suzhi.js（博主名），再copy一份到Suzhi.min.js，前者放在src/js目录下，后者放到source/js代码下；在layout/_partial找到after-footer.ejs文件，进去对照id = snow的写法复制一个对应id= Suzhi的（前端不是很懂，就是copy就完了！），参考如下：\n>\n> \t```js\n> \t<% if(theme.mouse_trace_js){ %>\n> \t    <div>\n> \t        <canvas id=\"Suzhi\"></canvas>\n> \t        <%- js_theme_cdn('js/Suzhi.min.js', {async: true}) %>\n> \t    </div>\n> \t<% } %>\n> \t```\n>\n> \t然后在theme主题下的config_yml文件加一个 `mouse_trace_js: true #鼠标跟踪动画`就行\n>\n> 6. 引入boom.js，text.js，更改了鼠标点击特效，前者是爆炸烟花波纹，后者是文字特效\n\n## 5. 关于Typora\n\n### 1. YAML Front Matter的使用\n\n> 1. 每次上传md文件到博客时，都需要给文章起个标题，并且配置文章属性，如下是属性配置格式\n>\n> \t```js\n> \ttitle: c++笔记\n> \tdate: 2023/9/18\n> \tcategories: 笔记\n> \ttags:\n> \t  - 笔记\n> \tsticky: 100\n> \tpic:\n> \tcomments: false\n> \ttoc: true\n> \texpire: true\n> \tonly:\n> \t  - home\n> \t  - category\n> \t  - tag\n> \t```\n> \t\n> \t- **pic** : 可以指定这篇文章是否使用自定义的缩略图名称（在文章资源文件夹内），而不是使用随机化的图标\n>\n> \t- **sticky** : (*number*)重要的文章，把它们置顶吧！数字越大优先级越高哦\\~\n>\n> \t- **comments** : (*true/false*)是否为单篇文章指定开启或关闭评论区\n>\n> \t- **toc：** (*true/false*)该文章是否需要生成目录\n>\n> \t- **only：** 指定文章显示的位置，有以下关键词：\n>\t\t- home: 在首页显示\n> \t\t- category: 在分类页显示\n> \t\t- tag: 在标签页显示\n> \t\t\t*留空*或是*不配置*此项，则文章在所有该出现的位置都会显示。\n> \t\t\t层级之间相互平等，没有覆盖关系。\n> \t\t\t特别地，如果配置了此项，但是使用的并不是以上的关键词（例如只留了一个`- none`，那么文章就被隐藏起来了）\n\n### 2. 控制文章预览字数\n\n> 1. 在你想要预览结束的地方添加markdown源代码\n>\n> ``\n\n### 3. 图片的插入与上传\n\n> 1. 在偏好设置的图像位置设置，插入图片时----上传图片；勾选对本地位置的图片应用上述规则；上传服务----PicGo(app), 路径找到Picgo的exe程序路径；在smms上注册一个账号，获得账号API token，作为接下来的密钥；下载PicGo(app)之后，在图床设置里将密钥填入SM.MS图床，SM.MS-登录用户；\n>\n> \t在插件设置那里搜索smms-user，下载之后点击插件右下角的设置，点击配置plugin,配置uploader,把密钥填入后重启；在Typora偏好设置里有验证图片上传的选项\n>\n> \t------\n>\n> \t现在的话就可以在每次插入图片时实现自动上传到SMMS图床，并直接更改md文件中图片地址为远程图片地址，如果有大量没处理的本地图片，可以通过格式--图像--上传所有本地图片操作实现自动上传图片并更改图片路径\n\n\n\n## 6. python学习积累:\n\npyenv - python环境转换,参考链接: https://github.com/pyenv-win/pyenv-win\n\n1. Run `pyenv install <version>` to install the supported version\n\n2. Run `pyenv global <version>` to set a Python version as the global version\n\n3. Check which Python version you are using and its path\n\n\t```plaintext\n\t> pyenv version\n\t<version> (set by \\path\\to\\.pyenv\\pyenv-win\\.python-version)\n\t```\n\n\t\n\n>    *commands*     List all available pyenv commands\n>    *local*        Set or show the local application-specific Python version\n>    *global*       Set or show the global Python version\n>    *shell*        Set or show the shell-specific Python version\n>    *install*      Install 1 or more versions of Python \n>    *uninstall*    Uninstall 1 or more versions of Python\n>    *update*       Update the cached version DB\n>    *rehash*       Rehash pyenv shims (run this after switching Python versions)\n>    *vname*        Show the current Python version\n>    *version*      Show the current Python version and its origin\n>    version-name Show the current Python version\n>    *versions*     List all Python versions available to pyenv\n>    *exec*         Runs an executable by first preparing PATH so that the selected Python\n>    *which*        Display the full path to an executable\n>    *whence*       List all Python versions that contain the given executable\n\n```python\n#list转变字符串\na = ['P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', '\\\\', ']', '^', '_', '`', 'a', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', '|', '}', '~', '\\x7f']\nT = ''.join(a)\nprint(T)\n#list转bytes数组\nenc = [0x25, 0x6F, 0x3D, 0x6C, 0xF9, 0xE0, 0xCF, 0x3F, 0x2E, 0x24, 0xC6, 0x7B, 0x81, 0xBF, 0x55, 0x4F, 0x0D, 0x99, 0x87, 0x47, 0x48, 0xF7, 0xB9, 0x98, 0xFB, 0x1B, 0x22, 0xEC, 0x84, 0x23, 0xFD, 0xB2]\nmy_bytearray = bytearray()\nmy_bytearray.extend(enc)\nmy_bytes = bytes(my_bytearray)\nprint(my_bytes) \n#b'%o=l\\xf9\\xe0\\xcf?.$\\xc6{\\x81\\xbfUO\\r\\x99\\x87GH\\xf7\\xb9\\x98\\xfb\\x1b\"\\xec\\x84#\\xfd\\xb2'\n\n```\n\n\n\n## 7. <<深入理解计算机系统>>\n\n### 存储器\t\n\n> 程序的局部性有两种不同的形式-时间局部性和空间局部性\n>\n> 一般而言,良好局部性的程序比局部性差的程序运行的更快\n>\n> 理解: 在一个具有良好局部性的程序中,如果一个内存位置被引用了一次,那么程序很可能在不远的将来引用附近的一个内存位置\n>\n> 原因: 在硬件层,局部性原理允许计算机设计者通过引入称为*高速缓存存储器*的小而快速的存储器来保存最近被引用的指令和数据项,从而提高对主存的访问速度\n\n例如下面代码,func1会比func2更快\n\n```c++\nint func1(int a[M[N]])\n{\n    int i,j,sum=0;\n    for(i=0;i<M;i++)\n    {\n        for(j<0;j<N;j++)\n        {\n            sum += a[M][N];\n        }\n    }\n}\n\nint func2(int a[M[N]])\n{\n    int i,j,sum=0;\n    for(i=0;i<N;i++)\n    {\n        for(j<0;j<M;j++)\n        {\n            sum += a[M][N];\n        }\n    }\n}\n```\n\n其实就是遍历二维数组的时候从行遍历变成了列遍历,从而破坏了函数的空间局限性\n\n\n\n\n存储器层次架构:\n\n|  速度  |                 存储器                 |\n| :----: | :------------------------------------: |\n| *高速* |                 寄存器                 |\n|        |            L1高速缓存(SRAM)            |\n|        |            L2高速缓存(SRAM)            |\n|        |            L3高速缓存(SRAM)            |\n|        |                  主存                  |\n|        |                本地磁盘                |\n| *低速* | 远程二级存储(分布式文件系统,web服务器) |\n\n\n\n### 链接\n\n源程序main.c到可执行文件的几个步骤\n\n1. 生成Ascii码的中间文件main.i\n2. 翻译成汇编语言文件main.s\n3. 运行汇编器,生成一个可重定位目标文件main.o\n4. 最后运行链接器程序生成可执行文件main.exe\n\ngcc编译生成各种文件的几种指令 `gcc --help`可查询\n\n> gcc -E test.c -o test.i\n>\n> gcc -S test.c -o test.i\n>\n> gcc -c test.c -o test.o\n>\n> gcc test.o -o test\n\nlinux下从应用程序中加载和链接动态链接共享库\n\n```c++\n#include<dlfcn.h>\nvoid* dlopen(const char* filename,int flag) //成功返回指向句柄的指针,flag可取RTLD_NOW或者RTLD_LAZY,指示链接器立即/延迟解析,JNI基本思想就是使用dlopen来调用.so共享库\nvoid dlsym(void* handle char *symbol); //成功返回指向符号的指针,若出错则为NULL,symbol为调用的函数名称\nint dlclose(void* handle); //不用时卸载该库\n```\n\n共享库的一个主要目的就是允许多个进程共享内存中相同的库代码,但是又**不希望各个进程消耗过多的内存和时间加载完整的共享库**\n\n所以现代系统通过生成**PIC**(位置无关代码)代码来解决这个问题,无限多个进程可以共享一个共享模块的代码段的单一副本\n\ngcc使用-fpic选项指示GNU编译系统生成PIC代码,编译共享库时总是使用该选项\n\n**未防止程序对整个共享库内导出函数进行重定位**,引入了PLT表和GOT表两个概念\n\n> PLT表和GOT表是动态链接过程中的重要部分，它们可以实现程序在运行时按需加载外部库函数，提高程序的效率和安全性。我来给你讲讲它们的作用和原理。\n>\n> PLT表（Procedure Linkage Table）是程序链接表，它包含了调用外部库函数的跳转指令，每个指令都会跳转到GOT表中的一个地址。PLT表的第一个条目是一个特殊的入口，它会调用动态链接器（ld）来解析函数的真实地址，并将其写入GOT表中。这个过程称为运行时重定位或惰性绑定，它可以避免在程序启动时就进行所有的重定位，从而减少启动时间和内存占用。\n>\n> GOT表（Global Offset Table）是全局偏移表，它是一个存储外部库函数地址的数据段，每个条目对应一个PLT表中的条目。GOT表的前三个条目是特殊的，它们分别存储了动态段（.dynamic）的地址、链接映射对象（link_map）的地址和运行时解析函数（_dl_runtime_resolve）的地址。这些信息是动态链接器进行重定位所需要的。当程序第一次调用一个外部库函数时，GOT表中对应的条目会被重定位为真实的函数地址，并被缓存起来。当程序再次调用同一个函数时，就可以直接从GOT表中读取地址并跳转过去，无需再次进行重定位。\n\n\n\n## Docker\n\n### 获取容器 IP：\n\n如果你需要使用容器的 IP 地址连接，可以使用 `docker inspect` 命令获取容器的 IP 地址：\n\n```sql\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql\n```\n\n### Mysql\n\n启动mysql,必须指定`MYSQL_ROOT_PASSWORD1`属性\n\n```sql\ndocker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql\n```\n\n### phpmyadmin\n\nphpmyadmin连接mysql进行管理,指定`PMA_HOST`来指定mysql容器ip, `-e PMA_USER=root -e PMA_PASSWORD=root`为mysql账号密码\n\n```sql\ndocker run --name phpmyadmin -d -p 8080:80 -e PMA_HOST=172.17.0.3 -e PMA_PORT=3306 -e PMA_USER=root -e PMA_PASSWORD=root phpmyadmin\n```\n\n### 部署可执行jar包\n\nhttps://www.jb51.net/article/255143.htm\n\n#### 一、准备工作\n\n##### 1、**创建存放docker配置文件、jar包的文件夹**\n\n在宿主机上，创建文件夹：/home/admin/app，用于存放bash文件和jar包。然后在该文件夹下，创建bash文件和容器配置文件\n\n##### 2、**创建bash文件**\n\n```dockerfile\nvi run.sh\njava -jar /usr/data/app-1.0.0.jar\n```\n\n/usr/data是docker容器内的路径\n\n我们不必真的到容器内创建这个路径\n\n后面会将此路径挂载到当前文件夹：/home/admin/app\n\n##### 3、**创建容器配置文件**\n\n```dockerfile\nvi Dockerfile\nFROM java:8 \nEXPOSE 8081 \nENTRYPOINT [\"sh\",\"/usr/data/run.sh\"]\n```\n\n8081是我们这个jar包的对外端口\n\n#### 二、构建镜像\n\n仍然在/home/admin/app下，构建镜像。注意最后一个“.”，表示 Dockerfile 文件在当前目录下。\n\n```\ndocker build -t myapp:1.0.0 .\n```\n\n#### 三、创建容器并运行\n\n```\ndocker run -d -it --name=myapp -p 8081:8081 -v /home/admin/app:/usr/data myapp:1.0.0\n```\n\ndocker引擎重启后自动运行（也可以理解为操作系统重启后自动运行，如果docker是开机自动运行的话）\n\n```\ndocker run --restart=always -d -it --name=myapp -p 8082:8081 -v /home/admin/app:/usr/data myapp:1.0.0\n```\n\n> -v，将容器内的/usr/data挂载到宿主机的/home/admin/app。以后jar包有更新，丢到宿主机的/home/admin/app，然后重启容器即可。\n>\n> -d: 后台运行容器，并返回容器ID；\n>\n> -d, --detach=false Run container in background and print container ID\n>\n> -i: 以交互模式运行容器，通常与 -t 同时使用；\n>\n> -i, --interactive=false Keep STDIN open even if not attached\n>\n> -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n>\n> -t, --tty=false Allocate a pseudo-TTY\n\n\n\n#### 四、删除多余或失败的容器、镜像\n\n以上步骤，可能存在波折，不小心就创建了许多并不称心如意的容器和镜像，占用了心水名称和端口，必先删之而后快。\n\n\n\n##### 1、观察已经有哪些容器\n\n```\ndocker ps -a\n```\n\n加上 -a 参数，可以列出没有在运行的容器。\n\n##### 2、删除指定容器\n\ndocker rm $name 或者 容器ID\n\n##### 3、观察已经有哪些镜像\n\n```\ndocker images\n```\n\n##### 4、删除指定镜像\n\n```\ndocker rmi -f $name 或者 镜像ID\n```\n\n要删除镜像，首先要删除它派生的容器。\n\n## Mysql\n\n连接mysql数据库注意事项:\n\n### 修改root用户远程连接权限:\n\n```sql\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n```\n\n### 查看是否修改成功\n\n```sql\nuse mysql;\nselect host,user from user;\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n\n\n### 更新用户密码:\n\n使用 `ALTER USER` 语句来更新用户密码。例如，如果你想要更新用户名为 `user` 的密码\n\n```sql\nALTER USER 'user'@'%' IDENTIFIED BY 'newpassword';\n```\n\n#### 创建新用户： \n\n使用 `CREATE USER` 语句创建新用户。例如，创建一个用户名为 `user` 的新用户：\n\n```sql\nCREATE USER 'user'@'%' IDENTIFIED BY 'yourpassword';\n```\n\n### Navicat连接\n\n在docker的mysql创建用户,设置连接权限后,Navicat设置主机127.0.0.1/localhost(mysql容器的ip虽然本地ping不通,但是可以连上)\n\n\n\n## java文件打包jar\n\n1. **编译Java源文件**: 打开终端或命令提示符，然后使用`javac`命令编译你的Java源文件。例如，如果你的主类是`Main.java`，你可以使用以下命令：\n\n\t```\n\tjavac Main.java\n\t```\n\n2. **检查编译结果**: 编译后，你应该在相同的目录下看到`Main.class`文件（以及可能的任何内部类文件，例如`Main$1.class`等）。\n\n3. **创建JAR文件**: 使用`jar`命令来创建JAR文件。如果你的主类是`Main`，并且你想创建一个名为`MyApplication.jar`的JAR文件，你可以使用以下命令：(注意Main后有个空格,指将所有以Main为前缀的class都选上)\n\n\t```\n\tjar cvfe MyApplication.jar Main *.class\n\t```\n\n\t这里的`c`表示创建新的JAR文件，`v`表示在创建过程中显示详细输出，`f`指定JAR文件的名称，`e`表示指定应用程序的入口点（主类），后面跟着主类的名称和`.class`文件的通配符。\n\n4. **确保JAR文件的可执行性**: 如果你的JAR文件中包含的是应用程序的主类，你可能还需要在JAR文件的清单（MANIFEST.MF）中指定主类。这可以通过以下命令完成：\n\n\t```\n\techo \"Main-Class: Main\" > manifest.txt\n\tjar cvfm MyApplication.jar manifest.txt *.class\n\t```\n\n\t这里`m`表示指定清单文件，`manifest.txt`是包含`Main-Class`属性的文件。\n\n5. **运行JAR文件**: 一旦JAR文件创建完成，你可以通过以下命令来运行它：\n\n\t```\n\tjava -jar MyApplication.jar\n\t```\n\n6. **清理**: 如果你不需要`.class`文件了，可以删除它们以节省空间：\n\n\t```\n\trm *.class\n\t```\n","source":"_posts/Rookie diary.md","raw":"---\ntitle: Rookie diary\ndate: 2023/7/8\ncategories: 笔记\ntags:\n  - 杂记\nsticky: 100\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n除了编程和逆向之外的常用工具的使用，记载一些其他常用的工具的使用过程防止自己继续花时间找解决办法<!-- more -->\n\n## 1. GitHub:\n\n> github已经创建仓库后，将本地文件上传：\n>\n> 1. 在本地文件夹中右键 `Git Bash Here`\n> 2. 输入 `git init` 在本地建立.git文件夹\n> 3. 输入 `git remote add origin git@github.com:Kvancy/GameHall.git` 设置远程仓库，origin后面地址从仓库SSH块复制\n> 4. 输入 `git add .` \n> 5. 输入 `git commit -m \"版本号\"` \n> 6. 输入 `git checkout -b main` 将上传分支设置为main(也可以是其他，自定义)\n> 7. 输入 `git push -u origin main` 上传文件到main分支\n>\n> 删除分支\n>\n> 1.  远端分支 `git push origin --delete [branch_name]`\n> 2. 本地分支 `git branch [branch_name] -d`\n<!-- more -->\n>\n> 查看分支\n>\n> 1. 查看本地分支 `git branch`\n> 2. 查看远程分支 `git branch -r`\n> 3. 查看本地和远程分支 `git branch -a`\n>\n> 更换远程仓库地址\n>\n> 1. `git remote -v`  #查看远端地址\n> 2. `git remote` #查看远端仓库名\n> 3. `git remote set-url origin https://gitee.com/xx/xx.git` (新地址)\n>\n> git push报错，显示仓库中有一部分代码，要先pull \n>\n> 参考链接 [](https://www.cnblogs.com/qingheshiguang/p/14777557.html)\n>\n> - 方法一：\n>\n> 1. `git pull origin [main]`分支名 \n>\n> 1. 重新`add`和`commit`相应文件 \n> 2. `git push origin [main]` 分支名\n>\n> - 方法二：\n>\n> 1. 强推： `git push -f origin [main]` 分支名\n\n\n\n## 2. VScode的环境配置：\n\n1. launch.json文件配置（调试的配置，必须先编译得到exe）\n\n   ```json\n   {\n     \"configurations\": [\n       {\n         \"name\": \"C/C++: g++.exe 生成和调试活动文件\",\n         \"type\": \"cppdbg\",\n         \"request\": \"launch\",\n         \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n         \"args\": [],\n         \"stopAtEntry\": false,\n         \"cwd\": \"${fileDirname}\",\n         \"environment\": [],\n         \"externalConsole\": true,//设置成true才能调试\n         \"MIMode\": \"gdb\",\n         \"miDebuggerPath\": \"C:\\\\MinGW\\\\bin\\\\gdb.exe\",\n         \"setupCommands\": [\n           {\n             \"description\": \"为 gdb 启用整齐打印\",\n             \"text\": \"-enable-pretty-printing\",\n             \"ignoreFailures\": true\n           },\n           {\n             \"description\": \"将反汇编风格设置为 Intel\",\n             \"text\": \"-gdb-set disassembly-flavor intel\",\n             \"ignoreFailures\": true\n           }\n         ],\n         \"preLaunchTask\": \"C/C++: g++.exe 生成活动文件\"\n       },\n     ],\n     \"version\": \"2.0.0\"\n   }\n   ```\n\n2. tasks.json文件配置（编译作用）,这里默认g++，不需要动，在终端-配置任务中修改\n\n   ```json\n   {\n       \"tasks\": [\n           {\n               \"type\": \"cppbuild\",\n               \"label\": \"C/C++: g++.exe 生成活动文件\",\n               \"command\": \"C:\\\\MinGW\\\\bin\\\\g++.exe\",\n               \"args\": [\n                   \"-fdiagnostics-color=always\",\n                   \"-g\",\n                   \"${file}\",\n                   \"-o\",\n                   \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n               ],\n               \"options\": {\n                   \"cwd\": \"${fileDirname}\"\n               },\n               \"problemMatcher\": [\n                   \"$gcc\"\n               ],\n               \"group\": {\n                   \"kind\": \"build\",\n                   \"isDefault\": true\n               },\n               \"detail\": \"调试器生成的任务。\"\n           }\n       ],\n       \"version\": \"2.0.0\"\n   }\n   ```\n\n   \n\nsetting.json\n\n```json\n{\n  \"C_Cpp_Runner.cCompilerPath\": \"C:/MinGW/bin/g++.exe\",\n  \"C_Cpp_Runner.cppCompilerPath\": \"g++\",\n  \"C_Cpp_Runner.debuggerPath\": \"gdb\",\n  \"C_Cpp_Runner.cStandard\": \"c11\",\n  \"C_Cpp_Runner.cppStandard\": \"gnu++14\",\n  \"C_Cpp_Runner.msvcBatchPath\": \"\",\n  \"C_Cpp_Runner.useMsvc\": false,\n  \"C_Cpp_Runner.warnings\": [\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wpedantic\",\n    \"-Wshadow\",\n    \"-Wformat=2\",\n    \"-Wcast-align\",\n    \"-Wconversion\",\n    \"-Wsign-conversion\",\n    \"-Wnull-dereference\"\n  ],\n  \"C_Cpp_Runner.msvcWarnings\": [\n    \"/W4\",\n    \"/permissive-\",\n    \"/w14242\",\n    \"/w14287\",\n    \"/w14296\",\n    \"/w14311\",\n    \"/w14826\",\n    \"/w44062\",\n    \"/w44242\",\n    \"/w14905\",\n    \"/w14906\",\n    \"/w14263\",\n    \"/w44265\",\n    \"/w14928\"\n  ],\n  \"C_Cpp_Runner.enableWarnings\": true,\n  \"C_Cpp_Runner.warningsAsError\": false,\n  \"C_Cpp_Runner.compilerArgs\": [],\n  \"C_Cpp_Runner.linkerArgs\": [],\n  \"C_Cpp_Runner.includePaths\": [\n    \"${workspaceFolder}/**\"\n  ],\n  \"C_Cpp_Runner.includeSearch\": [\n    \"*\",\n    \"**/*\"\n  ],\n  \"C_Cpp_Runner.excludeSearch\": [\n    \"**/build\",\n    \"**/build/**\",\n    \"**/.*\",\n    \"**/.*/**\",\n    \"**/.vscode\",\n    \"**/.vscode/**\"\n  ],\n  \"C_Cpp_Runner.useAddressSanitizer\": false,\n  \"C_Cpp_Runner.useUndefinedSanitizer\": false,\n  \"C_Cpp_Runner.useLeakSanitizer\": false,\n  \"C_Cpp_Runner.showCompilationTime\": false,\n  \"C_Cpp_Runner.useLinkTimeOptimization\": false,\n  \"C_Cpp_Runner.msvcSecureNoWarnings\": false\n}\n```\n\n\n\nc_cpp_properties\n\n```json\n{\n  \"configurations\": [\n    {\n      \"name\": \"windows-clang-x86\",\n      \"includePath\": [\n        \"${workspaceFolder}/**\"\n      ],\n      \"defines\": [\n        \"_DEBUG\",\n        \"UNICODE\",\n        \"_UNICODE\"\n      ],\n      \"cStandard\": \"c11\",\n      \"cppStandard\": \"gnu++14\",\n      \"intelliSenseMode\": \"windows-clang-x86\",\n      \"compilerPath\": \"C:/MinGW/bin/g++.exe\"\n    }\n  ],\n  \"version\": 4\n}\n```\n\n\n\n## 3. 虚拟机配置：\n\n`bcdedit /set hypervisorlaunchtype off`\n\n\n\n\n\n## 4. 服务器博客搭建\n\n### 1. 登录宝塔面板\n\n> 1. `远程连接云服务器的控制台`\n>\n> 2. `访问宝塔面板的安全入口，可通过控制台 su root  bt default 查询网址，`\n>\n> \t`目前设置成了 47.97.68.254:1111/Kvancy`\n>\n> 3. `用户名是Kvancy`\n\n### 2. 本地下载hexo博客系统\n\n> 1.  `curl --silent --location https://rpm.nodesource.com/setup_14.x|sudo bash`\n> 2.  `yum -y install nodejs`\n> 3.  `npm install hexo-cli -g`\n> 4.  `hexo init blog`\n> 5.  `cd blog/`\n> 6.  `npm install` \n> 7.  `hexo server`\n>\n> - [ ] 默认4000端口没用的话，使用 `hexo server -p5000`指定端口，如果想直接通过ip访问博客，可以通过 `hexo server -p80`设置端口。也可以通过 `/blog/node_modules/hexo-server/index.js`修改port值从而修改默认端口号\n> - [ ] 有时候开启多个端口设置hexio会访问失败，通过 `netstat -nultp`查看所有端口号，`kill -9 id`  id为进程id，杀死进程即可，kill - num 代表的意思如下\n>\n> | num  | 1              | 2                      | 3                      | 9                | 15           | 18             | 19           | 20             |\n> | ---- | -------------- | ---------------------- | ---------------------- | ---------------- | ------------ | -------------- | ------------ | -------------- |\n> | 含义 | 进程重新被加载 | 删除进程在内存中的数据 | 删除鼠标在内存中的数据 | 强行结束单个进程 | 正常关闭进程 | 运行暂停的进程 | 暂停某个进程 | 把进程打入后台 |\n>\n> \n\n### 3. 本地Hexo一键部署到远程服务器\n\n> 参考链接 [](https://blog.51cto.com/u_16213710/7330478)\n>\n> 1. `yum install -y wget && wget -O install.sh https://download.bt.cn/install/install_6.0.sh && sh install.sh ed8484bec` 安装宝塔面板\n>\n> 1.  `yum install git` 安装git\n>\n> 2.  `adduser git` 配置git用户\n>\n> 3.  `chmod 740 /etc/sudoers`  赋予用户权限 ``vi /etc/sudoers` ` 进入权限管理文件\n>\n> 4. `root  ALL=(ALL)  ALL`      \n>\n> \t`git  ALL=(ALL)   ALL`   在这条上面加上这行\n>\n> 5.  `chmod 400 /etc/sudoers` 修改sudoers文件权限\n>\n> 6.  `sudo passwd git ` 设置git 用户的密码，这里设置了 'root'\n>\n> 7. `su - git ` 给用户添加ssh密钥，git\n>\n> \t`mkdir -p ~/.ssh `\n>\n> \t`touch ~/.ssh/authorized_keys `\n>\n> \t`chmod 600 ~/.ssh/authorzied_keys `\n>\n> \t`chmod 700 ~/.ssh vim ~/.ssh/authorized_keys    ` 将ssh密钥粘贴进去，用于远程登录服务器\n>\n> 8.  `ssh -v git@你的 ip 地址`   输入密码 即可成功登录云服务器\n>\n> 9.  `su root` 创建一个git仓库，新建一个 post-receive 文件，用来存储本地的提交\n>\n> \t `cd /home/git`\n>\n> \t`git init --bare blog.git`  #在/home/git下创建新仓库blog.git \n>\n> \t`chown git:git -R blog.git` #给予git用户权限\n>\n> 10.  `cd blog.git/hooks vim post-receive` 配置钩子文件，使得每次本地上传时，远程自动同步下载\n>\n> 11.  `#!/bin/bash`\n>\n> \t`git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f`  写入钩子代码\n>\n> 12.  `chmod +x /home/git/blog.git/hooks/post-receive` 授予钩子可执行权限\n>\n> \t以上是服务器配置\n>\n> \t------\n>\n> 13. ```js\n> \tdeploy: #配置本地hexo的_config.yml文件\n> \t    type: git\n> \t    repo: root@你的ip地址:/home/git/blog.git    #仓库地址\n> \t    branch: master    #分支\n> \t```\n>\n> 14. ```js\n> \t#上传到远程服务器端git仓库，远程通过钩子自动下载同步    #这些也是部署之后每次上传时执行的命令\n> \thexo clean \n> \thexo g -d  #编译并部署，\n> \thexo s #本地用来测效果\n> \t```\n>\n> ------\n>\n> 结束撒花，哦对了，如果有nginx需求，参考这个链接，可以设置默认访问80端口，输入ip默认到博客界面 [](https://zhuanlan.zhihu.com/p/120743882) \n>\n\n### 4. 针对Kratos-Rebirth主题的配置\n\n参考链接 [](https://hexo.io/zh-cn/docs/configuration.html)\n\n> #### 根目录下_config.yml\n>\n> 1. 先理清两个概念，根目录下的deploy配置repo是对应仓库地址用http或者ssh地址都行，但是http协议下的 `hexo -d`容易报错，可能延迟太高了，建议使用ssh地址举例如下：`git@github.com:Kvancy/Kvancy.github.io.git` 根目录下url的配置是远程部署的网站地址，不是仓库地址，所以可以这样填  `url: https://kvancy.github.io/`\n>\n> 2. 还有一个叫做文章永久链接格式，permalink的配置，默认配置如下：`:year/:month/:day/:title/`\n>\n> \t意思是，在每次 `hexo -g`生成html时，默认文章目录结构是按照年月日文章名排布的，因为这个我一直以为是我commit版本加了'/'导致的错误，弄了半天没弄明白，搞得我放弃云服务器转到github上来，现在明白了，但是想想还是就到github上吧\n>\n> 3.  `index_generator:`属性配置，这个的per-page属性是指主页面下最多几个文章，也就是说几个文章之后需要进入下一个page，这个主题调成4个我个人感觉最好的\n>\n> 4.  `index: post_type: false ` 这个设置成false可以让主页上的文章预览时有自定义的图片\n>\n> \n>\n> #### 主题文件夹下_config.yml配置\n>\n> 关于特效，参考链接 [](https://juejin.cn/post/7106018120036253710)\n>\n> 1. 先说第一个，也是搞了我很久的一个问题，关于网站havicon标志的配置。我一直在根目录下对havicon进行部署，一度以为我的路径或者图片有问题，因为其中没有havicon的有关配置，我就像其他主题一样自己加上去，甚至去查过可以直接在服务器根目录下放着havicon.ico文件，浏览器会自己查找，试过了发现在 `hexo -g`的时候根目录结构会改变，行不通，后来翻阅作者的配置说明得知，在主题文件夹下site_logo处配置 `site_logo: /images/favicon.ico #网站的favicon`\n>\n> 2. snow下雪动画设置成true，enable_dark设置成false，亮色主题。\n>\n> 3. 去除主页上栏图片改用一整个图片做背景是在customStyles下吧images的banner属性地址设置成空，在src/scss/kr-color/default.css文件有有关对应默认设置的图片地址，把resource文件下该图片名改一下即可，独留background属性，地址为/images/bg.jpg，这个相对路径判断：\"hexo -g\"生成public文件后，进入public文件，这个是浏览器的根目录，在根目录下的images文件夹即对应了这个相对路径，下面的avatar也是如此寻址设图\n>\n> 4. `siteLeaveEvent: true`这个设置成true可以有监控离开和进入网页的动作，从而做出动效\n>\n> 5. 引入了鼠标跟踪特效，[源js代码链接](https://1keven1.github.io/2021/01/20/%E3%80%90JS%E3%80%91%E7%BD%91%E9%A1%B5%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%8B%96%E5%B0%BE%E7%89%B9%E6%95%88/) 并对该特效进行修改，`characters = [\"0\", \"1\"];` 把音符改成了二进制；引入步骤是，copy并自定义修改js代码后，把文件名改成Suzhi.js（博主名），再copy一份到Suzhi.min.js，前者放在src/js目录下，后者放到source/js代码下；在layout/_partial找到after-footer.ejs文件，进去对照id = snow的写法复制一个对应id= Suzhi的（前端不是很懂，就是copy就完了！），参考如下：\n>\n> \t```js\n> \t<% if(theme.mouse_trace_js){ %>\n> \t    <div>\n> \t        <canvas id=\"Suzhi\"></canvas>\n> \t        <%- js_theme_cdn('js/Suzhi.min.js', {async: true}) %>\n> \t    </div>\n> \t<% } %>\n> \t```\n>\n> \t然后在theme主题下的config_yml文件加一个 `mouse_trace_js: true #鼠标跟踪动画`就行\n>\n> 6. 引入boom.js，text.js，更改了鼠标点击特效，前者是爆炸烟花波纹，后者是文字特效\n\n## 5. 关于Typora\n\n### 1. YAML Front Matter的使用\n\n> 1. 每次上传md文件到博客时，都需要给文章起个标题，并且配置文章属性，如下是属性配置格式\n>\n> \t```js\n> \ttitle: c++笔记\n> \tdate: 2023/9/18\n> \tcategories: 笔记\n> \ttags:\n> \t  - 笔记\n> \tsticky: 100\n> \tpic:\n> \tcomments: false\n> \ttoc: true\n> \texpire: true\n> \tonly:\n> \t  - home\n> \t  - category\n> \t  - tag\n> \t```\n> \t\n> \t- **pic** : 可以指定这篇文章是否使用自定义的缩略图名称（在文章资源文件夹内），而不是使用随机化的图标\n>\n> \t- **sticky** : (*number*)重要的文章，把它们置顶吧！数字越大优先级越高哦\\~\n>\n> \t- **comments** : (*true/false*)是否为单篇文章指定开启或关闭评论区\n>\n> \t- **toc：** (*true/false*)该文章是否需要生成目录\n>\n> \t- **only：** 指定文章显示的位置，有以下关键词：\n>\t\t- home: 在首页显示\n> \t\t- category: 在分类页显示\n> \t\t- tag: 在标签页显示\n> \t\t\t*留空*或是*不配置*此项，则文章在所有该出现的位置都会显示。\n> \t\t\t层级之间相互平等，没有覆盖关系。\n> \t\t\t特别地，如果配置了此项，但是使用的并不是以上的关键词（例如只留了一个`- none`，那么文章就被隐藏起来了）\n\n### 2. 控制文章预览字数\n\n> 1. 在你想要预览结束的地方添加markdown源代码\n>\n> ``\n\n### 3. 图片的插入与上传\n\n> 1. 在偏好设置的图像位置设置，插入图片时----上传图片；勾选对本地位置的图片应用上述规则；上传服务----PicGo(app), 路径找到Picgo的exe程序路径；在smms上注册一个账号，获得账号API token，作为接下来的密钥；下载PicGo(app)之后，在图床设置里将密钥填入SM.MS图床，SM.MS-登录用户；\n>\n> \t在插件设置那里搜索smms-user，下载之后点击插件右下角的设置，点击配置plugin,配置uploader,把密钥填入后重启；在Typora偏好设置里有验证图片上传的选项\n>\n> \t------\n>\n> \t现在的话就可以在每次插入图片时实现自动上传到SMMS图床，并直接更改md文件中图片地址为远程图片地址，如果有大量没处理的本地图片，可以通过格式--图像--上传所有本地图片操作实现自动上传图片并更改图片路径\n\n\n\n## 6. python学习积累:\n\npyenv - python环境转换,参考链接: https://github.com/pyenv-win/pyenv-win\n\n1. Run `pyenv install <version>` to install the supported version\n\n2. Run `pyenv global <version>` to set a Python version as the global version\n\n3. Check which Python version you are using and its path\n\n\t```plaintext\n\t> pyenv version\n\t<version> (set by \\path\\to\\.pyenv\\pyenv-win\\.python-version)\n\t```\n\n\t\n\n>    *commands*     List all available pyenv commands\n>    *local*        Set or show the local application-specific Python version\n>    *global*       Set or show the global Python version\n>    *shell*        Set or show the shell-specific Python version\n>    *install*      Install 1 or more versions of Python \n>    *uninstall*    Uninstall 1 or more versions of Python\n>    *update*       Update the cached version DB\n>    *rehash*       Rehash pyenv shims (run this after switching Python versions)\n>    *vname*        Show the current Python version\n>    *version*      Show the current Python version and its origin\n>    version-name Show the current Python version\n>    *versions*     List all Python versions available to pyenv\n>    *exec*         Runs an executable by first preparing PATH so that the selected Python\n>    *which*        Display the full path to an executable\n>    *whence*       List all Python versions that contain the given executable\n\n```python\n#list转变字符串\na = ['P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', '\\\\', ']', '^', '_', '`', 'a', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', '|', '}', '~', '\\x7f']\nT = ''.join(a)\nprint(T)\n#list转bytes数组\nenc = [0x25, 0x6F, 0x3D, 0x6C, 0xF9, 0xE0, 0xCF, 0x3F, 0x2E, 0x24, 0xC6, 0x7B, 0x81, 0xBF, 0x55, 0x4F, 0x0D, 0x99, 0x87, 0x47, 0x48, 0xF7, 0xB9, 0x98, 0xFB, 0x1B, 0x22, 0xEC, 0x84, 0x23, 0xFD, 0xB2]\nmy_bytearray = bytearray()\nmy_bytearray.extend(enc)\nmy_bytes = bytes(my_bytearray)\nprint(my_bytes) \n#b'%o=l\\xf9\\xe0\\xcf?.$\\xc6{\\x81\\xbfUO\\r\\x99\\x87GH\\xf7\\xb9\\x98\\xfb\\x1b\"\\xec\\x84#\\xfd\\xb2'\n\n```\n\n\n\n## 7. <<深入理解计算机系统>>\n\n### 存储器\t\n\n> 程序的局部性有两种不同的形式-时间局部性和空间局部性\n>\n> 一般而言,良好局部性的程序比局部性差的程序运行的更快\n>\n> 理解: 在一个具有良好局部性的程序中,如果一个内存位置被引用了一次,那么程序很可能在不远的将来引用附近的一个内存位置\n>\n> 原因: 在硬件层,局部性原理允许计算机设计者通过引入称为*高速缓存存储器*的小而快速的存储器来保存最近被引用的指令和数据项,从而提高对主存的访问速度\n\n例如下面代码,func1会比func2更快\n\n```c++\nint func1(int a[M[N]])\n{\n    int i,j,sum=0;\n    for(i=0;i<M;i++)\n    {\n        for(j<0;j<N;j++)\n        {\n            sum += a[M][N];\n        }\n    }\n}\n\nint func2(int a[M[N]])\n{\n    int i,j,sum=0;\n    for(i=0;i<N;i++)\n    {\n        for(j<0;j<M;j++)\n        {\n            sum += a[M][N];\n        }\n    }\n}\n```\n\n其实就是遍历二维数组的时候从行遍历变成了列遍历,从而破坏了函数的空间局限性\n\n\n\n\n存储器层次架构:\n\n|  速度  |                 存储器                 |\n| :----: | :------------------------------------: |\n| *高速* |                 寄存器                 |\n|        |            L1高速缓存(SRAM)            |\n|        |            L2高速缓存(SRAM)            |\n|        |            L3高速缓存(SRAM)            |\n|        |                  主存                  |\n|        |                本地磁盘                |\n| *低速* | 远程二级存储(分布式文件系统,web服务器) |\n\n\n\n### 链接\n\n源程序main.c到可执行文件的几个步骤\n\n1. 生成Ascii码的中间文件main.i\n2. 翻译成汇编语言文件main.s\n3. 运行汇编器,生成一个可重定位目标文件main.o\n4. 最后运行链接器程序生成可执行文件main.exe\n\ngcc编译生成各种文件的几种指令 `gcc --help`可查询\n\n> gcc -E test.c -o test.i\n>\n> gcc -S test.c -o test.i\n>\n> gcc -c test.c -o test.o\n>\n> gcc test.o -o test\n\nlinux下从应用程序中加载和链接动态链接共享库\n\n```c++\n#include<dlfcn.h>\nvoid* dlopen(const char* filename,int flag) //成功返回指向句柄的指针,flag可取RTLD_NOW或者RTLD_LAZY,指示链接器立即/延迟解析,JNI基本思想就是使用dlopen来调用.so共享库\nvoid dlsym(void* handle char *symbol); //成功返回指向符号的指针,若出错则为NULL,symbol为调用的函数名称\nint dlclose(void* handle); //不用时卸载该库\n```\n\n共享库的一个主要目的就是允许多个进程共享内存中相同的库代码,但是又**不希望各个进程消耗过多的内存和时间加载完整的共享库**\n\n所以现代系统通过生成**PIC**(位置无关代码)代码来解决这个问题,无限多个进程可以共享一个共享模块的代码段的单一副本\n\ngcc使用-fpic选项指示GNU编译系统生成PIC代码,编译共享库时总是使用该选项\n\n**未防止程序对整个共享库内导出函数进行重定位**,引入了PLT表和GOT表两个概念\n\n> PLT表和GOT表是动态链接过程中的重要部分，它们可以实现程序在运行时按需加载外部库函数，提高程序的效率和安全性。我来给你讲讲它们的作用和原理。\n>\n> PLT表（Procedure Linkage Table）是程序链接表，它包含了调用外部库函数的跳转指令，每个指令都会跳转到GOT表中的一个地址。PLT表的第一个条目是一个特殊的入口，它会调用动态链接器（ld）来解析函数的真实地址，并将其写入GOT表中。这个过程称为运行时重定位或惰性绑定，它可以避免在程序启动时就进行所有的重定位，从而减少启动时间和内存占用。\n>\n> GOT表（Global Offset Table）是全局偏移表，它是一个存储外部库函数地址的数据段，每个条目对应一个PLT表中的条目。GOT表的前三个条目是特殊的，它们分别存储了动态段（.dynamic）的地址、链接映射对象（link_map）的地址和运行时解析函数（_dl_runtime_resolve）的地址。这些信息是动态链接器进行重定位所需要的。当程序第一次调用一个外部库函数时，GOT表中对应的条目会被重定位为真实的函数地址，并被缓存起来。当程序再次调用同一个函数时，就可以直接从GOT表中读取地址并跳转过去，无需再次进行重定位。\n\n\n\n## Docker\n\n### 获取容器 IP：\n\n如果你需要使用容器的 IP 地址连接，可以使用 `docker inspect` 命令获取容器的 IP 地址：\n\n```sql\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql\n```\n\n### Mysql\n\n启动mysql,必须指定`MYSQL_ROOT_PASSWORD1`属性\n\n```sql\ndocker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql\n```\n\n### phpmyadmin\n\nphpmyadmin连接mysql进行管理,指定`PMA_HOST`来指定mysql容器ip, `-e PMA_USER=root -e PMA_PASSWORD=root`为mysql账号密码\n\n```sql\ndocker run --name phpmyadmin -d -p 8080:80 -e PMA_HOST=172.17.0.3 -e PMA_PORT=3306 -e PMA_USER=root -e PMA_PASSWORD=root phpmyadmin\n```\n\n### 部署可执行jar包\n\nhttps://www.jb51.net/article/255143.htm\n\n#### 一、准备工作\n\n##### 1、**创建存放docker配置文件、jar包的文件夹**\n\n在宿主机上，创建文件夹：/home/admin/app，用于存放bash文件和jar包。然后在该文件夹下，创建bash文件和容器配置文件\n\n##### 2、**创建bash文件**\n\n```dockerfile\nvi run.sh\njava -jar /usr/data/app-1.0.0.jar\n```\n\n/usr/data是docker容器内的路径\n\n我们不必真的到容器内创建这个路径\n\n后面会将此路径挂载到当前文件夹：/home/admin/app\n\n##### 3、**创建容器配置文件**\n\n```dockerfile\nvi Dockerfile\nFROM java:8 \nEXPOSE 8081 \nENTRYPOINT [\"sh\",\"/usr/data/run.sh\"]\n```\n\n8081是我们这个jar包的对外端口\n\n#### 二、构建镜像\n\n仍然在/home/admin/app下，构建镜像。注意最后一个“.”，表示 Dockerfile 文件在当前目录下。\n\n```\ndocker build -t myapp:1.0.0 .\n```\n\n#### 三、创建容器并运行\n\n```\ndocker run -d -it --name=myapp -p 8081:8081 -v /home/admin/app:/usr/data myapp:1.0.0\n```\n\ndocker引擎重启后自动运行（也可以理解为操作系统重启后自动运行，如果docker是开机自动运行的话）\n\n```\ndocker run --restart=always -d -it --name=myapp -p 8082:8081 -v /home/admin/app:/usr/data myapp:1.0.0\n```\n\n> -v，将容器内的/usr/data挂载到宿主机的/home/admin/app。以后jar包有更新，丢到宿主机的/home/admin/app，然后重启容器即可。\n>\n> -d: 后台运行容器，并返回容器ID；\n>\n> -d, --detach=false Run container in background and print container ID\n>\n> -i: 以交互模式运行容器，通常与 -t 同时使用；\n>\n> -i, --interactive=false Keep STDIN open even if not attached\n>\n> -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n>\n> -t, --tty=false Allocate a pseudo-TTY\n\n\n\n#### 四、删除多余或失败的容器、镜像\n\n以上步骤，可能存在波折，不小心就创建了许多并不称心如意的容器和镜像，占用了心水名称和端口，必先删之而后快。\n\n\n\n##### 1、观察已经有哪些容器\n\n```\ndocker ps -a\n```\n\n加上 -a 参数，可以列出没有在运行的容器。\n\n##### 2、删除指定容器\n\ndocker rm $name 或者 容器ID\n\n##### 3、观察已经有哪些镜像\n\n```\ndocker images\n```\n\n##### 4、删除指定镜像\n\n```\ndocker rmi -f $name 或者 镜像ID\n```\n\n要删除镜像，首先要删除它派生的容器。\n\n## Mysql\n\n连接mysql数据库注意事项:\n\n### 修改root用户远程连接权限:\n\n```sql\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n```\n\n### 查看是否修改成功\n\n```sql\nuse mysql;\nselect host,user from user;\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n\n\n### 更新用户密码:\n\n使用 `ALTER USER` 语句来更新用户密码。例如，如果你想要更新用户名为 `user` 的密码\n\n```sql\nALTER USER 'user'@'%' IDENTIFIED BY 'newpassword';\n```\n\n#### 创建新用户： \n\n使用 `CREATE USER` 语句创建新用户。例如，创建一个用户名为 `user` 的新用户：\n\n```sql\nCREATE USER 'user'@'%' IDENTIFIED BY 'yourpassword';\n```\n\n### Navicat连接\n\n在docker的mysql创建用户,设置连接权限后,Navicat设置主机127.0.0.1/localhost(mysql容器的ip虽然本地ping不通,但是可以连上)\n\n\n\n## java文件打包jar\n\n1. **编译Java源文件**: 打开终端或命令提示符，然后使用`javac`命令编译你的Java源文件。例如，如果你的主类是`Main.java`，你可以使用以下命令：\n\n\t```\n\tjavac Main.java\n\t```\n\n2. **检查编译结果**: 编译后，你应该在相同的目录下看到`Main.class`文件（以及可能的任何内部类文件，例如`Main$1.class`等）。\n\n3. **创建JAR文件**: 使用`jar`命令来创建JAR文件。如果你的主类是`Main`，并且你想创建一个名为`MyApplication.jar`的JAR文件，你可以使用以下命令：(注意Main后有个空格,指将所有以Main为前缀的class都选上)\n\n\t```\n\tjar cvfe MyApplication.jar Main *.class\n\t```\n\n\t这里的`c`表示创建新的JAR文件，`v`表示在创建过程中显示详细输出，`f`指定JAR文件的名称，`e`表示指定应用程序的入口点（主类），后面跟着主类的名称和`.class`文件的通配符。\n\n4. **确保JAR文件的可执行性**: 如果你的JAR文件中包含的是应用程序的主类，你可能还需要在JAR文件的清单（MANIFEST.MF）中指定主类。这可以通过以下命令完成：\n\n\t```\n\techo \"Main-Class: Main\" > manifest.txt\n\tjar cvfm MyApplication.jar manifest.txt *.class\n\t```\n\n\t这里`m`表示指定清单文件，`manifest.txt`是包含`Main-Class`属性的文件。\n\n5. **运行JAR文件**: 一旦JAR文件创建完成，你可以通过以下命令来运行它：\n\n\t```\n\tjava -jar MyApplication.jar\n\t```\n\n6. **清理**: 如果你不需要`.class`文件了，可以删除它们以节省空间：\n\n\t```\n\trm *.class\n\t```\n","slug":"Rookie diary","published":1,"updated":"2024-09-27T13:55:53.052Z","layout":"post","photos":[],"link":"","_id":"cm1roa13f0006ugie0l2hhxvu","content":"<p>除了编程和逆向之外的常用工具的使用，记载一些其他常用的工具的使用过程防止自己继续花时间找解决办法<span id=\"more\"></span></p>\n<h2 id=\"1-GitHub\"><a href=\"#1-GitHub\" class=\"headerlink\" title=\"1. GitHub:\"></a>1. GitHub:</h2><blockquote>\n<p>github已经创建仓库后，将本地文件上传：</p>\n<ol>\n<li>在本地文件夹中右键 <code>Git Bash Here</code></li>\n<li>输入 <code>git init</code> 在本地建立.git文件夹</li>\n<li>输入 <code>git remote add origin git@github.com:Kvancy/GameHall.git</code> 设置远程仓库，origin后面地址从仓库SSH块复制</li>\n<li>输入 <code>git add .</code> </li>\n<li>输入 <code>git commit -m &quot;版本号&quot;</code> </li>\n<li>输入 <code>git checkout -b main</code> 将上传分支设置为main(也可以是其他，自定义)</li>\n<li>输入 <code>git push -u origin main</code> 上传文件到main分支</li>\n</ol>\n<p>删除分支</p>\n<ol>\n<li>远端分支 <code>git push origin --delete [branch_name]</code></li>\n<li>本地分支 <code>git branch [branch_name] -d</code></li>\n</ol>\n</blockquote>\n<!-- more -->\n<blockquote>\n<p>查看分支</p>\n<ol>\n<li>查看本地分支 <code>git branch</code></li>\n<li>查看远程分支 <code>git branch -r</code></li>\n<li>查看本地和远程分支 <code>git branch -a</code></li>\n</ol>\n<p>更换远程仓库地址</p>\n<ol>\n<li><code>git remote -v</code>  #查看远端地址</li>\n<li><code>git remote</code> #查看远端仓库名</li>\n<li><code>git remote set-url origin https://gitee.com/xx/xx.git</code> (新地址)</li>\n</ol>\n<p>git push报错，显示仓库中有一部分代码，要先pull </p>\n<p>参考链接 <a href=\"https://www.cnblogs.com/qingheshiguang/p/14777557.html\"></a></p>\n<ul>\n<li>方法一：</li>\n</ul>\n<ol>\n<li><p><code>git pull origin [main]</code>分支名 </p>\n</li>\n<li><p>重新<code>add</code>和<code>commit</code>相应文件 </p>\n</li>\n<li><p><code>git push origin [main]</code> 分支名</p>\n</li>\n</ol>\n<ul>\n<li>方法二：</li>\n</ul>\n<ol>\n<li>强推： <code>git push -f origin [main]</code> 分支名</li>\n</ol>\n</blockquote>\n<h2 id=\"2-VScode的环境配置：\"><a href=\"#2-VScode的环境配置：\" class=\"headerlink\" title=\"2. VScode的环境配置：\"></a>2. VScode的环境配置：</h2><ol>\n<li><p>launch.json文件配置（调试的配置，必须先编译得到exe）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: g++.exe 生成和调试活动文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;externalConsole&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span><span class=\"comment\">//设置成true才能调试</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\MinGW\\\\bin\\\\gdb.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;将反汇编风格设置为 Intel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tasks.json文件配置（编译作用）,这里默认g++，不需要动，在终端-配置任务中修改</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppbuild&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\MinGW\\\\bin\\\\g++.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-fdiagnostics-color=always&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$gcc&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;kind&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;isDefault&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;detail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;调试器生成的任务。&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>setting.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cCompilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/MinGW/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cppCompilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g++&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.debuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gnu++14&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.msvcBatchPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useMsvc&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.warnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wall&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wextra&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wpedantic&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wshadow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wformat=2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wcast-align&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wconversion&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wsign-conversion&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wnull-dereference&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.msvcWarnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/W4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/permissive-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14242&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14287&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14296&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14311&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14826&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w44062&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w44242&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14905&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14906&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14263&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w44265&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14928&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.enableWarnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.warningsAsError&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.compilerArgs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.linkerArgs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.includePaths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.includeSearch&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/*&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.excludeSearch&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/build/**&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.*/**&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.vscode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.vscode/**&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useAddressSanitizer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useUndefinedSanitizer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useLeakSanitizer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.showCompilationTime&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useLinkTimeOptimization&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.msvcSecureNoWarnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>c_cpp_properties</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;windows-clang-x86&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;includePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;defines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_DEBUG&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;UNICODE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_UNICODE&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gnu++14&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;intelliSenseMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;windows-clang-x86&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;compilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/MinGW/bin/g++.exe&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-虚拟机配置：\"><a href=\"#3-虚拟机配置：\" class=\"headerlink\" title=\"3. 虚拟机配置：\"></a>3. 虚拟机配置：</h2><p><code>bcdedit /set hypervisorlaunchtype off</code></p>\n<h2 id=\"4-服务器博客搭建\"><a href=\"#4-服务器博客搭建\" class=\"headerlink\" title=\"4. 服务器博客搭建\"></a>4. 服务器博客搭建</h2><h3 id=\"1-登录宝塔面板\"><a href=\"#1-登录宝塔面板\" class=\"headerlink\" title=\"1. 登录宝塔面板\"></a>1. 登录宝塔面板</h3><blockquote>\n<ol>\n<li><p><code>远程连接云服务器的控制台</code></p>\n</li>\n<li><p><code>访问宝塔面板的安全入口，可通过控制台 su root  bt default 查询网址，</code></p>\n<p> <code>目前设置成了 47.97.68.254:1111/Kvancy</code></p>\n</li>\n<li><p><code>用户名是Kvancy</code></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"2-本地下载hexo博客系统\"><a href=\"#2-本地下载hexo博客系统\" class=\"headerlink\" title=\"2. 本地下载hexo博客系统\"></a>2. 本地下载hexo博客系统</h3><blockquote>\n<ol>\n<li><code>curl --silent --location https://rpm.nodesource.com/setup_14.x|sudo bash</code></li>\n<li><code>yum -y install nodejs</code></li>\n<li><code>npm install hexo-cli -g</code></li>\n<li><code>hexo init blog</code></li>\n<li><code>cd blog/</code></li>\n<li><code>npm install</code> </li>\n<li><code>hexo server</code></li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 默认4000端口没用的话，使用 <code>hexo server -p5000</code>指定端口，如果想直接通过ip访问博客，可以通过 <code>hexo server -p80</code>设置端口。也可以通过 <code>/blog/node_modules/hexo-server/index.js</code>修改port值从而修改默认端口号</li>\n<li><input disabled=\"\" type=\"checkbox\"> 有时候开启多个端口设置hexio会访问失败，通过 <code>netstat -nultp</code>查看所有端口号，<code>kill -9 id</code>  id为进程id，杀死进程即可，kill - num 代表的意思如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>num</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>9</th>\n<th>15</th>\n<th>18</th>\n<th>19</th>\n<th>20</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>含义</td>\n<td>进程重新被加载</td>\n<td>删除进程在内存中的数据</td>\n<td>删除鼠标在内存中的数据</td>\n<td>强行结束单个进程</td>\n<td>正常关闭进程</td>\n<td>运行暂停的进程</td>\n<td>暂停某个进程</td>\n<td>把进程打入后台</td>\n</tr>\n</tbody></table>\n</blockquote>\n<h3 id=\"3-本地Hexo一键部署到远程服务器\"><a href=\"#3-本地Hexo一键部署到远程服务器\" class=\"headerlink\" title=\"3. 本地Hexo一键部署到远程服务器\"></a>3. 本地Hexo一键部署到远程服务器</h3><blockquote>\n<p>参考链接 <a href=\"https://blog.51cto.com/u_16213710/7330478\"></a></p>\n<ol>\n<li><p><code>yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</code> 安装宝塔面板</p>\n</li>\n<li><p><code>yum install git</code> 安装git</p>\n</li>\n<li><p><code>adduser git</code> 配置git用户</p>\n</li>\n<li><p><code>chmod 740 /etc/sudoers</code>  赋予用户权限 &#96;&#96;vi &#x2F;etc&#x2F;sudoers<code> </code> 进入权限管理文件</p>\n</li>\n<li><p><code>root  ALL=(ALL)  ALL</code>      </p>\n<p> <code>git  ALL=(ALL)   ALL</code>   在这条上面加上这行</p>\n</li>\n<li><p><code>chmod 400 /etc/sudoers</code> 修改sudoers文件权限</p>\n</li>\n<li><p><code>sudo passwd git </code> 设置git 用户的密码，这里设置了 ‘root’</p>\n</li>\n<li><p><code>su - git </code> 给用户添加ssh密钥，git</p>\n<p> <code>mkdir -p ~/.ssh </code></p>\n<p> <code>touch ~/.ssh/authorized_keys </code></p>\n<p> <code>chmod 600 ~/.ssh/authorzied_keys </code></p>\n<p> <code>chmod 700 ~/.ssh vim ~/.ssh/authorized_keys    </code> 将ssh密钥粘贴进去，用于远程登录服务器</p>\n</li>\n<li><p><code>ssh -v git@你的 ip 地址</code>   输入密码 即可成功登录云服务器</p>\n</li>\n<li><p><code>su root</code> 创建一个git仓库，新建一个 post-receive 文件，用来存储本地的提交</p>\n<p> <code>cd /home/git</code></p>\n<p><code>git init --bare blog.git</code>  #在&#x2F;home&#x2F;git下创建新仓库blog.git </p>\n<p><code>chown git:git -R blog.git</code> #给予git用户权限</p>\n</li>\n<li><p><code>cd blog.git/hooks vim post-receive</code> 配置钩子文件，使得每次本地上传时，远程自动同步下载</p>\n</li>\n<li><p><code>#!/bin/bash</code></p>\n</li>\n</ol>\n<pre><code>`git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f`  写入钩子代码\n</code></pre>\n<ol start=\"12\">\n<li><code>chmod +x /home/git/blog.git/hooks/post-receive</code> 授予钩子可执行权限</li>\n</ol>\n<pre><code>以上是服务器配置\n\n------\n</code></pre>\n<ol start=\"13\">\n<li><pre><code class=\"js\">deploy: #配置本地hexo的_config.yml文件\n    type: git\n    repo: root@你的ip地址:/home/git/blog.git    #仓库地址\n    branch: master    #分支\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">14. ```js</span><br><span class=\"line\">\t#上传到远程服务器端git仓库，远程通过钩子自动下载同步    #这些也是部署之后每次上传时执行的命令</span><br><span class=\"line\">\thexo clean </span><br><span class=\"line\">\thexo g -d  #编译并部署，</span><br><span class=\"line\">\thexo s #本地用来测效果</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>结束撒花，哦对了，如果有nginx需求，参考这个链接，可以设置默认访问80端口，输入ip默认到博客界面 <a href=\"https://zhuanlan.zhihu.com/p/120743882\"></a> </p>\n</blockquote>\n<h3 id=\"4-针对Kratos-Rebirth主题的配置\"><a href=\"#4-针对Kratos-Rebirth主题的配置\" class=\"headerlink\" title=\"4. 针对Kratos-Rebirth主题的配置\"></a>4. 针对Kratos-Rebirth主题的配置</h3><p>参考链接 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\"></a></p>\n<blockquote>\n<h4 id=\"根目录下-config-yml\"><a href=\"#根目录下-config-yml\" class=\"headerlink\" title=\"根目录下_config.yml\"></a>根目录下_config.yml</h4><ol>\n<li><p>先理清两个概念，根目录下的deploy配置repo是对应仓库地址用http或者ssh地址都行，但是http协议下的 <code>hexo -d</code>容易报错，可能延迟太高了，建议使用ssh地址举例如下：<code>git@github.com:Kvancy/Kvancy.github.io.git</code> 根目录下url的配置是远程部署的网站地址，不是仓库地址，所以可以这样填  <code>url: https://kvancy.github.io/</code></p>\n</li>\n<li><p>还有一个叫做文章永久链接格式，permalink的配置，默认配置如下：<code>:year/:month/:day/:title/</code></p>\n<p> 意思是，在每次 <code>hexo -g</code>生成html时，默认文章目录结构是按照年月日文章名排布的，因为这个我一直以为是我commit版本加了’&#x2F;‘导致的错误，弄了半天没弄明白，搞得我放弃云服务器转到github上来，现在明白了，但是想想还是就到github上吧</p>\n</li>\n<li><p><code>index_generator:</code>属性配置，这个的per-page属性是指主页面下最多几个文章，也就是说几个文章之后需要进入下一个page，这个主题调成4个我个人感觉最好的</p>\n</li>\n<li><p><code>index: post_type: false </code> 这个设置成false可以让主页上的文章预览时有自定义的图片</p>\n</li>\n</ol>\n<h4 id=\"主题文件夹下-config-yml配置\"><a href=\"#主题文件夹下-config-yml配置\" class=\"headerlink\" title=\"主题文件夹下_config.yml配置\"></a>主题文件夹下_config.yml配置</h4><p>关于特效，参考链接 <a href=\"https://juejin.cn/post/7106018120036253710\"></a></p>\n<ol>\n<li><p>先说第一个，也是搞了我很久的一个问题，关于网站havicon标志的配置。我一直在根目录下对havicon进行部署，一度以为我的路径或者图片有问题，因为其中没有havicon的有关配置，我就像其他主题一样自己加上去，甚至去查过可以直接在服务器根目录下放着havicon.ico文件，浏览器会自己查找，试过了发现在 <code>hexo -g</code>的时候根目录结构会改变，行不通，后来翻阅作者的配置说明得知，在主题文件夹下site_logo处配置 <code>site_logo: /images/favicon.ico #网站的favicon</code></p>\n</li>\n<li><p>snow下雪动画设置成true，enable_dark设置成false，亮色主题。</p>\n</li>\n<li><p>去除主页上栏图片改用一整个图片做背景是在customStyles下吧images的banner属性地址设置成空，在src&#x2F;scss&#x2F;kr-color&#x2F;default.css文件有有关对应默认设置的图片地址，把resource文件下该图片名改一下即可，独留background属性，地址为&#x2F;images&#x2F;bg.jpg，这个相对路径判断：”hexo -g”生成public文件后，进入public文件，这个是浏览器的根目录，在根目录下的images文件夹即对应了这个相对路径，下面的avatar也是如此寻址设图</p>\n</li>\n<li><p><code>siteLeaveEvent: true</code>这个设置成true可以有监控离开和进入网页的动作，从而做出动效</p>\n</li>\n<li><p>引入了鼠标跟踪特效，<a href=\"https://1keven1.github.io/2021/01/20/%E3%80%90JS%E3%80%91%E7%BD%91%E9%A1%B5%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%8B%96%E5%B0%BE%E7%89%B9%E6%95%88/\">源js代码链接</a> 并对该特效进行修改，<code>characters = [&quot;0&quot;, &quot;1&quot;];</code> 把音符改成了二进制；引入步骤是，copy并自定义修改js代码后，把文件名改成Suzhi.js（博主名），再copy一份到Suzhi.min.js，前者放在src&#x2F;js目录下，后者放到source&#x2F;js代码下；在layout&#x2F;_partial找到after-footer.ejs文件，进去对照id &#x3D; snow的写法复制一个对应id&#x3D; Suzhi的（前端不是很懂，就是copy就完了！），参考如下：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span>(theme.<span class=\"property\">mouse_trace_js</span>)&#123; %&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Suzhi&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;%- js_theme_cdn(&#x27;js/Suzhi.min.js&#x27;, &#123;async: true&#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 然后在theme主题下的config_yml文件加一个 <code>mouse_trace_js: true #鼠标跟踪动画</code>就行</p>\n</li>\n<li><p>引入boom.js，text.js，更改了鼠标点击特效，前者是爆炸烟花波纹，后者是文字特效</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"5-关于Typora\"><a href=\"#5-关于Typora\" class=\"headerlink\" title=\"5. 关于Typora\"></a>5. 关于Typora</h2><h3 id=\"1-YAML-Front-Matter的使用\"><a href=\"#1-YAML-Front-Matter的使用\" class=\"headerlink\" title=\"1. YAML Front Matter的使用\"></a>1. YAML Front Matter的使用</h3><blockquote>\n<ol>\n<li><p>每次上传md文件到博客时，都需要给文章起个标题，并且配置文章属性，如下是属性配置格式</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title</span>: c++笔记</span><br><span class=\"line\"><span class=\"attr\">date</span>: <span class=\"number\">2023</span>/<span class=\"number\">9</span>/<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"attr\">categories</span>: 笔记</span><br><span class=\"line\"><span class=\"attr\">tags</span>:</span><br><span class=\"line\">  - 笔记</span><br><span class=\"line\"><span class=\"attr\">sticky</span>: <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">pic</span>:</span><br><span class=\"line\"><span class=\"attr\">comments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">toc</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">expire</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">only</span>:</span><br><span class=\"line\">  - home</span><br><span class=\"line\">  - category</span><br><span class=\"line\">  - tag</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>pic</strong> : 可以指定这篇文章是否使用自定义的缩略图名称（在文章资源文件夹内），而不是使用随机化的图标</p>\n</li>\n<li><p><strong>sticky</strong> : (<em>number</em>)重要的文章，把它们置顶吧！数字越大优先级越高哦~</p>\n</li>\n<li><p><strong>comments</strong> : (<em>true&#x2F;false</em>)是否为单篇文章指定开启或关闭评论区</p>\n</li>\n<li><p><strong>toc：</strong> (<em>true&#x2F;false</em>)该文章是否需要生成目录</p>\n</li>\n<li><p><strong>only：</strong> 指定文章显示的位置，有以下关键词：</p>\n</li>\n<li><p>home: 在首页显示</p>\n<ul>\n<li>category: 在分类页显示</li>\n<li>tag: 在标签页显示<br>  <em>留空</em>或是<em>不配置</em>此项，则文章在所有该出现的位置都会显示。<br>  层级之间相互平等，没有覆盖关系。<br>  特别地，如果配置了此项，但是使用的并不是以上的关键词（例如只留了一个<code>- none</code>，那么文章就被隐藏起来了）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"2-控制文章预览字数\"><a href=\"#2-控制文章预览字数\" class=\"headerlink\" title=\"2. 控制文章预览字数\"></a>2. 控制文章预览字数</h3><blockquote>\n<ol>\n<li>在你想要预览结束的地方添加markdown源代码</li>\n</ol>\n<p>&#96;&#96;</p>\n</blockquote>\n<h3 id=\"3-图片的插入与上传\"><a href=\"#3-图片的插入与上传\" class=\"headerlink\" title=\"3. 图片的插入与上传\"></a>3. 图片的插入与上传</h3><blockquote>\n<ol>\n<li><p>在偏好设置的图像位置设置，插入图片时—-上传图片；勾选对本地位置的图片应用上述规则；上传服务—-PicGo(app), 路径找到Picgo的exe程序路径；在smms上注册一个账号，获得账号API token，作为接下来的密钥；下载PicGo(app)之后，在图床设置里将密钥填入SM.MS图床，SM.MS-登录用户；</p>\n<p> 在插件设置那里搜索smms-user，下载之后点击插件右下角的设置，点击配置plugin,配置uploader,把密钥填入后重启；在Typora偏好设置里有验证图片上传的选项</p>\n<hr>\n<p> 现在的话就可以在每次插入图片时实现自动上传到SMMS图床，并直接更改md文件中图片地址为远程图片地址，如果有大量没处理的本地图片，可以通过格式–图像–上传所有本地图片操作实现自动上传图片并更改图片路径</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"6-python学习积累\"><a href=\"#6-python学习积累\" class=\"headerlink\" title=\"6. python学习积累:\"></a>6. python学习积累:</h2><p>pyenv - python环境转换,参考链接: <a href=\"https://github.com/pyenv-win/pyenv-win\">https://github.com/pyenv-win/pyenv-win</a></p>\n<ol>\n<li><p>Run <code>pyenv install &lt;version&gt;</code> to install the supported version</p>\n</li>\n<li><p>Run <code>pyenv global &lt;version&gt;</code> to set a Python version as the global version</p>\n</li>\n<li><p>Check which Python version you are using and its path</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pyenv version</span><br><span class=\"line\">&lt;version&gt; (set by \\path\\to\\.pyenv\\pyenv-win\\.python-version)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>   <em>commands</em>     List all available pyenv commands<br>   <em>local</em>        Set or show the local application-specific Python version<br>   <em>global</em>       Set or show the global Python version<br>   <em>shell</em>        Set or show the shell-specific Python version<br>   <em>install</em>      Install 1 or more versions of Python<br>   <em>uninstall</em>    Uninstall 1 or more versions of Python<br>   <em>update</em>       Update the cached version DB<br>   <em>rehash</em>       Rehash pyenv shims (run this after switching Python versions)<br>   <em>vname</em>        Show the current Python version<br>   <em>version</em>      Show the current Python version and its origin<br>   version-name Show the current Python version<br>   <em>versions</em>     List all Python versions available to pyenv<br>   <em>exec</em>         Runs an executable by first preparing PATH so that the selected Python<br>   <em>which</em>        Display the full path to an executable<br>   <em>whence</em>       List all Python versions that contain the given executable</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#list转变字符串</span></span><br><span class=\"line\">a = [<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;T&#x27;</span>, <span class=\"string\">&#x27;U&#x27;</span>, <span class=\"string\">&#x27;V&#x27;</span>, <span class=\"string\">&#x27;W&#x27;</span>, <span class=\"string\">&#x27;X&#x27;</span>, <span class=\"string\">&#x27;Y&#x27;</span>, <span class=\"string\">&#x27;Z&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>, <span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;]&#x27;</span>, <span class=\"string\">&#x27;^&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>, <span class=\"string\">&#x27;&#123;&#x27;</span>, <span class=\"string\">&#x27;|&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;k&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;|&#x27;</span>, <span class=\"string\">&#x27;&#125;&#x27;</span>, <span class=\"string\">&#x27;~&#x27;</span>, <span class=\"string\">&#x27;\\x7f&#x27;</span>]</span><br><span class=\"line\">T = <span class=\"string\">&#x27;&#x27;</span>.join(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\"><span class=\"comment\">#list转bytes数组</span></span><br><span class=\"line\">enc = [<span class=\"number\">0x25</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x3D</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xF9</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0xCF</span>, <span class=\"number\">0x3F</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x7B</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0xBF</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x4F</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x99</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xF7</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0xFB</span>, <span class=\"number\">0x1B</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0xFD</span>, <span class=\"number\">0xB2</span>]</span><br><span class=\"line\">my_bytearray = <span class=\"built_in\">bytearray</span>()</span><br><span class=\"line\">my_bytearray.extend(enc)</span><br><span class=\"line\">my_bytes = <span class=\"built_in\">bytes</span>(my_bytearray)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_bytes) </span><br><span class=\"line\"><span class=\"comment\">#b&#x27;%o=l\\xf9\\xe0\\xcf?.$\\xc6&#123;\\x81\\xbfUO\\r\\x99\\x87GH\\xf7\\xb9\\x98\\xfb\\x1b&quot;\\xec\\x84#\\xfd\\xb2&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7. &lt;&lt;深入理解计算机系统&gt;&gt;\"></a>7. &lt;&lt;深入理解计算机系统&gt;&gt;</h2><h3 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h3><blockquote>\n<p>程序的局部性有两种不同的形式-时间局部性和空间局部性</p>\n<p>一般而言,良好局部性的程序比局部性差的程序运行的更快</p>\n<p>理解: 在一个具有良好局部性的程序中,如果一个内存位置被引用了一次,那么程序很可能在不远的将来引用附近的一个内存位置</p>\n<p>原因: 在硬件层,局部性原理允许计算机设计者通过引入称为<em>高速缓存存储器</em>的小而快速的存储器来保存最近被引用的指令和数据项,从而提高对主存的访问速度</p>\n</blockquote>\n<p>例如下面代码,func1会比func2更快</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"type\">int</span> a[M[N]])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;M;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j&lt;<span class=\"number\">0</span>;j&lt;N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += a[M][N];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a[M[N]])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j&lt;<span class=\"number\">0</span>;j&lt;M;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += a[M][N];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实就是遍历二维数组的时候从行遍历变成了列遍历,从而破坏了函数的空间局限性</p>\n<p>存储器层次架构:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">速度</th>\n<th align=\"center\">存储器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><em>高速</em></td>\n<td align=\"center\">寄存器</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">L1高速缓存(SRAM)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">L2高速缓存(SRAM)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">L3高速缓存(SRAM)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">主存</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">本地磁盘</td>\n</tr>\n<tr>\n<td align=\"center\"><em>低速</em></td>\n<td align=\"center\">远程二级存储(分布式文件系统,web服务器)</td>\n</tr>\n</tbody></table>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>源程序main.c到可执行文件的几个步骤</p>\n<ol>\n<li>生成Ascii码的中间文件main.i</li>\n<li>翻译成汇编语言文件main.s</li>\n<li>运行汇编器,生成一个可重定位目标文件main.o</li>\n<li>最后运行链接器程序生成可执行文件main.exe</li>\n</ol>\n<p>gcc编译生成各种文件的几种指令 <code>gcc --help</code>可查询</p>\n<blockquote>\n<p>gcc -E test.c -o test.i</p>\n<p>gcc -S test.c -o test.i</p>\n<p>gcc -c test.c -o test.o</p>\n<p>gcc test.o -o test</p>\n</blockquote>\n<p>linux下从应用程序中加载和链接动态链接共享库</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">dlopen</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* filename,<span class=\"type\">int</span> flag)</span> <span class=\"comment\">//成功返回指向句柄的指针,flag可取RTLD_NOW或者RTLD_LAZY,指示链接器立即/延迟解析,JNI基本思想就是使用dlopen来调用.so共享库</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dlsym</span><span class=\"params\">(<span class=\"type\">void</span>* handle <span class=\"type\">char</span> *symbol)</span></span>; <span class=\"comment\">//成功返回指向符号的指针,若出错则为NULL,symbol为调用的函数名称</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dlclose</span><span class=\"params\">(<span class=\"type\">void</span>* handle)</span></span>; <span class=\"comment\">//不用时卸载该库</span></span><br></pre></td></tr></table></figure>\n\n<p>共享库的一个主要目的就是允许多个进程共享内存中相同的库代码,但是又<strong>不希望各个进程消耗过多的内存和时间加载完整的共享库</strong></p>\n<p>所以现代系统通过生成<strong>PIC</strong>(位置无关代码)代码来解决这个问题,无限多个进程可以共享一个共享模块的代码段的单一副本</p>\n<p>gcc使用-fpic选项指示GNU编译系统生成PIC代码,编译共享库时总是使用该选项</p>\n<p><strong>未防止程序对整个共享库内导出函数进行重定位</strong>,引入了PLT表和GOT表两个概念</p>\n<blockquote>\n<p>PLT表和GOT表是动态链接过程中的重要部分，它们可以实现程序在运行时按需加载外部库函数，提高程序的效率和安全性。我来给你讲讲它们的作用和原理。</p>\n<p>PLT表（Procedure Linkage Table）是程序链接表，它包含了调用外部库函数的跳转指令，每个指令都会跳转到GOT表中的一个地址。PLT表的第一个条目是一个特殊的入口，它会调用动态链接器（ld）来解析函数的真实地址，并将其写入GOT表中。这个过程称为运行时重定位或惰性绑定，它可以避免在程序启动时就进行所有的重定位，从而减少启动时间和内存占用。</p>\n<p>GOT表（Global Offset Table）是全局偏移表，它是一个存储外部库函数地址的数据段，每个条目对应一个PLT表中的条目。GOT表的前三个条目是特殊的，它们分别存储了动态段（.dynamic）的地址、链接映射对象（link_map）的地址和运行时解析函数（_dl_runtime_resolve）的地址。这些信息是动态链接器进行重定位所需要的。当程序第一次调用一个外部库函数时，GOT表中对应的条目会被重定位为真实的函数地址，并被缓存起来。当程序再次调用同一个函数时，就可以直接从GOT表中读取地址并跳转过去，无需再次进行重定位。</p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"获取容器-IP：\"><a href=\"#获取容器-IP：\" class=\"headerlink\" title=\"获取容器 IP：\"></a>获取容器 IP：</h3><p>如果你需要使用容器的 IP 地址连接，可以使用 <code>docker inspect</code> 命令获取容器的 IP 地址：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect <span class=\"operator\">-</span>f <span class=\"string\">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h3><p>启动mysql,必须指定<code>MYSQL_ROOT_PASSWORD1</code>属性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"operator\">-</span>p <span class=\"number\">3306</span>:<span class=\"number\">3306</span> <span class=\"comment\">--name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"phpmyadmin\"><a href=\"#phpmyadmin\" class=\"headerlink\" title=\"phpmyadmin\"></a>phpmyadmin</h3><p>phpmyadmin连接mysql进行管理,指定<code>PMA_HOST</code>来指定mysql容器ip, <code>-e PMA_USER=root -e PMA_PASSWORD=root</code>为mysql账号密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"comment\">--name phpmyadmin -d -p 8080:80 -e PMA_HOST=172.17.0.3 -e PMA_PORT=3306 -e PMA_USER=root -e PMA_PASSWORD=root phpmyadmin</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署可执行jar包\"><a href=\"#部署可执行jar包\" class=\"headerlink\" title=\"部署可执行jar包\"></a>部署可执行jar包</h3><p><a href=\"https://www.jb51.net/article/255143.htm\">https://www.jb51.net/article/255143.htm</a></p>\n<h4 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h4><h5 id=\"1、创建存放docker配置文件、jar包的文件夹\"><a href=\"#1、创建存放docker配置文件、jar包的文件夹\" class=\"headerlink\" title=\"1、创建存放docker配置文件、jar包的文件夹\"></a>1、<strong>创建存放docker配置文件、jar包的文件夹</strong></h5><p>在宿主机上，创建文件夹：&#x2F;home&#x2F;admin&#x2F;app，用于存放bash文件和jar包。然后在该文件夹下，创建bash文件和容器配置文件</p>\n<h5 id=\"2、创建bash文件\"><a href=\"#2、创建bash文件\" class=\"headerlink\" title=\"2、创建bash文件\"></a>2、<strong>创建bash文件</strong></h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi run.sh</span><br><span class=\"line\">java -jar /usr/data/app-<span class=\"number\">1.0</span>.<span class=\"number\">0</span>.jar</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;usr&#x2F;data是docker容器内的路径</p>\n<p>我们不必真的到容器内创建这个路径</p>\n<p>后面会将此路径挂载到当前文件夹：&#x2F;home&#x2F;admin&#x2F;app</p>\n<h5 id=\"3、创建容器配置文件\"><a href=\"#3、创建容器配置文件\" class=\"headerlink\" title=\"3、创建容器配置文件\"></a>3、<strong>创建容器配置文件</strong></h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8081</span> </span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;/usr/data/run.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>8081是我们这个jar包的对外端口</p>\n<h4 id=\"二、构建镜像\"><a href=\"#二、构建镜像\" class=\"headerlink\" title=\"二、构建镜像\"></a>二、构建镜像</h4><p>仍然在&#x2F;home&#x2F;admin&#x2F;app下，构建镜像。注意最后一个“.”，表示 Dockerfile 文件在当前目录下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myapp:1.0.0 .</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、创建容器并运行\"><a href=\"#三、创建容器并运行\" class=\"headerlink\" title=\"三、创建容器并运行\"></a>三、创建容器并运行</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -it --name=myapp -p 8081:8081 -v /home/admin/app:/usr/data myapp:1.0.0</span><br></pre></td></tr></table></figure>\n\n<p>docker引擎重启后自动运行（也可以理解为操作系统重启后自动运行，如果docker是开机自动运行的话）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always -d -it --name=myapp -p 8082:8081 -v /home/admin/app:/usr/data myapp:1.0.0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-v，将容器内的&#x2F;usr&#x2F;data挂载到宿主机的&#x2F;home&#x2F;admin&#x2F;app。以后jar包有更新，丢到宿主机的&#x2F;home&#x2F;admin&#x2F;app，然后重启容器即可。</p>\n<p>-d: 后台运行容器，并返回容器ID；</p>\n<p>-d, –detach&#x3D;false Run container in background and print container ID</p>\n<p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p>\n<p>-i, –interactive&#x3D;false Keep STDIN open even if not attached</p>\n<p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>\n<p>-t, –tty&#x3D;false Allocate a pseudo-TTY</p>\n</blockquote>\n<h4 id=\"四、删除多余或失败的容器、镜像\"><a href=\"#四、删除多余或失败的容器、镜像\" class=\"headerlink\" title=\"四、删除多余或失败的容器、镜像\"></a>四、删除多余或失败的容器、镜像</h4><p>以上步骤，可能存在波折，不小心就创建了许多并不称心如意的容器和镜像，占用了心水名称和端口，必先删之而后快。</p>\n<h5 id=\"1、观察已经有哪些容器\"><a href=\"#1、观察已经有哪些容器\" class=\"headerlink\" title=\"1、观察已经有哪些容器\"></a>1、观察已经有哪些容器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>加上 -a 参数，可以列出没有在运行的容器。</p>\n<h5 id=\"2、删除指定容器\"><a href=\"#2、删除指定容器\" class=\"headerlink\" title=\"2、删除指定容器\"></a>2、删除指定容器</h5><p>docker rm $name 或者 容器ID</p>\n<h5 id=\"3、观察已经有哪些镜像\"><a href=\"#3、观察已经有哪些镜像\" class=\"headerlink\" title=\"3、观察已经有哪些镜像\"></a>3、观察已经有哪些镜像</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、删除指定镜像\"><a href=\"#4、删除指定镜像\" class=\"headerlink\" title=\"4、删除指定镜像\"></a>4、删除指定镜像</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $name 或者 镜像ID</span><br></pre></td></tr></table></figure>\n\n<p>要删除镜像，首先要删除它派生的容器。</p>\n<h2 id=\"Mysql-1\"><a href=\"#Mysql-1\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><p>连接mysql数据库注意事项:</p>\n<h3 id=\"修改root用户远程连接权限\"><a href=\"#修改root用户远程连接权限\" class=\"headerlink\" title=\"修改root用户远程连接权限:\"></a>修改root用户远程连接权限:</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> <span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看是否修改成功\"><a href=\"#查看是否修改成功\" class=\"headerlink\" title=\"查看是否修改成功\"></a>查看是否修改成功</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> host,<span class=\"keyword\">user</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新用户密码\"><a href=\"#更新用户密码\" class=\"headerlink\" title=\"更新用户密码:\"></a>更新用户密码:</h3><p>使用 <code>ALTER USER</code> 语句来更新用户密码。例如，如果你想要更新用户名为 <code>user</code> 的密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;user&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;newpassword&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新用户：\"><a href=\"#创建新用户：\" class=\"headerlink\" title=\"创建新用户：\"></a>创建新用户：</h4><p>使用 <code>CREATE USER</code> 语句创建新用户。例如，创建一个用户名为 <code>user</code> 的新用户：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;user&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;yourpassword&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Navicat连接\"><a href=\"#Navicat连接\" class=\"headerlink\" title=\"Navicat连接\"></a>Navicat连接</h3><p>在docker的mysql创建用户,设置连接权限后,Navicat设置主机127.0.0.1&#x2F;localhost(mysql容器的ip虽然本地ping不通,但是可以连上)</p>\n<h2 id=\"java文件打包jar\"><a href=\"#java文件打包jar\" class=\"headerlink\" title=\"java文件打包jar\"></a>java文件打包jar</h2><ol>\n<li><p><strong>编译Java源文件</strong>: 打开终端或命令提示符，然后使用<code>javac</code>命令编译你的Java源文件。例如，如果你的主类是<code>Main.java</code>，你可以使用以下命令：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Main.java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查编译结果</strong>: 编译后，你应该在相同的目录下看到<code>Main.class</code>文件（以及可能的任何内部类文件，例如<code>Main$1.class</code>等）。</p>\n</li>\n<li><p><strong>创建JAR文件</strong>: 使用<code>jar</code>命令来创建JAR文件。如果你的主类是<code>Main</code>，并且你想创建一个名为<code>MyApplication.jar</code>的JAR文件，你可以使用以下命令：(注意Main后有个空格,指将所有以Main为前缀的class都选上)</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvfe MyApplication.jar Main *.class</span><br></pre></td></tr></table></figure>\n\n<p> 这里的<code>c</code>表示创建新的JAR文件，<code>v</code>表示在创建过程中显示详细输出，<code>f</code>指定JAR文件的名称，<code>e</code>表示指定应用程序的入口点（主类），后面跟着主类的名称和<code>.class</code>文件的通配符。</p>\n</li>\n<li><p><strong>确保JAR文件的可执行性</strong>: 如果你的JAR文件中包含的是应用程序的主类，你可能还需要在JAR文件的清单（MANIFEST.MF）中指定主类。这可以通过以下命令完成：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Main-Class: Main&quot; &gt; manifest.txt</span><br><span class=\"line\">jar cvfm MyApplication.jar manifest.txt *.class</span><br></pre></td></tr></table></figure>\n\n<p> 这里<code>m</code>表示指定清单文件，<code>manifest.txt</code>是包含<code>Main-Class</code>属性的文件。</p>\n</li>\n<li><p><strong>运行JAR文件</strong>: 一旦JAR文件创建完成，你可以通过以下命令来运行它：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar MyApplication.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>清理</strong>: 如果你不需要<code>.class</code>文件了，可以删除它们以节省空间：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm *.class</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>除了编程和逆向之外的常用工具的使用，记载一些其他常用的工具的使用过程防止自己继续花时间找解决办法","more":"</p>\n<h2 id=\"1-GitHub\"><a href=\"#1-GitHub\" class=\"headerlink\" title=\"1. GitHub:\"></a>1. GitHub:</h2><blockquote>\n<p>github已经创建仓库后，将本地文件上传：</p>\n<ol>\n<li>在本地文件夹中右键 <code>Git Bash Here</code></li>\n<li>输入 <code>git init</code> 在本地建立.git文件夹</li>\n<li>输入 <code>git remote add origin git@github.com:Kvancy/GameHall.git</code> 设置远程仓库，origin后面地址从仓库SSH块复制</li>\n<li>输入 <code>git add .</code> </li>\n<li>输入 <code>git commit -m &quot;版本号&quot;</code> </li>\n<li>输入 <code>git checkout -b main</code> 将上传分支设置为main(也可以是其他，自定义)</li>\n<li>输入 <code>git push -u origin main</code> 上传文件到main分支</li>\n</ol>\n<p>删除分支</p>\n<ol>\n<li>远端分支 <code>git push origin --delete [branch_name]</code></li>\n<li>本地分支 <code>git branch [branch_name] -d</code></li>\n</ol>\n</blockquote>\n<!-- more -->\n<blockquote>\n<p>查看分支</p>\n<ol>\n<li>查看本地分支 <code>git branch</code></li>\n<li>查看远程分支 <code>git branch -r</code></li>\n<li>查看本地和远程分支 <code>git branch -a</code></li>\n</ol>\n<p>更换远程仓库地址</p>\n<ol>\n<li><code>git remote -v</code>  #查看远端地址</li>\n<li><code>git remote</code> #查看远端仓库名</li>\n<li><code>git remote set-url origin https://gitee.com/xx/xx.git</code> (新地址)</li>\n</ol>\n<p>git push报错，显示仓库中有一部分代码，要先pull </p>\n<p>参考链接 <a href=\"https://www.cnblogs.com/qingheshiguang/p/14777557.html\"></a></p>\n<ul>\n<li>方法一：</li>\n</ul>\n<ol>\n<li><p><code>git pull origin [main]</code>分支名 </p>\n</li>\n<li><p>重新<code>add</code>和<code>commit</code>相应文件 </p>\n</li>\n<li><p><code>git push origin [main]</code> 分支名</p>\n</li>\n</ol>\n<ul>\n<li>方法二：</li>\n</ul>\n<ol>\n<li>强推： <code>git push -f origin [main]</code> 分支名</li>\n</ol>\n</blockquote>\n<h2 id=\"2-VScode的环境配置：\"><a href=\"#2-VScode的环境配置：\" class=\"headerlink\" title=\"2. VScode的环境配置：\"></a>2. VScode的环境配置：</h2><ol>\n<li><p>launch.json文件配置（调试的配置，必须先编译得到exe）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: g++.exe 生成和调试活动文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;externalConsole&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span><span class=\"comment\">//设置成true才能调试</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\MinGW\\\\bin\\\\gdb.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;将反汇编风格设置为 Intel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tasks.json文件配置（编译作用）,这里默认g++，不需要动，在终端-配置任务中修改</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppbuild&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\MinGW\\\\bin\\\\g++.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-fdiagnostics-color=always&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$gcc&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;kind&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;isDefault&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;detail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;调试器生成的任务。&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>setting.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cCompilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/MinGW/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cppCompilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g++&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.debuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gnu++14&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.msvcBatchPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useMsvc&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.warnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wall&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wextra&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wpedantic&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wshadow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wformat=2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wcast-align&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wconversion&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wsign-conversion&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;-Wnull-dereference&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.msvcWarnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/W4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/permissive-&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14242&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14287&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14296&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14311&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14826&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w44062&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w44242&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14905&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14906&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14263&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w44265&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;/w14928&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.enableWarnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.warningsAsError&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.compilerArgs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.linkerArgs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.includePaths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.includeSearch&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/*&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.excludeSearch&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/build/**&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.*/**&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.vscode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;**/.vscode/**&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useAddressSanitizer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useUndefinedSanitizer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useLeakSanitizer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.showCompilationTime&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.useLinkTimeOptimization&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;C_Cpp_Runner.msvcSecureNoWarnings&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>c_cpp_properties</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;windows-clang-x86&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;includePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;defines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_DEBUG&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;UNICODE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_UNICODE&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gnu++14&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;intelliSenseMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;windows-clang-x86&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;compilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/MinGW/bin/g++.exe&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-虚拟机配置：\"><a href=\"#3-虚拟机配置：\" class=\"headerlink\" title=\"3. 虚拟机配置：\"></a>3. 虚拟机配置：</h2><p><code>bcdedit /set hypervisorlaunchtype off</code></p>\n<h2 id=\"4-服务器博客搭建\"><a href=\"#4-服务器博客搭建\" class=\"headerlink\" title=\"4. 服务器博客搭建\"></a>4. 服务器博客搭建</h2><h3 id=\"1-登录宝塔面板\"><a href=\"#1-登录宝塔面板\" class=\"headerlink\" title=\"1. 登录宝塔面板\"></a>1. 登录宝塔面板</h3><blockquote>\n<ol>\n<li><p><code>远程连接云服务器的控制台</code></p>\n</li>\n<li><p><code>访问宝塔面板的安全入口，可通过控制台 su root  bt default 查询网址，</code></p>\n<p> <code>目前设置成了 47.97.68.254:1111/Kvancy</code></p>\n</li>\n<li><p><code>用户名是Kvancy</code></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"2-本地下载hexo博客系统\"><a href=\"#2-本地下载hexo博客系统\" class=\"headerlink\" title=\"2. 本地下载hexo博客系统\"></a>2. 本地下载hexo博客系统</h3><blockquote>\n<ol>\n<li><code>curl --silent --location https://rpm.nodesource.com/setup_14.x|sudo bash</code></li>\n<li><code>yum -y install nodejs</code></li>\n<li><code>npm install hexo-cli -g</code></li>\n<li><code>hexo init blog</code></li>\n<li><code>cd blog/</code></li>\n<li><code>npm install</code> </li>\n<li><code>hexo server</code></li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 默认4000端口没用的话，使用 <code>hexo server -p5000</code>指定端口，如果想直接通过ip访问博客，可以通过 <code>hexo server -p80</code>设置端口。也可以通过 <code>/blog/node_modules/hexo-server/index.js</code>修改port值从而修改默认端口号</li>\n<li><input disabled=\"\" type=\"checkbox\"> 有时候开启多个端口设置hexio会访问失败，通过 <code>netstat -nultp</code>查看所有端口号，<code>kill -9 id</code>  id为进程id，杀死进程即可，kill - num 代表的意思如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>num</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>9</th>\n<th>15</th>\n<th>18</th>\n<th>19</th>\n<th>20</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>含义</td>\n<td>进程重新被加载</td>\n<td>删除进程在内存中的数据</td>\n<td>删除鼠标在内存中的数据</td>\n<td>强行结束单个进程</td>\n<td>正常关闭进程</td>\n<td>运行暂停的进程</td>\n<td>暂停某个进程</td>\n<td>把进程打入后台</td>\n</tr>\n</tbody></table>\n</blockquote>\n<h3 id=\"3-本地Hexo一键部署到远程服务器\"><a href=\"#3-本地Hexo一键部署到远程服务器\" class=\"headerlink\" title=\"3. 本地Hexo一键部署到远程服务器\"></a>3. 本地Hexo一键部署到远程服务器</h3><blockquote>\n<p>参考链接 <a href=\"https://blog.51cto.com/u_16213710/7330478\"></a></p>\n<ol>\n<li><p><code>yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</code> 安装宝塔面板</p>\n</li>\n<li><p><code>yum install git</code> 安装git</p>\n</li>\n<li><p><code>adduser git</code> 配置git用户</p>\n</li>\n<li><p><code>chmod 740 /etc/sudoers</code>  赋予用户权限 &#96;&#96;vi &#x2F;etc&#x2F;sudoers<code> </code> 进入权限管理文件</p>\n</li>\n<li><p><code>root  ALL=(ALL)  ALL</code>      </p>\n<p> <code>git  ALL=(ALL)   ALL</code>   在这条上面加上这行</p>\n</li>\n<li><p><code>chmod 400 /etc/sudoers</code> 修改sudoers文件权限</p>\n</li>\n<li><p><code>sudo passwd git </code> 设置git 用户的密码，这里设置了 ‘root’</p>\n</li>\n<li><p><code>su - git </code> 给用户添加ssh密钥，git</p>\n<p> <code>mkdir -p ~/.ssh </code></p>\n<p> <code>touch ~/.ssh/authorized_keys </code></p>\n<p> <code>chmod 600 ~/.ssh/authorzied_keys </code></p>\n<p> <code>chmod 700 ~/.ssh vim ~/.ssh/authorized_keys    </code> 将ssh密钥粘贴进去，用于远程登录服务器</p>\n</li>\n<li><p><code>ssh -v git@你的 ip 地址</code>   输入密码 即可成功登录云服务器</p>\n</li>\n<li><p><code>su root</code> 创建一个git仓库，新建一个 post-receive 文件，用来存储本地的提交</p>\n<p> <code>cd /home/git</code></p>\n<p><code>git init --bare blog.git</code>  #在&#x2F;home&#x2F;git下创建新仓库blog.git </p>\n<p><code>chown git:git -R blog.git</code> #给予git用户权限</p>\n</li>\n<li><p><code>cd blog.git/hooks vim post-receive</code> 配置钩子文件，使得每次本地上传时，远程自动同步下载</p>\n</li>\n<li><p><code>#!/bin/bash</code></p>\n</li>\n</ol>\n<pre><code>`git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f`  写入钩子代码\n</code></pre>\n<ol start=\"12\">\n<li><code>chmod +x /home/git/blog.git/hooks/post-receive</code> 授予钩子可执行权限</li>\n</ol>\n<pre><code>以上是服务器配置\n\n------\n</code></pre>\n<ol start=\"13\">\n<li><pre><code class=\"js\">deploy: #配置本地hexo的_config.yml文件\n    type: git\n    repo: root@你的ip地址:/home/git/blog.git    #仓库地址\n    branch: master    #分支\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">14. ```js</span><br><span class=\"line\">\t#上传到远程服务器端git仓库，远程通过钩子自动下载同步    #这些也是部署之后每次上传时执行的命令</span><br><span class=\"line\">\thexo clean </span><br><span class=\"line\">\thexo g -d  #编译并部署，</span><br><span class=\"line\">\thexo s #本地用来测效果</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>结束撒花，哦对了，如果有nginx需求，参考这个链接，可以设置默认访问80端口，输入ip默认到博客界面 <a href=\"https://zhuanlan.zhihu.com/p/120743882\"></a> </p>\n</blockquote>\n<h3 id=\"4-针对Kratos-Rebirth主题的配置\"><a href=\"#4-针对Kratos-Rebirth主题的配置\" class=\"headerlink\" title=\"4. 针对Kratos-Rebirth主题的配置\"></a>4. 针对Kratos-Rebirth主题的配置</h3><p>参考链接 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\"></a></p>\n<blockquote>\n<h4 id=\"根目录下-config-yml\"><a href=\"#根目录下-config-yml\" class=\"headerlink\" title=\"根目录下_config.yml\"></a>根目录下_config.yml</h4><ol>\n<li><p>先理清两个概念，根目录下的deploy配置repo是对应仓库地址用http或者ssh地址都行，但是http协议下的 <code>hexo -d</code>容易报错，可能延迟太高了，建议使用ssh地址举例如下：<code>git@github.com:Kvancy/Kvancy.github.io.git</code> 根目录下url的配置是远程部署的网站地址，不是仓库地址，所以可以这样填  <code>url: https://kvancy.github.io/</code></p>\n</li>\n<li><p>还有一个叫做文章永久链接格式，permalink的配置，默认配置如下：<code>:year/:month/:day/:title/</code></p>\n<p> 意思是，在每次 <code>hexo -g</code>生成html时，默认文章目录结构是按照年月日文章名排布的，因为这个我一直以为是我commit版本加了’&#x2F;‘导致的错误，弄了半天没弄明白，搞得我放弃云服务器转到github上来，现在明白了，但是想想还是就到github上吧</p>\n</li>\n<li><p><code>index_generator:</code>属性配置，这个的per-page属性是指主页面下最多几个文章，也就是说几个文章之后需要进入下一个page，这个主题调成4个我个人感觉最好的</p>\n</li>\n<li><p><code>index: post_type: false </code> 这个设置成false可以让主页上的文章预览时有自定义的图片</p>\n</li>\n</ol>\n<h4 id=\"主题文件夹下-config-yml配置\"><a href=\"#主题文件夹下-config-yml配置\" class=\"headerlink\" title=\"主题文件夹下_config.yml配置\"></a>主题文件夹下_config.yml配置</h4><p>关于特效，参考链接 <a href=\"https://juejin.cn/post/7106018120036253710\"></a></p>\n<ol>\n<li><p>先说第一个，也是搞了我很久的一个问题，关于网站havicon标志的配置。我一直在根目录下对havicon进行部署，一度以为我的路径或者图片有问题，因为其中没有havicon的有关配置，我就像其他主题一样自己加上去，甚至去查过可以直接在服务器根目录下放着havicon.ico文件，浏览器会自己查找，试过了发现在 <code>hexo -g</code>的时候根目录结构会改变，行不通，后来翻阅作者的配置说明得知，在主题文件夹下site_logo处配置 <code>site_logo: /images/favicon.ico #网站的favicon</code></p>\n</li>\n<li><p>snow下雪动画设置成true，enable_dark设置成false，亮色主题。</p>\n</li>\n<li><p>去除主页上栏图片改用一整个图片做背景是在customStyles下吧images的banner属性地址设置成空，在src&#x2F;scss&#x2F;kr-color&#x2F;default.css文件有有关对应默认设置的图片地址，把resource文件下该图片名改一下即可，独留background属性，地址为&#x2F;images&#x2F;bg.jpg，这个相对路径判断：”hexo -g”生成public文件后，进入public文件，这个是浏览器的根目录，在根目录下的images文件夹即对应了这个相对路径，下面的avatar也是如此寻址设图</p>\n</li>\n<li><p><code>siteLeaveEvent: true</code>这个设置成true可以有监控离开和进入网页的动作，从而做出动效</p>\n</li>\n<li><p>引入了鼠标跟踪特效，<a href=\"https://1keven1.github.io/2021/01/20/%E3%80%90JS%E3%80%91%E7%BD%91%E9%A1%B5%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%8B%96%E5%B0%BE%E7%89%B9%E6%95%88/\">源js代码链接</a> 并对该特效进行修改，<code>characters = [&quot;0&quot;, &quot;1&quot;];</code> 把音符改成了二进制；引入步骤是，copy并自定义修改js代码后，把文件名改成Suzhi.js（博主名），再copy一份到Suzhi.min.js，前者放在src&#x2F;js目录下，后者放到source&#x2F;js代码下；在layout&#x2F;_partial找到after-footer.ejs文件，进去对照id &#x3D; snow的写法复制一个对应id&#x3D; Suzhi的（前端不是很懂，就是copy就完了！），参考如下：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span>(theme.<span class=\"property\">mouse_trace_js</span>)&#123; %&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Suzhi&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;%- js_theme_cdn(&#x27;js/Suzhi.min.js&#x27;, &#123;async: true&#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 然后在theme主题下的config_yml文件加一个 <code>mouse_trace_js: true #鼠标跟踪动画</code>就行</p>\n</li>\n<li><p>引入boom.js，text.js，更改了鼠标点击特效，前者是爆炸烟花波纹，后者是文字特效</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"5-关于Typora\"><a href=\"#5-关于Typora\" class=\"headerlink\" title=\"5. 关于Typora\"></a>5. 关于Typora</h2><h3 id=\"1-YAML-Front-Matter的使用\"><a href=\"#1-YAML-Front-Matter的使用\" class=\"headerlink\" title=\"1. YAML Front Matter的使用\"></a>1. YAML Front Matter的使用</h3><blockquote>\n<ol>\n<li><p>每次上传md文件到博客时，都需要给文章起个标题，并且配置文章属性，如下是属性配置格式</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title</span>: c++笔记</span><br><span class=\"line\"><span class=\"attr\">date</span>: <span class=\"number\">2023</span>/<span class=\"number\">9</span>/<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"attr\">categories</span>: 笔记</span><br><span class=\"line\"><span class=\"attr\">tags</span>:</span><br><span class=\"line\">  - 笔记</span><br><span class=\"line\"><span class=\"attr\">sticky</span>: <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"attr\">pic</span>:</span><br><span class=\"line\"><span class=\"attr\">comments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">toc</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">expire</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">only</span>:</span><br><span class=\"line\">  - home</span><br><span class=\"line\">  - category</span><br><span class=\"line\">  - tag</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>pic</strong> : 可以指定这篇文章是否使用自定义的缩略图名称（在文章资源文件夹内），而不是使用随机化的图标</p>\n</li>\n<li><p><strong>sticky</strong> : (<em>number</em>)重要的文章，把它们置顶吧！数字越大优先级越高哦~</p>\n</li>\n<li><p><strong>comments</strong> : (<em>true&#x2F;false</em>)是否为单篇文章指定开启或关闭评论区</p>\n</li>\n<li><p><strong>toc：</strong> (<em>true&#x2F;false</em>)该文章是否需要生成目录</p>\n</li>\n<li><p><strong>only：</strong> 指定文章显示的位置，有以下关键词：</p>\n</li>\n<li><p>home: 在首页显示</p>\n<ul>\n<li>category: 在分类页显示</li>\n<li>tag: 在标签页显示<br>  <em>留空</em>或是<em>不配置</em>此项，则文章在所有该出现的位置都会显示。<br>  层级之间相互平等，没有覆盖关系。<br>  特别地，如果配置了此项，但是使用的并不是以上的关键词（例如只留了一个<code>- none</code>，那么文章就被隐藏起来了）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"2-控制文章预览字数\"><a href=\"#2-控制文章预览字数\" class=\"headerlink\" title=\"2. 控制文章预览字数\"></a>2. 控制文章预览字数</h3><blockquote>\n<ol>\n<li>在你想要预览结束的地方添加markdown源代码</li>\n</ol>\n<p>&#96;&#96;</p>\n</blockquote>\n<h3 id=\"3-图片的插入与上传\"><a href=\"#3-图片的插入与上传\" class=\"headerlink\" title=\"3. 图片的插入与上传\"></a>3. 图片的插入与上传</h3><blockquote>\n<ol>\n<li><p>在偏好设置的图像位置设置，插入图片时—-上传图片；勾选对本地位置的图片应用上述规则；上传服务—-PicGo(app), 路径找到Picgo的exe程序路径；在smms上注册一个账号，获得账号API token，作为接下来的密钥；下载PicGo(app)之后，在图床设置里将密钥填入SM.MS图床，SM.MS-登录用户；</p>\n<p> 在插件设置那里搜索smms-user，下载之后点击插件右下角的设置，点击配置plugin,配置uploader,把密钥填入后重启；在Typora偏好设置里有验证图片上传的选项</p>\n<hr>\n<p> 现在的话就可以在每次插入图片时实现自动上传到SMMS图床，并直接更改md文件中图片地址为远程图片地址，如果有大量没处理的本地图片，可以通过格式–图像–上传所有本地图片操作实现自动上传图片并更改图片路径</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"6-python学习积累\"><a href=\"#6-python学习积累\" class=\"headerlink\" title=\"6. python学习积累:\"></a>6. python学习积累:</h2><p>pyenv - python环境转换,参考链接: <a href=\"https://github.com/pyenv-win/pyenv-win\">https://github.com/pyenv-win/pyenv-win</a></p>\n<ol>\n<li><p>Run <code>pyenv install &lt;version&gt;</code> to install the supported version</p>\n</li>\n<li><p>Run <code>pyenv global &lt;version&gt;</code> to set a Python version as the global version</p>\n</li>\n<li><p>Check which Python version you are using and its path</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pyenv version</span><br><span class=\"line\">&lt;version&gt; (set by \\path\\to\\.pyenv\\pyenv-win\\.python-version)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>   <em>commands</em>     List all available pyenv commands<br>   <em>local</em>        Set or show the local application-specific Python version<br>   <em>global</em>       Set or show the global Python version<br>   <em>shell</em>        Set or show the shell-specific Python version<br>   <em>install</em>      Install 1 or more versions of Python<br>   <em>uninstall</em>    Uninstall 1 or more versions of Python<br>   <em>update</em>       Update the cached version DB<br>   <em>rehash</em>       Rehash pyenv shims (run this after switching Python versions)<br>   <em>vname</em>        Show the current Python version<br>   <em>version</em>      Show the current Python version and its origin<br>   version-name Show the current Python version<br>   <em>versions</em>     List all Python versions available to pyenv<br>   <em>exec</em>         Runs an executable by first preparing PATH so that the selected Python<br>   <em>which</em>        Display the full path to an executable<br>   <em>whence</em>       List all Python versions that contain the given executable</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#list转变字符串</span></span><br><span class=\"line\">a = [<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;T&#x27;</span>, <span class=\"string\">&#x27;U&#x27;</span>, <span class=\"string\">&#x27;V&#x27;</span>, <span class=\"string\">&#x27;W&#x27;</span>, <span class=\"string\">&#x27;X&#x27;</span>, <span class=\"string\">&#x27;Y&#x27;</span>, <span class=\"string\">&#x27;Z&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>, <span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;]&#x27;</span>, <span class=\"string\">&#x27;^&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>, <span class=\"string\">&#x27;&#123;&#x27;</span>, <span class=\"string\">&#x27;|&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;k&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;|&#x27;</span>, <span class=\"string\">&#x27;&#125;&#x27;</span>, <span class=\"string\">&#x27;~&#x27;</span>, <span class=\"string\">&#x27;\\x7f&#x27;</span>]</span><br><span class=\"line\">T = <span class=\"string\">&#x27;&#x27;</span>.join(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\"><span class=\"comment\">#list转bytes数组</span></span><br><span class=\"line\">enc = [<span class=\"number\">0x25</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x3D</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xF9</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0xCF</span>, <span class=\"number\">0x3F</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x7B</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0xBF</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x4F</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x99</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xF7</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0xFB</span>, <span class=\"number\">0x1B</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0xFD</span>, <span class=\"number\">0xB2</span>]</span><br><span class=\"line\">my_bytearray = <span class=\"built_in\">bytearray</span>()</span><br><span class=\"line\">my_bytearray.extend(enc)</span><br><span class=\"line\">my_bytes = <span class=\"built_in\">bytes</span>(my_bytearray)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_bytes) </span><br><span class=\"line\"><span class=\"comment\">#b&#x27;%o=l\\xf9\\xe0\\xcf?.$\\xc6&#123;\\x81\\xbfUO\\r\\x99\\x87GH\\xf7\\xb9\\x98\\xfb\\x1b&quot;\\xec\\x84#\\xfd\\xb2&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7. &lt;&lt;深入理解计算机系统&gt;&gt;\"></a>7. &lt;&lt;深入理解计算机系统&gt;&gt;</h2><h3 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h3><blockquote>\n<p>程序的局部性有两种不同的形式-时间局部性和空间局部性</p>\n<p>一般而言,良好局部性的程序比局部性差的程序运行的更快</p>\n<p>理解: 在一个具有良好局部性的程序中,如果一个内存位置被引用了一次,那么程序很可能在不远的将来引用附近的一个内存位置</p>\n<p>原因: 在硬件层,局部性原理允许计算机设计者通过引入称为<em>高速缓存存储器</em>的小而快速的存储器来保存最近被引用的指令和数据项,从而提高对主存的访问速度</p>\n</blockquote>\n<p>例如下面代码,func1会比func2更快</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"type\">int</span> a[M[N]])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;M;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j&lt;<span class=\"number\">0</span>;j&lt;N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += a[M][N];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a[M[N]])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j&lt;<span class=\"number\">0</span>;j&lt;M;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += a[M][N];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实就是遍历二维数组的时候从行遍历变成了列遍历,从而破坏了函数的空间局限性</p>\n<p>存储器层次架构:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">速度</th>\n<th align=\"center\">存储器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><em>高速</em></td>\n<td align=\"center\">寄存器</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">L1高速缓存(SRAM)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">L2高速缓存(SRAM)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">L3高速缓存(SRAM)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">主存</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">本地磁盘</td>\n</tr>\n<tr>\n<td align=\"center\"><em>低速</em></td>\n<td align=\"center\">远程二级存储(分布式文件系统,web服务器)</td>\n</tr>\n</tbody></table>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>源程序main.c到可执行文件的几个步骤</p>\n<ol>\n<li>生成Ascii码的中间文件main.i</li>\n<li>翻译成汇编语言文件main.s</li>\n<li>运行汇编器,生成一个可重定位目标文件main.o</li>\n<li>最后运行链接器程序生成可执行文件main.exe</li>\n</ol>\n<p>gcc编译生成各种文件的几种指令 <code>gcc --help</code>可查询</p>\n<blockquote>\n<p>gcc -E test.c -o test.i</p>\n<p>gcc -S test.c -o test.i</p>\n<p>gcc -c test.c -o test.o</p>\n<p>gcc test.o -o test</p>\n</blockquote>\n<p>linux下从应用程序中加载和链接动态链接共享库</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">dlopen</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* filename,<span class=\"type\">int</span> flag)</span> <span class=\"comment\">//成功返回指向句柄的指针,flag可取RTLD_NOW或者RTLD_LAZY,指示链接器立即/延迟解析,JNI基本思想就是使用dlopen来调用.so共享库</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dlsym</span><span class=\"params\">(<span class=\"type\">void</span>* handle <span class=\"type\">char</span> *symbol)</span></span>; <span class=\"comment\">//成功返回指向符号的指针,若出错则为NULL,symbol为调用的函数名称</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dlclose</span><span class=\"params\">(<span class=\"type\">void</span>* handle)</span></span>; <span class=\"comment\">//不用时卸载该库</span></span><br></pre></td></tr></table></figure>\n\n<p>共享库的一个主要目的就是允许多个进程共享内存中相同的库代码,但是又<strong>不希望各个进程消耗过多的内存和时间加载完整的共享库</strong></p>\n<p>所以现代系统通过生成<strong>PIC</strong>(位置无关代码)代码来解决这个问题,无限多个进程可以共享一个共享模块的代码段的单一副本</p>\n<p>gcc使用-fpic选项指示GNU编译系统生成PIC代码,编译共享库时总是使用该选项</p>\n<p><strong>未防止程序对整个共享库内导出函数进行重定位</strong>,引入了PLT表和GOT表两个概念</p>\n<blockquote>\n<p>PLT表和GOT表是动态链接过程中的重要部分，它们可以实现程序在运行时按需加载外部库函数，提高程序的效率和安全性。我来给你讲讲它们的作用和原理。</p>\n<p>PLT表（Procedure Linkage Table）是程序链接表，它包含了调用外部库函数的跳转指令，每个指令都会跳转到GOT表中的一个地址。PLT表的第一个条目是一个特殊的入口，它会调用动态链接器（ld）来解析函数的真实地址，并将其写入GOT表中。这个过程称为运行时重定位或惰性绑定，它可以避免在程序启动时就进行所有的重定位，从而减少启动时间和内存占用。</p>\n<p>GOT表（Global Offset Table）是全局偏移表，它是一个存储外部库函数地址的数据段，每个条目对应一个PLT表中的条目。GOT表的前三个条目是特殊的，它们分别存储了动态段（.dynamic）的地址、链接映射对象（link_map）的地址和运行时解析函数（_dl_runtime_resolve）的地址。这些信息是动态链接器进行重定位所需要的。当程序第一次调用一个外部库函数时，GOT表中对应的条目会被重定位为真实的函数地址，并被缓存起来。当程序再次调用同一个函数时，就可以直接从GOT表中读取地址并跳转过去，无需再次进行重定位。</p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"获取容器-IP：\"><a href=\"#获取容器-IP：\" class=\"headerlink\" title=\"获取容器 IP：\"></a>获取容器 IP：</h3><p>如果你需要使用容器的 IP 地址连接，可以使用 <code>docker inspect</code> 命令获取容器的 IP 地址：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect <span class=\"operator\">-</span>f <span class=\"string\">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h3><p>启动mysql,必须指定<code>MYSQL_ROOT_PASSWORD1</code>属性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"operator\">-</span>p <span class=\"number\">3306</span>:<span class=\"number\">3306</span> <span class=\"comment\">--name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"phpmyadmin\"><a href=\"#phpmyadmin\" class=\"headerlink\" title=\"phpmyadmin\"></a>phpmyadmin</h3><p>phpmyadmin连接mysql进行管理,指定<code>PMA_HOST</code>来指定mysql容器ip, <code>-e PMA_USER=root -e PMA_PASSWORD=root</code>为mysql账号密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"comment\">--name phpmyadmin -d -p 8080:80 -e PMA_HOST=172.17.0.3 -e PMA_PORT=3306 -e PMA_USER=root -e PMA_PASSWORD=root phpmyadmin</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署可执行jar包\"><a href=\"#部署可执行jar包\" class=\"headerlink\" title=\"部署可执行jar包\"></a>部署可执行jar包</h3><p><a href=\"https://www.jb51.net/article/255143.htm\">https://www.jb51.net/article/255143.htm</a></p>\n<h4 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h4><h5 id=\"1、创建存放docker配置文件、jar包的文件夹\"><a href=\"#1、创建存放docker配置文件、jar包的文件夹\" class=\"headerlink\" title=\"1、创建存放docker配置文件、jar包的文件夹\"></a>1、<strong>创建存放docker配置文件、jar包的文件夹</strong></h5><p>在宿主机上，创建文件夹：&#x2F;home&#x2F;admin&#x2F;app，用于存放bash文件和jar包。然后在该文件夹下，创建bash文件和容器配置文件</p>\n<h5 id=\"2、创建bash文件\"><a href=\"#2、创建bash文件\" class=\"headerlink\" title=\"2、创建bash文件\"></a>2、<strong>创建bash文件</strong></h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi run.sh</span><br><span class=\"line\">java -jar /usr/data/app-<span class=\"number\">1.0</span>.<span class=\"number\">0</span>.jar</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;usr&#x2F;data是docker容器内的路径</p>\n<p>我们不必真的到容器内创建这个路径</p>\n<p>后面会将此路径挂载到当前文件夹：&#x2F;home&#x2F;admin&#x2F;app</p>\n<h5 id=\"3、创建容器配置文件\"><a href=\"#3、创建容器配置文件\" class=\"headerlink\" title=\"3、创建容器配置文件\"></a>3、<strong>创建容器配置文件</strong></h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8081</span> </span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;/usr/data/run.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>8081是我们这个jar包的对外端口</p>\n<h4 id=\"二、构建镜像\"><a href=\"#二、构建镜像\" class=\"headerlink\" title=\"二、构建镜像\"></a>二、构建镜像</h4><p>仍然在&#x2F;home&#x2F;admin&#x2F;app下，构建镜像。注意最后一个“.”，表示 Dockerfile 文件在当前目录下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myapp:1.0.0 .</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、创建容器并运行\"><a href=\"#三、创建容器并运行\" class=\"headerlink\" title=\"三、创建容器并运行\"></a>三、创建容器并运行</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -it --name=myapp -p 8081:8081 -v /home/admin/app:/usr/data myapp:1.0.0</span><br></pre></td></tr></table></figure>\n\n<p>docker引擎重启后自动运行（也可以理解为操作系统重启后自动运行，如果docker是开机自动运行的话）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always -d -it --name=myapp -p 8082:8081 -v /home/admin/app:/usr/data myapp:1.0.0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-v，将容器内的&#x2F;usr&#x2F;data挂载到宿主机的&#x2F;home&#x2F;admin&#x2F;app。以后jar包有更新，丢到宿主机的&#x2F;home&#x2F;admin&#x2F;app，然后重启容器即可。</p>\n<p>-d: 后台运行容器，并返回容器ID；</p>\n<p>-d, –detach&#x3D;false Run container in background and print container ID</p>\n<p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p>\n<p>-i, –interactive&#x3D;false Keep STDIN open even if not attached</p>\n<p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>\n<p>-t, –tty&#x3D;false Allocate a pseudo-TTY</p>\n</blockquote>\n<h4 id=\"四、删除多余或失败的容器、镜像\"><a href=\"#四、删除多余或失败的容器、镜像\" class=\"headerlink\" title=\"四、删除多余或失败的容器、镜像\"></a>四、删除多余或失败的容器、镜像</h4><p>以上步骤，可能存在波折，不小心就创建了许多并不称心如意的容器和镜像，占用了心水名称和端口，必先删之而后快。</p>\n<h5 id=\"1、观察已经有哪些容器\"><a href=\"#1、观察已经有哪些容器\" class=\"headerlink\" title=\"1、观察已经有哪些容器\"></a>1、观察已经有哪些容器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>加上 -a 参数，可以列出没有在运行的容器。</p>\n<h5 id=\"2、删除指定容器\"><a href=\"#2、删除指定容器\" class=\"headerlink\" title=\"2、删除指定容器\"></a>2、删除指定容器</h5><p>docker rm $name 或者 容器ID</p>\n<h5 id=\"3、观察已经有哪些镜像\"><a href=\"#3、观察已经有哪些镜像\" class=\"headerlink\" title=\"3、观察已经有哪些镜像\"></a>3、观察已经有哪些镜像</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、删除指定镜像\"><a href=\"#4、删除指定镜像\" class=\"headerlink\" title=\"4、删除指定镜像\"></a>4、删除指定镜像</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $name 或者 镜像ID</span><br></pre></td></tr></table></figure>\n\n<p>要删除镜像，首先要删除它派生的容器。</p>\n<h2 id=\"Mysql-1\"><a href=\"#Mysql-1\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><p>连接mysql数据库注意事项:</p>\n<h3 id=\"修改root用户远程连接权限\"><a href=\"#修改root用户远程连接权限\" class=\"headerlink\" title=\"修改root用户远程连接权限:\"></a>修改root用户远程连接权限:</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> <span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看是否修改成功\"><a href=\"#查看是否修改成功\" class=\"headerlink\" title=\"查看是否修改成功\"></a>查看是否修改成功</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> host,<span class=\"keyword\">user</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新用户密码\"><a href=\"#更新用户密码\" class=\"headerlink\" title=\"更新用户密码:\"></a>更新用户密码:</h3><p>使用 <code>ALTER USER</code> 语句来更新用户密码。例如，如果你想要更新用户名为 <code>user</code> 的密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;user&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;newpassword&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新用户：\"><a href=\"#创建新用户：\" class=\"headerlink\" title=\"创建新用户：\"></a>创建新用户：</h4><p>使用 <code>CREATE USER</code> 语句创建新用户。例如，创建一个用户名为 <code>user</code> 的新用户：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;user&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;yourpassword&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Navicat连接\"><a href=\"#Navicat连接\" class=\"headerlink\" title=\"Navicat连接\"></a>Navicat连接</h3><p>在docker的mysql创建用户,设置连接权限后,Navicat设置主机127.0.0.1&#x2F;localhost(mysql容器的ip虽然本地ping不通,但是可以连上)</p>\n<h2 id=\"java文件打包jar\"><a href=\"#java文件打包jar\" class=\"headerlink\" title=\"java文件打包jar\"></a>java文件打包jar</h2><ol>\n<li><p><strong>编译Java源文件</strong>: 打开终端或命令提示符，然后使用<code>javac</code>命令编译你的Java源文件。例如，如果你的主类是<code>Main.java</code>，你可以使用以下命令：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Main.java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查编译结果</strong>: 编译后，你应该在相同的目录下看到<code>Main.class</code>文件（以及可能的任何内部类文件，例如<code>Main$1.class</code>等）。</p>\n</li>\n<li><p><strong>创建JAR文件</strong>: 使用<code>jar</code>命令来创建JAR文件。如果你的主类是<code>Main</code>，并且你想创建一个名为<code>MyApplication.jar</code>的JAR文件，你可以使用以下命令：(注意Main后有个空格,指将所有以Main为前缀的class都选上)</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar cvfe MyApplication.jar Main *.class</span><br></pre></td></tr></table></figure>\n\n<p> 这里的<code>c</code>表示创建新的JAR文件，<code>v</code>表示在创建过程中显示详细输出，<code>f</code>指定JAR文件的名称，<code>e</code>表示指定应用程序的入口点（主类），后面跟着主类的名称和<code>.class</code>文件的通配符。</p>\n</li>\n<li><p><strong>确保JAR文件的可执行性</strong>: 如果你的JAR文件中包含的是应用程序的主类，你可能还需要在JAR文件的清单（MANIFEST.MF）中指定主类。这可以通过以下命令完成：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Main-Class: Main&quot; &gt; manifest.txt</span><br><span class=\"line\">jar cvfm MyApplication.jar manifest.txt *.class</span><br></pre></td></tr></table></figure>\n\n<p> 这里<code>m</code>表示指定清单文件，<code>manifest.txt</code>是包含<code>Main-Class</code>属性的文件。</p>\n</li>\n<li><p><strong>运行JAR文件</strong>: 一旦JAR文件创建完成，你可以通过以下命令来运行它：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar MyApplication.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>清理</strong>: 如果你不需要<code>.class</code>文件了，可以删除它们以节省空间：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm *.class</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"2024腾讯游戏安全PC初赛","date":"2024-09-22T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png","thumbnail":"https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。<!-- more -->\n\n## 题目\n\n![image-20240923132824209](https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png)\n\n## （一）解题过程\n\n拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点\n\n![image-20240923131144727](https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png)\n\n运行发现程序会多次在`WriteProcessMemory`下断下，hook一下观察传参\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T * lpNumberOfBytesWritten\n)\n{\n    char fileName[12] = { 0 };\n    sprintf(fileName, \"out%d.txt\", (int)hProcess % 1000);\n    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n    {\n        DBGMGEBOX(\"CreateFile Fail\");\n        return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n    }\n    SetFilePointer(hFile, 0, NULL, FILE_END);\n    DWORD bytesWritten;\n    BOOL result = WriteFile(hFile, lpBuffer, nSize, &bytesWritten, NULL);\n    CloseHandle(hFile);\n    DBGMGEBOX(\"findProcess WriteProcessMemory:%p,size:%d\\n\", hProcess,nSize);\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n这里输出了三个txt文件\n\n![image-20240923131546102](https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png)\n\n其中out200.txt文件有明显的PE头\n\n![image-20240923131748329](https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png)\n\n去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过`WriteProcessMemory`往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。\n\nida64打开发现程序的dllMain入口还是被加密了\n\n![image-20240923132428865](https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png)\n\n还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在\n\n入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为\n\n![image-20240913213116556](https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png)\n\n这里我对下面这几个API下了断点\n\n![image-20240913213203300](https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png)\n\n运行，第一次成功在openProcess函数断下\n\n![image-20240913213252406](https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png)\n\n观察传参窗口，找到了一个系统进程名称字符串`winlogon.exe`，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码\n\n![image-20240913213951735](https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png)\n\n汇编代码不是很好看，根据偏移在IDA里反汇编看看\n\n```c\n__int64 __fastcall sub_1800063D0(_DWORD *Dst, DWORD dwProcessId)\n{\n  __m128i si128; // xmm0\n  __m128i v6; // xmm0\n  __int64 result; // rax\n  __m128i v10; // xmm2\n  size_t v14; // rbx\n  __int64 v15; // rax\n  int v16; // r14d\n  HANDLE Toolhelp32Snapshot; // rsi\n  HANDLE v18; // rax\n  __int64 v21; // rbx\n  CHAR Caption[16]; // [rsp+40h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64;\n  if ( !dwProcessId )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)_RBP = 0xE795A71250E2465Aui64;\n    si128 = _mm_load_si128((const __m128i *)_RBP);\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    v6 = _mm_xor_si128(si128, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD5301FE45158ui64;\n    *(__m128i *)_RBP = v6;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xBF19D3ADD5D97A59ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xBD1C9CA3F4C12EC9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C05763438E84ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    MessageBoxA(0i64, (LPCSTR)(_RBP + 32), (LPCSTR)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64), 0);\nLABEL_3:\n    GetLastError();\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)_RBP = 0x88D6871250E2465Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF98DB9906C58ui64;\n    *(__m128i *)_RBP = _mm_xor_si128(\n                         _mm_load_si128((const __m128i *)_RBP),\n                         *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    return sub_180006A00((void *)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64));\n  }\n  if ( !(unsigned __int8)sub_180006FC0() )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) = 0x44F651D568826090i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0) = 0x52C9FCDC77FF5FC3i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xDDD2E92971C27548ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA43EB7C9E8CF4E1Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xA62FD5B4C980079Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xD55585772756849Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x40) = 0x52C9FCDC7DDE2DACi64;\n    v10 = _mm_load_si128((const __m128i *)(_RBP + 64));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C8) = 0x44F651D568826090i64;\n    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa [rbp+210h+var_1D0], xmm2\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    sub_180006A00((void *)(_RBP + 32));\n  }\n  v14 = -1i64;\n  if ( dwProcessId == -1 )\n  {\n    Dst[34] = GetCurrentProcessId();\n    *((_QWORD *)Dst + 13) = -1i64;\n  }\n  else\n  {\n    Dst[34] = dwProcessId;\n    v18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n    *((_QWORD *)Dst + 13) = v18;\n    if ( !v18 )\n    {\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C0574231E1F6ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD53051F54450ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA92981ACBCD97A59ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xCF59BCC699AA419Bui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n      __asm\n      {\n        vmovdqu ymm0, [rbp+210h+var_70]\n        vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n        vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n        vzeroupper\n      }\n      sub_180006A00((void *)(_RBP + 32));//打印报错信息\n      goto LABEL_3;\n    }\n  }\n  Dst[30] = 0x1FFFFF;\n  v15 = -1i64;\n  do\n    ++v15;\n  while ( *((_BYTE *)Dst + v15) );\n  if ( !v15 )\n  {\n    v16 = Dst[34];\n    Toolhelp32Snapshot = CreateToolhelp32Snapshot(2u, 0);\n    if ( Toolhelp32Snapshot != (HANDLE)-1i64 )\n    {\n      *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = 304;\n      memset((void *)(_RBP + 100), 0, 0x12Cui64);\n      if ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n      {\n        while ( *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x68) != v16 )\n        {\n          if ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n            goto LABEL_20;\n        }\n        do\n          ++v14;\n        while ( *(_BYTE *)(_RBP + 140 + v14) );\n        memmove(Dst, (const void *)(_RBP + 140), v14);\n      }\nLABEL_20:\n      CloseHandle(Toolhelp32Snapshot);\n    }\n  }\n  *((_QWORD *)Dst + 18) = sub_1800068D0(Dst, Dst);\n  v21 = 0i64;\n  *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = Dst[34];\n  *(_QWORD *)_RBP = 0i64;\n  EnumWindows(EnumFunc, (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64);\n  result = *(_QWORD *)_RBP;\n  if ( *(_QWORD *)_RBP )\n    v21 = *(_QWORD *)_RBP;\n  *((_QWORD *)Dst + 16) = v21;\n  return result;\n}\n```\n\n这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。\n\n![image-20240913221222730](https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png)\n\n分析完这个函数，继续回溯一层，运行到返回，定位到这个地方\n\n![image-20240913221520425](https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png)\n\n继续根据偏移转到IDA里看反汇编\n\n```c\nint sub_180001990()\n{\n  size_t v0; // rbx\n  DWORD v1; // eax\n  __m128i Dst; // [rsp+20h] [rbp-48h] BYREF\n  __int64 v4; // [rsp+30h] [rbp-38h]\n  __int64 v5; // [rsp+38h] [rbp-30h]\n  __m128i Src; // [rsp+40h] [rbp-28h] BYREF\n\n  Dst.m128i_i64[0] = 0xE795A7603F90341Fui64;\n  Dst.m128i_i64[1] = 0xC65BF3E99CAA093Cui64;\n  Src.m128i_i64[0] = 0x89FAC00F53FE5D68ui64;\n  Src.m128i_i64[1] = 0xC65BF3E9F9D26C12ui64;\n  Src = _mm_xor_si128(_mm_load_si128(&Src), Dst);\n  v0 = -1i64;\n  do\n    ++v0;\n  while ( Src.m128i_i8[v0] );\n  memmove(dword_1800349A0, &Src, v0);\n  Dst.m128i_i64[0] = 0i64;\n  v4 = 0i64;\n  v5 = 15i64;\n  sub_180004770(&Dst, &Src, v0);\n  v1 = sub_1800070A0(&Dst);\n  sub_1800063D0(dword_1800349A0, v1);\n  return atexit(sub_180020C90);\n}\n```\n\n前面应该是一个加密的字符串操作，用python打印出字符串\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xE795A7603F90341F\nx2 = 0xC65BF3E99CAA093C\ny1 = 0x89FAC00F53FE5D68\ny2 = 0xC65BF3E9F9D26C12\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n#Result 1: nogolniw\n#Result 2: exe.\n```\n\n得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方\n\n```c\nv18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n*((_QWORD *)Dst + 13) = v18;\n```\n\n随后return exit退出。\n\n随后我在退出函数传参的时候看到了一个hProcess\n\n![image-20240914102337797](https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png)\n\n一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数\n\n```c\nvoid sub_180007C10()\n{\n  HANDLE v1; // rcx\n  void *v2; // rdx\n  __int128 v3; // xmm0\n  __int128 v4; // xmm1\n  HANDLE FileA; // rbx\n  __int64 v8; // rcx\n  _BYTE *v9; // rdx\n  unsigned __int64 v10; // rdx\n  _QWORD *v11; // rcx\n  char Buffer; // [rsp+60h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64;\n  while ( byte_180032C00 )\n  {\n    if ( !byte_180034961 && !byte_180034960 )\n      sub_1800041D0();\n    v1 = hProcess;\n    v2 = (void *)(qword_180034968 + 2766);\n    *(_BYTE *)_RBP = 15;\n    WriteProcessMemory(v1, v2, (LPCVOID)((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64), 1ui64, 0i64);\n    byte_180032C00 = 0;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xAA32D3B2B7C50388ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10) = 0xA0A195500DCC0E5Cui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x18) = 0x943E9588CFCF645Dui64;\n    v3 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA727C0574231D098ui64;\n    v4 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x80) = 0xE795A7603F90341Fui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = v3;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x88) = 0xC65BF3E99CAA093Cui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x70) = v4;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x90) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x98) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+0D0h+var_50]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+0D0h+FileName]\n      vmovdqa ymmword ptr [rbp+0D0h+FileName], ymm1\n      vzeroupper\n    }\n    FileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n    if ( FileA != (HANDLE)-1i64 )\n    {\n      ((void (__fastcall *)(unsigned __int64))loc_180007A20)(_RBP + 48);\n      v8 = -1i64;\n      if ( *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) < 0x10ui64 )\n      {\n        do\n          ++v8;\n        while ( *(_BYTE *)(_RBP + 48 + v8) );\n        v9 = (_BYTE *)(_RBP + 48);\n      }\n      else\n      {\n        v9 = *(_BYTE **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        do\n          ++v8;\n        while ( v9[v8] );\n      }\n      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + 8), 0i64);\n      CloseHandle(FileA);\n      v10 = *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48);\n      if ( v10 >= 0x10 )\n      {\n        v11 = *(_QWORD **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        if ( v10 + 1 >= 0x1000 )\n        {\n          v11 = (_QWORD *)*(v11 - 1);\n          if ( (unsigned __int64)(*(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30)\n                                - (_QWORD)v11\n                                - 8i64) > 0x1F )\n            invalid_parameter_noinfo_noreturn();\n        }\n        j_j_free(v11);\n      }\n    }\n  }\n}\n```\n\n看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xA0A195500DCC0E5C\nx2 = 0x943E9588CFCF645D\nx3 = 0xAA32D3B2B7C50388\nx4 = 0xA727C0574231D098\ny1 = 0xE795A7603F90341F\ny2 = 0xC65BF3E99CAA093C\ny3 = 0xCF59BCC699A060E9\ny4 = 0xA727C0574231E1F6\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\nresult3 = hex_xor_to_string(x3, y3)\nresult4 = hex_xor_to_string(x4, y4)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\nprint(\"Result 3:\", result3)\nprint(\"Result 4:\", result4)\n\nres = result1[::-1] + result2[::-1] + result3[::-1] + result4[::-1]\nprint(res)\n```\n\n![image-20240914110434860](https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png)\n\n整个拼起来是字符串`C:\\2024GameSafeRace.token1`，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下\n\n![image-20240914110826942](https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png)\n\nloc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入`C:\\2024GameSafeRace.token1`中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。\n\n![image-20240914111407201](https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png)\n\n找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数\n\n```C\nFileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n```\n\n![image-20240914111653640](https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png)\n\n看来是参数在作怪，CreateFileA函数传入**OPEN_EXISTING**参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。\n\n![image-20240914112419617](https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png)\n\nC:\\2024GameSafeRace.token1成功被写入\n\n![image-20240914112536772](https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png)\n\n010打开找到token1:`757F4749AEBB1891EF5AC2A9B5439CEA`\n\ntoken2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取\n\n![image-20240914113718466](https://s2.loli.net/2024/10/02/ErcPg4bZ8KJ2uIV.png)\n\n组合一下就是token2：`803f14a24d64f3e697957c252e3a5686`\n\n\n\n## （二）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）\n\n根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到`C:\\2024GameSafeRace.token1`中，但是会因为CreateFileA参数`OPEN_EXISTING`条件不满足而失败，所以我们只需要修改这个传参，改成`OPEN_ALWAYS`，即可实现输出token1，那我们只需要hook `CreateFileA`函数修改传参即可，但是有个问题，因为不是hack.exe本身调用`CreateFileA`函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用`CreateFileA`函数，所以我们可以考虑在注入前修改`WriteProcessMemory`函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。\n\n这里我们要patch 传参，通过ida找到传参的汇编代码\n\n![image-20240920142928600](https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png)\n\n在winhex里找到对应所在文件偏移\n![image-20240920143006628](https://s2.loli.net/2024/10/02/5lR3vqSQVkiMU6a.png)\n\n也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n成功输出token1文件：\n\n![image-20240914120306770](https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png)\n\n然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。\n\nhook DbgPrintEx函数看一眼传参。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s DbgPrintEx ComponentId:%lu,Level:%lu\\n\",dbgFilter, ComponentId, Level);\n    va_list args;\n    va_start(args, Format);\n    NTSTATUS s = func(ComponentId, Level, Format, args);\n    va_end(args);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\",dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n发现加载ace驱动后，有大量的level:5的调试信息输出\n\n![image-20240918212128643](https://s2.loli.net/2024/10/02/rBGdkLCpEIY6tnF.png)\n\n也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nchar buffer[1024]; \nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    va_list args;\n    va_start(args, Format);\n    vsprintf(buffer, Format, args);\n    va_end(args);\n    NTSTATUS s = func(ComponentId, 0, \"%s\", buffer);//修改level为0\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"Kvancy: DriverUnload\\n\");\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"Kvancy: DriverEntry\\n\");\n    return STATUS_SUCCESS;\n}\n```\n\n![{4981D7A9-1EAA-4A38-9280-429D63ECABF9}](https://s2.loli.net/2024/10/02/ucgDYVePtZaO9dH.png)\n\n成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。\n\n![{170126A6-1C28-4BF3-AB47-AB2397C76595}](https://s2.loli.net/2024/10/02/itpCfgunESqZQPw.png)\n\n可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。\n\n```c\nVOID WriteToFile(PUNICODE_STRING FilePath, PCHAR Data)\n{\n    OBJECT_ATTRIBUTES objAttr;\n    IO_STATUS_BLOCK ioStatusBlock;\n    HANDLE fileHandle;\n    NTSTATUS status;\n    UNICODE_STRING unicodeFilePath;\n\n    RtlInitUnicodeString(&unicodeFilePath, FilePath->Buffer);\n\n    InitializeObjectAttributes(&objAttr, &unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, NULL, NULL);\n\n    status = ZwCreateFile(\n        &fileHandle,\n        FILE_APPEND_DATA | SYNCHRONIZE,\n        &objAttr,\n        &ioStatusBlock,\n        NULL,\n        FILE_ATTRIBUTE_NORMAL,\n        0,\n        FILE_OPEN_IF,\n        FILE_SYNCHRONOUS_IO_NONALERT,\n        NULL,\n        0\n    );\n\n    if (NT_SUCCESS(status)) {\n        size_t dataLength = strlen(Data);\n        ZwWriteFile(fileHandle, NULL, NULL, NULL, &ioStatusBlock, Data, (ULONG)dataLength, NULL, NULL);\n        ZwClose(fileHandle);\n    }\n    else {\n        DbgPrint(\"Failed to create file: %08X\\n\", status);\n    }\n}\n\nVOID EnumProcesses()\n{\n    NTSTATUS status;\n    PVOID buffer;\n    ULONG bufferSize = 0x10000; // Initial buffer size, can grow if needed\n    ULONG returnLength;\n    CHAR logBuffer[1024];\n\n    UNICODE_STRING filePath;\n    RtlInitUnicodeString(&filePath, L\"\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt\");\n\n    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!buffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(buffer);\n        bufferSize = returnLength;\n        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!buffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n    }\n\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;\n        while (TRUE) {\n            if (processInfo->ImageName.Buffer) {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: %wZ\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId, &processInfo->ImageName);\n            }\n            else {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: [System Process]\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId);\n            }\n\n            WriteToFile(&filePath, logBuffer);\n\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    ExFreePool(buffer);\n}\n```\n\n结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用`PsCreateSystemThread`创建了一个内核线程。hook`PsCreateSystemThread`函数看看驱动加载时是否调用了这个函数。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext);\nHOOK_MANAGER hookManager;\n\n\nNTSTATUS myPsCreateSystemThread(\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext\n)\n{\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s myPsCreateSystemThread StartRoutine:%p\\n\", dbgFilter, StartRoutine);\n    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = PsCreateSystemThread;\n    InitializeHookManager(&hookManager, dbgPrintEx, myPsCreateSystemThread);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\", dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n![{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}](https://s2.loli.net/2024/10/02/fkDhVr5juzyYTMS.png)\n\n发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数\n\n```asm\n0: kd> u FFFFBA0729013DB0 l 100\nffffba07`29013db0 488bc4          mov     rax,rsp\nffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx\nffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi\nffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14\nffffba07`29013dbf 55              push    rbp\nffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]\nffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h\nffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh\nffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h\nffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0\nffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]\nffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0\nffffba07`29013dea e8d1030000      call    ffffba07`290141c0\nffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h\nffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]\nffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e01 ba05000000      mov     edx,5\nffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e0a 33c9            xor     ecx,ecx\nffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax\nffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax\nffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax\nffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]\nffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax\nffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]\nffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0\nffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013e50 33db            xor     ebx,ebx\nffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h\nffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]\nffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e64 ba05000000      mov     edx,5\nffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e6d 33c9            xor     ecx,ecx\nffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax\nffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax\nffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax\nffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]\nffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]\nffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax\nffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]\nffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0\nffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013eb9 48ffc3          inc     rbx\nffffba07`29013ebc 4883fb10        cmp     rbx,10h\nffffba07`29013ec0 7c90            jl      ffffba07`29013e52\nffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh\nffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]\nffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013ed4 ba05000000      mov     edx,5\nffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013edd 33c9            xor     ecx,ecx\nffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax\nffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax\nffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax\nffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]\nffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax\nffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]\nffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0\nffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]\nffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh\nffffba07`29013f28 e833e9ffff      call    ffffba07`29012860\nffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf\nffffba07`29013f32 cc              int     3\nffffba07`29013f33 cc              int     3\nffffba07`29013f34 4152            push    r10\n```\n\n导入到ida里看伪代码\n\n```c\nvoid __noreturn sub_180005148()\n{\n  __m128i v0; // xmm0\n  __int64 i; // rbx\n  __m128i v2; // xmm0\n  __int64 v3; // r9\n  __m128i v4; // xmm0\n  __m128i v5; // [rsp+30h] [rbp-19h] BYREF\n  __m128i v6; // [rsp+40h] [rbp-9h] BYREF\n  __m128i v7; // [rsp+50h] [rbp+7h] BYREF\n  __m128i v8; // [rsp+60h] [rbp+17h]\n  __m128i v9; // [rsp+70h] [rbp+27h]\n  __int128 v10; // [rsp+80h] [rbp+37h] BYREF\n  __m128i v11; // [rsp+90h] [rbp+47h]\n\n  while ( 1 )\n  {\n    v10 = 0i64;\n    ((void (__fastcall *)(__int128 *))((char *)&loc_180005556 + 2))(&v10);\n    v5.m128i_i64[0] = 0x4B6D27B32F124FA1i64;\n    v5.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v8.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v0 = _mm_load_si128(&v5);\n    v8.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v5 = _mm_xor_si128(v0, v8);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v5);\n    for ( i = 0i64; i < 16; ++i )\n    {\n      v6.m128i_i64[0] = 0x4B6D1DDD324B10F0i64;\n      v6.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v9.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n      v2 = _mm_load_si128(&v6);\n      v3 = *((unsigned __int8 *)&v10 + i);\n      v9.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v6 = _mm_xor_si128(v2, v9);\n      MEMORY[0x31305A8047353130](0i64, 5i64, &v6, v3);\n    }\n    v7.m128i_i64[0] = 0x4B6D1DDD4A7920DFi64;\n    v7.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v11.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v4 = _mm_load_si128(&v7);\n    v11.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v7 = _mm_xor_si128(v4, v11);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v7);\n    sub_180003BF8(2766i64);\n  }\n}\n```\n\n好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0x4B6D27B32F124FA1\nx2 = 0x1E336B548B32934E\ny1 = 0x4B6D1DDD4A7920D5\ny2 = 0x1E336B548B32934E\n\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n\n\nres = result1[::-1] + result2[::-1]\nprint(res)\n\n```\n\n![{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}](https://s2.loli.net/2024/10/02/yQT7sZ1UnvRAcXk.png)\n\n打印出了`token`基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。\n\n![image-20240919195412464](https://s2.loli.net/2024/10/02/7zjZDi1Y9JPTAvX.png))\n\n这里有个`mov edx,5`语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。\n\n那么怎么确定这个线程地址呢，如果通过`ZwQuerySystemInformation`枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了`ZwQuerySystemInformation`枚举，还有通过`PsLookupThreadByThreadId`函数从进程id和线程id查找的。\n\n那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出\n\n![image-20240919214001840](https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png)\n\n![image-20240919215044101](https://s2.loli.net/2024/10/02/1KTEVnb9uPWsjpr.png)\n\n诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid=4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。\n\n![image-20240919215837787](https://s2.loli.net/2024/10/02/TOdNVCHav1FIbol.png)\n\n貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用`PsCreateSystemThread`），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。\n\n这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid=4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。\n\n```c\n#include \"header.h\"\n\nPVOID MoudleBaseAddress[1024];\nULONG64 MoudleSize[1024];\nULONG ModuleCount = 0;\nULONG Offset1 = 0x52, Offset2 = 0xB5, Offset3 = 0x125;\n\nBOOLEAN IsAddressInKnownModules(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)\n{\n    for (size_t i = 0; i < ModuleCount; i++)\n    {\n        if (Address >= ModuleBaseAddresses[i] && Address < (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])\n        {\n            return TRUE;\n        }\n    }\n    return FALSE;\n}\n\nPVOID EnumSystemModulesForProcess(HANDLE TargetProcessId)\n{\n    NTSTATUS status;\n    ULONG bufferSize = 0x10000;\n    PVOID processBuffer = NULL;\n    PVOID moduleBuffer = NULL;\n    ULONG returnLength;\n\n    // 查询进程信息\n    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!processBuffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(processBuffer);\n        bufferSize = returnLength;\n        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!processBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    }\n\n    // 查询模块信息\n    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n    if (!moduleBuffer) {\n        DbgPrint(\"Failed to allocate buffer for module information\\n\");\n        ExFreePool(processBuffer);\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(moduleBuffer);\n        bufferSize = returnLength;\n        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n        if (!moduleBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for module information\\n\");\n            ExFreePool(processBuffer);\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    }\n\n    // 遍历模块信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;\n        ModuleCount = moduleInfo->ModulesCount;\n        for (ULONG i = 0; i < moduleInfo->ModulesCount; i++) {\n            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &moduleInfo->Modules[i];\n            MoudleBaseAddress[i] = moduleEntry->Base;\n            MoudleSize[i] = moduleEntry->Size;\n        }\n    }\n\n    // 遍历进程信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;\n        while (TRUE) {\n            if (processInfo->ProcessId == TargetProcessId) {\n                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + 1);\n                for (ULONG i = 0; i < processInfo->NumberOfThreads; i++) {\n                    if (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))\n                    {\n                        DbgPrint(\"Find it:%p\\n\",threadInfo[i].StartAddress);\n                        return threadInfo[i].StartAddress;\n                    }\n                }\n                break;\n            }\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    // 清理分配的内存\n    ExFreePool(processBuffer);\n    ExFreePool(moduleBuffer);\n    return 0;\n}\n\nVOID UnloadDriver(PDRIVER_OBJECT DriverObject) {\n    KdPrint((\"Driver Unloaded\\n\"));\n}\n\nNTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {\n    DriverObject->DriverUnload = UnloadDriver;\n    KdPrint((\"Driver Loaded\\n\"));\n\n    HANDLE targetPid = (HANDLE)4; // 系统进程的 PID\n    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);\n\n    UCHAR valueToWrite = 0x00; // 要写入的字节值\n    UCHAR valueToRead = 0x05; // 要写入的字节值\n    ULONG numHasChanged = 0x00;\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;\n        numHasChanged++;\n    }\n    DbgPrint(\"numHasChanged:%d\\n\", numHasChanged);\n    return STATUS_SUCCESS;\n}\n\n```\n\n成功输出token2\n\n![image-20240920125107119](https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png)\n\n## （三）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）\n\n要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的`C:\\2024GameSafeRace.token1`字符串是由十六进制异或得到的，也就是下面这些\n![image-20240920145014956](https://s2.loli.net/2024/10/02/suczGZU14mQHv8i.png)\n\n可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7082) = 0x94e7c2136acc0e5c;//\n        *(PULONG64)((ULONG64)lpBuffer + 0x7093) = 0x8207c5d1af9f3860;\n        *(PULONG64)((ULONG64)lpBuffer + 0x70F1) = 0xa905cca9edcb138c;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7108) = 0xa753b8236c56809a;\n        //C:\\Users\\15386\\Desktop\\flag.txt\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n注入hook成功后，成功在桌面的`flag.txt`输出token1\n\n![{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}](https://s2.loli.net/2024/10/02/PIej3obTn5NLDyE.png)\n","source":"_posts/2024腾讯游戏安全PC初赛.md","raw":"---\ntitle: 2024腾讯游戏安全PC初赛\ndate: 2024/9/23\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png\nthumbnail: https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n\n---\n\n小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。<!-- more -->\n\n## 题目\n\n![image-20240923132824209](https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png)\n\n## （一）解题过程\n\n拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点\n\n![image-20240923131144727](https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png)\n\n运行发现程序会多次在`WriteProcessMemory`下断下，hook一下观察传参\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T * lpNumberOfBytesWritten\n)\n{\n    char fileName[12] = { 0 };\n    sprintf(fileName, \"out%d.txt\", (int)hProcess % 1000);\n    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n    {\n        DBGMGEBOX(\"CreateFile Fail\");\n        return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n    }\n    SetFilePointer(hFile, 0, NULL, FILE_END);\n    DWORD bytesWritten;\n    BOOL result = WriteFile(hFile, lpBuffer, nSize, &bytesWritten, NULL);\n    CloseHandle(hFile);\n    DBGMGEBOX(\"findProcess WriteProcessMemory:%p,size:%d\\n\", hProcess,nSize);\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n这里输出了三个txt文件\n\n![image-20240923131546102](https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png)\n\n其中out200.txt文件有明显的PE头\n\n![image-20240923131748329](https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png)\n\n去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过`WriteProcessMemory`往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。\n\nida64打开发现程序的dllMain入口还是被加密了\n\n![image-20240923132428865](https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png)\n\n还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在\n\n入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为\n\n![image-20240913213116556](https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png)\n\n这里我对下面这几个API下了断点\n\n![image-20240913213203300](https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png)\n\n运行，第一次成功在openProcess函数断下\n\n![image-20240913213252406](https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png)\n\n观察传参窗口，找到了一个系统进程名称字符串`winlogon.exe`，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码\n\n![image-20240913213951735](https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png)\n\n汇编代码不是很好看，根据偏移在IDA里反汇编看看\n\n```c\n__int64 __fastcall sub_1800063D0(_DWORD *Dst, DWORD dwProcessId)\n{\n  __m128i si128; // xmm0\n  __m128i v6; // xmm0\n  __int64 result; // rax\n  __m128i v10; // xmm2\n  size_t v14; // rbx\n  __int64 v15; // rax\n  int v16; // r14d\n  HANDLE Toolhelp32Snapshot; // rsi\n  HANDLE v18; // rax\n  __int64 v21; // rbx\n  CHAR Caption[16]; // [rsp+40h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64;\n  if ( !dwProcessId )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)_RBP = 0xE795A71250E2465Aui64;\n    si128 = _mm_load_si128((const __m128i *)_RBP);\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    v6 = _mm_xor_si128(si128, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD5301FE45158ui64;\n    *(__m128i *)_RBP = v6;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xBF19D3ADD5D97A59ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xBD1C9CA3F4C12EC9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C05763438E84ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    MessageBoxA(0i64, (LPCSTR)(_RBP + 32), (LPCSTR)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64), 0);\nLABEL_3:\n    GetLastError();\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)_RBP = 0x88D6871250E2465Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = 0xC65BF98DB9906C58ui64;\n    *(__m128i *)_RBP = _mm_xor_si128(\n                         _mm_load_si128((const __m128i *)_RBP),\n                         *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20));\n    return sub_180006A00((void *)((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64));\n  }\n  if ( !(unsigned __int8)sub_180006FC0() )\n  {\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) = 0x44F651D568826090i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0) = 0x52C9FCDC77FF5FC3i64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xDDD2E92971C27548ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA43EB7C9E8CF4E1Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xA62FD5B4C980079Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xD55585772756849Aui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x40) = 0x52C9FCDC7DDE2DACi64;\n    v10 = _mm_load_si128((const __m128i *)(_RBP + 64));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C8) = 0x44F651D568826090i64;\n    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1C0));\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+210h+var_70]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n      vmovdqa [rbp+210h+var_1D0], xmm2\n      vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n      vzeroupper\n    }\n    sub_180006A00((void *)(_RBP + 32));\n  }\n  v14 = -1i64;\n  if ( dwProcessId == -1 )\n  {\n    Dst[34] = GetCurrentProcessId();\n    *((_QWORD *)Dst + 13) = -1i64;\n  }\n  else\n  {\n    Dst[34] = dwProcessId;\n    v18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n    *((_QWORD *)Dst + 13) = v18;\n    if ( !v18 )\n    {\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x38) = 0xA727C0574231E1F6ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0x84FAD53051F54450ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A0) = 0xE795A7603F90341Fui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA92981ACBCD97A59ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x30) = 0xCF59BCC699AA419Bui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1A8) = 0xC65BF3E99CAA093Cui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B0) = 0xCF59BCC699A060E9ui64;\n      *(_QWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x1B8) = 0xA727C0574231E1F6ui64;\n      __asm\n      {\n        vmovdqu ymm0, [rbp+210h+var_70]\n        vpxor   ymm1, ymm0, ymmword ptr [rbp+210h+Text]\n        vmovdqa ymmword ptr [rbp+210h+Text], ymm1\n        vzeroupper\n      }\n      sub_180006A00((void *)(_RBP + 32));//打印报错信息\n      goto LABEL_3;\n    }\n  }\n  Dst[30] = 0x1FFFFF;\n  v15 = -1i64;\n  do\n    ++v15;\n  while ( *((_BYTE *)Dst + v15) );\n  if ( !v15 )\n  {\n    v16 = Dst[34];\n    Toolhelp32Snapshot = CreateToolhelp32Snapshot(2u, 0);\n    if ( Toolhelp32Snapshot != (HANDLE)-1i64 )\n    {\n      *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = 304;\n      memset((void *)(_RBP + 100), 0, 0x12Cui64);\n      if ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n      {\n        while ( *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 0x68) != v16 )\n        {\n          if ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + 96)) )\n            goto LABEL_20;\n        }\n        do\n          ++v14;\n        while ( *(_BYTE *)(_RBP + 140 + v14) );\n        memmove(Dst, (const void *)(_RBP + 140), v14);\n      }\nLABEL_20:\n      CloseHandle(Toolhelp32Snapshot);\n    }\n  }\n  *((_QWORD *)Dst + 18) = sub_1800068D0(Dst, Dst);\n  v21 = 0i64;\n  *(_DWORD *)(((unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64) + 8) = Dst[34];\n  *(_QWORD *)_RBP = 0i64;\n  EnumWindows(EnumFunc, (unsigned __int64)Caption & 0xFFFFFFFFFFFFFFE0ui64);\n  result = *(_QWORD *)_RBP;\n  if ( *(_QWORD *)_RBP )\n    v21 = *(_QWORD *)_RBP;\n  *((_QWORD *)Dst + 16) = v21;\n  return result;\n}\n```\n\n这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。\n\n![image-20240913221222730](https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png)\n\n分析完这个函数，继续回溯一层，运行到返回，定位到这个地方\n\n![image-20240913221520425](https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png)\n\n继续根据偏移转到IDA里看反汇编\n\n```c\nint sub_180001990()\n{\n  size_t v0; // rbx\n  DWORD v1; // eax\n  __m128i Dst; // [rsp+20h] [rbp-48h] BYREF\n  __int64 v4; // [rsp+30h] [rbp-38h]\n  __int64 v5; // [rsp+38h] [rbp-30h]\n  __m128i Src; // [rsp+40h] [rbp-28h] BYREF\n\n  Dst.m128i_i64[0] = 0xE795A7603F90341Fui64;\n  Dst.m128i_i64[1] = 0xC65BF3E99CAA093Cui64;\n  Src.m128i_i64[0] = 0x89FAC00F53FE5D68ui64;\n  Src.m128i_i64[1] = 0xC65BF3E9F9D26C12ui64;\n  Src = _mm_xor_si128(_mm_load_si128(&Src), Dst);\n  v0 = -1i64;\n  do\n    ++v0;\n  while ( Src.m128i_i8[v0] );\n  memmove(dword_1800349A0, &Src, v0);\n  Dst.m128i_i64[0] = 0i64;\n  v4 = 0i64;\n  v5 = 15i64;\n  sub_180004770(&Dst, &Src, v0);\n  v1 = sub_1800070A0(&Dst);\n  sub_1800063D0(dword_1800349A0, v1);\n  return atexit(sub_180020C90);\n}\n```\n\n前面应该是一个加密的字符串操作，用python打印出字符串\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xE795A7603F90341F\nx2 = 0xC65BF3E99CAA093C\ny1 = 0x89FAC00F53FE5D68\ny2 = 0xC65BF3E9F9D26C12\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n#Result 1: nogolniw\n#Result 2: exe.\n```\n\n得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方\n\n```c\nv18 = OpenProcess(0x1FFFFFu, 0, dwProcessId);\n*((_QWORD *)Dst + 13) = v18;\n```\n\n随后return exit退出。\n\n随后我在退出函数传参的时候看到了一个hProcess\n\n![image-20240914102337797](https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png)\n\n一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数\n\n```c\nvoid sub_180007C10()\n{\n  HANDLE v1; // rcx\n  void *v2; // rdx\n  __int128 v3; // xmm0\n  __int128 v4; // xmm1\n  HANDLE FileA; // rbx\n  __int64 v8; // rcx\n  _BYTE *v9; // rdx\n  unsigned __int64 v10; // rdx\n  _QWORD *v11; // rcx\n  char Buffer; // [rsp+60h] [rbp+0h] BYREF\n\n  _RBP = (unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64;\n  while ( byte_180032C00 )\n  {\n    if ( !byte_180034961 && !byte_180034960 )\n      sub_1800041D0();\n    v1 = hProcess;\n    v2 = (void *)(qword_180034968 + 2766);\n    *(_BYTE *)_RBP = 15;\n    WriteProcessMemory(v1, v2, (LPCVOID)((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64), 1ui64, 0i64);\n    byte_180032C00 = 0;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20) = 0xAA32D3B2B7C50388ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10) = 0xA0A195500DCC0E5Cui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x18) = 0x943E9588CFCF645Dui64;\n    v3 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x10);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x28) = 0xA727C0574231D098ui64;\n    v4 = *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x20);\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x80) = 0xE795A7603F90341Fui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x60) = v3;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x88) = 0xC65BF3E99CAA093Cui64;\n    *(_OWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x70) = v4;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x90) = 0xCF59BCC699A060E9ui64;\n    *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x98) = 0xA727C0574231E1F6ui64;\n    __asm\n    {\n      vmovdqu ymm0, [rbp+0D0h+var_50]\n      vpxor   ymm1, ymm0, ymmword ptr [rbp+0D0h+FileName]\n      vmovdqa ymmword ptr [rbp+0D0h+FileName], ymm1\n      vzeroupper\n    }\n    FileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n    if ( FileA != (HANDLE)-1i64 )\n    {\n      ((void (__fastcall *)(unsigned __int64))loc_180007A20)(_RBP + 48);\n      v8 = -1i64;\n      if ( *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48) < 0x10ui64 )\n      {\n        do\n          ++v8;\n        while ( *(_BYTE *)(_RBP + 48 + v8) );\n        v9 = (_BYTE *)(_RBP + 48);\n      }\n      else\n      {\n        v9 = *(_BYTE **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        do\n          ++v8;\n        while ( v9[v8] );\n      }\n      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + 8), 0i64);\n      CloseHandle(FileA);\n      v10 = *(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x48);\n      if ( v10 >= 0x10 )\n      {\n        v11 = *(_QWORD **)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30);\n        if ( v10 + 1 >= 0x1000 )\n        {\n          v11 = (_QWORD *)*(v11 - 1);\n          if ( (unsigned __int64)(*(_QWORD *)(((unsigned __int64)&Buffer & 0xFFFFFFFFFFFFFFE0ui64) + 0x30)\n                                - (_QWORD)v11\n                                - 8i64) > 0x1F )\n            invalid_parameter_noinfo_noreturn();\n        }\n        j_j_free(v11);\n      }\n    }\n  }\n}\n```\n\n看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0xA0A195500DCC0E5C\nx2 = 0x943E9588CFCF645D\nx3 = 0xAA32D3B2B7C50388\nx4 = 0xA727C0574231D098\ny1 = 0xE795A7603F90341F\ny2 = 0xC65BF3E99CAA093C\ny3 = 0xCF59BCC699A060E9\ny4 = 0xA727C0574231E1F6\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\nresult3 = hex_xor_to_string(x3, y3)\nresult4 = hex_xor_to_string(x4, y4)\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\nprint(\"Result 3:\", result3)\nprint(\"Result 4:\", result4)\n\nres = result1[::-1] + result2[::-1] + result3[::-1] + result4[::-1]\nprint(res)\n```\n\n![image-20240914110434860](https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png)\n\n整个拼起来是字符串`C:\\2024GameSafeRace.token1`，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下\n\n![image-20240914110826942](https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png)\n\nloc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入`C:\\2024GameSafeRace.token1`中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。\n\n![image-20240914111407201](https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png)\n\n找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数\n\n```C\nFileA = CreateFileA((LPCSTR)(_RBP + 96), 0x40000000u, 0, 0i64, 3u, 0x80u, 0i64);\n```\n\n![image-20240914111653640](https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png)\n\n看来是参数在作怪，CreateFileA函数传入**OPEN_EXISTING**参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。\n\n![image-20240914112419617](https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png)\n\nC:\\2024GameSafeRace.token1成功被写入\n\n![image-20240914112536772](https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png)\n\n010打开找到token1:`757F4749AEBB1891EF5AC2A9B5439CEA`\n\ntoken2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取\n\n![image-20240914113718466](https://s2.loli.net/2024/10/02/ErcPg4bZ8KJ2uIV.png)\n\n组合一下就是token2：`803f14a24d64f3e697957c252e3a5686`\n\n\n\n## （二）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）\n\n根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到`C:\\2024GameSafeRace.token1`中，但是会因为CreateFileA参数`OPEN_EXISTING`条件不满足而失败，所以我们只需要修改这个传参，改成`OPEN_ALWAYS`，即可实现输出token1，那我们只需要hook `CreateFileA`函数修改传参即可，但是有个问题，因为不是hack.exe本身调用`CreateFileA`函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用`CreateFileA`函数，所以我们可以考虑在注入前修改`WriteProcessMemory`函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。\n\n这里我们要patch 传参，通过ida找到传参的汇编代码\n\n![image-20240920142928600](https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png)\n\n在winhex里找到对应所在文件偏移\n![image-20240920143006628](https://s2.loli.net/2024/10/02/5lR3vqSQVkiMU6a.png)\n\n也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n成功输出token1文件：\n\n![image-20240914120306770](https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png)\n\n然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。\n\nhook DbgPrintEx函数看一眼传参。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s DbgPrintEx ComponentId:%lu,Level:%lu\\n\",dbgFilter, ComponentId, Level);\n    va_list args;\n    va_start(args, Format);\n    NTSTATUS s = func(ComponentId, Level, Format, args);\n    va_end(args);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\",dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n发现加载ace驱动后，有大量的level:5的调试信息输出\n\n![image-20240918212128643](https://s2.loli.net/2024/10/02/rBGdkLCpEIY6tnF.png)\n\n也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (ULONG ComponentId, ULONG Level, PCSTR Format, ...);\nHOOK_MANAGER hookManager;\nchar buffer[1024]; \nULONG myDbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...) {\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    va_list args;\n    va_start(args, Format);\n    vsprintf(buffer, Format, args);\n    va_end(args);\n    NTSTATUS s = func(ComponentId, 0, \"%s\", buffer);//修改level为0\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"Kvancy: DriverUnload\\n\");\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = DbgPrintEx;\n    InitializeHookManager(&hookManager, dbgPrintEx, myDbgPrintEx);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"Kvancy: DriverEntry\\n\");\n    return STATUS_SUCCESS;\n}\n```\n\n![{4981D7A9-1EAA-4A38-9280-429D63ECABF9}](https://s2.loli.net/2024/10/02/ucgDYVePtZaO9dH.png)\n\n成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。\n\n![{170126A6-1C28-4BF3-AB47-AB2397C76595}](https://s2.loli.net/2024/10/02/itpCfgunESqZQPw.png)\n\n可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。\n\n```c\nVOID WriteToFile(PUNICODE_STRING FilePath, PCHAR Data)\n{\n    OBJECT_ATTRIBUTES objAttr;\n    IO_STATUS_BLOCK ioStatusBlock;\n    HANDLE fileHandle;\n    NTSTATUS status;\n    UNICODE_STRING unicodeFilePath;\n\n    RtlInitUnicodeString(&unicodeFilePath, FilePath->Buffer);\n\n    InitializeObjectAttributes(&objAttr, &unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, NULL, NULL);\n\n    status = ZwCreateFile(\n        &fileHandle,\n        FILE_APPEND_DATA | SYNCHRONIZE,\n        &objAttr,\n        &ioStatusBlock,\n        NULL,\n        FILE_ATTRIBUTE_NORMAL,\n        0,\n        FILE_OPEN_IF,\n        FILE_SYNCHRONOUS_IO_NONALERT,\n        NULL,\n        0\n    );\n\n    if (NT_SUCCESS(status)) {\n        size_t dataLength = strlen(Data);\n        ZwWriteFile(fileHandle, NULL, NULL, NULL, &ioStatusBlock, Data, (ULONG)dataLength, NULL, NULL);\n        ZwClose(fileHandle);\n    }\n    else {\n        DbgPrint(\"Failed to create file: %08X\\n\", status);\n    }\n}\n\nVOID EnumProcesses()\n{\n    NTSTATUS status;\n    PVOID buffer;\n    ULONG bufferSize = 0x10000; // Initial buffer size, can grow if needed\n    ULONG returnLength;\n    CHAR logBuffer[1024];\n\n    UNICODE_STRING filePath;\n    RtlInitUnicodeString(&filePath, L\"\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt\");\n\n    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!buffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(buffer);\n        bufferSize = returnLength;\n        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!buffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &returnLength);\n    }\n\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;\n        while (TRUE) {\n            if (processInfo->ImageName.Buffer) {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: %wZ\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId, &processInfo->ImageName);\n            }\n            else {\n                _snprintf(logBuffer, sizeof(logBuffer), \"Process ID: %lu, Name: [System Process]\\n\", (ULONG)(ULONG_PTR)processInfo->ProcessId);\n            }\n\n            WriteToFile(&filePath, logBuffer);\n\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    ExFreePool(buffer);\n}\n```\n\n结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用`PsCreateSystemThread`创建了一个内核线程。hook`PsCreateSystemThread`函数看看驱动加载时是否调用了这个函数。\n\n```c\n#include <ntifs.h>\n#include <ntdef.h>\n#include <ntstatus.h>\n#include <ntddk.h>\n#include <stdarg.h>\n#include \"R0Hook.h\"\n#define dbgFilter \"Kvancy:\"\ntypedef ULONG(*FuncPtr) (\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext);\nHOOK_MANAGER hookManager;\n\n\nNTSTATUS myPsCreateSystemThread(\n    PHANDLE            ThreadHandle,\n    ULONG              DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE             ProcessHandle,\n    PCLIENT_ID         ClientId,\n    PKSTART_ROUTINE    StartRoutine,\n    PVOID              StartContext\n)\n{\n    Unhook(&hookManager);\n    FuncPtr func = (FuncPtr)hookManager.target;\n    kPrint(\"%s myPsCreateSystemThread StartRoutine:%p\\n\", dbgFilter, StartRoutine);\n    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);\n    ApplyHook(&hookManager);\n    return s;\n}\n\nvoid DriverUnload(PDRIVER_OBJECT pDriver) {\n    kPrint(\"%s DriverUnload\\n\", dbgFilter);\n    Unhook(&hookManager);\n}\n\nNTSTATUS DriverEntry(\n    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath\n) {\n    DriverObject->DriverUnload = DriverUnload;\n    PVOID dbgPrintEx = PsCreateSystemThread;\n    InitializeHookManager(&hookManager, dbgPrintEx, myPsCreateSystemThread);\n    ApplyHook(&hookManager);\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"%s DriverEntry\\n\", dbgFilter);\n    return STATUS_SUCCESS;\n}\n```\n\n![{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}](https://s2.loli.net/2024/10/02/fkDhVr5juzyYTMS.png)\n\n发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数\n\n```asm\n0: kd> u FFFFBA0729013DB0 l 100\nffffba07`29013db0 488bc4          mov     rax,rsp\nffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx\nffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi\nffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14\nffffba07`29013dbf 55              push    rbp\nffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]\nffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h\nffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh\nffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h\nffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0\nffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]\nffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0\nffffba07`29013dea e8d1030000      call    ffffba07`290141c0\nffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h\nffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]\nffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e01 ba05000000      mov     edx,5\nffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e0a 33c9            xor     ecx,ecx\nffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax\nffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax\nffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax\nffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]\nffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax\nffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]\nffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0\nffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013e50 33db            xor     ebx,ebx\nffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h\nffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]\nffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013e64 ba05000000      mov     edx,5\nffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e6d 33c9            xor     ecx,ecx\nffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax\nffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax\nffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax\nffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]\nffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]\nffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax\nffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]\nffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0\nffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]\nffffba07`29013eb9 48ffc3          inc     rbx\nffffba07`29013ebc 4883fb10        cmp     rbx,10h\nffffba07`29013ec0 7c90            jl      ffffba07`29013e52\nffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh\nffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]\nffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax\nffffba07`29013ed4 ba05000000      mov     edx,5\nffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013edd 33c9            xor     ecx,ecx\nffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax\nffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax\nffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14\nffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax\nffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi\nffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]\nffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]\nffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax\nffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]\nffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]\nffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0\nffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]\nffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh\nffffba07`29013f28 e833e9ffff      call    ffffba07`29012860\nffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf\nffffba07`29013f32 cc              int     3\nffffba07`29013f33 cc              int     3\nffffba07`29013f34 4152            push    r10\n```\n\n导入到ida里看伪代码\n\n```c\nvoid __noreturn sub_180005148()\n{\n  __m128i v0; // xmm0\n  __int64 i; // rbx\n  __m128i v2; // xmm0\n  __int64 v3; // r9\n  __m128i v4; // xmm0\n  __m128i v5; // [rsp+30h] [rbp-19h] BYREF\n  __m128i v6; // [rsp+40h] [rbp-9h] BYREF\n  __m128i v7; // [rsp+50h] [rbp+7h] BYREF\n  __m128i v8; // [rsp+60h] [rbp+17h]\n  __m128i v9; // [rsp+70h] [rbp+27h]\n  __int128 v10; // [rsp+80h] [rbp+37h] BYREF\n  __m128i v11; // [rsp+90h] [rbp+47h]\n\n  while ( 1 )\n  {\n    v10 = 0i64;\n    ((void (__fastcall *)(__int128 *))((char *)&loc_180005556 + 2))(&v10);\n    v5.m128i_i64[0] = 0x4B6D27B32F124FA1i64;\n    v5.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v8.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v0 = _mm_load_si128(&v5);\n    v8.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v5 = _mm_xor_si128(v0, v8);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v5);\n    for ( i = 0i64; i < 16; ++i )\n    {\n      v6.m128i_i64[0] = 0x4B6D1DDD324B10F0i64;\n      v6.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v9.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n      v2 = _mm_load_si128(&v6);\n      v3 = *((unsigned __int8 *)&v10 + i);\n      v9.m128i_i64[1] = 0x1E336B548B32934Ei64;\n      v6 = _mm_xor_si128(v2, v9);\n      MEMORY[0x31305A8047353130](0i64, 5i64, &v6, v3);\n    }\n    v7.m128i_i64[0] = 0x4B6D1DDD4A7920DFi64;\n    v7.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v11.m128i_i64[0] = 0x4B6D1DDD4A7920D5i64;\n    v4 = _mm_load_si128(&v7);\n    v11.m128i_i64[1] = 0x1E336B548B32934Ei64;\n    v7 = _mm_xor_si128(v4, v11);\n    MEMORY[0x31305A8047353130](0i64, 5i64, &v7);\n    sub_180003BF8(2766i64);\n  }\n}\n```\n\n好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。\n\n```py\ndef hex_xor_to_string(a, b):\n    result = a ^ b\n    hex_str = hex(result)[2:]\n    if len(hex_str) % 2 != 0:\n        hex_str = '0' + hex_str\n\n    result_str = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n    return result_str\n\nx1 = 0x4B6D27B32F124FA1\nx2 = 0x1E336B548B32934E\ny1 = 0x4B6D1DDD4A7920D5\ny2 = 0x1E336B548B32934E\n\n\nresult1 = hex_xor_to_string(x1, y1)\nresult2 = hex_xor_to_string(x2, y2)\n\n\nprint(\"Result 1:\", result1)\nprint(\"Result 2:\", result2)\n\n\nres = result1[::-1] + result2[::-1]\nprint(res)\n\n```\n\n![{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}](https://s2.loli.net/2024/10/02/yQT7sZ1UnvRAcXk.png)\n\n打印出了`token`基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。\n\n![image-20240919195412464](https://s2.loli.net/2024/10/02/7zjZDi1Y9JPTAvX.png))\n\n这里有个`mov edx,5`语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。\n\n那么怎么确定这个线程地址呢，如果通过`ZwQuerySystemInformation`枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了`ZwQuerySystemInformation`枚举，还有通过`PsLookupThreadByThreadId`函数从进程id和线程id查找的。\n\n那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出\n\n![image-20240919214001840](https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png)\n\n![image-20240919215044101](https://s2.loli.net/2024/10/02/1KTEVnb9uPWsjpr.png)\n\n诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid=4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。\n\n![image-20240919215837787](https://s2.loli.net/2024/10/02/TOdNVCHav1FIbol.png)\n\n貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用`PsCreateSystemThread`），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。\n\n这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid=4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。\n\n```c\n#include \"header.h\"\n\nPVOID MoudleBaseAddress[1024];\nULONG64 MoudleSize[1024];\nULONG ModuleCount = 0;\nULONG Offset1 = 0x52, Offset2 = 0xB5, Offset3 = 0x125;\n\nBOOLEAN IsAddressInKnownModules(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)\n{\n    for (size_t i = 0; i < ModuleCount; i++)\n    {\n        if (Address >= ModuleBaseAddresses[i] && Address < (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])\n        {\n            return TRUE;\n        }\n    }\n    return FALSE;\n}\n\nPVOID EnumSystemModulesForProcess(HANDLE TargetProcessId)\n{\n    NTSTATUS status;\n    ULONG bufferSize = 0x10000;\n    PVOID processBuffer = NULL;\n    PVOID moduleBuffer = NULL;\n    ULONG returnLength;\n\n    // 查询进程信息\n    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n    if (!processBuffer) {\n        DbgPrint(\"Failed to allocate buffer for process information\\n\");\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(processBuffer);\n        bufferSize = returnLength;\n        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'proc');\n        if (!processBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for process information\\n\");\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &returnLength);\n    }\n\n    // 查询模块信息\n    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n    if (!moduleBuffer) {\n        DbgPrint(\"Failed to allocate buffer for module information\\n\");\n        ExFreePool(processBuffer);\n        return;\n    }\n\n    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    if (status == STATUS_INFO_LENGTH_MISMATCH) {\n        ExFreePool(moduleBuffer);\n        bufferSize = returnLength;\n        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, 'modl');\n        if (!moduleBuffer) {\n            DbgPrint(\"Failed to allocate larger buffer for module information\\n\");\n            ExFreePool(processBuffer);\n            return;\n        }\n        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &returnLength);\n    }\n\n    // 遍历模块信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;\n        ModuleCount = moduleInfo->ModulesCount;\n        for (ULONG i = 0; i < moduleInfo->ModulesCount; i++) {\n            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &moduleInfo->Modules[i];\n            MoudleBaseAddress[i] = moduleEntry->Base;\n            MoudleSize[i] = moduleEntry->Size;\n        }\n    }\n\n    // 遍历进程信息\n    if (NT_SUCCESS(status)) {\n        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;\n        while (TRUE) {\n            if (processInfo->ProcessId == TargetProcessId) {\n                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + 1);\n                for (ULONG i = 0; i < processInfo->NumberOfThreads; i++) {\n                    if (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))\n                    {\n                        DbgPrint(\"Find it:%p\\n\",threadInfo[i].StartAddress);\n                        return threadInfo[i].StartAddress;\n                    }\n                }\n                break;\n            }\n            if (processInfo->NextEntryOffset == 0)\n                break;\n            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo->NextEntryOffset);\n        }\n    }\n\n    // 清理分配的内存\n    ExFreePool(processBuffer);\n    ExFreePool(moduleBuffer);\n    return 0;\n}\n\nVOID UnloadDriver(PDRIVER_OBJECT DriverObject) {\n    KdPrint((\"Driver Unloaded\\n\"));\n}\n\nNTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {\n    DriverObject->DriverUnload = UnloadDriver;\n    KdPrint((\"Driver Loaded\\n\"));\n\n    HANDLE targetPid = (HANDLE)4; // 系统进程的 PID\n    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);\n\n    UCHAR valueToWrite = 0x00; // 要写入的字节值\n    UCHAR valueToRead = 0x05; // 要写入的字节值\n    ULONG numHasChanged = 0x00;\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;\n        numHasChanged++;\n    }\n    if (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)\n    {\n        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;\n        numHasChanged++;\n    }\n    DbgPrint(\"numHasChanged:%d\\n\", numHasChanged);\n    return STATUS_SUCCESS;\n}\n\n```\n\n成功输出token2\n\n![image-20240920125107119](https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png)\n\n## （三）解题过程\n\n题目要求：\n\n编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）\n\n要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的`C:\\2024GameSafeRace.token1`字符串是由十六进制异或得到的，也就是下面这些\n![image-20240920145014956](https://s2.loli.net/2024/10/02/suczGZU14mQHv8i.png)\n\n可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include <windows.h>\n#include <shellapi.h>\n#include <detours.h>\n#include <tlhelp32.h>\n#include <stdlib.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n#define _KDEBUG\n#define DBGMGEBOX(fmt, ...) \\\n    do { \\\n         /* 假设最大长度为1024，根据需要调整大小 */ \\\n        wsprintfA(out, fmt, __VA_ARGS__); \\\n        MessageBoxA(NULL, out, \"提示\", MB_OK); \\\n    } while(0)\nchar out[100];\ntypedef BOOL(WINAPI* WriteProcessMemory_t)(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n    );\nWriteProcessMemory_t TrueWriteProcessMemory = NULL;\nBOOL\nWINAPI\nHookWriteProcessMemory(\n    _In_ HANDLE hProcess,\n    _In_ LPVOID lpBaseAddress,\n    _In_reads_bytes_(nSize) LPCVOID lpBuffer,\n    _In_ SIZE_T nSize,\n    _Out_opt_ SIZE_T* lpNumberOfBytesWritten\n)\n{\n    if (nSize == 4506624 && *((PUCHAR)lpBuffer + 0x7171) == 0x3)\n    {\n        *((PUCHAR)lpBuffer + 0x7171) = 0x4;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7082) = 0x94e7c2136acc0e5c;//\n        *(PULONG64)((ULONG64)lpBuffer + 0x7093) = 0x8207c5d1af9f3860;\n        *(PULONG64)((ULONG64)lpBuffer + 0x70F1) = 0xa905cca9edcb138c;\n        *(PULONG64)((ULONG64)lpBuffer + 0x7108) = 0xa753b8236c56809a;\n        //C:\\Users\\15386\\Desktop\\flag.txt\n        DBGMGEBOX(\"Hook Success!\\n\");\n    }\n    return TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);\n}\n\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(\"kernel32.dll\", \"WriteProcessMemory\");\n        DetourAttach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n        DetourDetach(&(PVOID&)TrueWriteProcessMemory, HookWriteProcessMemory);\n\n        DetourTransactionCommit();\n        break;\n    }\n    return TRUE;\n}\n```\n\n注入hook成功后，成功在桌面的`flag.txt`输出token1\n\n![{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}](https://s2.loli.net/2024/10/02/PIej3obTn5NLDyE.png)\n","slug":"2024腾讯游戏安全PC初赛","published":1,"updated":"2024-10-02T09:31:42.088Z","layout":"post","photos":[],"link":"","_id":"cm1roa13g0007ugie4la7c6j9","content":"<p>小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。<span id=\"more\"></span></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><img src=\"https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png\" alt=\"image-20240923132824209\"></p>\n<h2 id=\"（一）解题过程\"><a href=\"#（一）解题过程\" class=\"headerlink\" title=\"（一）解题过程\"></a>（一）解题过程</h2><p>拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png\" alt=\"image-20240923131144727\"></p>\n<p>运行发现程序会多次在<code>WriteProcessMemory</code>下断下，hook一下观察传参</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T * lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> fileName[<span class=\"number\">12</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(fileName, <span class=\"string\">&quot;out%d.txt&quot;</span>, (<span class=\"type\">int</span>)hProcess % <span class=\"number\">1000</span>);</span><br><span class=\"line\">    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;CreateFile Fail&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SetFilePointer(hFile, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, FILE_END);</span><br><span class=\"line\">    DWORD bytesWritten;</span><br><span class=\"line\">    BOOL result = WriteFile(hFile, lpBuffer, nSize, &amp;bytesWritten, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    CloseHandle(hFile);</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;findProcess WriteProcessMemory:%p,size:%d\\n&quot;</span>, hProcess,nSize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里输出了三个txt文件</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png\" alt=\"image-20240923131546102\"></p>\n<p>其中out200.txt文件有明显的PE头</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png\" alt=\"image-20240923131748329\"></p>\n<p>去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过<code>WriteProcessMemory</code>往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。</p>\n<p>ida64打开发现程序的dllMain入口还是被加密了</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png\" alt=\"image-20240923132428865\"></p>\n<p>还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在</p>\n<p>入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png\" alt=\"image-20240913213116556\"></p>\n<p>这里我对下面这几个API下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png\" alt=\"image-20240913213203300\"></p>\n<p>运行，第一次成功在openProcess函数断下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png\" alt=\"image-20240913213252406\"></p>\n<p>观察传参窗口，找到了一个系统进程名称字符串<code>winlogon.exe</code>，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png\" alt=\"image-20240913213951735\"></p>\n<p>汇编代码不是很好看，根据偏移在IDA里反汇编看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_1800063D0</span><span class=\"params\">(_DWORD *Dst, DWORD dwProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i si128; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __m128i v10; <span class=\"comment\">// xmm2</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> v14; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v16; <span class=\"comment\">// r14d</span></span><br><span class=\"line\">  HANDLE Toolhelp32Snapshot; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  HANDLE v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v21; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  CHAR Caption[<span class=\"number\">16</span>]; <span class=\"comment\">// [rsp+40h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !dwProcessId )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0xE795A71250E2465A</span>ui64;</span><br><span class=\"line\">    si128 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    v6 = _mm_xor_si128(si128, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD5301FE45158</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = v6;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xBF19D3ADD5D97A59</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xBD1C9CA3F4C12EC9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C05763438E84</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MessageBoxA(<span class=\"number\">0</span>i64, (LPCSTR)(_RBP + <span class=\"number\">32</span>), (LPCSTR)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">0</span>);</span><br><span class=\"line\">LABEL_3:</span><br><span class=\"line\">    GetLastError();</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0x88D6871250E2465A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF98DB9906C58</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = _mm_xor_si128(</span><br><span class=\"line\">                         _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP),</span><br><span class=\"line\">                         *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_180006A00((<span class=\"type\">void</span> *)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> __int8)sub_180006FC0() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>) = <span class=\"number\">0x52C9FCDC77FF5FC3</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xDDD2E92971C27548</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA43EB7C9E8CF4E1C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xA62FD5B4C980079C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xD55585772756849A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x40</span>) = <span class=\"number\">0x52C9FCDC7DDE2DAC</span>i64;</span><br><span class=\"line\">    v10 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)(_RBP + <span class=\"number\">64</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C8</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa [rbp+<span class=\"number\">210</span>h+var_1D0], xmm2</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v14 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dwProcessId == <span class=\"number\">-1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = GetCurrentProcessId();</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = dwProcessId;</span><br><span class=\"line\">    v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v18 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD53051F54450</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA92981ACBCD97A59</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xCF59BCC699AA419B</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      __asm</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">        vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">        vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">        vzeroupper</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));<span class=\"comment\">//打印报错信息</span></span><br><span class=\"line\">      <span class=\"keyword\">goto</span> LABEL_3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Dst[<span class=\"number\">30</span>] = <span class=\"number\">0x1FFFFF</span>;</span><br><span class=\"line\">  v15 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v15;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( *((_BYTE *)Dst + v15) );</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v15 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v16 = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">    Toolhelp32Snapshot = CreateToolhelp32Snapshot(<span class=\"number\">2u</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( Toolhelp32Snapshot != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = <span class=\"number\">304</span>;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">0x12C</span>ui64);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x68</span>) != v16 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> LABEL_20;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v14;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">140</span> + v14) );</span><br><span class=\"line\">        memmove(Dst, (<span class=\"type\">const</span> <span class=\"type\">void</span> *)(_RBP + <span class=\"number\">140</span>), v14);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">LABEL_20:</span><br><span class=\"line\">      CloseHandle(Toolhelp32Snapshot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">18</span>) = sub_1800068D0(Dst, Dst);</span><br><span class=\"line\">  v21 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">  *(_QWORD *)_RBP = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  EnumWindows(EnumFunc, (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64);</span><br><span class=\"line\">  result = *(_QWORD *)_RBP;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_QWORD *)_RBP )</span><br><span class=\"line\">    v21 = *(_QWORD *)_RBP;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">16</span>) = v21;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png\" alt=\"image-20240913221222730\"></p>\n<p>分析完这个函数，继续回溯一层，运行到返回，定位到这个地方</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png\" alt=\"image-20240913221520425\"></p>\n<p>继续根据偏移转到IDA里看反汇编</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sub_180001990</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v0; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  DWORD v1; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  __m128i Dst; <span class=\"comment\">// [rsp+20h] [rbp-48h] BYREF</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+30h] [rbp-38h]</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// [rsp+38h] [rbp-30h]</span></span><br><span class=\"line\">  __m128i Src; <span class=\"comment\">// [rsp+40h] [rbp-28h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x89FAC00F53FE5D68</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E9F9D26C12</span>ui64;</span><br><span class=\"line\">  Src = _mm_xor_si128(_mm_load_si128(&amp;Src), Dst);</span><br><span class=\"line\">  v0 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v0;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( Src.m128i_i8[v0] );</span><br><span class=\"line\">  memmove(dword_1800349A0, &amp;Src, v0);</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v4 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v5 = <span class=\"number\">15</span>i64;</span><br><span class=\"line\">  sub_180004770(&amp;Dst, &amp;Src, v0);</span><br><span class=\"line\">  v1 = sub_1800070A0(&amp;Dst);</span><br><span class=\"line\">  sub_1800063D0(dword_1800349A0, v1);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> atexit(sub_180020C90);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面应该是一个加密的字符串操作，用python打印出字符串</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">x2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x89FAC00F53FE5D68</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E9F9D26C12</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"comment\">#Result 1: nogolniw</span></span><br><span class=\"line\"><span class=\"comment\">#Result 2: exe.</span></span><br></pre></td></tr></table></figure>\n\n<p>得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">*((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br></pre></td></tr></table></figure>\n\n<p>随后return exit退出。</p>\n<p>随后我在退出函数传参的时候看到了一个hProcess</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png\" alt=\"image-20240914102337797\"></p>\n<p>一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sub_180007C10</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  HANDLE v1; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v2; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int128 v3; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int128 v4; <span class=\"comment\">// xmm1</span></span><br><span class=\"line\">  HANDLE FileA; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  _BYTE *v9; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v10; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  _QWORD *v11; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">char</span> Buffer; <span class=\"comment\">// [rsp+60h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( byte_180032C00 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !byte_180034961 &amp;&amp; !byte_180034960 )</span><br><span class=\"line\">      sub_1800041D0();</span><br><span class=\"line\">    v1 = hProcess;</span><br><span class=\"line\">    v2 = (<span class=\"type\">void</span> *)(qword_180034968 + <span class=\"number\">2766</span>);</span><br><span class=\"line\">    *(_BYTE *)_RBP = <span class=\"number\">15</span>;</span><br><span class=\"line\">    WriteProcessMemory(v1, v2, (LPCVOID)((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">1u</span>i64, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    byte_180032C00 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xAA32D3B2B7C50388</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>) = <span class=\"number\">0xA0A195500DCC0E5C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x18</span>) = <span class=\"number\">0x943E9588CFCF645D</span>ui64;</span><br><span class=\"line\">    v3 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA727C0574231D098</span>ui64;</span><br><span class=\"line\">    v4 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x80</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = v3;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x88</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x70</span>) = v4;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x90</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x98</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">0</span>D0h+var_50]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( FileA != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ((<span class=\"type\">void</span> (__fastcall *)(<span class=\"type\">unsigned</span> __int64))loc_180007A20)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      v8 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) &lt; <span class=\"number\">0x10</span>ui64 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">48</span> + v8) );</span><br><span class=\"line\">        v9 = (_BYTE *)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v9 = *(_BYTE **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( v9[v8] );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + <span class=\"number\">8</span>), <span class=\"number\">0</span>i64);</span><br><span class=\"line\">      CloseHandle(FileA);</span><br><span class=\"line\">      v10 = *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v10 &gt;= <span class=\"number\">0x10</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v11 = *(_QWORD **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v10 + <span class=\"number\">1</span> &gt;= <span class=\"number\">0x1000</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v11 = (_QWORD *)*(v11 - <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> __int64)(*(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>)</span><br><span class=\"line\">                                - (_QWORD)v11</span><br><span class=\"line\">                                - <span class=\"number\">8</span>i64) &gt; <span class=\"number\">0x1F</span> )</span><br><span class=\"line\">            invalid_parameter_noinfo_noreturn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j_j_free(v11);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xA0A195500DCC0E5C</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x943E9588CFCF645D</span></span><br><span class=\"line\">x3 = <span class=\"number\">0xAA32D3B2B7C50388</span></span><br><span class=\"line\">x4 = <span class=\"number\">0xA727C0574231D098</span></span><br><span class=\"line\">y1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y3 = <span class=\"number\">0xCF59BCC699A060E9</span></span><br><span class=\"line\">y4 = <span class=\"number\">0xA727C0574231E1F6</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\">result3 = hex_xor_to_string(x3, y3)</span><br><span class=\"line\">result4 = hex_xor_to_string(x4, y4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 3:&quot;</span>, result3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 4:&quot;</span>, result4)</span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>] + result3[::-<span class=\"number\">1</span>] + result4[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png\" alt=\"image-20240914110434860\"></p>\n<p>整个拼起来是字符串<code>C:\\2024GameSafeRace.token1</code>，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png\" alt=\"image-20240914110826942\"></p>\n<p>loc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入<code>C:\\2024GameSafeRace.token1</code>中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png\" alt=\"image-20240914111407201\"></p>\n<p>找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png\" alt=\"image-20240914111653640\"></p>\n<p>看来是参数在作怪，CreateFileA函数传入<strong>OPEN_EXISTING</strong>参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png\" alt=\"image-20240914112419617\"></p>\n<p>C:\\2024GameSafeRace.token1成功被写入</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png\" alt=\"image-20240914112536772\"></p>\n<p>010打开找到token1:<code>757F4749AEBB1891EF5AC2A9B5439CEA</code></p>\n<p>token2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/ErcPg4bZ8KJ2uIV.png\" alt=\"image-20240914113718466\"></p>\n<p>组合一下就是token2：<code>803f14a24d64f3e697957c252e3a5686</code></p>\n<h2 id=\"（二）解题过程\"><a href=\"#（二）解题过程\" class=\"headerlink\" title=\"（二）解题过程\"></a>（二）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）</p>\n<p>根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到<code>C:\\2024GameSafeRace.token1</code>中，但是会因为CreateFileA参数<code>OPEN_EXISTING</code>条件不满足而失败，所以我们只需要修改这个传参，改成<code>OPEN_ALWAYS</code>，即可实现输出token1，那我们只需要hook <code>CreateFileA</code>函数修改传参即可，但是有个问题，因为不是hack.exe本身调用<code>CreateFileA</code>函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用<code>CreateFileA</code>函数，所以我们可以考虑在注入前修改<code>WriteProcessMemory</code>函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。</p>\n<p>这里我们要patch 传参，通过ida找到传参的汇编代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png\" alt=\"image-20240920142928600\"></p>\n<p>在winhex里找到对应所在文件偏移<br><img src=\"https://s2.loli.net/2024/10/02/5lR3vqSQVkiMU6a.png\" alt=\"image-20240920143006628\"></p>\n<p>也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功输出token1文件：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png\" alt=\"image-20240914120306770\"></p>\n<p>然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。</p>\n<p>hook DbgPrintEx函数看一眼传参。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DbgPrintEx ComponentId:%lu,Level:%lu\\n&quot;</span>,dbgFilter, ComponentId, Level);</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, Level, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>,dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现加载ace驱动后，有大量的level:5的调试信息输出</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/rBGdkLCpEIY6tnF.png\" alt=\"image-20240918212128643\"></p>\n<p>也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"><span class=\"type\">char</span> buffer[<span class=\"number\">1024</span>]; </span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    <span class=\"built_in\">vsprintf</span>(buffer, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, <span class=\"number\">0</span>, <span class=\"string\">&quot;%s&quot;</span>, buffer);<span class=\"comment\">//修改level为0</span></span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;Kvancy: DriverUnload\\n&quot;</span>);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;Kvancy: DriverEntry\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/ucgDYVePtZaO9dH.png\" alt=\"{4981D7A9-1EAA-4A38-9280-429D63ECABF9}\"></p>\n<p>成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/itpCfgunESqZQPw.png\" alt=\"{170126A6-1C28-4BF3-AB47-AB2397C76595}\"></p>\n<p>可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOID <span class=\"title function_\">WriteToFile</span><span class=\"params\">(PUNICODE_STRING FilePath, PCHAR Data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OBJECT_ATTRIBUTES objAttr;</span><br><span class=\"line\">    IO_STATUS_BLOCK ioStatusBlock;</span><br><span class=\"line\">    HANDLE fileHandle;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    UNICODE_STRING unicodeFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">    RtlInitUnicodeString(&amp;unicodeFilePath, FilePath-&gt;Buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    InitializeObjectAttributes(&amp;objAttr, &amp;unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwCreateFile(</span><br><span class=\"line\">        &amp;fileHandle,</span><br><span class=\"line\">        FILE_APPEND_DATA | SYNCHRONIZE,</span><br><span class=\"line\">        &amp;objAttr,</span><br><span class=\"line\">        &amp;ioStatusBlock,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        FILE_ATTRIBUTE_NORMAL,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        FILE_OPEN_IF,</span><br><span class=\"line\">        FILE_SYNCHRONOUS_IO_NONALERT,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> dataLength = <span class=\"built_in\">strlen</span>(Data);</span><br><span class=\"line\">        ZwWriteFile(fileHandle, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;ioStatusBlock, Data, (ULONG)dataLength, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        ZwClose(fileHandle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to create file: %08X\\n&quot;</span>, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">EnumProcesses</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    PVOID buffer;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>; <span class=\"comment\">// Initial buffer size, can grow if needed</span></span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\">    CHAR logBuffer[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    UNICODE_STRING filePath;</span><br><span class=\"line\">    RtlInitUnicodeString(&amp;filePath, <span class=\"string\">L&quot;\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(buffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ImageName.Buffer) &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: %wZ\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId, &amp;processInfo-&gt;ImageName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: [System Process]\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            WriteToFile(&amp;filePath, logBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExFreePool(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用<code>PsCreateSystemThread</code>创建了一个内核线程。hook<code>PsCreateSystemThread</code>函数看看驱动加载时是否调用了这个函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">myPsCreateSystemThread</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s myPsCreateSystemThread StartRoutine:%p\\n&quot;</span>, dbgFilter, StartRoutine);</span><br><span class=\"line\">    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = PsCreateSystemThread;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myPsCreateSystemThread);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/fkDhVr5juzyYTMS.png\" alt=\"{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}\"></p>\n<p>发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; u FFFFBA0729013DB0 l 100</span><br><span class=\"line\">ffffba07`29013db0 488bc4          mov     rax,rsp</span><br><span class=\"line\">ffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx</span><br><span class=\"line\">ffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi</span><br><span class=\"line\">ffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14</span><br><span class=\"line\">ffffba07`29013dbf 55              push    rbp</span><br><span class=\"line\">ffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]</span><br><span class=\"line\">ffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h</span><br><span class=\"line\">ffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh</span><br><span class=\"line\">ffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h</span><br><span class=\"line\">ffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0</span><br><span class=\"line\">ffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]</span><br><span class=\"line\">ffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0</span><br><span class=\"line\">ffffba07`29013dea e8d1030000      call    ffffba07`290141c0</span><br><span class=\"line\">ffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h</span><br><span class=\"line\">ffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]</span><br><span class=\"line\">ffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e01 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e0a 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax</span><br><span class=\"line\">ffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax</span><br><span class=\"line\">ffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax</span><br><span class=\"line\">ffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]</span><br><span class=\"line\">ffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax</span><br><span class=\"line\">ffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]</span><br><span class=\"line\">ffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0</span><br><span class=\"line\">ffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013e50 33db            xor     ebx,ebx</span><br><span class=\"line\">ffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h</span><br><span class=\"line\">ffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]</span><br><span class=\"line\">ffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e64 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e6d 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax</span><br><span class=\"line\">ffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax</span><br><span class=\"line\">ffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax</span><br><span class=\"line\">ffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]</span><br><span class=\"line\">ffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]</span><br><span class=\"line\">ffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax</span><br><span class=\"line\">ffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]</span><br><span class=\"line\">ffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0</span><br><span class=\"line\">ffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013eb9 48ffc3          inc     rbx</span><br><span class=\"line\">ffffba07`29013ebc 4883fb10        cmp     rbx,10h</span><br><span class=\"line\">ffffba07`29013ec0 7c90            jl      ffffba07`29013e52</span><br><span class=\"line\">ffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh</span><br><span class=\"line\">ffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]</span><br><span class=\"line\">ffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013ed4 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013edd 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax</span><br><span class=\"line\">ffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax</span><br><span class=\"line\">ffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax</span><br><span class=\"line\">ffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]</span><br><span class=\"line\">ffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax</span><br><span class=\"line\">ffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]</span><br><span class=\"line\">ffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0</span><br><span class=\"line\">ffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh</span><br><span class=\"line\">ffffba07`29013f28 e833e9ffff      call    ffffba07`29012860</span><br><span class=\"line\">ffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf</span><br><span class=\"line\">ffffba07`29013f32 cc              int     3</span><br><span class=\"line\">ffffba07`29013f33 cc              int     3</span><br><span class=\"line\">ffffba07`29013f34 4152            push    r10</span><br></pre></td></tr></table></figure>\n\n<p>导入到ida里看伪代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __noreturn <span class=\"title function_\">sub_180005148</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i v0; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 i; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __m128i v2; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// r9</span></span><br><span class=\"line\">  __m128i v4; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v5; <span class=\"comment\">// [rsp+30h] [rbp-19h] BYREF</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// [rsp+40h] [rbp-9h] BYREF</span></span><br><span class=\"line\">  __m128i v7; <span class=\"comment\">// [rsp+50h] [rbp+7h] BYREF</span></span><br><span class=\"line\">  __m128i v8; <span class=\"comment\">// [rsp+60h] [rbp+17h]</span></span><br><span class=\"line\">  __m128i v9; <span class=\"comment\">// [rsp+70h] [rbp+27h]</span></span><br><span class=\"line\">  __int128 v10; <span class=\"comment\">// [rsp+80h] [rbp+37h] BYREF</span></span><br><span class=\"line\">  __m128i v11; <span class=\"comment\">// [rsp+90h] [rbp+47h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v10 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">    ((<span class=\"type\">void</span> (__fastcall *)(__int128 *))((<span class=\"type\">char</span> *)&amp;loc_180005556 + <span class=\"number\">2</span>))(&amp;v10);</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D27B32F124FA1</span>i64;</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v0 = _mm_load_si128(&amp;v5);</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v5 = _mm_xor_si128(v0, v8);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v5);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>i64; i &lt; <span class=\"number\">16</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD324B10F0</span>i64;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">      v2 = _mm_load_si128(&amp;v6);</span><br><span class=\"line\">      v3 = *((<span class=\"type\">unsigned</span> __int8 *)&amp;v10 + i);</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v6 = _mm_xor_si128(v2, v9);</span><br><span class=\"line\">      MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v6, v3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920DF</span>i64;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v4 = _mm_load_si128(&amp;v7);</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v7 = _mm_xor_si128(v4, v11);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v7);</span><br><span class=\"line\">    sub_180003BF8(<span class=\"number\">2766</span>i64);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0x4B6D27B32F124FA1</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x4B6D1DDD4A7920D5</span></span><br><span class=\"line\">y2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/yQT7sZ1UnvRAcXk.png\" alt=\"{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}\"></p>\n<p>打印出了<code>token</code>基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/7zjZDi1Y9JPTAvX.png\" alt=\"image-20240919195412464\">)</p>\n<p>这里有个<code>mov edx,5</code>语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。</p>\n<p>那么怎么确定这个线程地址呢，如果通过<code>ZwQuerySystemInformation</code>枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了<code>ZwQuerySystemInformation</code>枚举，还有通过<code>PsLookupThreadByThreadId</code>函数从进程id和线程id查找的。</p>\n<p>那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png\" alt=\"image-20240919214001840\"></p>\n<p><img src=\"https://s2.loli.net/2024/10/02/1KTEVnb9uPWsjpr.png\" alt=\"image-20240919215044101\"></p>\n<p>诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid&#x3D;4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/TOdNVCHav1FIbol.png\" alt=\"image-20240919215837787\"></p>\n<p>貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用<code>PsCreateSystemThread</code>），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。</p>\n<p>这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid&#x3D;4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;header.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">PVOID MoudleBaseAddress[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG64 MoudleSize[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG ModuleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">ULONG Offset1 = <span class=\"number\">0x52</span>, Offset2 = <span class=\"number\">0xB5</span>, Offset3 = <span class=\"number\">0x125</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOLEAN <span class=\"title function_\">IsAddressInKnownModules</span><span class=\"params\">(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ModuleCount; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Address &gt;= ModuleBaseAddresses[i] &amp;&amp; Address &lt; (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PVOID <span class=\"title function_\">EnumSystemModulesForProcess</span><span class=\"params\">(HANDLE TargetProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>;</span><br><span class=\"line\">    PVOID processBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    PVOID moduleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询进程信息</span></span><br><span class=\"line\">    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询模块信息</span></span><br><span class=\"line\">    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(moduleBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">            ExFreePool(processBuffer);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历模块信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;</span><br><span class=\"line\">        ModuleCount = moduleInfo-&gt;ModulesCount;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; moduleInfo-&gt;ModulesCount; i++) &#123;</span><br><span class=\"line\">            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &amp;moduleInfo-&gt;Modules[i];</span><br><span class=\"line\">            MoudleBaseAddress[i] = moduleEntry-&gt;Base;</span><br><span class=\"line\">            MoudleSize[i] = moduleEntry-&gt;Size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历进程信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ProcessId == TargetProcessId) &#123;</span><br><span class=\"line\">                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; processInfo-&gt;NumberOfThreads; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        DbgPrint(<span class=\"string\">&quot;Find it:%p\\n&quot;</span>,threadInfo[i].StartAddress);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> threadInfo[i].StartAddress;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清理分配的内存</span></span><br><span class=\"line\">    ExFreePool(processBuffer);</span><br><span class=\"line\">    ExFreePool(moduleBuffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">UnloadDriver</span><span class=\"params\">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Unloaded\\n&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Loaded\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE targetPid = (HANDLE)<span class=\"number\">4</span>; <span class=\"comment\">// 系统进程的 PID</span></span><br><span class=\"line\">    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);</span><br><span class=\"line\"></span><br><span class=\"line\">    UCHAR valueToWrite = <span class=\"number\">0x00</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    UCHAR valueToRead = <span class=\"number\">0x05</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    ULONG numHasChanged = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DbgPrint(<span class=\"string\">&quot;numHasChanged:%d\\n&quot;</span>, numHasChanged);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>成功输出token2</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png\" alt=\"image-20240920125107119\"></p>\n<h2 id=\"（三）解题过程\"><a href=\"#（三）解题过程\" class=\"headerlink\" title=\"（三）解题过程\"></a>（三）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）</p>\n<p>要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的<code>C:\\2024GameSafeRace.token1</code>字符串是由十六进制异或得到的，也就是下面这些<br><img src=\"https://s2.loli.net/2024/10/02/suczGZU14mQHv8i.png\" alt=\"image-20240920145014956\"></p>\n<p>可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7082</span>) = <span class=\"number\">0x94e7c2136acc0e5c</span>;<span class=\"comment\">//</span></span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7093</span>) = <span class=\"number\">0x8207c5d1af9f3860</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x70F1</span>) = <span class=\"number\">0xa905cca9edcb138c</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7108</span>) = <span class=\"number\">0xa753b8236c56809a</span>;</span><br><span class=\"line\">        <span class=\"comment\">//C:\\Users\\15386\\Desktop\\flag.txt</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入hook成功后，成功在桌面的<code>flag.txt</code>输出token1</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/PIej3obTn5NLDyE.png\" alt=\"{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}\"></p>\n","site":{"data":{}},"excerpt":"<p>小Q是一个PC客户端安全爱好者。有一天他得到了一个未知工具，含有一个exe、一个sys和一份使用说明。说明写道:ACE的宝库钥匙由两串 token组成．运行这组程序．它们会将两串 token藏于内存中。宝库有两位守护者会制裁使用违禁工具的冒险家，在寻宝时务必谨慎小心。","more":"</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><img src=\"https://s2.loli.net/2024/09/28/PxoZ4NGc7LQS1OB.png\" alt=\"image-20240923132824209\"></p>\n<h2 id=\"（一）解题过程\"><a href=\"#（一）解题过程\" class=\"headerlink\" title=\"（一）解题过程\"></a>（一）解题过程</h2><p>拿到hack.exe，浅分析一下发现加了VM，并且有检测黑客工具的行为，检测到了之后即使关闭黑客程序也会影响程序正常运行，但是xdbg稍微改一下还是可以动调的，在xdbg里下一些可能的函数断点，我这里在这些地方下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/1zITWHRrLqisX2C.png\" alt=\"image-20240923131144727\"></p>\n<p>运行发现程序会多次在<code>WriteProcessMemory</code>下断下，hook一下观察传参</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T * lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> fileName[<span class=\"number\">12</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(fileName, <span class=\"string\">&quot;out%d.txt&quot;</span>, (<span class=\"type\">int</span>)hProcess % <span class=\"number\">1000</span>);</span><br><span class=\"line\">    HANDLE hFile = CreateFile(fileName, FILE_APPEND_DATA, FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;CreateFile Fail&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SetFilePointer(hFile, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, FILE_END);</span><br><span class=\"line\">    DWORD bytesWritten;</span><br><span class=\"line\">    BOOL result = WriteFile(hFile, lpBuffer, nSize, &amp;bytesWritten, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    CloseHandle(hFile);</span><br><span class=\"line\">    DBGMGEBOX(<span class=\"string\">&quot;findProcess WriteProcessMemory:%p,size:%d\\n&quot;</span>, hProcess,nSize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里输出了三个txt文件</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FYlRe6CN8JbAD5X.png\" alt=\"image-20240923131546102\"></p>\n<p>其中out200.txt文件有明显的PE头</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/odTGmIHf2JngXks.png\" alt=\"image-20240923131748329\"></p>\n<p>去除前面的字节，把文件丢到DIE里分析一下发现是dll64文件并且貌似没加壳，所以hack.exe通过<code>WriteProcessMemory</code>往某个进程写入了一个dll?怀疑是远程注入，至于做了什么，有可能跟token有关，继续分析。</p>\n<p>ida64打开发现程序的dllMain入口还是被加密了</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/q4HkxMiJRA1rlua.png\" alt=\"image-20240923132428865\"></p>\n<p>还是继续动调，随便找了个64位的可执行文件，拖到X64dbg里运行，直接用xdbg的注入方式将out200.dll注入进程，在</p>\n<p>入口点下断点，并且对一些可疑的WINDOWS API下断观察进程行为</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/cyxCKND7nm63iah.png\" alt=\"image-20240913213116556\"></p>\n<p>这里我对下面这几个API下了断点</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wLHNXjtrgEUc7iy.png\" alt=\"image-20240913213203300\"></p>\n<p>运行，第一次成功在openProcess函数断下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/p8UM1yT3WJXagjY.png\" alt=\"image-20240913213252406\"></p>\n<p>观察传参窗口，找到了一个系统进程名称字符串<code>winlogon.exe</code>，而这里调用的是openProcess，疑似是对系统进程winlogon.exe做了一些操作。继续分析，运行到返回，回溯一层函数，找到一段没有被加密的代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/FotWdRHu7mL3A2X.png\" alt=\"image-20240913213951735\"></p>\n<p>汇编代码不是很好看，根据偏移在IDA里反汇编看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_1800063D0</span><span class=\"params\">(_DWORD *Dst, DWORD dwProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i si128; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __m128i v10; <span class=\"comment\">// xmm2</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> v14; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v16; <span class=\"comment\">// r14d</span></span><br><span class=\"line\">  HANDLE Toolhelp32Snapshot; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  HANDLE v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v21; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  CHAR Caption[<span class=\"number\">16</span>]; <span class=\"comment\">// [rsp+40h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !dwProcessId )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0xE795A71250E2465A</span>ui64;</span><br><span class=\"line\">    si128 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    v6 = _mm_xor_si128(si128, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD5301FE45158</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = v6;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xBF19D3ADD5D97A59</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xBD1C9CA3F4C12EC9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C05763438E84</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MessageBoxA(<span class=\"number\">0</span>i64, (LPCSTR)(_RBP + <span class=\"number\">32</span>), (LPCSTR)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">0</span>);</span><br><span class=\"line\">LABEL_3:</span><br><span class=\"line\">    GetLastError();</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)_RBP = <span class=\"number\">0x88D6871250E2465A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = <span class=\"number\">0xC65BF98DB9906C58</span>ui64;</span><br><span class=\"line\">    *(__m128i *)_RBP = _mm_xor_si128(</span><br><span class=\"line\">                         _mm_load_si128((<span class=\"type\">const</span> __m128i *)_RBP),</span><br><span class=\"line\">                         *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sub_180006A00((<span class=\"type\">void</span> *)((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> __int8)sub_180006FC0() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>) = <span class=\"number\">0x52C9FCDC77FF5FC3</span>i64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xDDD2E92971C27548</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA43EB7C9E8CF4E1C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xA62FD5B4C980079C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xD55585772756849A</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x40</span>) = <span class=\"number\">0x52C9FCDC7DDE2DAC</span>i64;</span><br><span class=\"line\">    v10 = _mm_load_si128((<span class=\"type\">const</span> __m128i *)(_RBP + <span class=\"number\">64</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C8</span>) = <span class=\"number\">0x44F651D568826090</span>i64;</span><br><span class=\"line\">    _XMM2 = _mm_xor_si128(v10, *(__m128i *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1C0</span>));</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">      vmovdqa [rbp+<span class=\"number\">210</span>h+var_1D0], xmm2</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v14 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dwProcessId == <span class=\"number\">-1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = GetCurrentProcessId();</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Dst[<span class=\"number\">34</span>] = dwProcessId;</span><br><span class=\"line\">    v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">    *((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v18 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x38</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0x84FAD53051F54450</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A0</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA92981ACBCD97A59</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>) = <span class=\"number\">0xCF59BCC699AA419B</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1A8</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B0</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">      *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x1B8</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">      __asm</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        vmovdqu ymm0, [rbp+<span class=\"number\">210</span>h+var_70]</span><br><span class=\"line\">        vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">210</span>h+Text]</span><br><span class=\"line\">        vmovdqa ymmword ptr [rbp+<span class=\"number\">210</span>h+Text], ymm1</span><br><span class=\"line\">        vzeroupper</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sub_180006A00((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">32</span>));<span class=\"comment\">//打印报错信息</span></span><br><span class=\"line\">      <span class=\"keyword\">goto</span> LABEL_3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Dst[<span class=\"number\">30</span>] = <span class=\"number\">0x1FFFFF</span>;</span><br><span class=\"line\">  v15 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v15;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( *((_BYTE *)Dst + v15) );</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v15 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v16 = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">    Toolhelp32Snapshot = CreateToolhelp32Snapshot(<span class=\"number\">2u</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( Toolhelp32Snapshot != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = <span class=\"number\">304</span>;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"type\">void</span> *)(_RBP + <span class=\"number\">100</span>), <span class=\"number\">0</span>, <span class=\"number\">0x12C</span>ui64);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x68</span>) != v16 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( !Process32Next(Toolhelp32Snapshot, (LPPROCESSENTRY32)(_RBP + <span class=\"number\">96</span>)) )</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> LABEL_20;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v14;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">140</span> + v14) );</span><br><span class=\"line\">        memmove(Dst, (<span class=\"type\">const</span> <span class=\"type\">void</span> *)(_RBP + <span class=\"number\">140</span>), v14);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">LABEL_20:</span><br><span class=\"line\">      CloseHandle(Toolhelp32Snapshot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">18</span>) = sub_1800068D0(Dst, Dst);</span><br><span class=\"line\">  v21 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  *(_DWORD *)(((<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">8</span>) = Dst[<span class=\"number\">34</span>];</span><br><span class=\"line\">  *(_QWORD *)_RBP = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  EnumWindows(EnumFunc, (<span class=\"type\">unsigned</span> __int64)Caption &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64);</span><br><span class=\"line\">  result = *(_QWORD *)_RBP;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_QWORD *)_RBP )</span><br><span class=\"line\">    v21 = *(_QWORD *)_RBP;</span><br><span class=\"line\">  *((_QWORD *)Dst + <span class=\"number\">16</span>) = v21;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码一次进行了获取进程pid，打开进程，遍历模块等操作，并且在函数失败后做了一些奇奇怪怪的东西，对一些地址赋上了一些64位的值，猜测是隐藏字符串来打印调试信息用的，再通过messagebox和outputDebugString给出调试信息，显示打开进程失败，猜测是因为hack.exe启动是管理员启动，这里失去了管理员权限。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yOzb7VrFe6lBosK.png\" alt=\"image-20240913221222730\"></p>\n<p>分析完这个函数，继续回溯一层，运行到返回，定位到这个地方</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/utPUyzjqlIkWcCi.png\" alt=\"image-20240913221520425\"></p>\n<p>继续根据偏移转到IDA里看反汇编</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sub_180001990</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v0; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  DWORD v1; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  __m128i Dst; <span class=\"comment\">// [rsp+20h] [rbp-48h] BYREF</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// [rsp+30h] [rbp-38h]</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// [rsp+38h] [rbp-30h]</span></span><br><span class=\"line\">  __m128i Src; <span class=\"comment\">// [rsp+40h] [rbp-28h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x89FAC00F53FE5D68</span>ui64;</span><br><span class=\"line\">  Src.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0xC65BF3E9F9D26C12</span>ui64;</span><br><span class=\"line\">  Src = _mm_xor_si128(_mm_load_si128(&amp;Src), Dst);</span><br><span class=\"line\">  v0 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ++v0;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( Src.m128i_i8[v0] );</span><br><span class=\"line\">  memmove(dword_1800349A0, &amp;Src, v0);</span><br><span class=\"line\">  Dst.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v4 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  v5 = <span class=\"number\">15</span>i64;</span><br><span class=\"line\">  sub_180004770(&amp;Dst, &amp;Src, v0);</span><br><span class=\"line\">  v1 = sub_1800070A0(&amp;Dst);</span><br><span class=\"line\">  sub_1800063D0(dword_1800349A0, v1);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> atexit(sub_180020C90);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面应该是一个加密的字符串操作，用python打印出字符串</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">x2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x89FAC00F53FE5D68</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E9F9D26C12</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"comment\">#Result 1: nogolniw</span></span><br><span class=\"line\"><span class=\"comment\">#Result 2: exe.</span></span><br></pre></td></tr></table></figure>\n\n<p>得到的刚好是winlogon.exe字符串，然后程序将这个字符串转移到了dword_1800349A0全局变量中，目的应该是隐藏字符串，接着sub_180004770函数也是一个类似memmove操作，把这个字符串传到了Dst局部变量中，接着在sub_1800070A0中传入这个字符串，貌似是在根据字符串获取进程PID，接着调用sub_1800063D0函数根据pid打开进程，并将进程句柄存储到了某个地方</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v18 = OpenProcess(<span class=\"number\">0x1FFFFF</span>u, <span class=\"number\">0</span>, dwProcessId);</span><br><span class=\"line\">*((_QWORD *)Dst + <span class=\"number\">13</span>) = v18;</span><br></pre></td></tr></table></figure>\n\n<p>随后return exit退出。</p>\n<p>随后我在退出函数传参的时候看到了一个hProcess</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/YchVMS4rPnZGdai.png\" alt=\"image-20240914102337797\"></p>\n<p>一个全局变量，很有可能在其他地方对句柄进行了读取，交叉引用一下定位到如下函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sub_180007C10</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  HANDLE v1; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *v2; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int128 v3; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int128 v4; <span class=\"comment\">// xmm1</span></span><br><span class=\"line\">  HANDLE FileA; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  _BYTE *v9; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v10; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  _QWORD *v11; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">char</span> Buffer; <span class=\"comment\">// [rsp+60h] [rbp+0h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _RBP = (<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( byte_180032C00 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !byte_180034961 &amp;&amp; !byte_180034960 )</span><br><span class=\"line\">      sub_1800041D0();</span><br><span class=\"line\">    v1 = hProcess;</span><br><span class=\"line\">    v2 = (<span class=\"type\">void</span> *)(qword_180034968 + <span class=\"number\">2766</span>);</span><br><span class=\"line\">    *(_BYTE *)_RBP = <span class=\"number\">15</span>;</span><br><span class=\"line\">    WriteProcessMemory(v1, v2, (LPCVOID)((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64), <span class=\"number\">1u</span>i64, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    byte_180032C00 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>) = <span class=\"number\">0xAA32D3B2B7C50388</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>) = <span class=\"number\">0xA0A195500DCC0E5C</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x18</span>) = <span class=\"number\">0x943E9588CFCF645D</span>ui64;</span><br><span class=\"line\">    v3 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x10</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x28</span>) = <span class=\"number\">0xA727C0574231D098</span>ui64;</span><br><span class=\"line\">    v4 = *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x20</span>);</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x80</span>) = <span class=\"number\">0xE795A7603F90341F</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x60</span>) = v3;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x88</span>) = <span class=\"number\">0xC65BF3E99CAA093C</span>ui64;</span><br><span class=\"line\">    *(_OWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x70</span>) = v4;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x90</span>) = <span class=\"number\">0xCF59BCC699A060E9</span>ui64;</span><br><span class=\"line\">    *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x98</span>) = <span class=\"number\">0xA727C0574231E1F6</span>ui64;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vmovdqu ymm0, [rbp+<span class=\"number\">0</span>D0h+var_50]</span><br><span class=\"line\">      vpxor   ymm1, ymm0, ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName]</span><br><span class=\"line\">      vmovdqa ymmword ptr [rbp+<span class=\"number\">0</span>D0h+FileName], ymm1</span><br><span class=\"line\">      vzeroupper</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( FileA != (HANDLE)<span class=\"number\">-1</span>i64 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ((<span class=\"type\">void</span> (__fastcall *)(<span class=\"type\">unsigned</span> __int64))loc_180007A20)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      v8 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>) &lt; <span class=\"number\">0x10</span>ui64 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( *(_BYTE *)(_RBP + <span class=\"number\">48</span> + v8) );</span><br><span class=\"line\">        v9 = (_BYTE *)(_RBP + <span class=\"number\">48</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v9 = *(_BYTE **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          ++v8;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( v9[v8] );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      WriteFile(FileA, v9, v8, (LPDWORD)(_RBP + <span class=\"number\">8</span>), <span class=\"number\">0</span>i64);</span><br><span class=\"line\">      CloseHandle(FileA);</span><br><span class=\"line\">      v10 = *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x48</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v10 &gt;= <span class=\"number\">0x10</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v11 = *(_QWORD **)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v10 + <span class=\"number\">1</span> &gt;= <span class=\"number\">0x1000</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v11 = (_QWORD *)*(v11 - <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> __int64)(*(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;Buffer &amp; <span class=\"number\">0xFFFFFFFFFFFFFFE0</span>ui64) + <span class=\"number\">0x30</span>)</span><br><span class=\"line\">                                - (_QWORD)v11</span><br><span class=\"line\">                                - <span class=\"number\">8</span>i64) &gt; <span class=\"number\">0x1F</span> )</span><br><span class=\"line\">            invalid_parameter_noinfo_noreturn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j_j_free(v11);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到了有WriteProcessMemory写入hProcess内存操作，CreateFileA，WriteFile，打开和写入文件操作，但是并没有找到hProcess的赋值语句，也就是说这个进程句柄还不知道是谁的，猜测赋值被隐藏了，但是可以猜测可能是winlogon.exe进程句柄。byte_180032C00是一个全局的标志变量，强制函数只能执行一次，对应的是运行程序时仅一次的初始化操作。接着看一下CreateFileA函数，同样的文件名被隐藏了，python解析一下</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0xA0A195500DCC0E5C</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x943E9588CFCF645D</span></span><br><span class=\"line\">x3 = <span class=\"number\">0xAA32D3B2B7C50388</span></span><br><span class=\"line\">x4 = <span class=\"number\">0xA727C0574231D098</span></span><br><span class=\"line\">y1 = <span class=\"number\">0xE795A7603F90341F</span></span><br><span class=\"line\">y2 = <span class=\"number\">0xC65BF3E99CAA093C</span></span><br><span class=\"line\">y3 = <span class=\"number\">0xCF59BCC699A060E9</span></span><br><span class=\"line\">y4 = <span class=\"number\">0xA727C0574231E1F6</span></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\">result3 = hex_xor_to_string(x3, y3)</span><br><span class=\"line\">result4 = hex_xor_to_string(x4, y4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 3:&quot;</span>, result3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 4:&quot;</span>, result4)</span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>] + result3[::-<span class=\"number\">1</span>] + result4[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/iUIm3cTYSkFbf7o.png\" alt=\"image-20240914110434860\"></p>\n<p>整个拼起来是字符串<code>C:\\2024GameSafeRace.token1</code>，应该是创建了一个文件，然后向这个文件写入了token1了，接着往下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/CMJuG1ms6yO5Xfv.png\" alt=\"image-20240914110826942\"></p>\n<p>loc_180007A20这个函数内部被加密了，猜测是对token1的解密过程，然后通过WriteFile写入<code>C:\\2024GameSafeRace.token1</code>中，并不是很像去分析这个函数，直接加载驱动看看能不能直接运行得到2024GameSafeRace.token1文件。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vIAZxulSGOg4Pqo.png\" alt=\"image-20240914111407201\"></p>\n<p>找到下没找到，回头看看CreateFileA函数，核查一下后面几个参数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileA = CreateFileA((LPCSTR)(_RBP + <span class=\"number\">96</span>), <span class=\"number\">0x40000000</span>u, <span class=\"number\">0</span>, <span class=\"number\">0</span>i64, <span class=\"number\">3u</span>, <span class=\"number\">0x80</span>u, <span class=\"number\">0</span>i64);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/09/28/Sn2xPDkH6ZvJoh8.png\" alt=\"image-20240914111653640\"></p>\n<p>看来是参数在作怪，CreateFileA函数传入<strong>OPEN_EXISTING</strong>参数，如果没有指定文件，则函数会返回失败，那也好办，自己创建一个就好了。</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/PNeHIjpgYOF47KD.png\" alt=\"image-20240914112419617\"></p>\n<p>C:\\2024GameSafeRace.token1成功被写入</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Dvf2c5RTaLNyHnY.png\" alt=\"image-20240914112536772\"></p>\n<p>010打开找到token1:<code>757F4749AEBB1891EF5AC2A9B5439CEA</code></p>\n<p>token2的寻找就偏简单了，加载驱动后留意一下dbgView的打印信息就可以获取</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/ErcPg4bZ8KJ2uIV.png\" alt=\"image-20240914113718466\"></p>\n<p>组合一下就是token2：<code>803f14a24d64f3e697957c252e3a5686</code></p>\n<h2 id=\"（二）解题过程\"><a href=\"#（二）解题过程\" class=\"headerlink\" title=\"（二）解题过程\"></a>（二）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让两段token输出成功。（满分2分）</p>\n<p>根据之前分析的token1，我们可以知道程序会在CreateFileA后解密token1然后写入到<code>C:\\2024GameSafeRace.token1</code>中，但是会因为CreateFileA参数<code>OPEN_EXISTING</code>条件不满足而失败，所以我们只需要修改这个传参，改成<code>OPEN_ALWAYS</code>，即可实现输出token1，那我们只需要hook <code>CreateFileA</code>函数修改传参即可，但是有个问题，因为不是hack.exe本身调用<code>CreateFileA</code>函数，而是hack.exe注入了一个dll到winlogon.exe，然后再winlogon.exe里调用<code>CreateFileA</code>函数，所以我们可以考虑在注入前修改<code>WriteProcessMemory</code>函数参数buffer，从而在注入前patch dll，或者编写代码直接注入winlogon.exe，hook CreateFileA函数修改传参，但是考虑到第二种方式可能不被允许，winlogon.exe毕竟是系统进程，题目应该是要我们通过patch dll的方式解题。</p>\n<p>这里我们要patch 传参，通过ida找到传参的汇编代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/9EUsBXSvDi1nZa4.png\" alt=\"image-20240920142928600\"></p>\n<p>在winhex里找到对应所在文件偏移<br><img src=\"https://s2.loli.net/2024/10/02/5lR3vqSQVkiMU6a.png\" alt=\"image-20240920143006628\"></p>\n<p>也就是在0x7171处OPEN_EXISTING:0x3是要patch的地方，把这个参数修改成OPEN_ALWAYS:0x4即可。下面编写代码实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功输出token1文件：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/vJwKBiXGR32na81.png\" alt=\"image-20240914120306770\"></p>\n<p>然后是token2，既然是内核输出，那只能是在ace.sys里做点手脚，DIE查壳发现ace.sys的大部分代码都被加壳过了，静态代码不好看，只能先猜测token2的输出调用了DbgPrint或者DbgPrintEx，因为之前输出token2的时候开启了Verbose Kernel outPut，猜测之所以正常输出失败是因为DbgPrintEx的level值太低，仅将字符串传递给内核调试器，不执行输出操作。</p>\n<p>hook DbgPrintEx函数看一眼传参。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DbgPrintEx ComponentId:%lu,Level:%lu\\n&quot;</span>,dbgFilter, ComponentId, Level);</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, Level, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>,dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现加载ace驱动后，有大量的level:5的调试信息输出</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/rBGdkLCpEIY6tnF.png\" alt=\"image-20240918212128643\"></p>\n<p>也就是说，程序通过设置调试信息的重要级别来控制调试信息是否正常输出，于是可以提高level级别来输出token2，那么最简单的方式就是hook之后修改level后传回去，编写代码hook测试下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"><span class=\"type\">char</span> buffer[<span class=\"number\">1024</span>]; </span><br><span class=\"line\">ULONG <span class=\"title function_\">myDbgPrintEx</span><span class=\"params\">(ULONG ComponentId, ULONG Level, PCSTR Format, ...)</span> &#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    va_start(args, Format);</span><br><span class=\"line\">    <span class=\"built_in\">vsprintf</span>(buffer, Format, args);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    NTSTATUS s = func(ComponentId, <span class=\"number\">0</span>, <span class=\"string\">&quot;%s&quot;</span>, buffer);<span class=\"comment\">//修改level为0</span></span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;Kvancy: DriverUnload\\n&quot;</span>);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = DbgPrintEx;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myDbgPrintEx);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;Kvancy: DriverEntry\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/ucgDYVePtZaO9dH.png\" alt=\"{4981D7A9-1EAA-4A38-9280-429D63ECABF9}\"></p>\n<p>成功输出token2，但是根据题目要求是不能修改系统模块代码的，也就是说hook内核函数的方法不能过这道题，还是得想想别的方法。现在已知的ace.sys的行为就是驱动会在被加载之后做了某些操作会使得系统持续调用DbgPrintEx来输出token2，但是ace.sys其实做了某种操作后就被卸载掉了，如下图所示。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/itpCfgunESqZQPw.png\" alt=\"{170126A6-1C28-4BF3-AB47-AB2397C76595}\"></p>\n<p>可以想到就是说驱动启动了一个线程或者进程，让该任务持续输出token2，创建完随后再卸载自己并且不停止这个线程或者进程。先枚举进程看看有没有奇怪的进程出现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOID <span class=\"title function_\">WriteToFile</span><span class=\"params\">(PUNICODE_STRING FilePath, PCHAR Data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OBJECT_ATTRIBUTES objAttr;</span><br><span class=\"line\">    IO_STATUS_BLOCK ioStatusBlock;</span><br><span class=\"line\">    HANDLE fileHandle;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    UNICODE_STRING unicodeFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">    RtlInitUnicodeString(&amp;unicodeFilePath, FilePath-&gt;Buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    InitializeObjectAttributes(&amp;objAttr, &amp;unicodeFilePath, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwCreateFile(</span><br><span class=\"line\">        &amp;fileHandle,</span><br><span class=\"line\">        FILE_APPEND_DATA | SYNCHRONIZE,</span><br><span class=\"line\">        &amp;objAttr,</span><br><span class=\"line\">        &amp;ioStatusBlock,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        FILE_ATTRIBUTE_NORMAL,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        FILE_OPEN_IF,</span><br><span class=\"line\">        FILE_SYNCHRONOUS_IO_NONALERT,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> dataLength = <span class=\"built_in\">strlen</span>(Data);</span><br><span class=\"line\">        ZwWriteFile(fileHandle, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;ioStatusBlock, Data, (ULONG)dataLength, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        ZwClose(fileHandle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to create file: %08X\\n&quot;</span>, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">EnumProcesses</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    PVOID buffer;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>; <span class=\"comment\">// Initial buffer size, can grow if needed</span></span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\">    CHAR logBuffer[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    UNICODE_STRING filePath;</span><br><span class=\"line\">    RtlInitUnicodeString(&amp;filePath, <span class=\"string\">L&quot;\\\\??\\\\C:\\\\Users\\\\15386\\\\Desktop\\\\1.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(buffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        buffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!buffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, buffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)buffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ImageName.Buffer) &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: %wZ\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId, &amp;processInfo-&gt;ImageName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                _snprintf(logBuffer, <span class=\"keyword\">sizeof</span>(logBuffer), <span class=\"string\">&quot;Process ID: %lu, Name: [System Process]\\n&quot;</span>, (ULONG)(ULONG_PTR)processInfo-&gt;ProcessId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            WriteToFile(&amp;filePath, logBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExFreePool(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果发现好像没有奇怪的进程被创建出来，那么有可能是驱动利用<code>PsCreateSystemThread</code>创建了一个内核线程。hook<code>PsCreateSystemThread</code>函数看看驱动加载时是否调用了这个函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntdef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntstatus.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntddk.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;R0Hook.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbgFilter <span class=\"string\">&quot;Kvancy:&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">ULONG</span><span class=\"params\">(*FuncPtr)</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext)</span>;</span><br><span class=\"line\">HOOK_MANAGER hookManager;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">myPsCreateSystemThread</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PHANDLE            ThreadHandle,</span></span><br><span class=\"line\"><span class=\"params\">    ULONG              DesiredAccess,</span></span><br><span class=\"line\"><span class=\"params\">    POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE             ProcessHandle,</span></span><br><span class=\"line\"><span class=\"params\">    PCLIENT_ID         ClientId,</span></span><br><span class=\"line\"><span class=\"params\">    PKSTART_ROUTINE    StartRoutine,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID              StartContext</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">    FuncPtr func = (FuncPtr)hookManager.target;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s myPsCreateSystemThread StartRoutine:%p\\n&quot;</span>, dbgFilter, StartRoutine);</span><br><span class=\"line\">    NTSTATUS s = func(ThreadHandle, DesiredAccess, ObjectAttributes, ProcessHandle, ClientId, StartRoutine, StartContext);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span> &#123;</span><br><span class=\"line\">    kPrint(<span class=\"string\">&quot;%s DriverUnload\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    Unhook(&amp;hookManager);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">    PVOID dbgPrintEx = PsCreateSystemThread;</span><br><span class=\"line\">    InitializeHookManager(&amp;hookManager, dbgPrintEx, myPsCreateSystemThread);</span><br><span class=\"line\">    ApplyHook(&amp;hookManager);</span><br><span class=\"line\">    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;%s DriverEntry\\n&quot;</span>, dbgFilter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/fkDhVr5juzyYTMS.png\" alt=\"{81A1CDF1-D6A3-454A-BAA1-BAE048F8B7F3}\"></p>\n<p>发现在token2输出前确实有PsCreateSystemThread函数调用，虽然不确定是不是ace.sys创建的。在windbg里反汇编看看线程函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; u FFFFBA0729013DB0 l 100</span><br><span class=\"line\">ffffba07`29013db0 488bc4          mov     rax,rsp</span><br><span class=\"line\">ffffba07`29013db3 48895808        mov     qword ptr [rax+8],rbx</span><br><span class=\"line\">ffffba07`29013db7 48897818        mov     qword ptr [rax+18h],rdi</span><br><span class=\"line\">ffffba07`29013dbb 4c897020        mov     qword ptr [rax+20h],r14</span><br><span class=\"line\">ffffba07`29013dbf 55              push    rbp</span><br><span class=\"line\">ffffba07`29013dc0 488d68a1        lea     rbp,[rax-5Fh]</span><br><span class=\"line\">ffffba07`29013dc4 4881eca0000000  sub     rsp,0A0h</span><br><span class=\"line\">ffffba07`29013dcb 48bf4e93328b546b331e mov rdi,1E336B548B32934Eh</span><br><span class=\"line\">ffffba07`29013dd5 49bed520794add1d6d4b mov r14,4B6D1DDD4A7920D5h</span><br><span class=\"line\">ffffba07`29013ddf 0f57c0          xorps   xmm0,xmm0</span><br><span class=\"line\">ffffba07`29013de2 488d4d37        lea     rcx,[rbp+37h]</span><br><span class=\"line\">ffffba07`29013de6 0f114537        movups  xmmword ptr [rbp+37h],xmm0</span><br><span class=\"line\">ffffba07`29013dea e8d1030000      call    ffffba07`290141c0</span><br><span class=\"line\">ffffba07`29013def 48b8a14f122fb3276d4b mov rax,4B6D27B32F124FA1h</span><br><span class=\"line\">ffffba07`29013df9 4c8d45e7        lea     r8,[rbp-19h]</span><br><span class=\"line\">ffffba07`29013dfd 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e01 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e06 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e0a 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e0c 488945e7        mov     qword ptr [rbp-19h],rax</span><br><span class=\"line\">ffffba07`29013e10 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e14 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e18 488945ef        mov     qword ptr [rbp-11h],rax</span><br><span class=\"line\">ffffba07`29013e1c 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e20 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e24 48894517        mov     qword ptr [rbp+17h],rax</span><br><span class=\"line\">ffffba07`29013e28 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e2c 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e30 660f6f45e7      movdqa  xmm0,xmmword ptr [rbp-19h]</span><br><span class=\"line\">ffffba07`29013e35 4889451f        mov     qword ptr [rbp+1Fh],rax</span><br><span class=\"line\">ffffba07`29013e39 660fef4517      pxor    xmm0,xmmword ptr [rbp+17h]</span><br><span class=\"line\">ffffba07`29013e3e 488b0543330000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013e45 660f7f45e7      movdqa  xmmword ptr [rbp-19h],xmm0</span><br><span class=\"line\">ffffba07`29013e4a ff15c8210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013e50 33db            xor     ebx,ebx</span><br><span class=\"line\">ffffba07`29013e52 48b8f0104b32dd1d6d4b mov rax,4B6D1DDD324B10F0h</span><br><span class=\"line\">ffffba07`29013e5c 4c8d45f7        lea     r8,[rbp-9]</span><br><span class=\"line\">ffffba07`29013e60 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013e64 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013e69 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e6d 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013e6f 488945f7        mov     qword ptr [rbp-9],rax</span><br><span class=\"line\">ffffba07`29013e73 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e77 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e7b 488945ff        mov     qword ptr [rbp-1],rax</span><br><span class=\"line\">ffffba07`29013e7f 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013e83 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e87 48894527        mov     qword ptr [rbp+27h],rax</span><br><span class=\"line\">ffffba07`29013e8b 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013e8f 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013e93 660f6f45f7      movdqa  xmm0,xmmword ptr [rbp-9]</span><br><span class=\"line\">ffffba07`29013e98 440fb64c1d37    movzx   r9d,byte ptr [rbp+rbx+37h]</span><br><span class=\"line\">ffffba07`29013e9e 4889452f        mov     qword ptr [rbp+2Fh],rax</span><br><span class=\"line\">ffffba07`29013ea2 660fef4527      pxor    xmm0,xmmword ptr [rbp+27h]</span><br><span class=\"line\">ffffba07`29013ea7 488b05da320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013eae 660f7f45f7      movdqa  xmmword ptr [rbp-9],xmm0</span><br><span class=\"line\">ffffba07`29013eb3 ff155f210000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013eb9 48ffc3          inc     rbx</span><br><span class=\"line\">ffffba07`29013ebc 4883fb10        cmp     rbx,10h</span><br><span class=\"line\">ffffba07`29013ec0 7c90            jl      ffffba07`29013e52</span><br><span class=\"line\">ffffba07`29013ec2 48b8df20794add1d6d4b mov rax,4B6D1DDD4A7920DFh</span><br><span class=\"line\">ffffba07`29013ecc 4c8d4507        lea     r8,[rbp+7]</span><br><span class=\"line\">ffffba07`29013ed0 4889456f        mov     qword ptr [rbp+6Fh],rax</span><br><span class=\"line\">ffffba07`29013ed4 ba05000000      mov     edx,5</span><br><span class=\"line\">ffffba07`29013ed9 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013edd 33c9            xor     ecx,ecx</span><br><span class=\"line\">ffffba07`29013edf 48894507        mov     qword ptr [rbp+7],rax</span><br><span class=\"line\">ffffba07`29013ee3 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013ee7 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013eeb 4889450f        mov     qword ptr [rbp+0Fh],rax</span><br><span class=\"line\">ffffba07`29013eef 4c89756f        mov     qword ptr [rbp+6Fh],r14</span><br><span class=\"line\">ffffba07`29013ef3 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013ef7 48894547        mov     qword ptr [rbp+47h],rax</span><br><span class=\"line\">ffffba07`29013efb 48897d6f        mov     qword ptr [rbp+6Fh],rdi</span><br><span class=\"line\">ffffba07`29013eff 488b456f        mov     rax,qword ptr [rbp+6Fh]</span><br><span class=\"line\">ffffba07`29013f03 660f6f4507      movdqa  xmm0,xmmword ptr [rbp+7]</span><br><span class=\"line\">ffffba07`29013f08 4889454f        mov     qword ptr [rbp+4Fh],rax</span><br><span class=\"line\">ffffba07`29013f0c 660fef4547      pxor    xmm0,xmmword ptr [rbp+47h]</span><br><span class=\"line\">ffffba07`29013f11 488b0570320000  mov     rax,qword ptr [ffffba07`29017188]</span><br><span class=\"line\">ffffba07`29013f18 660f7f4507      movdqa  xmmword ptr [rbp+7],xmm0</span><br><span class=\"line\">ffffba07`29013f1d ff15f5200000    call    qword ptr [ffffba07`29016018]</span><br><span class=\"line\">ffffba07`29013f23 b9ce0a0000      mov     ecx,0ACEh</span><br><span class=\"line\">ffffba07`29013f28 e833e9ffff      call    ffffba07`29012860</span><br><span class=\"line\">ffffba07`29013f2d e9adfeffff      jmp     ffffba07`29013ddf</span><br><span class=\"line\">ffffba07`29013f32 cc              int     3</span><br><span class=\"line\">ffffba07`29013f33 cc              int     3</span><br><span class=\"line\">ffffba07`29013f34 4152            push    r10</span><br></pre></td></tr></table></figure>\n\n<p>导入到ida里看伪代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __noreturn <span class=\"title function_\">sub_180005148</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __m128i v0; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 i; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __m128i v2; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// r9</span></span><br><span class=\"line\">  __m128i v4; <span class=\"comment\">// xmm0</span></span><br><span class=\"line\">  __m128i v5; <span class=\"comment\">// [rsp+30h] [rbp-19h] BYREF</span></span><br><span class=\"line\">  __m128i v6; <span class=\"comment\">// [rsp+40h] [rbp-9h] BYREF</span></span><br><span class=\"line\">  __m128i v7; <span class=\"comment\">// [rsp+50h] [rbp+7h] BYREF</span></span><br><span class=\"line\">  __m128i v8; <span class=\"comment\">// [rsp+60h] [rbp+17h]</span></span><br><span class=\"line\">  __m128i v9; <span class=\"comment\">// [rsp+70h] [rbp+27h]</span></span><br><span class=\"line\">  __int128 v10; <span class=\"comment\">// [rsp+80h] [rbp+37h] BYREF</span></span><br><span class=\"line\">  __m128i v11; <span class=\"comment\">// [rsp+90h] [rbp+47h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v10 = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">    ((<span class=\"type\">void</span> (__fastcall *)(__int128 *))((<span class=\"type\">char</span> *)&amp;loc_180005556 + <span class=\"number\">2</span>))(&amp;v10);</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D27B32F124FA1</span>i64;</span><br><span class=\"line\">    v5.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v0 = _mm_load_si128(&amp;v5);</span><br><span class=\"line\">    v8.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v5 = _mm_xor_si128(v0, v8);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v5);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>i64; i &lt; <span class=\"number\">16</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD324B10F0</span>i64;</span><br><span class=\"line\">      v6.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">      v2 = _mm_load_si128(&amp;v6);</span><br><span class=\"line\">      v3 = *((<span class=\"type\">unsigned</span> __int8 *)&amp;v10 + i);</span><br><span class=\"line\">      v9.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">      v6 = _mm_xor_si128(v2, v9);</span><br><span class=\"line\">      MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v6, v3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920DF</span>i64;</span><br><span class=\"line\">    v7.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">0</span>] = <span class=\"number\">0x4B6D1DDD4A7920D5</span>i64;</span><br><span class=\"line\">    v4 = _mm_load_si128(&amp;v7);</span><br><span class=\"line\">    v11.m128i_i64[<span class=\"number\">1</span>] = <span class=\"number\">0x1E336B548B32934E</span>i64;</span><br><span class=\"line\">    v7 = _mm_xor_si128(v4, v11);</span><br><span class=\"line\">    MEMORY[<span class=\"number\">0x31305A8047353130</span>](<span class=\"number\">0</span>i64, <span class=\"number\">5</span>i64, &amp;v7);</span><br><span class=\"line\">    sub_180003BF8(<span class=\"number\">2766</span>i64);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好像是做了一个字符串解密然后输出的操作，浅浅用python跑一下解析字符串验证猜想。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hex_xor_to_string</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    result = a ^ b</span><br><span class=\"line\">    hex_str = <span class=\"built_in\">hex</span>(result)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(hex_str) % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">        hex_str = <span class=\"string\">&#x27;0&#x27;</span> + hex_str</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(hex_str[i:i+<span class=\"number\">2</span>], <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(hex_str), <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\"></span><br><span class=\"line\">x1 = <span class=\"number\">0x4B6D27B32F124FA1</span></span><br><span class=\"line\">x2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\">y1 = <span class=\"number\">0x4B6D1DDD4A7920D5</span></span><br><span class=\"line\">y2 = <span class=\"number\">0x1E336B548B32934E</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result1 = hex_xor_to_string(x1, y1)</span><br><span class=\"line\">result2 = hex_xor_to_string(x2, y2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 1:&quot;</span>, result1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result 2:&quot;</span>, result2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = result1[::-<span class=\"number\">1</span>] + result2[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/10/02/yQT7sZ1UnvRAcXk.png\" alt=\"{8FBDE081-6C77-49BA-BEDA-94E3B44A9056}\"></p>\n<p>打印出了<code>token</code>基本上确定了这个线程就是打印token的线程，现在就是要想怎么patch这个线程函数使得token能够输出出来。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/7zjZDi1Y9JPTAvX.png\" alt=\"image-20240919195412464\">)</p>\n<p>这里有个<code>mov edx,5</code>语句，将DbgPrintEx函数的level设置成5，可以考虑patch这个语句，将5改成0，那么只需要patch一个字节，共三处。但是又要怎么patch呢，首先不能通过现在这种方式hook PsCreateSystemThread函数调用来确定StartRoutine地址（题目要求不能修改系统模块代码），也就是说得想另外一个办法确定这个线程的地址，然后通过偏移来确定需要patch的地址。</p>\n<p>那么怎么确定这个线程地址呢，如果通过<code>ZwQuerySystemInformation</code>枚举内核模块然后枚举模块下的所有线程的话，已经卸载了的ace.sys模块还能被枚举到么？问了下GPT好像是不能的，还可以考虑用StartRoutine地址的后几位做特征，匹配所有线程的开始地址的后几位，但是这种方式又感觉怕遇到地址特征一模一样的，感觉还是不大行。又问GPT怎么寻找到某个内核线程，得到答复是除了<code>ZwQuerySystemInformation</code>枚举，还有通过<code>PsLookupThreadByThreadId</code>函数从进程id和线程id查找的。</p>\n<p>那么线程id和进程id又从哪获取呢？因为之前hook过PsCreateSystemThread函数，翻阅文档找到了一个ClientId参数，这个参数指向接收新线程的客户端标识符的结构，即一个pid，一个tid，但是pid，tid应该都是系统分配的吧，能是一个固定值么？hook一下看看输出</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/yEc1leFT3afZI69.png\" alt=\"image-20240919214001840\"></p>\n<p><img src=\"https://s2.loli.net/2024/10/02/1KTEVnb9uPWsjpr.png\" alt=\"image-20240919215044101\"></p>\n<p>诶，tid貌似是系统分配的，但是pid一直都是4，很奇怪，pid&#x3D;4代表的是什么进程呢？之前刚好枚举过进程来找有没有新进程创建，现在正好能派上用场。</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/TOdNVCHav1FIbol.png\" alt=\"image-20240919215837787\"></p>\n<p>貌似是一个系统进程，GPT了一下发现原来如果驱动程序通过内核模式创建系统线程（使用<code>PsCreateSystemThread</code>），这些线程通常会在系统进程下运行，PID为4。原来如此，驱动程序和进程是一个级别的，但是驱动程序创建的这个线程是在系统进程之下的，而不是属于驱动模块，只是线程起始地址隶属于模块地址空间的，驱动卸载并不影响线程的运行。</p>\n<p>这样的话，我们要找的线程因为模块被卸载了，所以它不在所有模块地址空间内，只要枚举所有系统进程pid&#x3D;4下的所有线程，然后通过判断线程的起始地址是否在所有模块地址之内，即可判断它是否是我们要找的线程。这下思路就通了，开始编写代码实现patch。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;header.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">PVOID MoudleBaseAddress[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG64 MoudleSize[<span class=\"number\">1024</span>];</span><br><span class=\"line\">ULONG ModuleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">ULONG Offset1 = <span class=\"number\">0x52</span>, Offset2 = <span class=\"number\">0xB5</span>, Offset3 = <span class=\"number\">0x125</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOLEAN <span class=\"title function_\">IsAddressInKnownModules</span><span class=\"params\">(PVOID Address, PVOID* ModuleBaseAddresses, ULONG64* ModuleSize, ULONG ModuleCount)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; ModuleCount; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Address &gt;= ModuleBaseAddresses[i] &amp;&amp; Address &lt; (ULONG64)ModuleBaseAddresses[i] + ModuleSize[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PVOID <span class=\"title function_\">EnumSystemModulesForProcess</span><span class=\"params\">(HANDLE TargetProcessId)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    ULONG bufferSize = <span class=\"number\">0x10000</span>;</span><br><span class=\"line\">    PVOID processBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    PVOID moduleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ULONG returnLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询进程信息</span></span><br><span class=\"line\">    processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        processBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;proc&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!processBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for process information\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemProcessInformation, processBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询模块信息</span></span><br><span class=\"line\">    moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">        DbgPrint(<span class=\"string\">&quot;Failed to allocate buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">        ExFreePool(processBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class=\"line\">        ExFreePool(moduleBuffer);</span><br><span class=\"line\">        bufferSize = returnLength;</span><br><span class=\"line\">        moduleBuffer = ExAllocatePoolWithTag(NonPagedPool, bufferSize, <span class=\"string\">&#x27;modl&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!moduleBuffer) &#123;</span><br><span class=\"line\">            DbgPrint(<span class=\"string\">&quot;Failed to allocate larger buffer for module information\\n&quot;</span>);</span><br><span class=\"line\">            ExFreePool(processBuffer);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        status = ZwQuerySystemInformation(SystemModuleInformation, moduleBuffer, bufferSize, &amp;returnLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历模块信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_MODULE_INFORMATION moduleInfo = (PSYSTEM_MODULE_INFORMATION)moduleBuffer;</span><br><span class=\"line\">        ModuleCount = moduleInfo-&gt;ModulesCount;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; moduleInfo-&gt;ModulesCount; i++) &#123;</span><br><span class=\"line\">            PSYSTEM_MODULE_INFORMATION_ENTRY moduleEntry = &amp;moduleInfo-&gt;Modules[i];</span><br><span class=\"line\">            MoudleBaseAddress[i] = moduleEntry-&gt;Base;</span><br><span class=\"line\">            MoudleSize[i] = moduleEntry-&gt;Size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历进程信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class=\"line\">        PSYSTEM_PROCESS_INFORMATION processInfo = (PSYSTEM_PROCESS_INFORMATION)processBuffer;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (TRUE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;ProcessId == TargetProcessId) &#123;</span><br><span class=\"line\">                PSYSTEM_THREAD_INFORMATION threadInfo = (PSYSTEM_THREAD_INFORMATION)(processInfo + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ULONG i = <span class=\"number\">0</span>; i &lt; processInfo-&gt;NumberOfThreads; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!IsAddressInKnownModules(threadInfo[i].StartAddress, MoudleBaseAddress, MoudleSize, ModuleCount))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        DbgPrint(<span class=\"string\">&quot;Find it:%p\\n&quot;</span>,threadInfo[i].StartAddress);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> threadInfo[i].StartAddress;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processInfo-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            processInfo = (PSYSTEM_PROCESS_INFORMATION)((PUCHAR)processInfo + processInfo-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清理分配的内存</span></span><br><span class=\"line\">    ExFreePool(processBuffer);</span><br><span class=\"line\">    ExFreePool(moduleBuffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">UnloadDriver</span><span class=\"params\">(PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Unloaded\\n&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = UnloadDriver;</span><br><span class=\"line\">    KdPrint((<span class=\"string\">&quot;Driver Loaded\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE targetPid = (HANDLE)<span class=\"number\">4</span>; <span class=\"comment\">// 系统进程的 PID</span></span><br><span class=\"line\">    PVOID targetAddress = EnumSystemModulesForProcess(targetPid);</span><br><span class=\"line\"></span><br><span class=\"line\">    UCHAR valueToWrite = <span class=\"number\">0x00</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    UCHAR valueToRead = <span class=\"number\">0x05</span>; <span class=\"comment\">// 要写入的字节值</span></span><br><span class=\"line\">    ULONG numHasChanged = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset1) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset1) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset2) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset2) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*(PUCHAR)((ULONG64)targetAddress + Offset3) == valueToRead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *(PUCHAR)((ULONG64)targetAddress + Offset3) = valueToWrite;</span><br><span class=\"line\">        numHasChanged++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DbgPrint(<span class=\"string\">&quot;numHasChanged:%d\\n&quot;</span>, numHasChanged);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>成功输出token2</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oZUh4qG7FBXanWO.png\" alt=\"image-20240920125107119\"></p>\n<h2 id=\"（三）解题过程\"><a href=\"#（三）解题过程\" class=\"headerlink\" title=\"（三）解题过程\"></a>（三）解题过程</h2><p>题目要求：</p>\n<p>编写程序，运行时修改尽量少的内存，让shellcode 往自行指定的位置写入token1成功。（满分3分）</p>\n<p>要求任意位置，也就是要修改CreateFileA函数的第一个参数的值，根据之前分析的<code>C:\\2024GameSafeRace.token1</code>字符串是由十六进制异或得到的，也就是下面这些<br><img src=\"https://s2.loli.net/2024/10/02/suczGZU14mQHv8i.png\" alt=\"image-20240920145014956\"></p>\n<p>可以考虑的是patch这些十六进制数据，把异或的key改成0，然后密文改成明文即可，因为明文异或0还是明文，但是考虑到要尽量修改少量的内存，我们最好还是保持key不变，自定义密文解密到我们所要的文件地址。跑个python脚本解出新的密文，得到新的密文，接着找到密文所在文件的偏移然后patch即可，给出解题代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;shellapi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _KDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DBGMGEBOX(fmt, ...) \\</span></span><br><span class=\"line\"><span class=\"meta\">    do &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">         <span class=\"comment\">/* 假设最大长度为1024，根据需要调整大小 */</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">        wsprintfA(out, fmt, __VA_ARGS__); \\</span></span><br><span class=\"line\"><span class=\"meta\">        MessageBoxA(NULL, out, <span class=\"string\">&quot;提示&quot;</span>, MB_OK); \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125; while(0)</span></span><br><span class=\"line\"><span class=\"type\">char</span> out[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span><span class=\"params\">(WINAPI* WriteProcessMemory_t)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">    )</span>;</span><br><span class=\"line\">WriteProcessMemory_t TrueWriteProcessMemory = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">BOOL</span><br><span class=\"line\">WINAPI</span><br><span class=\"line\"><span class=\"title function_\">HookWriteProcessMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _In_ HANDLE hProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ LPVOID lpBaseAddress,</span></span><br><span class=\"line\"><span class=\"params\">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ SIZE_T nSize,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize == <span class=\"number\">4506624</span> &amp;&amp; *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) == <span class=\"number\">0x3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *((PUCHAR)lpBuffer + <span class=\"number\">0x7171</span>) = <span class=\"number\">0x4</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7082</span>) = <span class=\"number\">0x94e7c2136acc0e5c</span>;<span class=\"comment\">//</span></span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7093</span>) = <span class=\"number\">0x8207c5d1af9f3860</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x70F1</span>) = <span class=\"number\">0xa905cca9edcb138c</span>;</span><br><span class=\"line\">        *(PULONG64)((ULONG64)lpBuffer + <span class=\"number\">0x7108</span>) = <span class=\"number\">0xa753b8236c56809a</span>;</span><br><span class=\"line\">        <span class=\"comment\">//C:\\Users\\15386\\Desktop\\flag.txt</span></span><br><span class=\"line\">        DBGMGEBOX(<span class=\"string\">&quot;Hook Success!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TrueWriteProcessMemory(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        TrueWriteProcessMemory = (WriteProcessMemory_t)DetourFindFunction(<span class=\"string\">&quot;kernel32.dll&quot;</span>, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\">        DetourAttach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        DetourTransactionBegin();</span><br><span class=\"line\">        DetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">        DetourDetach(&amp;(PVOID&amp;)TrueWriteProcessMemory, HookWriteProcessMemory);</span><br><span class=\"line\"></span><br><span class=\"line\">        DetourTransactionCommit();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入hook成功后，成功在桌面的<code>flag.txt</code>输出token1</p>\n<p><img src=\"https://s2.loli.net/2024/10/02/PIej3obTn5NLDyE.png\" alt=\"{87F08EF1-EECF-4DBC-A7D0-954E04FFA9CD}\"></p>"},{"title":"2022腾讯游戏安全PC初赛","date":"2024-08-05T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg","thumbnail":"https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n## 初赛题\n\n这里有一个画了flag的小程序，可好像出了点问题，flag丢失了，需要把它找回来。<!-- more -->\n\n题目：\n\n![img](https://s2.loli.net/2024/09/28/6Qmd2VcMeykNvBh.jpg) \n\n找回flag样例：\n\n![img](https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg)  \n\n**要求**\n\n1、不得直接patch系统组件实现绘制（如：直接编写D3D代码绘制flag），只能对题目自身代码进行修改或调用。\n\n2、找回的flag需要和预期图案（包括颜色）一致，如果绘制结果存在偏差会扣除一定分数。\n\n3、赛后需要提交找回flag的**截图**和**解题代码**或**文档**进行评分。\n\n\n\nDIE查壳,PE64位无壳,先IDA静态分析看一下\n\n定位到这个函数\n\n![image-20240624131512660](https://s2.loli.net/2024/09/28/Kf5LpUDSHOtMijV.png)\n\n该函数先是加载了ntdll系统模块,再进行拼接字符串获取该模块**ZwAllocateVirtualMemory**函数地址\n\n```c\nNTSTATUS ZwAllocateVirtualMemory(\n  HANDLE ProcessHandle,     // 要分配内存的进程的句柄\n  PVOID *BaseAddress,      // 指向一个变量的指针，该变量接收分配的内存的基地址\n  ULONG ZeroBits,           // 指定返回的基地址中的高位必须为零的位数，用于对齐内存\n  PULONG AllocationSize,    // 指向一个变量，指定要分配的内存大小\n  ULONG AllocationType,     // 指定内存分配的类型，例如 MEM_COMMIT（提交内存）或 MEM_RESERVE（保留内存）\n  ULONG Protect             // 指定内存的保护属性，例如 PAGE_READWRITE（可读写）\n);\n```\n\n接着往下看\n\n![image-20240624133213434](https://s2.loli.net/2024/09/28/AWp9yTxRKqMFsS4.png)\n\n先是利用`ZwAllocateVirtualMemory`开辟了一块0x2BF9可读可写的地址空间,随后在该地址空间填入数据,最后再对地址空间部分数据进行了修改,qword_140008318可能是一个函数地址,在最后调用了这个函数,然后等待一段时间就释放了这个地址空间,所以绘画逻辑应该是在这个函数里,绘画完之后展现一段时间后消失和运行效果相同\n\n![image-20240624133856075](https://s2.loli.net/2024/09/28/VXlqCfShENxQJtY.png)\n\n所以主要逻辑应该是在qword_140008318函数里,x64dbg调试看一下,定位到qword_140008318赋值语句,00000001400011FE地址处下断点\n\n```asm\n00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |\n```\n\n进入rax发现确实是一个函数地址\n\n![image-20240624134305304](https://s2.loli.net/2024/09/28/3hs6n1WQgiwVFIz.png)\n\n再看一下修改部分的数据代表到底什么意思\n\n```asm\n00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |\n0000000140001205   | C783 6C060000 81250000                | mov dword ptr ds:[rbx+66C],2581               | rbx+66C:L\"▁\"\n000000014000120F   | C783 49040000 B40E0000                | mov dword ptr ds:[rbx+449],EB4                |\n0000000140001219   | C783 00060000 01130000                | mov dword ptr ds:[rbx+600],1301               |\n0000000140001223   | C605 EA700000 01                      | mov byte ptr ds:[140008314],1                 |\n```\n\n分别定位到rbx对应的偏移处找不同 \n\n第一处 `mov dword ptr ds:[rbx+66C],2581 `\n\n```asm\n000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |\n000000000D1A0669   | 48:8B05 90190000                      | mov rax,qword ptr ds:[D1A2000]                |\n000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |\n;修改后\n000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |\n000000000D1A0669   | 48:8B05 81250000                      | mov rax,qword ptr ds:[<&D3DCompile>]          |\n000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |\n```\n\n第二处 `mov dword ptr ds:[rbx+449],EB4`\n\n```asm\n000000000D1A0442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |\n000000000D1A0446   | 48:8D05 F32B0000                      | lea rax,qword ptr ds:[D1A3040]                |\n000000000D1A044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |\n;修改后\n000000000D190442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |\n000000000D190446   | 48:8D05 B40E0000                      | lea rax,qword ptr ds:[D191301]                |\n000000000D19044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |\n```\n\n第三处 `mov dword ptr ds:[rbx+600],1301`\n\n```asm\n000000000D1A05FD   | 48:81FE 8F050000                      | cmp rsi,58F                                   |\n000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |\n000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |\n;修改后\n000000000D1A05FD   | 48:81FE 01130000                      | cmp rsi,1301                                  |\n000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |\n000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |\n```\n\n第一处和第二处nop掉直接程序出现异常\n\n第三处nop掉发现会对绘画效果产生影响,这里少了五个方块,\n\n![image-20240624142159289](https://s2.loli.net/2024/09/28/ok3QWLSeBvwAjlG.png)\n\n所以`[rbx+600]`处附近会可能有绘画逻辑,运行到附近看看\n\n![image-20240624211750273](https://s2.loli.net/2024/09/28/936mRkzHTn7ltPp.png)\n\n分析这个函数,这里的rsi应该是一个数组的索引值,通过数组的值是否等于7进行判断,应该是将有效值和无效值进行区分,然后遍历了整个数组,进行了多次循环操作\n\n![image-20240624212123944](https://s2.loli.net/2024/09/28/kUdTK6V7851wsCe.png)\n\n那有效值在哪呢,我们主要找的绘画的浮点数位置保存在哪?D3D开发的经验不多,我就从一个个可能的函数的参数入手\n\n看看是否能直接通过传参获取位置数组,这个函数里只有一个函数D190000\n\n运行到该函数,观察函数传参窗口\n\n![image-20240624212702425](https://s2.loli.net/2024/09/28/mSvEdt2BeKuVfMJ.png)\n\n显然没有这么容易,那还有可能在这个函数的母函数或者子函数的函数里\n\n通过堆栈回溯找到母函数![image-20240624212930015](https://s2.loli.net/2024/09/28/8PonE21t9QSVgjN.png)\n\n这个rax是之前分析过了的函数地址,所以这个函数就是位置数组的出处了\n\n进入分析\n\n![image-20240624213223998](https://s2.loli.net/2024/09/28/qgKW4SXJl3vouje.png)\n\n调用了一堆系统函数,并没有明显传参,也没有浮点数处理的汇编指令,这些略过分析,继续看\n\n![image-20240624213702469](https://s2.loli.net/2024/09/28/oOxUStEnueRMhXL.png)\n\n这里传入了两个浮点数,一个1920,一个1080,分辨率大小? 应该是绘画的初始化操作,继续分析找浮点数数组\n\n![image-20240624214126525](https://s2.loli.net/2024/09/28/7b2wRsrEF3uxXdP.png)\n\n这里有个缓冲区,存储了HLSL语言编写的一段顶点着色器和像素着色器的代码,进行图形渲染步骤,然后再调用了一些D3D函数\n\n```c\n// 定义常量缓冲区\ncbuffer ConstantBuffer : register(b0)\n{\n    matrix World;        // 世界矩阵\n    matrix View;          // 视图矩阵\n    matrix Projection;    // 投影矩阵\n};\n\n// 定义顶点着色器的输出结构体\nstruct VS_OUTPUT\n{\n    float4 Pos : SV_POSITION; // 顶点位置\n    float4 Color : COLOR0;    // 顶点颜色\n};\n\n// 顶点着色器\nVS_OUTPUT VS(float4 Pos : POSITION, float4 Color : COLOR)\n{\n    VS_OUTPUT output = (VS_OUTPUT)0;\n\n    // 应用变换矩阵\n    output.Pos = mul(Pos, World);\n    output.Pos = mul(output.Pos, View);\n    output.Pos = mul(output.Pos, Projection);\n\n    // 传递颜色\n    output.Color = Color;\n\n    return output;\n}\n\n// 像素着色器\nfloat4 PS(VS_OUTPUT input) : SV_Target\n{\n    // 直接返回输入颜色\n    return input.Color;\n}\n```\n\n下面还有一个\n\n![image-20240624214515403](https://s2.loli.net/2024/09/28/Mhbj5PZULiHESBG.png)\n\n```c\n// 定义顶点着色器的输出结构体\nstruct VSOut\n{\n    float4 Col : COLOR;   // 顶点颜色\n    float4 Pos : SV_POSITION; // 顶点位置\n};\n\n// 顶点着色器\nVSOut VS(float4 Col : COLOR, float4 Pos : POSITION)\n{\n    VSOut Output;\n    \n    // 将输入位置赋值给输出位置\n    Output.Pos = Pos;\n    \n    // 将输入颜色赋值给输出颜色\n    Output.Col = Col;\n    \n    return Output;\n}\n\n// 像素着色器\nfloat4 PS(float4 Col : COLOR) : SV_TARGET\n{\n    // 直接返回输入的颜色作为像素颜色\n    return Col;\n}\n```\n\n两个不同的着色器设计,是否对应了一个flag图形和原始图形两种图形不同的着色器呢?\n\n但是最关键的位置数组我们还没找到,接着往下分析吧\n\n![image-20240624215140725](https://s2.loli.net/2024/09/28/mBesSDUAnECP9ZL.png)\n\n这个函数内部还有一个用户层函数,进入分析\n\n发现这个函数内部就是刚刚回溯开始的函数,那就直接进入该函数的子函数分析\n\n![image-20240624215445902](https://s2.loli.net/2024/09/28/9xAFXJso7lwzetW.png)\n\n一堆浮点数处理的汇编指令,好像还进行了加密解密操作,所以这里应该就是浮点数数组的出处了吧\n\n跳过这些计算浮点数的指令,直接找到赋值语句并定位位置数组的首地址\n\n![image-20240624215809549](https://s2.loli.net/2024/09/28/hMfPO7uotwxWEKD.png)\n\n这里分析发现,rcx即为数组首地址,继续分析,后面就是继续调用D3D函数,但是我并没有发现数组怎么传进去的,只是找到可能的位置数组,这个函数运行到返回只提供了0x70大小的浮点数数组,但是我们在之前分析过了,这个函数会循环运行,循环运行完后导出这些浮点数.得到1340个浮点数,到这里我有点怀疑这个数组的真实性了,不应该有这么长的数据的,总共方块数是31+11=42个,点数就是42*4=168个点,就算是三维坐标也不超过这么多数据,但是我还是在python进行了一个绘制,这里是python绘制代码\n\n```py\nimport struct\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfloat_values = [  71.2234,       73.5287,             0,             1,\n        1,             0,             1,        71.062,\n  73.5287,             0,             1,             1,\n        0,             1,       71.2234,       73.8157,\n        0,             1,             1,             0,\n        1,        71.062,       73.8157,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n0.0526041,        2.7213,             0,             1,\n        1,             0,             1,      0.103646,\n   2.7213,             0,             1,             1,\n        0,             1,     0.0526041,       2.63056,\n        0,             1,             1,             0,\n        1,      0.103646,       2.63056,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -95.9422,      -93.3991,             0,             1,\n        1,             0,             1,       -95.938,\n -93.3991,             0,             1,             1,\n        0,             1,      -95.9422,      -93.4065,\n        0,             1,             1,             0,\n        1,       -95.938,      -93.4065,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -228.747,      -227.782,             0,             1,\n        1,             0,             1,      -228.896,\n -227.782,             0,             1,             1,\n        0,             1,      -228.747,      -227.518,\n        0,             1,             1,             0,\n        1,      -228.896,      -227.518,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -1.98906,       1.38796,             0,             1,\n        1,             0,             1,      -1.93802,\n  1.38796,             0,             1,             1,\n        0,             1,      -1.98906,       1.29722,\n        0,             1,             1,             0,\n        1,      -1.93802,       1.29722,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -58.0307,      -56.5009,             0,             1,\n        1,             0,             1,      -57.8964,\n -56.5009,             0,             1,             1,\n        0,             1,      -58.0307,      -56.7398,\n        0,             1,             1,             0,\n        1,      -57.8964,      -56.7398,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -1.92656,       1.49907,             0,             1,\n        1,             0,             1,      -1.87552,\n  1.49907,             0,             1,             1,\n        0,             1,      -1.92656,       1.40833,\n        0,             1,             1,             0,\n        1,      -1.87552,       1.40833,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -125.702,      -123.716,             0,             1,\n        1,             0,             1,      -125.771,\n -123.716,             0,             1,             1,\n        0,             1,      -125.702,      -123.592,\n        0,             1,             1,             0,\n        1,      -125.771,      -123.592,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n-0.801563,       1.57315,             0,             1,\n        1,             0,             1,     -0.750521,\n  1.57315,             0,             1,             1,\n        0,             1,     -0.801563,       1.48241,\n        0,             1,             1,             0,\n        1,     -0.750521,       1.48241,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -141.003,      -138.069,             0,             1,\n        1,             0,             1,      -140.834,\n -138.069,             0,             1,             1,\n        0,             1,      -141.003,      -138.369,\n        0,             1,             1,             0,\n        1,      -140.834,      -138.369,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -30.8589,       -28.325,             0,             1,\n        1,             0,             1,       -30.813,\n  -28.325,             0,             1,             1,\n        0,             1,      -30.8589,      -28.4065,\n        0,             1,             1,             0,\n        1,       -30.813,      -28.4065,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n-0.323438,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.271354,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.323438,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.271354,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.385938,      0.797222,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.333854,\n 0.797222,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.385938,       0.70463,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.333854,       0.70463,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.448438,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.396354,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.448438,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.396354,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.510938,         0.575,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.458854,\n    0.575,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.510938,      0.482407,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.458854,      0.482407,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.573438,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.521354,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.573438,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.521354,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.510938,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.458854,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.510938,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.458854,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.448438,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.396354,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.448438,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.396354,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.260938,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.208854,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.260938,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.208854,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.198437,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.146354,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.198437,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.146354,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.135937,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,    -0.0838542,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.135937,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,    -0.0838542,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.260938,      0.797222,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.208854,\n 0.797222,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.260938,       0.70463,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.208854,       0.70463,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.198437,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.146354,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.198437,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.146354,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.135937,         0.575,             0,      0.176471,\n 0.866667,      0.905882,             1,    -0.0838542,\n    0.575,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.135937,      0.482407,\n        0,      0.176471,      0.866667,      0.905882,\n        1,    -0.0838542,      0.482407,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0734375,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,    -0.0213542,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,    -0.0734375,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,    -0.0213542,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0109375,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     0.0411458,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,    -0.0109375,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     0.0411458,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0515625,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.103646,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     0.0515625,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.103646,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.114063,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.166146,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.114063,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.166146,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0109375,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     0.0411458,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,    -0.0109375,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     0.0411458,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0515625,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.103646,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     0.0515625,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.103646,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.114063,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.166146,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.114063,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.166146,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.176563,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.228646,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.176563,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.228646,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0515625,      0.797222,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.103646,\n 0.797222,             0,      0.176471,      0.866667,\n 0.905882,             1,     0.0515625,       0.70463,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.103646,       0.70463,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.114063,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.166146,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.114063,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.166146,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.176563,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.228646,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.176563,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.228646,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.239063,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.291146,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.239063,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.291146,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.301562,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.353646,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.301562,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.353646,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.176563,         0.575,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.228646,\n    0.575,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.176563,      0.482407,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.228646,      0.482407,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.239063,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.291146,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.239063,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.291146,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.301562,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.353646,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.301562,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.353646,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.364062,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.416146,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.364062,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.416146,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.426562,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.478646,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.426562,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.478646,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1]\ncoordinates = [float_values[i:i+2] for i in range(0,len(float_values),2)]\n\nfig = plt.figure()\n\nax = fig.add_subplot(111)\n\nx_values = [x for x, _ in coordinates]\ny_values = [y for _, y in coordinates]\n\nax.scatter(x_values, y_values)\n\nplt.show()\n```\n\n运行结果如图:\n\n![image-20240624221016969](https://s2.loli.net/2024/09/28/Euf4PlCp7zbyLGd.png)\n\n这里有一个密集位置,箭头指向应该是让我们放大看\n\n![image-20240624221254947](https://s2.loli.net/2024/09/28/dgHw3sEYDmX9Tz2.png)\n\n确实出现了原图的形状,但是flag旗帜的点也嵌在其中,但是对比位置好像有点问题,而且点的数量也不够,还有一个问题就是为什么这些位置没有被实际展现出来\n\n那我们先解决为什么没有展现出来的问题,根据之前的分析,这里的几个跳转语句可能是问题所在,这里类似一个switch语句,通过数组的索引和其中的值来决定下一步的运算,有加减和一些别的运算.有点类似虚拟机的opcode\n\n![image-20240626100831665](https://s2.loli.net/2024/09/28/wdAXGvEePIhMHNa.png)\n\n这里汇编有点没分析出来啥意思,拖到ida里调试看看伪代码\n\n![image-20240626103148199](https://s2.loli.net/2024/09/28/OiEewtYlbzKqkhF.png)\n\ndword_E3D1301应该就是opcode数组,然后v14应该是指八个寄存器,然后case4有点没看像是一种加解密运算,然后case5和case6是两个相同的函数,传参只有一个不同,0xFFFFFF00和0xFF2DDBE7,可能与rgb的十六进制值有关,上在线转换网站上看一下\n\n![image-20240626103952814](https://s2.loli.net/2024/09/28/cBuntC9yZEWORwA.png)\n\n![image-20240626104016412](https://s2.loli.net/2024/09/28/EhFLHykfAqegiaG.png)\n\n应该就是flag的黄色和原图的蓝色了,但是为什么同一个函数,只是颜色不同,怎么会有不显示和显示的情况呢,不清楚,hook一下看一下调用的时候其他参数有什么区别\n\nhook代码:\n\n```c\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include <detours.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n//addr = [140008318] - 0x650\n#define QWORDADDR 0x140008318\n#define OFFSET 0x650\ntypedef __int64 (*funptr)(int, int, int, int, int, __int64, __int64, __int64, __int64, __int64);\nINT64 func;\n__int64 __fastcall funcHook(\n    int a1,\n    int a2,\n    int a3,\n    int a4,\n    int a5,\n    __int64 a6,\n    __int64 a7,\n    __int64 a8,\n    __int64 a9,\n    __int64 a10)\n{\n    FILE* f = fopen(\"C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt\", \"a+\");\n    char in[100];\n    sprintf(in,\"a1:0x%08x,a2:0x%08x,a3:0x%08x,a4:0x%08x,a5:0x%08x\\n\", a1, a2, a3, a4, a5);\n    fputs(in, f);\n    fclose(f);\n    funptr fpt;\n    fpt = (funptr)func;\n    fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n    return 0;\n}\nvoid Start_Hook()\n{\n\tDetourRestoreAfterWith();\n\tDetourTransactionBegin();\n\tDetourUpdateThread(GetCurrentThread());\n\tINT64 qword_addr;\n    if (!ReadProcessMemory(GetCurrentProcess(), (LPCVOID*)QWORDADDR, &qword_addr, 8, NULL))\n    {\n        FILE* f = fopen(\"C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt\", \"a+\");\n        fputs(\"error ReadProcessMemory\\n\", f);\n        fclose(f);\n\n        return;\n    }\n    func = qword_addr - OFFSET;\n\n\tDetourAttach((PVOID*)&func, funcHook);//msg\n\tDetourTransactionCommit();\n}\nvoid Exit_Hook()\n{\n\tDetourTransactionBegin();\n\tDetourUpdateThread(GetCurrentThread());\n\tDetourDetach((PVOID*)&func, funcHook);\n\tDetourTransactionCommit();\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n\t\tStart_Hook();\n\t\tbreak;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n\t\tExit_Hook();\n        break;\n    }\n    return TRUE;\n}\n\n\n```\n\n得到前五个参数内容\n\n```\na1:0xfffffc4a,a2:0x00000032,a3:0xff1fa3ac,a4:0x00130bd0,a5:0xffffff00\na1:0x00000032,a2:0xfffffe7a,a3:0x001bcd69,a4:0xffe8bcc5,a5:0xffffff00\na1:0xfffffc4a,a2:0x000000aa,a3:0xff8eb263,a4:0x00d91997,a5:0xffffff00\na1:0x00000032,a2:0x000000e6,a3:0x001cf400,a4:0x00e82b18,a5:0xffffff00\na1:0xfffffc4a,a2:0xffffff2e,a3:0x00391faa,a4:0x006ee5d2,a5:0xffffff00\na1:0x00000032,a2:0x0000015e,a3:0x000ebe72,a4:0x00d77de2,a5:0xffffff00\na1:0xfffffc86,a2:0xfffffef2,a3:0x00071150,a4:0x0074fb28,a5:0xffffff00\na1:0x000000aa,a2:0xfffffef2,a3:0xffda3e17,a4:0x00c42e8b,a5:0xffffff00\na1:0xfffffcfe,a2:0x000000e6,a3:0x0034cf2b,a4:0xff321ecf,a5:0xffffff00\na1:0x0000006e,a2:0xfffffe7a,a3:0xffa49c19,a4:0x00d9e5f1,a5:0xffffff00\na1:0xfffffcc2,a2:0x000000aa,a3:0xffca5ee7,a4:0x00c42d8b,a5:0xffffff00\na1:0x0000028a,a2:0x00000032,a3:0x00eabf17,a4:0x00a7e3ab,a5:0xff2ddbe7\na1:0x0000024e,a2:0x0000006e,a3:0x00c42d8b,a4:0x00cb0f37,a5:0xff2ddbe7\na1:0x00000212,a2:0x000000aa,a3:0x00d717af,a4:0x001f5b13,a5:0xff2ddbe7\na1:0x000001d6,a2:0x000000e6,a3:0x00c460e9,a4:0x00e9ad55,a5:0xff2ddbe7\na1:0x0000019a,a2:0x00000122,a3:0x00c7a989,a4:0x00b9fd35,a5:0xff2ddbe7\na1:0x000001d6,a2:0x00000122,a3:0x00ab7100,a4:0x00646cf8,a5:0xff2ddbe7\na1:0x00000212,a2:0x00000122,a3:0x00c409a9,a4:0x0031cd9d,a5:0xff2ddbe7\na1:0x000002c6,a2:0x00000032,a3:0x00d77e8b,a4:0x002f2773,a5:0xff2ddbe7\na1:0x00000302,a2:0x00000032,a3:0x00d9ad01,a4:0x00996535,a5:0xff2ddbe7\na1:0x0000033e,a2:0x00000032,a3:0x0039e156,a4:0x00da4a26,a5:0xff2ddbe7\na1:0x000002c6,a2:0x0000006e,a3:0x0013207c,a4:0x00346848,a5:0xff2ddbe7\na1:0x00000302,a2:0x000000aa,a3:0x00c9140b,a4:0x000b5fa7,a5:0xff2ddbe7\na1:0x0000033e,a2:0x000000e6,a3:0x0053071f,a4:0x00c7ab3b,a5:0xff2ddbe7\na1:0x0000037a,a2:0x00000122,a3:0x00d71106,a4:0x00d6329a,a5:0xff2ddbe7\na1:0x000003b6,a2:0x00000122,a3:0x00eb60a1,a4:0x00a58d79,a5:0xff2ddbe7\na1:0x000003f2,a2:0x00000122,a3:0x00eb67cd,a4:0x00f5e9d9,a5:0xff2ddbe7\na1:0x0000042e,a2:0x00000122,a3:0x00d71161,a4:0x000d7d31,a5:0xff2ddbe7\na1:0x000003b6,a2:0x00000032,a3:0x00677611,a4:0x00659df9,a5:0xff2ddbe7\na1:0x000003f2,a2:0x00000032,a3:0x0040173d,a4:0x00557919,a5:0xff2ddbe7\na1:0x0000042e,a2:0x00000032,a3:0x00d77661,a4:0x003d9d01,a5:0xff2ddbe7\na1:0x0000046a,a2:0x00000032,a3:0x00efff9a,a4:0x00ca2e06,a5:0xff2ddbe7\na1:0x000003f2,a2:0x0000006e,a3:0x00c404eb,a4:0x00b7178b,a5:0xff2ddbe7\na1:0x0000042e,a2:0x000000aa,a3:0x00d7c6ef,a4:0x008b6337,a5:0xff2ddbe7\na1:0x0000046a,a2:0x000000aa,a3:0x00d7701f,a4:0x00677b0b,a5:0xff2ddbe7\na1:0x000004a6,a2:0x000000aa,a3:0x00d71171,a4:0x00fd4d21,a5:0xff2ddbe7\na1:0x000004e2,a2:0x000000aa,a3:0x003906ab,a4:0x000bbf27,a5:0xff2ddbe7\na1:0x0000046a,a2:0x000000e6,a3:0x00096663,a4:0x00ef5f33,a5:0xff2ddbe7\na1:0x000004a6,a2:0x00000122,a3:0x00732157,a4:0x00835b9f,a5:0xff2ddbe7\na1:0x000004e2,a2:0x00000122,a3:0x00353730,a4:0x00383434,a5:0xff2ddbe7\na1:0x0000051e,a2:0x00000122,a3:0x006257a9,a4:0x009555e9,a5:0xff2ddbe7\na1:0x0000055a,a2:0x00000122,a3:0x00d777af,a4:0x00df5bd3,a5:0xff2ddbe7\n```\n\n可以看到蓝色调用了31次,黄色调用了11次,正好对应正方形块数,验证了猜测.\n\n前面的四个参数在蓝色调用的时候基本都是正数,黄色调用的时候则总会出现一些负数的情况,所以可能就是在这四个参数出了问题让绘制出现了失败,在蓝色调用的前两个参数有一些相同的情况,比如说第二个参数0x00000032这个值,出现了8次,对应了一行的八个方块,0x0000006e则对应三个方块,应该就是指的y坐标,第一个参数则可能会是x坐标,知道了这个,我们就可以通过hook这个绘制函数通过正确传参就能实现绘制,但是正确的位置在哪呢?位置被错误的计算了,只能从虚拟机运行入手了,写个脚本跑一下运行流程\n\n```py\nopcode = [0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00524895, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x005A8E2C, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00985AD2, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00A9685D, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00785CEF, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00963EA7, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00465215, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00856DCE, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00758C6E, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0098A6B4, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00856ECE, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000258, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000008, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00ABFC52, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00856ECE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x009654EA, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x008523AC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0086EACC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00EA3245, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00854AEC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00963DCE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0098EE44, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0078A213, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00526339, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0088574E, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0012445A, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00965243, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00AA23E4, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000168, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00AA2488, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000001A4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00965224, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000008, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00263554, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00015478, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00963524, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00AEBCDF, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x008547AE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x009685AA, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0096335A, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00965234, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x007845EE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00482526, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00326212, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00747475, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000168, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x002314EC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000001A4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x009634EA, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000007]\nkey = 0x0AD00001F\nreg = [0,0,0,0,0,0,0,0,50,50]\nrip = 0\nwhile rip < len(opcode):\n    match opcode[rip]:\n        case 0:\n            print(f\"+++0 reg[0]={reg[0]},reg[1]={reg[1]},reg[0]={reg[0]+reg[1]}\")\n            reg[0] += reg[1]\n        case 1:\n            print(f\"---1 reg[0]={reg[0]},reg[1]={reg[1]},reg[0]={reg[0]-reg[1]}\")\n            reg[0] -= reg[1]\n        case 2:\n            v10 = opcode[rip+1]\n            rip += 2\n            # print(v10)\n            print(f\"===2 reg[{opcode[rip]}]=reg[{v10}],reg[{opcode[rip]}]={reg[opcode[rip]]},reg[{v10}]={reg[v10]}\")\n            reg[opcode[rip]] = reg[v10]\n        case 3:\n            v11 = opcode[rip+1]\n            rip += 2\n            print(f\"===3 reg[{opcode[rip]}]={v11},reg[{opcode[rip]}]={reg[opcode[rip]]},reg[{v10}]={v11}\")\n            reg[opcode[rip]] = v11\n        case 4:\n            rip += 1\n            v12 = reg[0]\n            v13 = reg[0]*(reg[1]+1)\n            reg[0] = key^opcode[rip]\n            reg[1] = (reg[0] ^ (reg[1] + v12)) % 256 + (((reg[0] ^ (v12 * reg[1])) % 256 + (((reg[0] ^ (reg[1] + v13)) % 256) << 8)) << 8)\n            print(f\"decrypt reg[0]={reg[0]},reg[1]={reg[1]}\")\n        case 5:\n            print(f\"call-5 reg[4]={reg[4]},reg[5]={reg[5]},reg[6]={reg[6]},reg[7]={reg[7]}\")\n        case 6:\n            print(f\"call-6 reg[4]={reg[4]},reg[5]={reg[5]},reg[6]={reg[6]},reg[7]={reg[7]}\")\n    rip += 1\n\n```\n\n运行结果部分:\n\n```py\n===2 reg[0]=reg[8],reg[0]=0,reg[8]=50\n===2 reg[4]=reg[0],reg[4]=0,reg[0]=50\n===2 reg[0]=reg[4],reg[0]=50,reg[4]=50\n===3 reg[1]=1000,reg[1]=0,reg[4]=1000\n---1 reg[0]=50,reg[1]=1000,reg[0]=-950\n===2 reg[4]=reg[0],reg[4]=50,reg[0]=-950\n===2 reg[0]=reg[9],reg[0]=-950,reg[9]=50\n===2 reg[5]=reg[0],reg[5]=0,reg[0]=50\n===2 reg[0]=reg[4],reg[0]=50,reg[4]=-950\n===2 reg[1]=reg[5],reg[1]=1000,reg[5]=50\ndecrypt reg[0]=2907850890,reg[1]=8060662\n===2 reg[3]=reg[0],reg[3]=0,reg[0]=2907850890\n===2 reg[0]=reg[1],reg[0]=2907850890,reg[1]=8060662\n===2 reg[1]=reg[3],reg[1]=8060662,reg[3]=2907850890\n===2 reg[6]=reg[0],reg[6]=0,reg[0]=8060662\n===2 reg[7]=reg[1],reg[7]=0,reg[1]=2907850890\ncall-5 reg[4]=-950,reg[5]=50,reg[6]=8060662,reg[7]=2907850890\n===2 reg[0]=reg[8],reg[0]=8060662,reg[8]=50\n===2 reg[4]=reg[0],reg[4]=-950,reg[0]=50\n===2 reg[0]=reg[9],reg[0]=50,reg[9]=50\n===3 reg[1]=60,reg[1]=2907850890,reg[9]=60\n+++0 reg[0]=50,reg[1]=60,reg[0]=110\n===2 reg[5]=reg[0],reg[5]=50,reg[0]=110\n===2 reg[0]=reg[5],reg[0]=110,reg[5]=110\n===3 reg[1]=500,reg[1]=60,reg[5]=500\n---1 reg[0]=110,reg[1]=500,reg[0]=-390\n===2 reg[5]=reg[0],reg[5]=110,reg[0]=-390\n===2 reg[0]=reg[4],reg[0]=-390,reg[4]=50\n===2 reg[1]=reg[5],reg[1]=500,reg[5]=-390\ndecrypt reg[0]=2908393011,reg[1]=11790239\n===2 reg[6]=reg[0],reg[6]=8060662,reg[0]=2908393011\n===2 reg[7]=reg[1],reg[7]=2907850890,reg[1]=11790239\ncall-5 reg[4]=50,reg[5]=-390,reg[6]=2908393011,reg[7]=11790239\n```\n\n基本都是在case1的时候减了一个大数,然后call的参数就出现负数,简单的加个if条件,将减的那一步选择性的跳过,如果结果为负数,那么就不执行减操作,改下程序得到的参数貌似正常了,得到的“正确“参数如下:\n\n```py\nreg[4]=50,reg[5]=50,reg[6]=10637038,reg[7]=2907850890\nreg[4]=50,reg[5]=110,reg[6]=2908393011,reg[7]=3100563\nreg[4]=50,reg[5]=170,reg[6]=14547217,reg[7]=2912443085\nreg[4]=50,reg[5]=230,reg[6]=4632154,reg[7]=2913560642\nreg[4]=50,reg[5]=290,reg[6]=2910346480,reg[7]=545956\nreg[4]=50,reg[5]=350,reg[6]=5563432,reg[7]=2912304824\nreg[4]=110,reg[5]=230,reg[6]=2907066890,reg[7]=2285150\nreg[4]=170,reg[5]=230,reg[6]=10317121,reg[7]=2911202769\nreg[4]=230,reg[5]=230,reg[6]=2910162033,reg[7]=120253\nreg[4]=110,reg[5]=110,reg[6]=9170807,reg[7]=2912462507\nreg[4]=170,reg[5]=170,reg[6]=15283589,reg[7]=2911203025\n```\n\n尝试hook绘制函数传入这些参数进行绘制看看结果,试了很久一直没有显示,连原图的都不显示了,最后对照了一下第三个和第四个参数发现和之前hook来的参数不同,应该是计算的时候C有溢出但是python没有,重新用C写一遍模拟虚拟机运行的脚本运行得到第三个参数和第四个参数数组\n\n```c\n    int reg6[11] = { 0xf814b4,0x1bcd69,0x87a34b,0x1cf400,0x391faa,0xebe72,0x71150,0xc7371b,0x34cf2b,0xd1b52d,0xb36fdf};\n    int reg7[11] = { 0x130bd0,0x7515c9,0xd91997,0xe82b18,0x520efe,0xd77de2,0x788404,0xc42e8b,0x5b8fe7,0xd9e5f1,0xc42d8b };\n```\n\n注入测试\n\n![image-20240626145848145](https://s2.loli.net/2024/09/28/QiFy4E5RH6ctnOl.png)\n\n![image-20240626150321144](https://s2.loli.net/2024/09/28/Bc7KTqgd8x4EmlM.png)\n\n只显示了四个方块,嘶,怎么会少了7块呢,根据前两个参数的大概位置分析在第2,5,7,9次黄色函数调用处,对比一下他们的虚拟机运行情况\n\n![image-20240626150951503](https://s2.loli.net/2024/09/28/c87Y6WDz5NhkHxn.png)\n\n在这里看到了有些call调用的前将第三个和第四个参数分别调换了位置,刚好2,5,7,9没有调换!!!\n\n所以根据这个再把错误的参数位置调换一下进行注入测试\n\n![image-20240626151806428](https://s2.loli.net/2024/09/28/kj1fQxgE9NmiMLW.png)\n\nHOOK代码\n\n```C\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include <Windows.h>\n#include <stdio.h>\nDWORD64 HOOKADDR1 = (long long)GetModuleHandleA(\"2022游戏安全技术竞赛初赛.exe\") + 0X11E4; // MEMCPY函数\nDWORD64 HOOKADDR2 = 0;\nDWORD64 SHEELCODE = 0X0000001400027E2;\nDWORD64 SHEELCODE2 = 0X0000001400027C9;\n\nBYTE oldByte[12];\ntypedef void (*myMemecpy)(void* dest, const void* src, size_t n);\ntypedef __int64 (*funptr)(int, int, int, int, int, __int64, __int64, __int64, __int64, __int64);\n//HOOK绘制函数修改传参\n__int64 __fastcall drawHook(\n    int a1,\n    int a2,\n    int a3,\n    int a4,\n    int a5,\n    __int64 a6,\n    __int64 a7,\n    __int64 a8,\n    __int64 a9,\n    __int64 a10)\n{\n    int reg4[11] = { 50,50,50,50,50,50,110,170,230,110,170 };\n    int reg5[11] = { 50,110,170,230,290,350,230,230,230,110,170 };\n    int reg6[11] = { 0xf814b4,0x1bcd69,0x87a34b,0x1cf400,0x391faa,0xebe72,0x71150,0xc7371b,0x34cf2b,0xd1b52d,0xb36fdf };\n    int reg7[11] = { 0x130bd0,0x7515c9,0xd91997,0xe82b18,0x520efe,0xd77de2,0x788404,0xc42e8b,0x5b8fe7,0xd9e5f1,0xc42d8b };\n    for (int i = 0; i < 11; i++)\n    {\n        if (i == 1 || i == 4 || i == 6 || i == 8)\n        {\n            continue;\n        }\n        else\n        {\n            int tmp = reg6[i];\n            reg6[i] = reg7[i];\n            reg7[i] = tmp;\n        }\n    }\n    funptr fpt;\n    fpt = (funptr)(HOOKADDR2 - 0x5EE);\n    if (a5 == 0xffffff00)\n    {\n        static int i = -1;\n        i++;\n        return fpt(reg4[i], reg5[i], reg6[i], reg7[i], a5, a6, a7, a8, a9, a10);\n    }\n    return fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n}\n\n//第二处hook,hook绘制函数\nvoid installHook2()\n{\n    //00000001400027E2, 0000000009E50412\n    // \n    //0000000009E605EE   | E9 1FFEFFFF                          | jmp 9E60412                                   |\n    BYTE shellCode[] = {\n0xE9, 0x1F, 0xFE, 0xFF, 0xFF\n    };\n    DWORD lpflOldProtect = 0;\n    VirtualProtect((void*)HOOKADDR2, sizeof(shellCode), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)HOOKADDR2, shellCode, sizeof(shellCode));\n\n    /*\n    00000001400027E2   | 48:B8 A91148F6FF7F0000               | mov rax,testhook.7FFFF64811A9                 |\n    00000001400027EC   | FFD0                                 | call rax                                      |\n    00000001400027EE   | 48:B8 F305E60900000000               | mov rax,9E605F3                               |\n    00000001400027F8   | FFE0                                 | jmp rax                                       |\n    */\n    BYTE shellCode2[] = {\n 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0xB8,\n 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0\n    };;\n    *(DWORD64*)&shellCode2[2] = (DWORD64)drawHook;\n    *(DWORD64*)&shellCode2[14] = HOOKADDR2 + 0X5;\n    VirtualProtect((void*)(SHEELCODE), sizeof(shellCode2), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)(SHEELCODE), shellCode2, sizeof(shellCode2));\n\n    /*0000000009E60412   | 48:B8 E227004001000000               | mov rax,2022游戏安全技术竞赛初赛.1400027E2              |\n      0000000009E6041C   | FFE0                                 | jmp rax                                       |*/\n    BYTE shellCode3[] = {\n0x48, 0xB8, 0xE2, 0x27, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xE0\n    };;\n    *(DWORD64*)&shellCode3[2] = (DWORD64)SHEELCODE;\n    VirtualProtect((void*)(HOOKADDR2 - 0x5EE + 0X412), sizeof(shellCode3), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)(HOOKADDR2 - 0x5EE + 0X412), shellCode3, sizeof(shellCode3));\n\n}\nvoid* memcpyHook(void* dest, const void* src, size_t n)\n{ \n    HOOKADDR2 = (DWORD64)dest - 0x1301 + 0x5EE;//跟第一个参数偏移0x1301\n    installHook2();\n    return memcpy(dest, src, n);\n}\n\n\n//第一处hook,hook call memcpy\nvoid installHook1()\n{\n    //00000001400011E4   | E9 E0150000                          | jmp 2022游戏安全技术竞赛初赛.1400027C9                  |\n    BYTE shellCode[] = {\n0xE9, 0xE0, 0x15, 0x00, 0x00\n    };\n    DWORD lpflOldProtect = 0;\n    VirtualProtect((void*)HOOKADDR1, sizeof(shellCode), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)HOOKADDR1, shellCode, sizeof(shellCode));\n\n       /*00000001400027C9   | 48:B8 111348F6FF7F0000               | mov rax,testhook.7FFFF6481311                 |\n         00000001400027D3   | FFD0                                 | call rax                                      |\n         00000001400027D5   | E9 0FEAFFFF                          | jmp 2022游戏安全技术竞赛初赛.1400011E9                  |*/\n    BYTE shellCode2[] = {\n0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0xE9, 0x0F, 0xEA, 0xFF,\n 0xFF\n    };\n    *(DWORD64*)&shellCode2[2] = (DWORD64)memcpyHook;\n    VirtualProtect((void*)SHEELCODE2, sizeof(shellCode2), PAGE_EXECUTE_READWRITE,&lpflOldProtect);\n    memcpy((void*)SHEELCODE2, shellCode2, sizeof(shellCode2));\n}\n\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        installHook1();\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022腾讯游戏安全PC初赛.md","raw":"---\ntitle: 2022腾讯游戏安全PC初赛\ndate: 2024/8/6\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg\nthumbnail: https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n\n---\n\n## 初赛题\n\n这里有一个画了flag的小程序，可好像出了点问题，flag丢失了，需要把它找回来。<!-- more -->\n\n题目：\n\n![img](https://s2.loli.net/2024/09/28/6Qmd2VcMeykNvBh.jpg) \n\n找回flag样例：\n\n![img](https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg)  \n\n**要求**\n\n1、不得直接patch系统组件实现绘制（如：直接编写D3D代码绘制flag），只能对题目自身代码进行修改或调用。\n\n2、找回的flag需要和预期图案（包括颜色）一致，如果绘制结果存在偏差会扣除一定分数。\n\n3、赛后需要提交找回flag的**截图**和**解题代码**或**文档**进行评分。\n\n\n\nDIE查壳,PE64位无壳,先IDA静态分析看一下\n\n定位到这个函数\n\n![image-20240624131512660](https://s2.loli.net/2024/09/28/Kf5LpUDSHOtMijV.png)\n\n该函数先是加载了ntdll系统模块,再进行拼接字符串获取该模块**ZwAllocateVirtualMemory**函数地址\n\n```c\nNTSTATUS ZwAllocateVirtualMemory(\n  HANDLE ProcessHandle,     // 要分配内存的进程的句柄\n  PVOID *BaseAddress,      // 指向一个变量的指针，该变量接收分配的内存的基地址\n  ULONG ZeroBits,           // 指定返回的基地址中的高位必须为零的位数，用于对齐内存\n  PULONG AllocationSize,    // 指向一个变量，指定要分配的内存大小\n  ULONG AllocationType,     // 指定内存分配的类型，例如 MEM_COMMIT（提交内存）或 MEM_RESERVE（保留内存）\n  ULONG Protect             // 指定内存的保护属性，例如 PAGE_READWRITE（可读写）\n);\n```\n\n接着往下看\n\n![image-20240624133213434](https://s2.loli.net/2024/09/28/AWp9yTxRKqMFsS4.png)\n\n先是利用`ZwAllocateVirtualMemory`开辟了一块0x2BF9可读可写的地址空间,随后在该地址空间填入数据,最后再对地址空间部分数据进行了修改,qword_140008318可能是一个函数地址,在最后调用了这个函数,然后等待一段时间就释放了这个地址空间,所以绘画逻辑应该是在这个函数里,绘画完之后展现一段时间后消失和运行效果相同\n\n![image-20240624133856075](https://s2.loli.net/2024/09/28/VXlqCfShENxQJtY.png)\n\n所以主要逻辑应该是在qword_140008318函数里,x64dbg调试看一下,定位到qword_140008318赋值语句,00000001400011FE地址处下断点\n\n```asm\n00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |\n```\n\n进入rax发现确实是一个函数地址\n\n![image-20240624134305304](https://s2.loli.net/2024/09/28/3hs6n1WQgiwVFIz.png)\n\n再看一下修改部分的数据代表到底什么意思\n\n```asm\n00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |\n0000000140001205   | C783 6C060000 81250000                | mov dword ptr ds:[rbx+66C],2581               | rbx+66C:L\"▁\"\n000000014000120F   | C783 49040000 B40E0000                | mov dword ptr ds:[rbx+449],EB4                |\n0000000140001219   | C783 00060000 01130000                | mov dword ptr ds:[rbx+600],1301               |\n0000000140001223   | C605 EA700000 01                      | mov byte ptr ds:[140008314],1                 |\n```\n\n分别定位到rbx对应的偏移处找不同 \n\n第一处 `mov dword ptr ds:[rbx+66C],2581 `\n\n```asm\n000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |\n000000000D1A0669   | 48:8B05 90190000                      | mov rax,qword ptr ds:[D1A2000]                |\n000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |\n;修改后\n000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |\n000000000D1A0669   | 48:8B05 81250000                      | mov rax,qword ptr ds:[<&D3DCompile>]          |\n000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |\n```\n\n第二处 `mov dword ptr ds:[rbx+449],EB4`\n\n```asm\n000000000D1A0442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |\n000000000D1A0446   | 48:8D05 F32B0000                      | lea rax,qword ptr ds:[D1A3040]                |\n000000000D1A044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |\n;修改后\n000000000D190442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |\n000000000D190446   | 48:8D05 B40E0000                      | lea rax,qword ptr ds:[D191301]                |\n000000000D19044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |\n```\n\n第三处 `mov dword ptr ds:[rbx+600],1301`\n\n```asm\n000000000D1A05FD   | 48:81FE 8F050000                      | cmp rsi,58F                                   |\n000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |\n000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |\n;修改后\n000000000D1A05FD   | 48:81FE 01130000                      | cmp rsi,1301                                  |\n000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |\n000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |\n```\n\n第一处和第二处nop掉直接程序出现异常\n\n第三处nop掉发现会对绘画效果产生影响,这里少了五个方块,\n\n![image-20240624142159289](https://s2.loli.net/2024/09/28/ok3QWLSeBvwAjlG.png)\n\n所以`[rbx+600]`处附近会可能有绘画逻辑,运行到附近看看\n\n![image-20240624211750273](https://s2.loli.net/2024/09/28/936mRkzHTn7ltPp.png)\n\n分析这个函数,这里的rsi应该是一个数组的索引值,通过数组的值是否等于7进行判断,应该是将有效值和无效值进行区分,然后遍历了整个数组,进行了多次循环操作\n\n![image-20240624212123944](https://s2.loli.net/2024/09/28/kUdTK6V7851wsCe.png)\n\n那有效值在哪呢,我们主要找的绘画的浮点数位置保存在哪?D3D开发的经验不多,我就从一个个可能的函数的参数入手\n\n看看是否能直接通过传参获取位置数组,这个函数里只有一个函数D190000\n\n运行到该函数,观察函数传参窗口\n\n![image-20240624212702425](https://s2.loli.net/2024/09/28/mSvEdt2BeKuVfMJ.png)\n\n显然没有这么容易,那还有可能在这个函数的母函数或者子函数的函数里\n\n通过堆栈回溯找到母函数![image-20240624212930015](https://s2.loli.net/2024/09/28/8PonE21t9QSVgjN.png)\n\n这个rax是之前分析过了的函数地址,所以这个函数就是位置数组的出处了\n\n进入分析\n\n![image-20240624213223998](https://s2.loli.net/2024/09/28/qgKW4SXJl3vouje.png)\n\n调用了一堆系统函数,并没有明显传参,也没有浮点数处理的汇编指令,这些略过分析,继续看\n\n![image-20240624213702469](https://s2.loli.net/2024/09/28/oOxUStEnueRMhXL.png)\n\n这里传入了两个浮点数,一个1920,一个1080,分辨率大小? 应该是绘画的初始化操作,继续分析找浮点数数组\n\n![image-20240624214126525](https://s2.loli.net/2024/09/28/7b2wRsrEF3uxXdP.png)\n\n这里有个缓冲区,存储了HLSL语言编写的一段顶点着色器和像素着色器的代码,进行图形渲染步骤,然后再调用了一些D3D函数\n\n```c\n// 定义常量缓冲区\ncbuffer ConstantBuffer : register(b0)\n{\n    matrix World;        // 世界矩阵\n    matrix View;          // 视图矩阵\n    matrix Projection;    // 投影矩阵\n};\n\n// 定义顶点着色器的输出结构体\nstruct VS_OUTPUT\n{\n    float4 Pos : SV_POSITION; // 顶点位置\n    float4 Color : COLOR0;    // 顶点颜色\n};\n\n// 顶点着色器\nVS_OUTPUT VS(float4 Pos : POSITION, float4 Color : COLOR)\n{\n    VS_OUTPUT output = (VS_OUTPUT)0;\n\n    // 应用变换矩阵\n    output.Pos = mul(Pos, World);\n    output.Pos = mul(output.Pos, View);\n    output.Pos = mul(output.Pos, Projection);\n\n    // 传递颜色\n    output.Color = Color;\n\n    return output;\n}\n\n// 像素着色器\nfloat4 PS(VS_OUTPUT input) : SV_Target\n{\n    // 直接返回输入颜色\n    return input.Color;\n}\n```\n\n下面还有一个\n\n![image-20240624214515403](https://s2.loli.net/2024/09/28/Mhbj5PZULiHESBG.png)\n\n```c\n// 定义顶点着色器的输出结构体\nstruct VSOut\n{\n    float4 Col : COLOR;   // 顶点颜色\n    float4 Pos : SV_POSITION; // 顶点位置\n};\n\n// 顶点着色器\nVSOut VS(float4 Col : COLOR, float4 Pos : POSITION)\n{\n    VSOut Output;\n    \n    // 将输入位置赋值给输出位置\n    Output.Pos = Pos;\n    \n    // 将输入颜色赋值给输出颜色\n    Output.Col = Col;\n    \n    return Output;\n}\n\n// 像素着色器\nfloat4 PS(float4 Col : COLOR) : SV_TARGET\n{\n    // 直接返回输入的颜色作为像素颜色\n    return Col;\n}\n```\n\n两个不同的着色器设计,是否对应了一个flag图形和原始图形两种图形不同的着色器呢?\n\n但是最关键的位置数组我们还没找到,接着往下分析吧\n\n![image-20240624215140725](https://s2.loli.net/2024/09/28/mBesSDUAnECP9ZL.png)\n\n这个函数内部还有一个用户层函数,进入分析\n\n发现这个函数内部就是刚刚回溯开始的函数,那就直接进入该函数的子函数分析\n\n![image-20240624215445902](https://s2.loli.net/2024/09/28/9xAFXJso7lwzetW.png)\n\n一堆浮点数处理的汇编指令,好像还进行了加密解密操作,所以这里应该就是浮点数数组的出处了吧\n\n跳过这些计算浮点数的指令,直接找到赋值语句并定位位置数组的首地址\n\n![image-20240624215809549](https://s2.loli.net/2024/09/28/hMfPO7uotwxWEKD.png)\n\n这里分析发现,rcx即为数组首地址,继续分析,后面就是继续调用D3D函数,但是我并没有发现数组怎么传进去的,只是找到可能的位置数组,这个函数运行到返回只提供了0x70大小的浮点数数组,但是我们在之前分析过了,这个函数会循环运行,循环运行完后导出这些浮点数.得到1340个浮点数,到这里我有点怀疑这个数组的真实性了,不应该有这么长的数据的,总共方块数是31+11=42个,点数就是42*4=168个点,就算是三维坐标也不超过这么多数据,但是我还是在python进行了一个绘制,这里是python绘制代码\n\n```py\nimport struct\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfloat_values = [  71.2234,       73.5287,             0,             1,\n        1,             0,             1,        71.062,\n  73.5287,             0,             1,             1,\n        0,             1,       71.2234,       73.8157,\n        0,             1,             1,             0,\n        1,        71.062,       73.8157,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n0.0526041,        2.7213,             0,             1,\n        1,             0,             1,      0.103646,\n   2.7213,             0,             1,             1,\n        0,             1,     0.0526041,       2.63056,\n        0,             1,             1,             0,\n        1,      0.103646,       2.63056,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -95.9422,      -93.3991,             0,             1,\n        1,             0,             1,       -95.938,\n -93.3991,             0,             1,             1,\n        0,             1,      -95.9422,      -93.4065,\n        0,             1,             1,             0,\n        1,       -95.938,      -93.4065,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -228.747,      -227.782,             0,             1,\n        1,             0,             1,      -228.896,\n -227.782,             0,             1,             1,\n        0,             1,      -228.747,      -227.518,\n        0,             1,             1,             0,\n        1,      -228.896,      -227.518,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -1.98906,       1.38796,             0,             1,\n        1,             0,             1,      -1.93802,\n  1.38796,             0,             1,             1,\n        0,             1,      -1.98906,       1.29722,\n        0,             1,             1,             0,\n        1,      -1.93802,       1.29722,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -58.0307,      -56.5009,             0,             1,\n        1,             0,             1,      -57.8964,\n -56.5009,             0,             1,             1,\n        0,             1,      -58.0307,      -56.7398,\n        0,             1,             1,             0,\n        1,      -57.8964,      -56.7398,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -1.92656,       1.49907,             0,             1,\n        1,             0,             1,      -1.87552,\n  1.49907,             0,             1,             1,\n        0,             1,      -1.92656,       1.40833,\n        0,             1,             1,             0,\n        1,      -1.87552,       1.40833,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -125.702,      -123.716,             0,             1,\n        1,             0,             1,      -125.771,\n -123.716,             0,             1,             1,\n        0,             1,      -125.702,      -123.592,\n        0,             1,             1,             0,\n        1,      -125.771,      -123.592,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n-0.801563,       1.57315,             0,             1,\n        1,             0,             1,     -0.750521,\n  1.57315,             0,             1,             1,\n        0,             1,     -0.801563,       1.48241,\n        0,             1,             1,             0,\n        1,     -0.750521,       1.48241,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -141.003,      -138.069,             0,             1,\n        1,             0,             1,      -140.834,\n -138.069,             0,             1,             1,\n        0,             1,      -141.003,      -138.369,\n        0,             1,             1,             0,\n        1,      -140.834,      -138.369,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n -30.8589,       -28.325,             0,             1,\n        1,             0,             1,       -30.813,\n  -28.325,             0,             1,             1,\n        0,             1,      -30.8589,      -28.4065,\n        0,             1,             1,             0,\n        1,       -30.813,      -28.4065,             0,\n        1,             1,             0,             1,\n        0,             0,             0,             0,\n-0.323438,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.271354,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.323438,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.271354,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.385938,      0.797222,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.333854,\n 0.797222,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.385938,       0.70463,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.333854,       0.70463,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.448438,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.396354,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.448438,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.396354,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.510938,         0.575,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.458854,\n    0.575,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.510938,      0.482407,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.458854,      0.482407,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.573438,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.521354,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.573438,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.521354,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.510938,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.458854,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.510938,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.458854,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.448438,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.396354,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.448438,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.396354,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.260938,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.208854,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.260938,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.208854,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.198437,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.146354,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.198437,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.146354,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.135937,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,    -0.0838542,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.135937,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,    -0.0838542,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.260938,      0.797222,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.208854,\n 0.797222,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.260938,       0.70463,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.208854,       0.70463,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.198437,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,     -0.146354,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.198437,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     -0.146354,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n-0.135937,         0.575,             0,      0.176471,\n 0.866667,      0.905882,             1,    -0.0838542,\n    0.575,             0,      0.176471,      0.866667,\n 0.905882,             1,     -0.135937,      0.482407,\n        0,      0.176471,      0.866667,      0.905882,\n        1,    -0.0838542,      0.482407,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0734375,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,    -0.0213542,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,    -0.0734375,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,    -0.0213542,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0109375,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,     0.0411458,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,    -0.0109375,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     0.0411458,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0515625,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.103646,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,     0.0515625,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.103646,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.114063,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.166146,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.114063,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.166146,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0109375,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,     0.0411458,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,    -0.0109375,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,     0.0411458,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0515625,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.103646,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,     0.0515625,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.103646,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.114063,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.166146,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.114063,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.166146,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.176563,      0.908333,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.228646,\n 0.908333,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.176563,      0.815741,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.228646,      0.815741,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n0.0515625,      0.797222,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.103646,\n 0.797222,             0,      0.176471,      0.866667,\n 0.905882,             1,     0.0515625,       0.70463,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.103646,       0.70463,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.114063,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.166146,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.114063,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.166146,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.176563,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.228646,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.176563,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.228646,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.239063,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.291146,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.239063,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.291146,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.301562,      0.686111,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.353646,\n 0.686111,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.301562,      0.593518,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.353646,      0.593518,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.176563,         0.575,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.228646,\n    0.575,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.176563,      0.482407,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.228646,      0.482407,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.239063,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.291146,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.239063,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.291146,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.301562,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.353646,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.301562,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.353646,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.364062,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.416146,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.364062,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.416146,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1,\n        0,             0,             0,             0,\n 0.426562,      0.463889,             0,      0.176471,\n 0.866667,      0.905882,             1,      0.478646,\n 0.463889,             0,      0.176471,      0.866667,\n 0.905882,             1,      0.426562,      0.371296,\n        0,      0.176471,      0.866667,      0.905882,\n        1,      0.478646,      0.371296,             0,\n 0.176471,      0.866667,      0.905882,             1]\ncoordinates = [float_values[i:i+2] for i in range(0,len(float_values),2)]\n\nfig = plt.figure()\n\nax = fig.add_subplot(111)\n\nx_values = [x for x, _ in coordinates]\ny_values = [y for _, y in coordinates]\n\nax.scatter(x_values, y_values)\n\nplt.show()\n```\n\n运行结果如图:\n\n![image-20240624221016969](https://s2.loli.net/2024/09/28/Euf4PlCp7zbyLGd.png)\n\n这里有一个密集位置,箭头指向应该是让我们放大看\n\n![image-20240624221254947](https://s2.loli.net/2024/09/28/dgHw3sEYDmX9Tz2.png)\n\n确实出现了原图的形状,但是flag旗帜的点也嵌在其中,但是对比位置好像有点问题,而且点的数量也不够,还有一个问题就是为什么这些位置没有被实际展现出来\n\n那我们先解决为什么没有展现出来的问题,根据之前的分析,这里的几个跳转语句可能是问题所在,这里类似一个switch语句,通过数组的索引和其中的值来决定下一步的运算,有加减和一些别的运算.有点类似虚拟机的opcode\n\n![image-20240626100831665](https://s2.loli.net/2024/09/28/wdAXGvEePIhMHNa.png)\n\n这里汇编有点没分析出来啥意思,拖到ida里调试看看伪代码\n\n![image-20240626103148199](https://s2.loli.net/2024/09/28/OiEewtYlbzKqkhF.png)\n\ndword_E3D1301应该就是opcode数组,然后v14应该是指八个寄存器,然后case4有点没看像是一种加解密运算,然后case5和case6是两个相同的函数,传参只有一个不同,0xFFFFFF00和0xFF2DDBE7,可能与rgb的十六进制值有关,上在线转换网站上看一下\n\n![image-20240626103952814](https://s2.loli.net/2024/09/28/cBuntC9yZEWORwA.png)\n\n![image-20240626104016412](https://s2.loli.net/2024/09/28/EhFLHykfAqegiaG.png)\n\n应该就是flag的黄色和原图的蓝色了,但是为什么同一个函数,只是颜色不同,怎么会有不显示和显示的情况呢,不清楚,hook一下看一下调用的时候其他参数有什么区别\n\nhook代码:\n\n```c\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include <detours.h>\n#include <stdio.h>\n#pragma comment(lib,\"detours.lib\")\n//addr = [140008318] - 0x650\n#define QWORDADDR 0x140008318\n#define OFFSET 0x650\ntypedef __int64 (*funptr)(int, int, int, int, int, __int64, __int64, __int64, __int64, __int64);\nINT64 func;\n__int64 __fastcall funcHook(\n    int a1,\n    int a2,\n    int a3,\n    int a4,\n    int a5,\n    __int64 a6,\n    __int64 a7,\n    __int64 a8,\n    __int64 a9,\n    __int64 a10)\n{\n    FILE* f = fopen(\"C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt\", \"a+\");\n    char in[100];\n    sprintf(in,\"a1:0x%08x,a2:0x%08x,a3:0x%08x,a4:0x%08x,a5:0x%08x\\n\", a1, a2, a3, a4, a5);\n    fputs(in, f);\n    fclose(f);\n    funptr fpt;\n    fpt = (funptr)func;\n    fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n    return 0;\n}\nvoid Start_Hook()\n{\n\tDetourRestoreAfterWith();\n\tDetourTransactionBegin();\n\tDetourUpdateThread(GetCurrentThread());\n\tINT64 qword_addr;\n    if (!ReadProcessMemory(GetCurrentProcess(), (LPCVOID*)QWORDADDR, &qword_addr, 8, NULL))\n    {\n        FILE* f = fopen(\"C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt\", \"a+\");\n        fputs(\"error ReadProcessMemory\\n\", f);\n        fclose(f);\n\n        return;\n    }\n    func = qword_addr - OFFSET;\n\n\tDetourAttach((PVOID*)&func, funcHook);//msg\n\tDetourTransactionCommit();\n}\nvoid Exit_Hook()\n{\n\tDetourTransactionBegin();\n\tDetourUpdateThread(GetCurrentThread());\n\tDetourDetach((PVOID*)&func, funcHook);\n\tDetourTransactionCommit();\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n\t\tStart_Hook();\n\t\tbreak;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n\t\tExit_Hook();\n        break;\n    }\n    return TRUE;\n}\n\n\n```\n\n得到前五个参数内容\n\n```\na1:0xfffffc4a,a2:0x00000032,a3:0xff1fa3ac,a4:0x00130bd0,a5:0xffffff00\na1:0x00000032,a2:0xfffffe7a,a3:0x001bcd69,a4:0xffe8bcc5,a5:0xffffff00\na1:0xfffffc4a,a2:0x000000aa,a3:0xff8eb263,a4:0x00d91997,a5:0xffffff00\na1:0x00000032,a2:0x000000e6,a3:0x001cf400,a4:0x00e82b18,a5:0xffffff00\na1:0xfffffc4a,a2:0xffffff2e,a3:0x00391faa,a4:0x006ee5d2,a5:0xffffff00\na1:0x00000032,a2:0x0000015e,a3:0x000ebe72,a4:0x00d77de2,a5:0xffffff00\na1:0xfffffc86,a2:0xfffffef2,a3:0x00071150,a4:0x0074fb28,a5:0xffffff00\na1:0x000000aa,a2:0xfffffef2,a3:0xffda3e17,a4:0x00c42e8b,a5:0xffffff00\na1:0xfffffcfe,a2:0x000000e6,a3:0x0034cf2b,a4:0xff321ecf,a5:0xffffff00\na1:0x0000006e,a2:0xfffffe7a,a3:0xffa49c19,a4:0x00d9e5f1,a5:0xffffff00\na1:0xfffffcc2,a2:0x000000aa,a3:0xffca5ee7,a4:0x00c42d8b,a5:0xffffff00\na1:0x0000028a,a2:0x00000032,a3:0x00eabf17,a4:0x00a7e3ab,a5:0xff2ddbe7\na1:0x0000024e,a2:0x0000006e,a3:0x00c42d8b,a4:0x00cb0f37,a5:0xff2ddbe7\na1:0x00000212,a2:0x000000aa,a3:0x00d717af,a4:0x001f5b13,a5:0xff2ddbe7\na1:0x000001d6,a2:0x000000e6,a3:0x00c460e9,a4:0x00e9ad55,a5:0xff2ddbe7\na1:0x0000019a,a2:0x00000122,a3:0x00c7a989,a4:0x00b9fd35,a5:0xff2ddbe7\na1:0x000001d6,a2:0x00000122,a3:0x00ab7100,a4:0x00646cf8,a5:0xff2ddbe7\na1:0x00000212,a2:0x00000122,a3:0x00c409a9,a4:0x0031cd9d,a5:0xff2ddbe7\na1:0x000002c6,a2:0x00000032,a3:0x00d77e8b,a4:0x002f2773,a5:0xff2ddbe7\na1:0x00000302,a2:0x00000032,a3:0x00d9ad01,a4:0x00996535,a5:0xff2ddbe7\na1:0x0000033e,a2:0x00000032,a3:0x0039e156,a4:0x00da4a26,a5:0xff2ddbe7\na1:0x000002c6,a2:0x0000006e,a3:0x0013207c,a4:0x00346848,a5:0xff2ddbe7\na1:0x00000302,a2:0x000000aa,a3:0x00c9140b,a4:0x000b5fa7,a5:0xff2ddbe7\na1:0x0000033e,a2:0x000000e6,a3:0x0053071f,a4:0x00c7ab3b,a5:0xff2ddbe7\na1:0x0000037a,a2:0x00000122,a3:0x00d71106,a4:0x00d6329a,a5:0xff2ddbe7\na1:0x000003b6,a2:0x00000122,a3:0x00eb60a1,a4:0x00a58d79,a5:0xff2ddbe7\na1:0x000003f2,a2:0x00000122,a3:0x00eb67cd,a4:0x00f5e9d9,a5:0xff2ddbe7\na1:0x0000042e,a2:0x00000122,a3:0x00d71161,a4:0x000d7d31,a5:0xff2ddbe7\na1:0x000003b6,a2:0x00000032,a3:0x00677611,a4:0x00659df9,a5:0xff2ddbe7\na1:0x000003f2,a2:0x00000032,a3:0x0040173d,a4:0x00557919,a5:0xff2ddbe7\na1:0x0000042e,a2:0x00000032,a3:0x00d77661,a4:0x003d9d01,a5:0xff2ddbe7\na1:0x0000046a,a2:0x00000032,a3:0x00efff9a,a4:0x00ca2e06,a5:0xff2ddbe7\na1:0x000003f2,a2:0x0000006e,a3:0x00c404eb,a4:0x00b7178b,a5:0xff2ddbe7\na1:0x0000042e,a2:0x000000aa,a3:0x00d7c6ef,a4:0x008b6337,a5:0xff2ddbe7\na1:0x0000046a,a2:0x000000aa,a3:0x00d7701f,a4:0x00677b0b,a5:0xff2ddbe7\na1:0x000004a6,a2:0x000000aa,a3:0x00d71171,a4:0x00fd4d21,a5:0xff2ddbe7\na1:0x000004e2,a2:0x000000aa,a3:0x003906ab,a4:0x000bbf27,a5:0xff2ddbe7\na1:0x0000046a,a2:0x000000e6,a3:0x00096663,a4:0x00ef5f33,a5:0xff2ddbe7\na1:0x000004a6,a2:0x00000122,a3:0x00732157,a4:0x00835b9f,a5:0xff2ddbe7\na1:0x000004e2,a2:0x00000122,a3:0x00353730,a4:0x00383434,a5:0xff2ddbe7\na1:0x0000051e,a2:0x00000122,a3:0x006257a9,a4:0x009555e9,a5:0xff2ddbe7\na1:0x0000055a,a2:0x00000122,a3:0x00d777af,a4:0x00df5bd3,a5:0xff2ddbe7\n```\n\n可以看到蓝色调用了31次,黄色调用了11次,正好对应正方形块数,验证了猜测.\n\n前面的四个参数在蓝色调用的时候基本都是正数,黄色调用的时候则总会出现一些负数的情况,所以可能就是在这四个参数出了问题让绘制出现了失败,在蓝色调用的前两个参数有一些相同的情况,比如说第二个参数0x00000032这个值,出现了8次,对应了一行的八个方块,0x0000006e则对应三个方块,应该就是指的y坐标,第一个参数则可能会是x坐标,知道了这个,我们就可以通过hook这个绘制函数通过正确传参就能实现绘制,但是正确的位置在哪呢?位置被错误的计算了,只能从虚拟机运行入手了,写个脚本跑一下运行流程\n\n```py\nopcode = [0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00524895, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x005A8E2C, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00985AD2, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00A9685D, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00785CEF, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00963EA7, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00465215, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00856DCE, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00758C6E, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000005, 0x00000000, 0x00000003, 0x000001F4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0098A6B4, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000003E8, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00856ECE, 0x00000002, 0x00000000, 0x00000003, 0x00000002, 0x00000001, 0x00000000, 0x00000002, 0x00000003, 0x00000001, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000005, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000258, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000008, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00ABFC52, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00856ECE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x009654EA, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x008523AC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0086EACC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00EA3245, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000001, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00854AEC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00963DCE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0098EE44, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0078A213, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00526339, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0088574E, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0012445A, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00965243, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00AA23E4, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000168, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00AA2488, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000001A4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00965224, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000008, 0x00000002, 0x00000008, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00263554, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00015478, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00963524, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00AEBCDF, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x0000003C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x008547AE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x009685AA, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x0096335A, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00965234, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x00000078, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x007845EE, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000B4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00482526, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00326212, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x0000012C, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x00747475, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x00000168, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x002314EC, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000002, 0x00000008, 0x00000000, 0x00000003, 0x000001A4, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000004, 0x00000002, 0x00000009, 0x00000000, 0x00000003, 0x000000F0, 0x00000001, 0x00000000, 0x00000002, 0x00000000, 0x00000005, 0x00000002, 0x00000004, 0x00000000, 0x00000002, 0x00000005, 0x00000001, 0x00000004, 0x009634EA, 0x00000002, 0x00000000, 0x00000006, 0x00000002, 0x00000001, 0x00000007, 0x00000006, 0x00000007]\nkey = 0x0AD00001F\nreg = [0,0,0,0,0,0,0,0,50,50]\nrip = 0\nwhile rip < len(opcode):\n    match opcode[rip]:\n        case 0:\n            print(f\"+++0 reg[0]={reg[0]},reg[1]={reg[1]},reg[0]={reg[0]+reg[1]}\")\n            reg[0] += reg[1]\n        case 1:\n            print(f\"---1 reg[0]={reg[0]},reg[1]={reg[1]},reg[0]={reg[0]-reg[1]}\")\n            reg[0] -= reg[1]\n        case 2:\n            v10 = opcode[rip+1]\n            rip += 2\n            # print(v10)\n            print(f\"===2 reg[{opcode[rip]}]=reg[{v10}],reg[{opcode[rip]}]={reg[opcode[rip]]},reg[{v10}]={reg[v10]}\")\n            reg[opcode[rip]] = reg[v10]\n        case 3:\n            v11 = opcode[rip+1]\n            rip += 2\n            print(f\"===3 reg[{opcode[rip]}]={v11},reg[{opcode[rip]}]={reg[opcode[rip]]},reg[{v10}]={v11}\")\n            reg[opcode[rip]] = v11\n        case 4:\n            rip += 1\n            v12 = reg[0]\n            v13 = reg[0]*(reg[1]+1)\n            reg[0] = key^opcode[rip]\n            reg[1] = (reg[0] ^ (reg[1] + v12)) % 256 + (((reg[0] ^ (v12 * reg[1])) % 256 + (((reg[0] ^ (reg[1] + v13)) % 256) << 8)) << 8)\n            print(f\"decrypt reg[0]={reg[0]},reg[1]={reg[1]}\")\n        case 5:\n            print(f\"call-5 reg[4]={reg[4]},reg[5]={reg[5]},reg[6]={reg[6]},reg[7]={reg[7]}\")\n        case 6:\n            print(f\"call-6 reg[4]={reg[4]},reg[5]={reg[5]},reg[6]={reg[6]},reg[7]={reg[7]}\")\n    rip += 1\n\n```\n\n运行结果部分:\n\n```py\n===2 reg[0]=reg[8],reg[0]=0,reg[8]=50\n===2 reg[4]=reg[0],reg[4]=0,reg[0]=50\n===2 reg[0]=reg[4],reg[0]=50,reg[4]=50\n===3 reg[1]=1000,reg[1]=0,reg[4]=1000\n---1 reg[0]=50,reg[1]=1000,reg[0]=-950\n===2 reg[4]=reg[0],reg[4]=50,reg[0]=-950\n===2 reg[0]=reg[9],reg[0]=-950,reg[9]=50\n===2 reg[5]=reg[0],reg[5]=0,reg[0]=50\n===2 reg[0]=reg[4],reg[0]=50,reg[4]=-950\n===2 reg[1]=reg[5],reg[1]=1000,reg[5]=50\ndecrypt reg[0]=2907850890,reg[1]=8060662\n===2 reg[3]=reg[0],reg[3]=0,reg[0]=2907850890\n===2 reg[0]=reg[1],reg[0]=2907850890,reg[1]=8060662\n===2 reg[1]=reg[3],reg[1]=8060662,reg[3]=2907850890\n===2 reg[6]=reg[0],reg[6]=0,reg[0]=8060662\n===2 reg[7]=reg[1],reg[7]=0,reg[1]=2907850890\ncall-5 reg[4]=-950,reg[5]=50,reg[6]=8060662,reg[7]=2907850890\n===2 reg[0]=reg[8],reg[0]=8060662,reg[8]=50\n===2 reg[4]=reg[0],reg[4]=-950,reg[0]=50\n===2 reg[0]=reg[9],reg[0]=50,reg[9]=50\n===3 reg[1]=60,reg[1]=2907850890,reg[9]=60\n+++0 reg[0]=50,reg[1]=60,reg[0]=110\n===2 reg[5]=reg[0],reg[5]=50,reg[0]=110\n===2 reg[0]=reg[5],reg[0]=110,reg[5]=110\n===3 reg[1]=500,reg[1]=60,reg[5]=500\n---1 reg[0]=110,reg[1]=500,reg[0]=-390\n===2 reg[5]=reg[0],reg[5]=110,reg[0]=-390\n===2 reg[0]=reg[4],reg[0]=-390,reg[4]=50\n===2 reg[1]=reg[5],reg[1]=500,reg[5]=-390\ndecrypt reg[0]=2908393011,reg[1]=11790239\n===2 reg[6]=reg[0],reg[6]=8060662,reg[0]=2908393011\n===2 reg[7]=reg[1],reg[7]=2907850890,reg[1]=11790239\ncall-5 reg[4]=50,reg[5]=-390,reg[6]=2908393011,reg[7]=11790239\n```\n\n基本都是在case1的时候减了一个大数,然后call的参数就出现负数,简单的加个if条件,将减的那一步选择性的跳过,如果结果为负数,那么就不执行减操作,改下程序得到的参数貌似正常了,得到的“正确“参数如下:\n\n```py\nreg[4]=50,reg[5]=50,reg[6]=10637038,reg[7]=2907850890\nreg[4]=50,reg[5]=110,reg[6]=2908393011,reg[7]=3100563\nreg[4]=50,reg[5]=170,reg[6]=14547217,reg[7]=2912443085\nreg[4]=50,reg[5]=230,reg[6]=4632154,reg[7]=2913560642\nreg[4]=50,reg[5]=290,reg[6]=2910346480,reg[7]=545956\nreg[4]=50,reg[5]=350,reg[6]=5563432,reg[7]=2912304824\nreg[4]=110,reg[5]=230,reg[6]=2907066890,reg[7]=2285150\nreg[4]=170,reg[5]=230,reg[6]=10317121,reg[7]=2911202769\nreg[4]=230,reg[5]=230,reg[6]=2910162033,reg[7]=120253\nreg[4]=110,reg[5]=110,reg[6]=9170807,reg[7]=2912462507\nreg[4]=170,reg[5]=170,reg[6]=15283589,reg[7]=2911203025\n```\n\n尝试hook绘制函数传入这些参数进行绘制看看结果,试了很久一直没有显示,连原图的都不显示了,最后对照了一下第三个和第四个参数发现和之前hook来的参数不同,应该是计算的时候C有溢出但是python没有,重新用C写一遍模拟虚拟机运行的脚本运行得到第三个参数和第四个参数数组\n\n```c\n    int reg6[11] = { 0xf814b4,0x1bcd69,0x87a34b,0x1cf400,0x391faa,0xebe72,0x71150,0xc7371b,0x34cf2b,0xd1b52d,0xb36fdf};\n    int reg7[11] = { 0x130bd0,0x7515c9,0xd91997,0xe82b18,0x520efe,0xd77de2,0x788404,0xc42e8b,0x5b8fe7,0xd9e5f1,0xc42d8b };\n```\n\n注入测试\n\n![image-20240626145848145](https://s2.loli.net/2024/09/28/QiFy4E5RH6ctnOl.png)\n\n![image-20240626150321144](https://s2.loli.net/2024/09/28/Bc7KTqgd8x4EmlM.png)\n\n只显示了四个方块,嘶,怎么会少了7块呢,根据前两个参数的大概位置分析在第2,5,7,9次黄色函数调用处,对比一下他们的虚拟机运行情况\n\n![image-20240626150951503](https://s2.loli.net/2024/09/28/c87Y6WDz5NhkHxn.png)\n\n在这里看到了有些call调用的前将第三个和第四个参数分别调换了位置,刚好2,5,7,9没有调换!!!\n\n所以根据这个再把错误的参数位置调换一下进行注入测试\n\n![image-20240626151806428](https://s2.loli.net/2024/09/28/kj1fQxgE9NmiMLW.png)\n\nHOOK代码\n\n```C\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include <Windows.h>\n#include <stdio.h>\nDWORD64 HOOKADDR1 = (long long)GetModuleHandleA(\"2022游戏安全技术竞赛初赛.exe\") + 0X11E4; // MEMCPY函数\nDWORD64 HOOKADDR2 = 0;\nDWORD64 SHEELCODE = 0X0000001400027E2;\nDWORD64 SHEELCODE2 = 0X0000001400027C9;\n\nBYTE oldByte[12];\ntypedef void (*myMemecpy)(void* dest, const void* src, size_t n);\ntypedef __int64 (*funptr)(int, int, int, int, int, __int64, __int64, __int64, __int64, __int64);\n//HOOK绘制函数修改传参\n__int64 __fastcall drawHook(\n    int a1,\n    int a2,\n    int a3,\n    int a4,\n    int a5,\n    __int64 a6,\n    __int64 a7,\n    __int64 a8,\n    __int64 a9,\n    __int64 a10)\n{\n    int reg4[11] = { 50,50,50,50,50,50,110,170,230,110,170 };\n    int reg5[11] = { 50,110,170,230,290,350,230,230,230,110,170 };\n    int reg6[11] = { 0xf814b4,0x1bcd69,0x87a34b,0x1cf400,0x391faa,0xebe72,0x71150,0xc7371b,0x34cf2b,0xd1b52d,0xb36fdf };\n    int reg7[11] = { 0x130bd0,0x7515c9,0xd91997,0xe82b18,0x520efe,0xd77de2,0x788404,0xc42e8b,0x5b8fe7,0xd9e5f1,0xc42d8b };\n    for (int i = 0; i < 11; i++)\n    {\n        if (i == 1 || i == 4 || i == 6 || i == 8)\n        {\n            continue;\n        }\n        else\n        {\n            int tmp = reg6[i];\n            reg6[i] = reg7[i];\n            reg7[i] = tmp;\n        }\n    }\n    funptr fpt;\n    fpt = (funptr)(HOOKADDR2 - 0x5EE);\n    if (a5 == 0xffffff00)\n    {\n        static int i = -1;\n        i++;\n        return fpt(reg4[i], reg5[i], reg6[i], reg7[i], a5, a6, a7, a8, a9, a10);\n    }\n    return fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n}\n\n//第二处hook,hook绘制函数\nvoid installHook2()\n{\n    //00000001400027E2, 0000000009E50412\n    // \n    //0000000009E605EE   | E9 1FFEFFFF                          | jmp 9E60412                                   |\n    BYTE shellCode[] = {\n0xE9, 0x1F, 0xFE, 0xFF, 0xFF\n    };\n    DWORD lpflOldProtect = 0;\n    VirtualProtect((void*)HOOKADDR2, sizeof(shellCode), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)HOOKADDR2, shellCode, sizeof(shellCode));\n\n    /*\n    00000001400027E2   | 48:B8 A91148F6FF7F0000               | mov rax,testhook.7FFFF64811A9                 |\n    00000001400027EC   | FFD0                                 | call rax                                      |\n    00000001400027EE   | 48:B8 F305E60900000000               | mov rax,9E605F3                               |\n    00000001400027F8   | FFE0                                 | jmp rax                                       |\n    */\n    BYTE shellCode2[] = {\n 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0xB8,\n 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0\n    };;\n    *(DWORD64*)&shellCode2[2] = (DWORD64)drawHook;\n    *(DWORD64*)&shellCode2[14] = HOOKADDR2 + 0X5;\n    VirtualProtect((void*)(SHEELCODE), sizeof(shellCode2), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)(SHEELCODE), shellCode2, sizeof(shellCode2));\n\n    /*0000000009E60412   | 48:B8 E227004001000000               | mov rax,2022游戏安全技术竞赛初赛.1400027E2              |\n      0000000009E6041C   | FFE0                                 | jmp rax                                       |*/\n    BYTE shellCode3[] = {\n0x48, 0xB8, 0xE2, 0x27, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xE0\n    };;\n    *(DWORD64*)&shellCode3[2] = (DWORD64)SHEELCODE;\n    VirtualProtect((void*)(HOOKADDR2 - 0x5EE + 0X412), sizeof(shellCode3), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)(HOOKADDR2 - 0x5EE + 0X412), shellCode3, sizeof(shellCode3));\n\n}\nvoid* memcpyHook(void* dest, const void* src, size_t n)\n{ \n    HOOKADDR2 = (DWORD64)dest - 0x1301 + 0x5EE;//跟第一个参数偏移0x1301\n    installHook2();\n    return memcpy(dest, src, n);\n}\n\n\n//第一处hook,hook call memcpy\nvoid installHook1()\n{\n    //00000001400011E4   | E9 E0150000                          | jmp 2022游戏安全技术竞赛初赛.1400027C9                  |\n    BYTE shellCode[] = {\n0xE9, 0xE0, 0x15, 0x00, 0x00\n    };\n    DWORD lpflOldProtect = 0;\n    VirtualProtect((void*)HOOKADDR1, sizeof(shellCode), PAGE_EXECUTE_READWRITE, &lpflOldProtect);\n    memcpy((void*)HOOKADDR1, shellCode, sizeof(shellCode));\n\n       /*00000001400027C9   | 48:B8 111348F6FF7F0000               | mov rax,testhook.7FFFF6481311                 |\n         00000001400027D3   | FFD0                                 | call rax                                      |\n         00000001400027D5   | E9 0FEAFFFF                          | jmp 2022游戏安全技术竞赛初赛.1400011E9                  |*/\n    BYTE shellCode2[] = {\n0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0xE9, 0x0F, 0xEA, 0xFF,\n 0xFF\n    };\n    *(DWORD64*)&shellCode2[2] = (DWORD64)memcpyHook;\n    VirtualProtect((void*)SHEELCODE2, sizeof(shellCode2), PAGE_EXECUTE_READWRITE,&lpflOldProtect);\n    memcpy((void*)SHEELCODE2, shellCode2, sizeof(shellCode2));\n}\n\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        installHook1();\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n","slug":"2022腾讯游戏安全PC初赛","published":1,"updated":"2024-10-02T09:29:10.816Z","layout":"post","photos":[],"link":"","_id":"cm1roa13h000augie6zmtbs1y","content":"<h2 id=\"初赛题\"><a href=\"#初赛题\" class=\"headerlink\" title=\"初赛题\"></a>初赛题</h2><p>这里有一个画了flag的小程序，可好像出了点问题，flag丢失了，需要把它找回来。<span id=\"more\"></span></p>\n<p>题目：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/6Qmd2VcMeykNvBh.jpg\" alt=\"img\"> </p>\n<p>找回flag样例：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg\" alt=\"img\">  </p>\n<p><strong>要求</strong></p>\n<p>1、不得直接patch系统组件实现绘制（如：直接编写D3D代码绘制flag），只能对题目自身代码进行修改或调用。</p>\n<p>2、找回的flag需要和预期图案（包括颜色）一致，如果绘制结果存在偏差会扣除一定分数。</p>\n<p>3、赛后需要提交找回flag的<strong>截图</strong>和<strong>解题代码</strong>或<strong>文档</strong>进行评分。</p>\n<p>DIE查壳,PE64位无壳,先IDA静态分析看一下</p>\n<p>定位到这个函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Kf5LpUDSHOtMijV.png\" alt=\"image-20240624131512660\"></p>\n<p>该函数先是加载了ntdll系统模块,再进行拼接字符串获取该模块<strong>ZwAllocateVirtualMemory</strong>函数地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS <span class=\"title function_\">ZwAllocateVirtualMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">  HANDLE ProcessHandle,     <span class=\"comment\">// 要分配内存的进程的句柄</span></span></span><br><span class=\"line\"><span class=\"params\">  PVOID *BaseAddress,      <span class=\"comment\">// 指向一个变量的指针，该变量接收分配的内存的基地址</span></span></span><br><span class=\"line\"><span class=\"params\">  ULONG ZeroBits,           <span class=\"comment\">// 指定返回的基地址中的高位必须为零的位数，用于对齐内存</span></span></span><br><span class=\"line\"><span class=\"params\">  PULONG AllocationSize,    <span class=\"comment\">// 指向一个变量，指定要分配的内存大小</span></span></span><br><span class=\"line\"><span class=\"params\">  ULONG AllocationType,     <span class=\"comment\">// 指定内存分配的类型，例如 MEM_COMMIT（提交内存）或 MEM_RESERVE（保留内存）</span></span></span><br><span class=\"line\"><span class=\"params\">  ULONG Protect             <span class=\"comment\">// 指定内存的保护属性，例如 PAGE_READWRITE（可读写）</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>接着往下看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/AWp9yTxRKqMFsS4.png\" alt=\"image-20240624133213434\"></p>\n<p>先是利用<code>ZwAllocateVirtualMemory</code>开辟了一块0x2BF9可读可写的地址空间,随后在该地址空间填入数据,最后再对地址空间部分数据进行了修改,qword_140008318可能是一个函数地址,在最后调用了这个函数,然后等待一段时间就释放了这个地址空间,所以绘画逻辑应该是在这个函数里,绘画完之后展现一段时间后消失和运行效果相同</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/VXlqCfShENxQJtY.png\" alt=\"image-20240624133856075\"></p>\n<p>所以主要逻辑应该是在qword_140008318函数里,x64dbg调试看一下,定位到qword_140008318赋值语句,00000001400011FE地址处下断点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |</span><br></pre></td></tr></table></figure>\n\n<p>进入rax发现确实是一个函数地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/3hs6n1WQgiwVFIz.png\" alt=\"image-20240624134305304\"></p>\n<p>再看一下修改部分的数据代表到底什么意思</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |</span><br><span class=\"line\">0000000140001205   | C783 6C060000 81250000                | mov dword ptr ds:[rbx+66C],2581               | rbx+66C:L&quot;▁&quot;</span><br><span class=\"line\">000000014000120F   | C783 49040000 B40E0000                | mov dword ptr ds:[rbx+449],EB4                |</span><br><span class=\"line\">0000000140001219   | C783 00060000 01130000                | mov dword ptr ds:[rbx+600],1301               |</span><br><span class=\"line\">0000000140001223   | C605 EA700000 01                      | mov byte ptr ds:[140008314],1                 |</span><br></pre></td></tr></table></figure>\n\n<p>分别定位到rbx对应的偏移处找不同 </p>\n<p>第一处 <code>mov dword ptr ds:[rbx+66C],2581 </code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |</span><br><span class=\"line\">000000000D1A0669   | 48:8B05 90190000                      | mov rax,qword ptr ds:[D1A2000]                |</span><br><span class=\"line\">000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |</span><br><span class=\"line\">;修改后</span><br><span class=\"line\">000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |</span><br><span class=\"line\">000000000D1A0669   | 48:8B05 81250000                      | mov rax,qword ptr ds:[&lt;&amp;D3DCompile&gt;]          |</span><br><span class=\"line\">000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |</span><br></pre></td></tr></table></figure>\n\n<p>第二处 <code>mov dword ptr ds:[rbx+449],EB4</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000D1A0442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |</span><br><span class=\"line\">000000000D1A0446   | 48:8D05 F32B0000                      | lea rax,qword ptr ds:[D1A3040]                |</span><br><span class=\"line\">000000000D1A044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |</span><br><span class=\"line\">;修改后</span><br><span class=\"line\">000000000D190442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |</span><br><span class=\"line\">000000000D190446   | 48:8D05 B40E0000                      | lea rax,qword ptr ds:[D191301]                |</span><br><span class=\"line\">000000000D19044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |</span><br></pre></td></tr></table></figure>\n\n<p>第三处 <code>mov dword ptr ds:[rbx+600],1301</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000D1A05FD   | 48:81FE 8F050000                      | cmp rsi,58F                                   |</span><br><span class=\"line\">000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |</span><br><span class=\"line\">000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |</span><br><span class=\"line\">;修改后</span><br><span class=\"line\">000000000D1A05FD   | 48:81FE 01130000                      | cmp rsi,1301                                  |</span><br><span class=\"line\">000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |</span><br><span class=\"line\">000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |</span><br></pre></td></tr></table></figure>\n\n<p>第一处和第二处nop掉直接程序出现异常</p>\n<p>第三处nop掉发现会对绘画效果产生影响,这里少了五个方块,</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ok3QWLSeBvwAjlG.png\" alt=\"image-20240624142159289\"></p>\n<p>所以<code>[rbx+600]</code>处附近会可能有绘画逻辑,运行到附近看看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/936mRkzHTn7ltPp.png\" alt=\"image-20240624211750273\"></p>\n<p>分析这个函数,这里的rsi应该是一个数组的索引值,通过数组的值是否等于7进行判断,应该是将有效值和无效值进行区分,然后遍历了整个数组,进行了多次循环操作</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/kUdTK6V7851wsCe.png\" alt=\"image-20240624212123944\"></p>\n<p>那有效值在哪呢,我们主要找的绘画的浮点数位置保存在哪?D3D开发的经验不多,我就从一个个可能的函数的参数入手</p>\n<p>看看是否能直接通过传参获取位置数组,这个函数里只有一个函数D190000</p>\n<p>运行到该函数,观察函数传参窗口</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/mSvEdt2BeKuVfMJ.png\" alt=\"image-20240624212702425\"></p>\n<p>显然没有这么容易,那还有可能在这个函数的母函数或者子函数的函数里</p>\n<p>通过堆栈回溯找到母函数<img src=\"https://s2.loli.net/2024/09/28/8PonE21t9QSVgjN.png\" alt=\"image-20240624212930015\"></p>\n<p>这个rax是之前分析过了的函数地址,所以这个函数就是位置数组的出处了</p>\n<p>进入分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/qgKW4SXJl3vouje.png\" alt=\"image-20240624213223998\"></p>\n<p>调用了一堆系统函数,并没有明显传参,也没有浮点数处理的汇编指令,这些略过分析,继续看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oOxUStEnueRMhXL.png\" alt=\"image-20240624213702469\"></p>\n<p>这里传入了两个浮点数,一个1920,一个1080,分辨率大小? 应该是绘画的初始化操作,继续分析找浮点数数组</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/7b2wRsrEF3uxXdP.png\" alt=\"image-20240624214126525\"></p>\n<p>这里有个缓冲区,存储了HLSL语言编写的一段顶点着色器和像素着色器的代码,进行图形渲染步骤,然后再调用了一些D3D函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义常量缓冲区</span></span><br><span class=\"line\">cbuffer ConstantBuffer : <span class=\"keyword\">register</span>(b0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    matrix World;        <span class=\"comment\">// 世界矩阵</span></span><br><span class=\"line\">    matrix View;          <span class=\"comment\">// 视图矩阵</span></span><br><span class=\"line\">    matrix Projection;    <span class=\"comment\">// 投影矩阵</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义顶点着色器的输出结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VS_OUTPUT</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    float4 Pos : SV_POSITION; <span class=\"comment\">// 顶点位置</span></span><br><span class=\"line\">    float4 Color : COLOR0;    <span class=\"comment\">// 顶点颜色</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">VS_OUTPUT <span class=\"title function_\">VS</span><span class=\"params\">(float4 Pos : POSITION, float4 Color : COLOR)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VS_OUTPUT output = (VS_OUTPUT)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 应用变换矩阵</span></span><br><span class=\"line\">    output.Pos = mul(Pos, World);</span><br><span class=\"line\">    output.Pos = mul(output.Pos, View);</span><br><span class=\"line\">    output.Pos = mul(output.Pos, Projection);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传递颜色</span></span><br><span class=\"line\">    output.Color = Color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 像素着色器</span></span><br><span class=\"line\">float4 <span class=\"title function_\">PS</span><span class=\"params\">(VS_OUTPUT input)</span> : SV_Target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接返回输入颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.Color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面还有一个</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Mhbj5PZULiHESBG.png\" alt=\"image-20240624214515403\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义顶点着色器的输出结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VSOut</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    float4 Col : COLOR;   <span class=\"comment\">// 顶点颜色</span></span><br><span class=\"line\">    float4 Pos : SV_POSITION; <span class=\"comment\">// 顶点位置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">VSOut <span class=\"title function_\">VS</span><span class=\"params\">(float4 Col : COLOR, float4 Pos : POSITION)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VSOut Output;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将输入位置赋值给输出位置</span></span><br><span class=\"line\">    Output.Pos = Pos;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将输入颜色赋值给输出颜色</span></span><br><span class=\"line\">    Output.Col = Col;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 像素着色器</span></span><br><span class=\"line\">float4 <span class=\"title function_\">PS</span><span class=\"params\">(float4 Col : COLOR)</span> : SV_TARGET</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接返回输入的颜色作为像素颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Col;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个不同的着色器设计,是否对应了一个flag图形和原始图形两种图形不同的着色器呢?</p>\n<p>但是最关键的位置数组我们还没找到,接着往下分析吧</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/mBesSDUAnECP9ZL.png\" alt=\"image-20240624215140725\"></p>\n<p>这个函数内部还有一个用户层函数,进入分析</p>\n<p>发现这个函数内部就是刚刚回溯开始的函数,那就直接进入该函数的子函数分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/9xAFXJso7lwzetW.png\" alt=\"image-20240624215445902\"></p>\n<p>一堆浮点数处理的汇编指令,好像还进行了加密解密操作,所以这里应该就是浮点数数组的出处了吧</p>\n<p>跳过这些计算浮点数的指令,直接找到赋值语句并定位位置数组的首地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/hMfPO7uotwxWEKD.png\" alt=\"image-20240624215809549\"></p>\n<p>这里分析发现,rcx即为数组首地址,继续分析,后面就是继续调用D3D函数,但是我并没有发现数组怎么传进去的,只是找到可能的位置数组,这个函数运行到返回只提供了0x70大小的浮点数数组,但是我们在之前分析过了,这个函数会循环运行,循环运行完后导出这些浮点数.得到1340个浮点数,到这里我有点怀疑这个数组的真实性了,不应该有这么长的数据的,总共方块数是31+11&#x3D;42个,点数就是42*4&#x3D;168个点,就算是三维坐标也不超过这么多数据,但是我还是在python进行了一个绘制,这里是python绘制代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\">float_values = [  <span class=\"number\">71.2234</span>,       <span class=\"number\">73.5287</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,        <span class=\"number\">71.062</span>,</span><br><span class=\"line\">  <span class=\"number\">73.5287</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,       <span class=\"number\">71.2234</span>,       <span class=\"number\">73.8157</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,        <span class=\"number\">71.062</span>,       <span class=\"number\">73.8157</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0526041</span>,        <span class=\"number\">2.7213</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\">   <span class=\"number\">2.7213</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0526041</span>,       <span class=\"number\">2.63056</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,       <span class=\"number\">2.63056</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">95.9422</span>,      -<span class=\"number\">93.3991</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,       -<span class=\"number\">95.938</span>,</span><br><span class=\"line\"> -<span class=\"number\">93.3991</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">95.9422</span>,      -<span class=\"number\">93.4065</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,       -<span class=\"number\">95.938</span>,      -<span class=\"number\">93.4065</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">228.747</span>,      -<span class=\"number\">227.782</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">228.896</span>,</span><br><span class=\"line\"> -<span class=\"number\">227.782</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">228.747</span>,      -<span class=\"number\">227.518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">228.896</span>,      -<span class=\"number\">227.518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">1.98906</span>,       <span class=\"number\">1.38796</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.93802</span>,</span><br><span class=\"line\">  <span class=\"number\">1.38796</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.98906</span>,       <span class=\"number\">1.29722</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">1.93802</span>,       <span class=\"number\">1.29722</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">58.0307</span>,      -<span class=\"number\">56.5009</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">57.8964</span>,</span><br><span class=\"line\"> -<span class=\"number\">56.5009</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">58.0307</span>,      -<span class=\"number\">56.7398</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">57.8964</span>,      -<span class=\"number\">56.7398</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">1.92656</span>,       <span class=\"number\">1.49907</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.87552</span>,</span><br><span class=\"line\">  <span class=\"number\">1.49907</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.92656</span>,       <span class=\"number\">1.40833</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">1.87552</span>,       <span class=\"number\">1.40833</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">125.702</span>,      -<span class=\"number\">123.716</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">125.771</span>,</span><br><span class=\"line\"> -<span class=\"number\">123.716</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">125.702</span>,      -<span class=\"number\">123.592</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">125.771</span>,      -<span class=\"number\">123.592</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.801563</span>,       <span class=\"number\">1.57315</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.750521</span>,</span><br><span class=\"line\">  <span class=\"number\">1.57315</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.801563</span>,       <span class=\"number\">1.48241</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.750521</span>,       <span class=\"number\">1.48241</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">141.003</span>,      -<span class=\"number\">138.069</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">140.834</span>,</span><br><span class=\"line\"> -<span class=\"number\">138.069</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">141.003</span>,      -<span class=\"number\">138.369</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">140.834</span>,      -<span class=\"number\">138.369</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">30.8589</span>,       -<span class=\"number\">28.325</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,       -<span class=\"number\">30.813</span>,</span><br><span class=\"line\">  -<span class=\"number\">28.325</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">30.8589</span>,      -<span class=\"number\">28.4065</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,       -<span class=\"number\">30.813</span>,      -<span class=\"number\">28.4065</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.323438</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.271354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.323438</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.271354</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.385938</span>,      <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.333854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.385938</span>,       <span class=\"number\">0.70463</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.333854</span>,       <span class=\"number\">0.70463</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.448438</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.448438</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.510938</span>,         <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,</span><br><span class=\"line\">    <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.510938</span>,      <span class=\"number\">0.482407</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,      <span class=\"number\">0.482407</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.573438</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.521354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.573438</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.521354</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.510938</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.510938</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.448438</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.448438</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.260938</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.260938</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.198437</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.198437</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.135937</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.135937</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.260938</span>,      <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.260938</span>,       <span class=\"number\">0.70463</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,       <span class=\"number\">0.70463</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.198437</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.198437</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.135937</span>,         <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,</span><br><span class=\"line\">    <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.135937</span>,      <span class=\"number\">0.482407</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,      <span class=\"number\">0.482407</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0734375</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0213542</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0734375</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,    -<span class=\"number\">0.0213542</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0109375</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0109375</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0515625</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0515625</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.114063</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.114063</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0109375</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0109375</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0515625</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0515625</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.114063</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.114063</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176563</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.176563</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0515625</span>,      <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0515625</span>,       <span class=\"number\">0.70463</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,       <span class=\"number\">0.70463</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.114063</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.114063</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176563</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.176563</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.239063</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.239063</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.301562</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.301562</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176563</span>,         <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,</span><br><span class=\"line\">    <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.176563</span>,      <span class=\"number\">0.482407</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,      <span class=\"number\">0.482407</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.239063</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.239063</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.301562</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.301562</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.364062</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.416146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.364062</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.416146</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.426562</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.478646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.426562</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.478646</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>]</span><br><span class=\"line\">coordinates = [float_values[i:i+<span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(float_values),<span class=\"number\">2</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x_values = [x <span class=\"keyword\">for</span> x, _ <span class=\"keyword\">in</span> coordinates]</span><br><span class=\"line\">y_values = [y <span class=\"keyword\">for</span> _, y <span class=\"keyword\">in</span> coordinates]</span><br><span class=\"line\"></span><br><span class=\"line\">ax.scatter(x_values, y_values)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如图:</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Euf4PlCp7zbyLGd.png\" alt=\"image-20240624221016969\"></p>\n<p>这里有一个密集位置,箭头指向应该是让我们放大看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/dgHw3sEYDmX9Tz2.png\" alt=\"image-20240624221254947\"></p>\n<p>确实出现了原图的形状,但是flag旗帜的点也嵌在其中,但是对比位置好像有点问题,而且点的数量也不够,还有一个问题就是为什么这些位置没有被实际展现出来</p>\n<p>那我们先解决为什么没有展现出来的问题,根据之前的分析,这里的几个跳转语句可能是问题所在,这里类似一个switch语句,通过数组的索引和其中的值来决定下一步的运算,有加减和一些别的运算.有点类似虚拟机的opcode</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wdAXGvEePIhMHNa.png\" alt=\"image-20240626100831665\"></p>\n<p>这里汇编有点没分析出来啥意思,拖到ida里调试看看伪代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/OiEewtYlbzKqkhF.png\" alt=\"image-20240626103148199\"></p>\n<p>dword_E3D1301应该就是opcode数组,然后v14应该是指八个寄存器,然后case4有点没看像是一种加解密运算,然后case5和case6是两个相同的函数,传参只有一个不同,0xFFFFFF00和0xFF2DDBE7,可能与rgb的十六进制值有关,上在线转换网站上看一下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/cBuntC9yZEWORwA.png\" alt=\"image-20240626103952814\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/EhFLHykfAqegiaG.png\" alt=\"image-20240626104016412\"></p>\n<p>应该就是flag的黄色和原图的蓝色了,但是为什么同一个函数,只是颜色不同,怎么会有不显示和显示的情况呢,不清楚,hook一下看一下调用的时候其他参数有什么区别</p>\n<p>hook代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"comment\">//addr = [140008318] - 0x650</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QWORDADDR 0x140008318</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OFFSET 0x650</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __int64 (*funptr)(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, __int64, __int64, __int64, __int64, __int64);</span><br><span class=\"line\">INT64 func;</span><br><span class=\"line\">__int64 __fastcall <span class=\"title function_\">funcHook</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a1,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a2,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a3,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a4,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a5,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a6,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a7,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a8,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a9,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a10)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE* f = fopen(<span class=\"string\">&quot;C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> in[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(in,<span class=\"string\">&quot;a1:0x%08x,a2:0x%08x,a3:0x%08x,a4:0x%08x,a5:0x%08x\\n&quot;</span>, a1, a2, a3, a4, a5);</span><br><span class=\"line\">    <span class=\"built_in\">fputs</span>(in, f);</span><br><span class=\"line\">    fclose(f);</span><br><span class=\"line\">    funptr fpt;</span><br><span class=\"line\">    fpt = (funptr)func;</span><br><span class=\"line\">    fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Start_Hook</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDetourRestoreAfterWith();</span><br><span class=\"line\">\tDetourTransactionBegin();</span><br><span class=\"line\">\tDetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">\tINT64 qword_addr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ReadProcessMemory(GetCurrentProcess(), (LPCVOID*)QWORDADDR, &amp;qword_addr, <span class=\"number\">8</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FILE* f = fopen(<span class=\"string\">&quot;C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">fputs</span>(<span class=\"string\">&quot;error ReadProcessMemory\\n&quot;</span>, f);</span><br><span class=\"line\">        fclose(f);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func = qword_addr - OFFSET;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDetourAttach((PVOID*)&amp;func, funcHook);<span class=\"comment\">//msg</span></span><br><span class=\"line\">\tDetourTransactionCommit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Exit_Hook</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDetourTransactionBegin();</span><br><span class=\"line\">\tDetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">\tDetourDetach((PVOID*)&amp;func, funcHook);</span><br><span class=\"line\">\tDetourTransactionCommit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tStart_Hook();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">\t\tExit_Hook();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>得到前五个参数内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1:0xfffffc4a,a2:0x00000032,a3:0xff1fa3ac,a4:0x00130bd0,a5:0xffffff00</span><br><span class=\"line\">a1:0x00000032,a2:0xfffffe7a,a3:0x001bcd69,a4:0xffe8bcc5,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffc4a,a2:0x000000aa,a3:0xff8eb263,a4:0x00d91997,a5:0xffffff00</span><br><span class=\"line\">a1:0x00000032,a2:0x000000e6,a3:0x001cf400,a4:0x00e82b18,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffc4a,a2:0xffffff2e,a3:0x00391faa,a4:0x006ee5d2,a5:0xffffff00</span><br><span class=\"line\">a1:0x00000032,a2:0x0000015e,a3:0x000ebe72,a4:0x00d77de2,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffc86,a2:0xfffffef2,a3:0x00071150,a4:0x0074fb28,a5:0xffffff00</span><br><span class=\"line\">a1:0x000000aa,a2:0xfffffef2,a3:0xffda3e17,a4:0x00c42e8b,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffcfe,a2:0x000000e6,a3:0x0034cf2b,a4:0xff321ecf,a5:0xffffff00</span><br><span class=\"line\">a1:0x0000006e,a2:0xfffffe7a,a3:0xffa49c19,a4:0x00d9e5f1,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffcc2,a2:0x000000aa,a3:0xffca5ee7,a4:0x00c42d8b,a5:0xffffff00</span><br><span class=\"line\">a1:0x0000028a,a2:0x00000032,a3:0x00eabf17,a4:0x00a7e3ab,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000024e,a2:0x0000006e,a3:0x00c42d8b,a4:0x00cb0f37,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000212,a2:0x000000aa,a3:0x00d717af,a4:0x001f5b13,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000001d6,a2:0x000000e6,a3:0x00c460e9,a4:0x00e9ad55,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000019a,a2:0x00000122,a3:0x00c7a989,a4:0x00b9fd35,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000001d6,a2:0x00000122,a3:0x00ab7100,a4:0x00646cf8,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000212,a2:0x00000122,a3:0x00c409a9,a4:0x0031cd9d,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000002c6,a2:0x00000032,a3:0x00d77e8b,a4:0x002f2773,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000302,a2:0x00000032,a3:0x00d9ad01,a4:0x00996535,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000033e,a2:0x00000032,a3:0x0039e156,a4:0x00da4a26,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000002c6,a2:0x0000006e,a3:0x0013207c,a4:0x00346848,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000302,a2:0x000000aa,a3:0x00c9140b,a4:0x000b5fa7,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000033e,a2:0x000000e6,a3:0x0053071f,a4:0x00c7ab3b,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000037a,a2:0x00000122,a3:0x00d71106,a4:0x00d6329a,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003b6,a2:0x00000122,a3:0x00eb60a1,a4:0x00a58d79,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003f2,a2:0x00000122,a3:0x00eb67cd,a4:0x00f5e9d9,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000042e,a2:0x00000122,a3:0x00d71161,a4:0x000d7d31,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003b6,a2:0x00000032,a3:0x00677611,a4:0x00659df9,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003f2,a2:0x00000032,a3:0x0040173d,a4:0x00557919,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000042e,a2:0x00000032,a3:0x00d77661,a4:0x003d9d01,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000046a,a2:0x00000032,a3:0x00efff9a,a4:0x00ca2e06,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003f2,a2:0x0000006e,a3:0x00c404eb,a4:0x00b7178b,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000042e,a2:0x000000aa,a3:0x00d7c6ef,a4:0x008b6337,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000046a,a2:0x000000aa,a3:0x00d7701f,a4:0x00677b0b,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004a6,a2:0x000000aa,a3:0x00d71171,a4:0x00fd4d21,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004e2,a2:0x000000aa,a3:0x003906ab,a4:0x000bbf27,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000046a,a2:0x000000e6,a3:0x00096663,a4:0x00ef5f33,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004a6,a2:0x00000122,a3:0x00732157,a4:0x00835b9f,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004e2,a2:0x00000122,a3:0x00353730,a4:0x00383434,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000051e,a2:0x00000122,a3:0x006257a9,a4:0x009555e9,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000055a,a2:0x00000122,a3:0x00d777af,a4:0x00df5bd3,a5:0xff2ddbe7</span><br></pre></td></tr></table></figure>\n\n<p>可以看到蓝色调用了31次,黄色调用了11次,正好对应正方形块数,验证了猜测.</p>\n<p>前面的四个参数在蓝色调用的时候基本都是正数,黄色调用的时候则总会出现一些负数的情况,所以可能就是在这四个参数出了问题让绘制出现了失败,在蓝色调用的前两个参数有一些相同的情况,比如说第二个参数0x00000032这个值,出现了8次,对应了一行的八个方块,0x0000006e则对应三个方块,应该就是指的y坐标,第一个参数则可能会是x坐标,知道了这个,我们就可以通过hook这个绘制函数通过正确传参就能实现绘制,但是正确的位置在哪呢?位置被错误的计算了,只能从虚拟机运行入手了,写个脚本跑一下运行流程</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opcode = [<span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00524895</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x005A8E2C</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00985AD2</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00A9685D</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00785CEF</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00963EA7</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00465215</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00856DCE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00758C6E</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0098A6B4</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00856ECE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000258</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00ABFC52</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00856ECE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x009654EA</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x008523AC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0086EACC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00EA3245</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00854AEC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00963DCE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0098EE44</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0078A213</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00526339</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0088574E</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0012445A</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00965243</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00AA23E4</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000168</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00AA2488</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001A4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00965224</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00263554</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00015478</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00963524</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00AEBCDF</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x008547AE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x009685AA</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0096335A</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00965234</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x007845EE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00482526</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00326212</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00747475</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000168</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x002314EC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001A4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x009634EA</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000007</span>]</span><br><span class=\"line\">key = <span class=\"number\">0x0AD00001F</span></span><br><span class=\"line\">reg = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>]</span><br><span class=\"line\">rip = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> rip &lt; <span class=\"built_in\">len</span>(opcode):</span><br><span class=\"line\">    <span class=\"keyword\">match</span> opcode[rip]:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;+++0 reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]&#125;</span>,reg[1]=<span class=\"subst\">&#123;reg[<span class=\"number\">1</span>]&#125;</span>,reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]+reg[<span class=\"number\">1</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[<span class=\"number\">0</span>] += reg[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;---1 reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]&#125;</span>,reg[1]=<span class=\"subst\">&#123;reg[<span class=\"number\">1</span>]&#125;</span>,reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]-reg[<span class=\"number\">1</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[<span class=\"number\">0</span>] -= reg[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            v10 = opcode[rip+<span class=\"number\">1</span>]</span><br><span class=\"line\">            rip += <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"comment\"># print(v10)</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;===2 reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=reg[<span class=\"subst\">&#123;v10&#125;</span>],reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=<span class=\"subst\">&#123;reg[opcode[rip]]&#125;</span>,reg[<span class=\"subst\">&#123;v10&#125;</span>]=<span class=\"subst\">&#123;reg[v10]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[opcode[rip]] = reg[v10]</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            v11 = opcode[rip+<span class=\"number\">1</span>]</span><br><span class=\"line\">            rip += <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;===3 reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=<span class=\"subst\">&#123;v11&#125;</span>,reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=<span class=\"subst\">&#123;reg[opcode[rip]]&#125;</span>,reg[<span class=\"subst\">&#123;v10&#125;</span>]=<span class=\"subst\">&#123;v11&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[opcode[rip]] = v11</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            rip += <span class=\"number\">1</span></span><br><span class=\"line\">            v12 = reg[<span class=\"number\">0</span>]</span><br><span class=\"line\">            v13 = reg[<span class=\"number\">0</span>]*(reg[<span class=\"number\">1</span>]+<span class=\"number\">1</span>)</span><br><span class=\"line\">            reg[<span class=\"number\">0</span>] = key^opcode[rip]</span><br><span class=\"line\">            reg[<span class=\"number\">1</span>] = (reg[<span class=\"number\">0</span>] ^ (reg[<span class=\"number\">1</span>] + v12)) % <span class=\"number\">256</span> + (((reg[<span class=\"number\">0</span>] ^ (v12 * reg[<span class=\"number\">1</span>])) % <span class=\"number\">256</span> + (((reg[<span class=\"number\">0</span>] ^ (reg[<span class=\"number\">1</span>] + v13)) % <span class=\"number\">256</span>) &lt;&lt; <span class=\"number\">8</span>)) &lt;&lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;decrypt reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]&#125;</span>,reg[1]=<span class=\"subst\">&#123;reg[<span class=\"number\">1</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;call-5 reg[4]=<span class=\"subst\">&#123;reg[<span class=\"number\">4</span>]&#125;</span>,reg[5]=<span class=\"subst\">&#123;reg[<span class=\"number\">5</span>]&#125;</span>,reg[6]=<span class=\"subst\">&#123;reg[<span class=\"number\">6</span>]&#125;</span>,reg[7]=<span class=\"subst\">&#123;reg[<span class=\"number\">7</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;call-6 reg[4]=<span class=\"subst\">&#123;reg[<span class=\"number\">4</span>]&#125;</span>,reg[5]=<span class=\"subst\">&#123;reg[<span class=\"number\">5</span>]&#125;</span>,reg[6]=<span class=\"subst\">&#123;reg[<span class=\"number\">6</span>]&#125;</span>,reg[7]=<span class=\"subst\">&#123;reg[<span class=\"number\">7</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">    rip += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果部分:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">8</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">8</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">4</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">4</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">4</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">3</span> reg[<span class=\"number\">1</span>]=<span class=\"number\">1000</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">4</span>]=<span class=\"number\">1000</span></span><br><span class=\"line\">---<span class=\"number\">1</span> reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">1000</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">950</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">4</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">950</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">9</span>],reg[<span class=\"number\">0</span>]=-<span class=\"number\">950</span>,reg[<span class=\"number\">9</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">5</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">5</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">4</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">4</span>]=-<span class=\"number\">950</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">1</span>]=reg[<span class=\"number\">5</span>],reg[<span class=\"number\">1</span>]=<span class=\"number\">1000</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">decrypt reg[<span class=\"number\">0</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">8060662</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">3</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">3</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">1</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">8060662</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">1</span>]=reg[<span class=\"number\">3</span>],reg[<span class=\"number\">1</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">3</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">6</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">6</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">8060662</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">7</span>]=reg[<span class=\"number\">1</span>],reg[<span class=\"number\">7</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">call-<span class=\"number\">5</span> reg[<span class=\"number\">4</span>]=-<span class=\"number\">950</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">8</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">8</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">4</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">4</span>]=-<span class=\"number\">950</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">9</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">9</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">3</span> reg[<span class=\"number\">1</span>]=<span class=\"number\">60</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">9</span>]=<span class=\"number\">60</span></span><br><span class=\"line\">+++<span class=\"number\">0</span> reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">60</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">5</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">5</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span></span><br><span class=\"line\">===<span class=\"number\">3</span> reg[<span class=\"number\">1</span>]=<span class=\"number\">500</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">60</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">500</span></span><br><span class=\"line\">---<span class=\"number\">1</span> reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">500</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">390</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">5</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">390</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">4</span>],reg[<span class=\"number\">0</span>]=-<span class=\"number\">390</span>,reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">1</span>]=reg[<span class=\"number\">5</span>],reg[<span class=\"number\">1</span>]=<span class=\"number\">500</span>,reg[<span class=\"number\">5</span>]=-<span class=\"number\">390</span></span><br><span class=\"line\">decrypt reg[<span class=\"number\">0</span>]=<span class=\"number\">2908393011</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">11790239</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">6</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">6</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">2908393011</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">7</span>]=reg[<span class=\"number\">1</span>],reg[<span class=\"number\">7</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">11790239</span></span><br><span class=\"line\">call-<span class=\"number\">5</span> reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=-<span class=\"number\">390</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2908393011</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">11790239</span></span><br></pre></td></tr></table></figure>\n\n<p>基本都是在case1的时候减了一个大数,然后call的参数就出现负数,简单的加个if条件,将减的那一步选择性的跳过,如果结果为负数,那么就不执行减操作,改下程序得到的参数貌似正常了,得到的“正确“参数如下:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">10637038</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2908393011</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">3100563</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">14547217</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2912443085</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">4632154</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2913560642</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">290</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2910346480</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">545956</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">350</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">5563432</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2912304824</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2907066890</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2285150</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">10317121</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2911202769</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2910162033</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">120253</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">9170807</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2912462507</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">15283589</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2911203025</span></span><br></pre></td></tr></table></figure>\n\n<p>尝试hook绘制函数传入这些参数进行绘制看看结果,试了很久一直没有显示,连原图的都不显示了,最后对照了一下第三个和第四个参数发现和之前hook来的参数不同,应该是计算的时候C有溢出但是python没有,重新用C写一遍模拟虚拟机运行的脚本运行得到第三个参数和第四个参数数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> reg6[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0xf814b4</span>,<span class=\"number\">0x1bcd69</span>,<span class=\"number\">0x87a34b</span>,<span class=\"number\">0x1cf400</span>,<span class=\"number\">0x391faa</span>,<span class=\"number\">0xebe72</span>,<span class=\"number\">0x71150</span>,<span class=\"number\">0xc7371b</span>,<span class=\"number\">0x34cf2b</span>,<span class=\"number\">0xd1b52d</span>,<span class=\"number\">0xb36fdf</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> reg7[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0x130bd0</span>,<span class=\"number\">0x7515c9</span>,<span class=\"number\">0xd91997</span>,<span class=\"number\">0xe82b18</span>,<span class=\"number\">0x520efe</span>,<span class=\"number\">0xd77de2</span>,<span class=\"number\">0x788404</span>,<span class=\"number\">0xc42e8b</span>,<span class=\"number\">0x5b8fe7</span>,<span class=\"number\">0xd9e5f1</span>,<span class=\"number\">0xc42d8b</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注入测试</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/QiFy4E5RH6ctnOl.png\" alt=\"image-20240626145848145\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Bc7KTqgd8x4EmlM.png\" alt=\"image-20240626150321144\"></p>\n<p>只显示了四个方块,嘶,怎么会少了7块呢,根据前两个参数的大概位置分析在第2,5,7,9次黄色函数调用处,对比一下他们的虚拟机运行情况</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/c87Y6WDz5NhkHxn.png\" alt=\"image-20240626150951503\"></p>\n<p>在这里看到了有些call调用的前将第三个和第四个参数分别调换了位置,刚好2,5,7,9没有调换!!!</p>\n<p>所以根据这个再把错误的参数位置调换一下进行注入测试</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/kj1fQxgE9NmiMLW.png\" alt=\"image-20240626151806428\"></p>\n<p>HOOK代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">DWORD64 HOOKADDR1 = (<span class=\"type\">long</span> <span class=\"type\">long</span>)GetModuleHandleA(<span class=\"string\">&quot;2022游戏安全技术竞赛初赛.exe&quot;</span>) + <span class=\"number\">0X11E4</span>; <span class=\"comment\">// MEMCPY函数</span></span><br><span class=\"line\">DWORD64 HOOKADDR2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">DWORD64 SHEELCODE = <span class=\"number\">0X0000001400027E2</span>;</span><br><span class=\"line\">DWORD64 SHEELCODE2 = <span class=\"number\">0X0000001400027C9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BYTE oldByte[<span class=\"number\">12</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*myMemecpy)</span><span class=\"params\">(<span class=\"type\">void</span>* dest, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> n)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __int64 (*funptr)(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, __int64, __int64, __int64, __int64, __int64);</span><br><span class=\"line\"><span class=\"comment\">//HOOK绘制函数修改传参</span></span><br><span class=\"line\">__int64 __fastcall <span class=\"title function_\">drawHook</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a1,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a2,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a3,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a4,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a5,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a6,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a7,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a8,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a9,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a10)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg4[<span class=\"number\">11</span>] = &#123; <span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span>,<span class=\"number\">230</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg5[<span class=\"number\">11</span>] = &#123; <span class=\"number\">50</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span>,<span class=\"number\">230</span>,<span class=\"number\">290</span>,<span class=\"number\">350</span>,<span class=\"number\">230</span>,<span class=\"number\">230</span>,<span class=\"number\">230</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg6[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0xf814b4</span>,<span class=\"number\">0x1bcd69</span>,<span class=\"number\">0x87a34b</span>,<span class=\"number\">0x1cf400</span>,<span class=\"number\">0x391faa</span>,<span class=\"number\">0xebe72</span>,<span class=\"number\">0x71150</span>,<span class=\"number\">0xc7371b</span>,<span class=\"number\">0x34cf2b</span>,<span class=\"number\">0xd1b52d</span>,<span class=\"number\">0xb36fdf</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg7[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0x130bd0</span>,<span class=\"number\">0x7515c9</span>,<span class=\"number\">0xd91997</span>,<span class=\"number\">0xe82b18</span>,<span class=\"number\">0x520efe</span>,<span class=\"number\">0xd77de2</span>,<span class=\"number\">0x788404</span>,<span class=\"number\">0xc42e8b</span>,<span class=\"number\">0x5b8fe7</span>,<span class=\"number\">0xd9e5f1</span>,<span class=\"number\">0xc42d8b</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">11</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> || i == <span class=\"number\">4</span> || i == <span class=\"number\">6</span> || i == <span class=\"number\">8</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tmp = reg6[i];</span><br><span class=\"line\">            reg6[i] = reg7[i];</span><br><span class=\"line\">            reg7[i] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    funptr fpt;</span><br><span class=\"line\">    fpt = (funptr)(HOOKADDR2 - <span class=\"number\">0x5EE</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a5 == <span class=\"number\">0xffffff00</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> i = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fpt(reg4[i], reg5[i], reg6[i], reg7[i], a5, a6, a7, a8, a9, a10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二处hook,hook绘制函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">installHook2</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//00000001400027E2, 0000000009E50412</span></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">//0000000009E605EE   | E9 1FFEFFFF                          | jmp 9E60412                                   |</span></span><br><span class=\"line\">    BYTE shellCode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0xE9</span>, <span class=\"number\">0x1F</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    DWORD lpflOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)HOOKADDR2, <span class=\"keyword\">sizeof</span>(shellCode), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HOOKADDR2, shellCode, <span class=\"keyword\">sizeof</span>(shellCode));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027E2   | 48:B8 A91148F6FF7F0000               | mov rax,testhook.7FFFF64811A9                 |</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027EC   | FFD0                                 | call rax                                      |</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027EE   | 48:B8 F305E60900000000               | mov rax,9E605F3                               |</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027F8   | FFE0                                 | jmp rax                                       |</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    BYTE shellCode2[] = &#123;</span><br><span class=\"line\"> <span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>,</span><br><span class=\"line\"> <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xE0</span></span><br><span class=\"line\">    &#125;;;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode2[<span class=\"number\">2</span>] = (DWORD64)drawHook;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode2[<span class=\"number\">14</span>] = HOOKADDR2 + <span class=\"number\">0X5</span>;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)(SHEELCODE), <span class=\"keyword\">sizeof</span>(shellCode2), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)(SHEELCODE), shellCode2, <span class=\"keyword\">sizeof</span>(shellCode2));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*0000000009E60412   | 48:B8 E227004001000000               | mov rax,2022游戏安全技术竞赛初赛.1400027E2              |</span></span><br><span class=\"line\"><span class=\"comment\">      0000000009E6041C   | FFE0                                 | jmp rax                                       |*/</span></span><br><span class=\"line\">    BYTE shellCode3[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x27</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xE0</span></span><br><span class=\"line\">    &#125;;;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode3[<span class=\"number\">2</span>] = (DWORD64)SHEELCODE;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)(HOOKADDR2 - <span class=\"number\">0x5EE</span> + <span class=\"number\">0X412</span>), <span class=\"keyword\">sizeof</span>(shellCode3), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)(HOOKADDR2 - <span class=\"number\">0x5EE</span> + <span class=\"number\">0X412</span>), shellCode3, <span class=\"keyword\">sizeof</span>(shellCode3));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">memcpyHook</span><span class=\"params\">(<span class=\"type\">void</span>* dest, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> n)</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    HOOKADDR2 = (DWORD64)dest - <span class=\"number\">0x1301</span> + <span class=\"number\">0x5EE</span>;<span class=\"comment\">//跟第一个参数偏移0x1301</span></span><br><span class=\"line\">    installHook2();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">memcpy</span>(dest, src, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一处hook,hook call memcpy</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">installHook1</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//00000001400011E4   | E9 E0150000                          | jmp 2022游戏安全技术竞赛初赛.1400027C9                  |</span></span><br><span class=\"line\">    BYTE shellCode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0xE9</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    DWORD lpflOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)HOOKADDR1, <span class=\"keyword\">sizeof</span>(shellCode), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HOOKADDR1, shellCode, <span class=\"keyword\">sizeof</span>(shellCode));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*00000001400027C9   | 48:B8 111348F6FF7F0000               | mov rax,testhook.7FFFF6481311                 |</span></span><br><span class=\"line\"><span class=\"comment\">         00000001400027D3   | FFD0                                 | call rax                                      |</span></span><br><span class=\"line\"><span class=\"comment\">         00000001400027D5   | E9 0FEAFFFF                          | jmp 2022游戏安全技术竞赛初赛.1400011E9                  |*/</span></span><br><span class=\"line\">    BYTE shellCode2[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0xE9</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xEA</span>, <span class=\"number\">0xFF</span>,</span><br><span class=\"line\"> <span class=\"number\">0xFF</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode2[<span class=\"number\">2</span>] = (DWORD64)memcpyHook;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)SHEELCODE2, <span class=\"keyword\">sizeof</span>(shellCode2), PAGE_EXECUTE_READWRITE,&amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)SHEELCODE2, shellCode2, <span class=\"keyword\">sizeof</span>(shellCode2));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        installHook1();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"初赛题\"><a href=\"#初赛题\" class=\"headerlink\" title=\"初赛题\"></a>初赛题</h2><p>这里有一个画了flag的小程序，可好像出了点问题，flag丢失了，需要把它找回来。","more":"</p>\n<p>题目：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/6Qmd2VcMeykNvBh.jpg\" alt=\"img\"> </p>\n<p>找回flag样例：</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/IomyTKhs3H6VQk2.jpg\" alt=\"img\">  </p>\n<p><strong>要求</strong></p>\n<p>1、不得直接patch系统组件实现绘制（如：直接编写D3D代码绘制flag），只能对题目自身代码进行修改或调用。</p>\n<p>2、找回的flag需要和预期图案（包括颜色）一致，如果绘制结果存在偏差会扣除一定分数。</p>\n<p>3、赛后需要提交找回flag的<strong>截图</strong>和<strong>解题代码</strong>或<strong>文档</strong>进行评分。</p>\n<p>DIE查壳,PE64位无壳,先IDA静态分析看一下</p>\n<p>定位到这个函数</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Kf5LpUDSHOtMijV.png\" alt=\"image-20240624131512660\"></p>\n<p>该函数先是加载了ntdll系统模块,再进行拼接字符串获取该模块<strong>ZwAllocateVirtualMemory</strong>函数地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS <span class=\"title function_\">ZwAllocateVirtualMemory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">  HANDLE ProcessHandle,     <span class=\"comment\">// 要分配内存的进程的句柄</span></span></span><br><span class=\"line\"><span class=\"params\">  PVOID *BaseAddress,      <span class=\"comment\">// 指向一个变量的指针，该变量接收分配的内存的基地址</span></span></span><br><span class=\"line\"><span class=\"params\">  ULONG ZeroBits,           <span class=\"comment\">// 指定返回的基地址中的高位必须为零的位数，用于对齐内存</span></span></span><br><span class=\"line\"><span class=\"params\">  PULONG AllocationSize,    <span class=\"comment\">// 指向一个变量，指定要分配的内存大小</span></span></span><br><span class=\"line\"><span class=\"params\">  ULONG AllocationType,     <span class=\"comment\">// 指定内存分配的类型，例如 MEM_COMMIT（提交内存）或 MEM_RESERVE（保留内存）</span></span></span><br><span class=\"line\"><span class=\"params\">  ULONG Protect             <span class=\"comment\">// 指定内存的保护属性，例如 PAGE_READWRITE（可读写）</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>接着往下看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/AWp9yTxRKqMFsS4.png\" alt=\"image-20240624133213434\"></p>\n<p>先是利用<code>ZwAllocateVirtualMemory</code>开辟了一块0x2BF9可读可写的地址空间,随后在该地址空间填入数据,最后再对地址空间部分数据进行了修改,qword_140008318可能是一个函数地址,在最后调用了这个函数,然后等待一段时间就释放了这个地址空间,所以绘画逻辑应该是在这个函数里,绘画完之后展现一段时间后消失和运行效果相同</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/VXlqCfShENxQJtY.png\" alt=\"image-20240624133856075\"></p>\n<p>所以主要逻辑应该是在qword_140008318函数里,x64dbg调试看一下,定位到qword_140008318赋值语句,00000001400011FE地址处下断点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |</span><br></pre></td></tr></table></figure>\n\n<p>进入rax发现确实是一个函数地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/3hs6n1WQgiwVFIz.png\" alt=\"image-20240624134305304\"></p>\n<p>再看一下修改部分的数据代表到底什么意思</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000001400011FE   | 48:8905 13710000                      | mov qword ptr ds:[140008318],rax              |</span><br><span class=\"line\">0000000140001205   | C783 6C060000 81250000                | mov dword ptr ds:[rbx+66C],2581               | rbx+66C:L&quot;▁&quot;</span><br><span class=\"line\">000000014000120F   | C783 49040000 B40E0000                | mov dword ptr ds:[rbx+449],EB4                |</span><br><span class=\"line\">0000000140001219   | C783 00060000 01130000                | mov dword ptr ds:[rbx+600],1301               |</span><br><span class=\"line\">0000000140001223   | C605 EA700000 01                      | mov byte ptr ds:[140008314],1                 |</span><br></pre></td></tr></table></figure>\n\n<p>分别定位到rbx对应的偏移处找不同 </p>\n<p>第一处 <code>mov dword ptr ds:[rbx+66C],2581 </code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |</span><br><span class=\"line\">000000000D1A0669   | 48:8B05 90190000                      | mov rax,qword ptr ds:[D1A2000]                |</span><br><span class=\"line\">000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |</span><br><span class=\"line\">;修改后</span><br><span class=\"line\">000000000D1A0666   | 48:8BD9                               | mov rbx,rcx                                   |</span><br><span class=\"line\">000000000D1A0669   | 48:8B05 81250000                      | mov rax,qword ptr ds:[&lt;&amp;D3DCompile&gt;]          |</span><br><span class=\"line\">000000000D1A0670   | 48:8945 C8                            | mov qword ptr ss:[rbp-38],rax                 |</span><br></pre></td></tr></table></figure>\n\n<p>第二处 <code>mov dword ptr ds:[rbx+449],EB4</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000D1A0442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |</span><br><span class=\"line\">000000000D1A0446   | 48:8D05 F32B0000                      | lea rax,qword ptr ds:[D1A3040]                |</span><br><span class=\"line\">000000000D1A044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |</span><br><span class=\"line\">;修改后</span><br><span class=\"line\">000000000D190442   | 4C:8B65 70                            | mov r12,qword ptr ss:[rbp+70]                 |</span><br><span class=\"line\">000000000D190446   | 48:8D05 B40E0000                      | lea rax,qword ptr ds:[D191301]                |</span><br><span class=\"line\">000000000D19044D   | 4C:8B6D 68                            | mov r13,qword ptr ss:[rbp+68]                 |</span><br></pre></td></tr></table></figure>\n\n<p>第三处 <code>mov dword ptr ds:[rbx+600],1301</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000D1A05FD   | 48:81FE 8F050000                      | cmp rsi,58F                                   |</span><br><span class=\"line\">000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |</span><br><span class=\"line\">000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |</span><br><span class=\"line\">;修改后</span><br><span class=\"line\">000000000D1A05FD   | 48:81FE 01130000                      | cmp rsi,1301                                  |</span><br><span class=\"line\">000000000D1A0604   | 0F82 A6FEFFFF                         | jb D1A04B0                                    |</span><br><span class=\"line\">000000000D1A060A   | 48:8B9C24 D0000000                    | mov rbx,qword ptr ss:[rsp+D0]                 |</span><br></pre></td></tr></table></figure>\n\n<p>第一处和第二处nop掉直接程序出现异常</p>\n<p>第三处nop掉发现会对绘画效果产生影响,这里少了五个方块,</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/ok3QWLSeBvwAjlG.png\" alt=\"image-20240624142159289\"></p>\n<p>所以<code>[rbx+600]</code>处附近会可能有绘画逻辑,运行到附近看看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/936mRkzHTn7ltPp.png\" alt=\"image-20240624211750273\"></p>\n<p>分析这个函数,这里的rsi应该是一个数组的索引值,通过数组的值是否等于7进行判断,应该是将有效值和无效值进行区分,然后遍历了整个数组,进行了多次循环操作</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/kUdTK6V7851wsCe.png\" alt=\"image-20240624212123944\"></p>\n<p>那有效值在哪呢,我们主要找的绘画的浮点数位置保存在哪?D3D开发的经验不多,我就从一个个可能的函数的参数入手</p>\n<p>看看是否能直接通过传参获取位置数组,这个函数里只有一个函数D190000</p>\n<p>运行到该函数,观察函数传参窗口</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/mSvEdt2BeKuVfMJ.png\" alt=\"image-20240624212702425\"></p>\n<p>显然没有这么容易,那还有可能在这个函数的母函数或者子函数的函数里</p>\n<p>通过堆栈回溯找到母函数<img src=\"https://s2.loli.net/2024/09/28/8PonE21t9QSVgjN.png\" alt=\"image-20240624212930015\"></p>\n<p>这个rax是之前分析过了的函数地址,所以这个函数就是位置数组的出处了</p>\n<p>进入分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/qgKW4SXJl3vouje.png\" alt=\"image-20240624213223998\"></p>\n<p>调用了一堆系统函数,并没有明显传参,也没有浮点数处理的汇编指令,这些略过分析,继续看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/oOxUStEnueRMhXL.png\" alt=\"image-20240624213702469\"></p>\n<p>这里传入了两个浮点数,一个1920,一个1080,分辨率大小? 应该是绘画的初始化操作,继续分析找浮点数数组</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/7b2wRsrEF3uxXdP.png\" alt=\"image-20240624214126525\"></p>\n<p>这里有个缓冲区,存储了HLSL语言编写的一段顶点着色器和像素着色器的代码,进行图形渲染步骤,然后再调用了一些D3D函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义常量缓冲区</span></span><br><span class=\"line\">cbuffer ConstantBuffer : <span class=\"keyword\">register</span>(b0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    matrix World;        <span class=\"comment\">// 世界矩阵</span></span><br><span class=\"line\">    matrix View;          <span class=\"comment\">// 视图矩阵</span></span><br><span class=\"line\">    matrix Projection;    <span class=\"comment\">// 投影矩阵</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义顶点着色器的输出结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VS_OUTPUT</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    float4 Pos : SV_POSITION; <span class=\"comment\">// 顶点位置</span></span><br><span class=\"line\">    float4 Color : COLOR0;    <span class=\"comment\">// 顶点颜色</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">VS_OUTPUT <span class=\"title function_\">VS</span><span class=\"params\">(float4 Pos : POSITION, float4 Color : COLOR)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VS_OUTPUT output = (VS_OUTPUT)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 应用变换矩阵</span></span><br><span class=\"line\">    output.Pos = mul(Pos, World);</span><br><span class=\"line\">    output.Pos = mul(output.Pos, View);</span><br><span class=\"line\">    output.Pos = mul(output.Pos, Projection);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传递颜色</span></span><br><span class=\"line\">    output.Color = Color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 像素着色器</span></span><br><span class=\"line\">float4 <span class=\"title function_\">PS</span><span class=\"params\">(VS_OUTPUT input)</span> : SV_Target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接返回输入颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.Color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面还有一个</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Mhbj5PZULiHESBG.png\" alt=\"image-20240624214515403\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义顶点着色器的输出结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">VSOut</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    float4 Col : COLOR;   <span class=\"comment\">// 顶点颜色</span></span><br><span class=\"line\">    float4 Pos : SV_POSITION; <span class=\"comment\">// 顶点位置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">VSOut <span class=\"title function_\">VS</span><span class=\"params\">(float4 Col : COLOR, float4 Pos : POSITION)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    VSOut Output;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将输入位置赋值给输出位置</span></span><br><span class=\"line\">    Output.Pos = Pos;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将输入颜色赋值给输出颜色</span></span><br><span class=\"line\">    Output.Col = Col;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 像素着色器</span></span><br><span class=\"line\">float4 <span class=\"title function_\">PS</span><span class=\"params\">(float4 Col : COLOR)</span> : SV_TARGET</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接返回输入的颜色作为像素颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Col;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个不同的着色器设计,是否对应了一个flag图形和原始图形两种图形不同的着色器呢?</p>\n<p>但是最关键的位置数组我们还没找到,接着往下分析吧</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/mBesSDUAnECP9ZL.png\" alt=\"image-20240624215140725\"></p>\n<p>这个函数内部还有一个用户层函数,进入分析</p>\n<p>发现这个函数内部就是刚刚回溯开始的函数,那就直接进入该函数的子函数分析</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/9xAFXJso7lwzetW.png\" alt=\"image-20240624215445902\"></p>\n<p>一堆浮点数处理的汇编指令,好像还进行了加密解密操作,所以这里应该就是浮点数数组的出处了吧</p>\n<p>跳过这些计算浮点数的指令,直接找到赋值语句并定位位置数组的首地址</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/hMfPO7uotwxWEKD.png\" alt=\"image-20240624215809549\"></p>\n<p>这里分析发现,rcx即为数组首地址,继续分析,后面就是继续调用D3D函数,但是我并没有发现数组怎么传进去的,只是找到可能的位置数组,这个函数运行到返回只提供了0x70大小的浮点数数组,但是我们在之前分析过了,这个函数会循环运行,循环运行完后导出这些浮点数.得到1340个浮点数,到这里我有点怀疑这个数组的真实性了,不应该有这么长的数据的,总共方块数是31+11&#x3D;42个,点数就是42*4&#x3D;168个点,就算是三维坐标也不超过这么多数据,但是我还是在python进行了一个绘制,这里是python绘制代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\">float_values = [  <span class=\"number\">71.2234</span>,       <span class=\"number\">73.5287</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,        <span class=\"number\">71.062</span>,</span><br><span class=\"line\">  <span class=\"number\">73.5287</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,       <span class=\"number\">71.2234</span>,       <span class=\"number\">73.8157</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,        <span class=\"number\">71.062</span>,       <span class=\"number\">73.8157</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0526041</span>,        <span class=\"number\">2.7213</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\">   <span class=\"number\">2.7213</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0526041</span>,       <span class=\"number\">2.63056</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,       <span class=\"number\">2.63056</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">95.9422</span>,      -<span class=\"number\">93.3991</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,       -<span class=\"number\">95.938</span>,</span><br><span class=\"line\"> -<span class=\"number\">93.3991</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">95.9422</span>,      -<span class=\"number\">93.4065</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,       -<span class=\"number\">95.938</span>,      -<span class=\"number\">93.4065</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">228.747</span>,      -<span class=\"number\">227.782</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">228.896</span>,</span><br><span class=\"line\"> -<span class=\"number\">227.782</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">228.747</span>,      -<span class=\"number\">227.518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">228.896</span>,      -<span class=\"number\">227.518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">1.98906</span>,       <span class=\"number\">1.38796</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.93802</span>,</span><br><span class=\"line\">  <span class=\"number\">1.38796</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.98906</span>,       <span class=\"number\">1.29722</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">1.93802</span>,       <span class=\"number\">1.29722</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">58.0307</span>,      -<span class=\"number\">56.5009</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">57.8964</span>,</span><br><span class=\"line\"> -<span class=\"number\">56.5009</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">58.0307</span>,      -<span class=\"number\">56.7398</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">57.8964</span>,      -<span class=\"number\">56.7398</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">1.92656</span>,       <span class=\"number\">1.49907</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.87552</span>,</span><br><span class=\"line\">  <span class=\"number\">1.49907</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">1.92656</span>,       <span class=\"number\">1.40833</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">1.87552</span>,       <span class=\"number\">1.40833</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">125.702</span>,      -<span class=\"number\">123.716</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">125.771</span>,</span><br><span class=\"line\"> -<span class=\"number\">123.716</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">125.702</span>,      -<span class=\"number\">123.592</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">125.771</span>,      -<span class=\"number\">123.592</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.801563</span>,       <span class=\"number\">1.57315</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.750521</span>,</span><br><span class=\"line\">  <span class=\"number\">1.57315</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.801563</span>,       <span class=\"number\">1.48241</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.750521</span>,       <span class=\"number\">1.48241</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">141.003</span>,      -<span class=\"number\">138.069</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">140.834</span>,</span><br><span class=\"line\"> -<span class=\"number\">138.069</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">141.003</span>,      -<span class=\"number\">138.369</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      -<span class=\"number\">140.834</span>,      -<span class=\"number\">138.369</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> -<span class=\"number\">30.8589</span>,       -<span class=\"number\">28.325</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,       -<span class=\"number\">30.813</span>,</span><br><span class=\"line\">  -<span class=\"number\">28.325</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,      -<span class=\"number\">30.8589</span>,      -<span class=\"number\">28.4065</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,       -<span class=\"number\">30.813</span>,      -<span class=\"number\">28.4065</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,             <span class=\"number\">1</span>,             <span class=\"number\">0</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.323438</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.271354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.323438</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.271354</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.385938</span>,      <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.333854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.385938</span>,       <span class=\"number\">0.70463</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.333854</span>,       <span class=\"number\">0.70463</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.448438</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.448438</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.510938</span>,         <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,</span><br><span class=\"line\">    <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.510938</span>,      <span class=\"number\">0.482407</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,      <span class=\"number\">0.482407</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.573438</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.521354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.573438</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.521354</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.510938</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.510938</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.458854</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.448438</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.448438</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.396354</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.260938</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.260938</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.198437</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.198437</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.135937</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.135937</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.260938</span>,      <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,</span><br><span class=\"line\"> <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.260938</span>,       <span class=\"number\">0.70463</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.208854</span>,       <span class=\"number\">0.70463</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.198437</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.198437</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     -<span class=\"number\">0.146354</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\">-<span class=\"number\">0.135937</span>,         <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,</span><br><span class=\"line\">    <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     -<span class=\"number\">0.135937</span>,      <span class=\"number\">0.482407</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,    -<span class=\"number\">0.0838542</span>,      <span class=\"number\">0.482407</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0734375</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0213542</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0734375</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,    -<span class=\"number\">0.0213542</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0109375</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0109375</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0515625</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0515625</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.114063</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.114063</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0109375</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,    -<span class=\"number\">0.0109375</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,     <span class=\"number\">0.0411458</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0515625</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0515625</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.114063</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.114063</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176563</span>,      <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.908333</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.176563</span>,      <span class=\"number\">0.815741</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,      <span class=\"number\">0.815741</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">0.0515625</span>,      <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.797222</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,     <span class=\"number\">0.0515625</span>,       <span class=\"number\">0.70463</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.103646</span>,       <span class=\"number\">0.70463</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.114063</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.114063</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.166146</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176563</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.176563</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.239063</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.239063</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.301562</span>,      <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.686111</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.301562</span>,      <span class=\"number\">0.593518</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,      <span class=\"number\">0.593518</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176563</span>,         <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,</span><br><span class=\"line\">    <span class=\"number\">0.575</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.176563</span>,      <span class=\"number\">0.482407</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.228646</span>,      <span class=\"number\">0.482407</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.239063</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.239063</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.291146</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.301562</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.301562</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.353646</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.364062</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.416146</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.364062</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.416146</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.426562</span>,      <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,</span><br><span class=\"line\"> <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.478646</span>,</span><br><span class=\"line\"> <span class=\"number\">0.463889</span>,             <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,</span><br><span class=\"line\"> <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>,      <span class=\"number\">0.426562</span>,      <span class=\"number\">0.371296</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,      <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>,      <span class=\"number\">0.478646</span>,      <span class=\"number\">0.371296</span>,             <span class=\"number\">0</span>,</span><br><span class=\"line\"> <span class=\"number\">0.176471</span>,      <span class=\"number\">0.866667</span>,      <span class=\"number\">0.905882</span>,             <span class=\"number\">1</span>]</span><br><span class=\"line\">coordinates = [float_values[i:i+<span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(float_values),<span class=\"number\">2</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\">ax = fig.add_subplot(<span class=\"number\">111</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x_values = [x <span class=\"keyword\">for</span> x, _ <span class=\"keyword\">in</span> coordinates]</span><br><span class=\"line\">y_values = [y <span class=\"keyword\">for</span> _, y <span class=\"keyword\">in</span> coordinates]</span><br><span class=\"line\"></span><br><span class=\"line\">ax.scatter(x_values, y_values)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如图:</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Euf4PlCp7zbyLGd.png\" alt=\"image-20240624221016969\"></p>\n<p>这里有一个密集位置,箭头指向应该是让我们放大看</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/dgHw3sEYDmX9Tz2.png\" alt=\"image-20240624221254947\"></p>\n<p>确实出现了原图的形状,但是flag旗帜的点也嵌在其中,但是对比位置好像有点问题,而且点的数量也不够,还有一个问题就是为什么这些位置没有被实际展现出来</p>\n<p>那我们先解决为什么没有展现出来的问题,根据之前的分析,这里的几个跳转语句可能是问题所在,这里类似一个switch语句,通过数组的索引和其中的值来决定下一步的运算,有加减和一些别的运算.有点类似虚拟机的opcode</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/wdAXGvEePIhMHNa.png\" alt=\"image-20240626100831665\"></p>\n<p>这里汇编有点没分析出来啥意思,拖到ida里调试看看伪代码</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/OiEewtYlbzKqkhF.png\" alt=\"image-20240626103148199\"></p>\n<p>dword_E3D1301应该就是opcode数组,然后v14应该是指八个寄存器,然后case4有点没看像是一种加解密运算,然后case5和case6是两个相同的函数,传参只有一个不同,0xFFFFFF00和0xFF2DDBE7,可能与rgb的十六进制值有关,上在线转换网站上看一下</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/cBuntC9yZEWORwA.png\" alt=\"image-20240626103952814\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/EhFLHykfAqegiaG.png\" alt=\"image-20240626104016412\"></p>\n<p>应该就是flag的黄色和原图的蓝色了,但是为什么同一个函数,只是颜色不同,怎么会有不显示和显示的情况呢,不清楚,hook一下看一下调用的时候其他参数有什么区别</p>\n<p>hook代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"comment\">//addr = [140008318] - 0x650</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QWORDADDR 0x140008318</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OFFSET 0x650</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __int64 (*funptr)(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, __int64, __int64, __int64, __int64, __int64);</span><br><span class=\"line\">INT64 func;</span><br><span class=\"line\">__int64 __fastcall <span class=\"title function_\">funcHook</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a1,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a2,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a3,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a4,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a5,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a6,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a7,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a8,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a9,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a10)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE* f = fopen(<span class=\"string\">&quot;C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> in[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(in,<span class=\"string\">&quot;a1:0x%08x,a2:0x%08x,a3:0x%08x,a4:0x%08x,a5:0x%08x\\n&quot;</span>, a1, a2, a3, a4, a5);</span><br><span class=\"line\">    <span class=\"built_in\">fputs</span>(in, f);</span><br><span class=\"line\">    fclose(f);</span><br><span class=\"line\">    funptr fpt;</span><br><span class=\"line\">    fpt = (funptr)func;</span><br><span class=\"line\">    fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Start_Hook</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDetourRestoreAfterWith();</span><br><span class=\"line\">\tDetourTransactionBegin();</span><br><span class=\"line\">\tDetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">\tINT64 qword_addr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ReadProcessMemory(GetCurrentProcess(), (LPCVOID*)QWORDADDR, &amp;qword_addr, <span class=\"number\">8</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FILE* f = fopen(<span class=\"string\">&quot;C:\\\\Users\\\\15386\\\\Desktop\\\\out.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">fputs</span>(<span class=\"string\">&quot;error ReadProcessMemory\\n&quot;</span>, f);</span><br><span class=\"line\">        fclose(f);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func = qword_addr - OFFSET;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDetourAttach((PVOID*)&amp;func, funcHook);<span class=\"comment\">//msg</span></span><br><span class=\"line\">\tDetourTransactionCommit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Exit_Hook</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDetourTransactionBegin();</span><br><span class=\"line\">\tDetourUpdateThread(GetCurrentThread());</span><br><span class=\"line\">\tDetourDetach((PVOID*)&amp;func, funcHook);</span><br><span class=\"line\">\tDetourTransactionCommit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tStart_Hook();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">\t\tExit_Hook();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>得到前五个参数内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1:0xfffffc4a,a2:0x00000032,a3:0xff1fa3ac,a4:0x00130bd0,a5:0xffffff00</span><br><span class=\"line\">a1:0x00000032,a2:0xfffffe7a,a3:0x001bcd69,a4:0xffe8bcc5,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffc4a,a2:0x000000aa,a3:0xff8eb263,a4:0x00d91997,a5:0xffffff00</span><br><span class=\"line\">a1:0x00000032,a2:0x000000e6,a3:0x001cf400,a4:0x00e82b18,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffc4a,a2:0xffffff2e,a3:0x00391faa,a4:0x006ee5d2,a5:0xffffff00</span><br><span class=\"line\">a1:0x00000032,a2:0x0000015e,a3:0x000ebe72,a4:0x00d77de2,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffc86,a2:0xfffffef2,a3:0x00071150,a4:0x0074fb28,a5:0xffffff00</span><br><span class=\"line\">a1:0x000000aa,a2:0xfffffef2,a3:0xffda3e17,a4:0x00c42e8b,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffcfe,a2:0x000000e6,a3:0x0034cf2b,a4:0xff321ecf,a5:0xffffff00</span><br><span class=\"line\">a1:0x0000006e,a2:0xfffffe7a,a3:0xffa49c19,a4:0x00d9e5f1,a5:0xffffff00</span><br><span class=\"line\">a1:0xfffffcc2,a2:0x000000aa,a3:0xffca5ee7,a4:0x00c42d8b,a5:0xffffff00</span><br><span class=\"line\">a1:0x0000028a,a2:0x00000032,a3:0x00eabf17,a4:0x00a7e3ab,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000024e,a2:0x0000006e,a3:0x00c42d8b,a4:0x00cb0f37,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000212,a2:0x000000aa,a3:0x00d717af,a4:0x001f5b13,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000001d6,a2:0x000000e6,a3:0x00c460e9,a4:0x00e9ad55,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000019a,a2:0x00000122,a3:0x00c7a989,a4:0x00b9fd35,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000001d6,a2:0x00000122,a3:0x00ab7100,a4:0x00646cf8,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000212,a2:0x00000122,a3:0x00c409a9,a4:0x0031cd9d,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000002c6,a2:0x00000032,a3:0x00d77e8b,a4:0x002f2773,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000302,a2:0x00000032,a3:0x00d9ad01,a4:0x00996535,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000033e,a2:0x00000032,a3:0x0039e156,a4:0x00da4a26,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000002c6,a2:0x0000006e,a3:0x0013207c,a4:0x00346848,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x00000302,a2:0x000000aa,a3:0x00c9140b,a4:0x000b5fa7,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000033e,a2:0x000000e6,a3:0x0053071f,a4:0x00c7ab3b,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000037a,a2:0x00000122,a3:0x00d71106,a4:0x00d6329a,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003b6,a2:0x00000122,a3:0x00eb60a1,a4:0x00a58d79,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003f2,a2:0x00000122,a3:0x00eb67cd,a4:0x00f5e9d9,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000042e,a2:0x00000122,a3:0x00d71161,a4:0x000d7d31,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003b6,a2:0x00000032,a3:0x00677611,a4:0x00659df9,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003f2,a2:0x00000032,a3:0x0040173d,a4:0x00557919,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000042e,a2:0x00000032,a3:0x00d77661,a4:0x003d9d01,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000046a,a2:0x00000032,a3:0x00efff9a,a4:0x00ca2e06,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000003f2,a2:0x0000006e,a3:0x00c404eb,a4:0x00b7178b,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000042e,a2:0x000000aa,a3:0x00d7c6ef,a4:0x008b6337,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000046a,a2:0x000000aa,a3:0x00d7701f,a4:0x00677b0b,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004a6,a2:0x000000aa,a3:0x00d71171,a4:0x00fd4d21,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004e2,a2:0x000000aa,a3:0x003906ab,a4:0x000bbf27,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000046a,a2:0x000000e6,a3:0x00096663,a4:0x00ef5f33,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004a6,a2:0x00000122,a3:0x00732157,a4:0x00835b9f,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x000004e2,a2:0x00000122,a3:0x00353730,a4:0x00383434,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000051e,a2:0x00000122,a3:0x006257a9,a4:0x009555e9,a5:0xff2ddbe7</span><br><span class=\"line\">a1:0x0000055a,a2:0x00000122,a3:0x00d777af,a4:0x00df5bd3,a5:0xff2ddbe7</span><br></pre></td></tr></table></figure>\n\n<p>可以看到蓝色调用了31次,黄色调用了11次,正好对应正方形块数,验证了猜测.</p>\n<p>前面的四个参数在蓝色调用的时候基本都是正数,黄色调用的时候则总会出现一些负数的情况,所以可能就是在这四个参数出了问题让绘制出现了失败,在蓝色调用的前两个参数有一些相同的情况,比如说第二个参数0x00000032这个值,出现了8次,对应了一行的八个方块,0x0000006e则对应三个方块,应该就是指的y坐标,第一个参数则可能会是x坐标,知道了这个,我们就可以通过hook这个绘制函数通过正确传参就能实现绘制,但是正确的位置在哪呢?位置被错误的计算了,只能从虚拟机运行入手了,写个脚本跑一下运行流程</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opcode = [<span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00524895</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x005A8E2C</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00985AD2</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00A9685D</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00785CEF</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00963EA7</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00465215</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00856DCE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00758C6E</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001F4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0098A6B4</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000003E8</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00856ECE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000258</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00ABFC52</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00856ECE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x009654EA</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x008523AC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0086EACC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00EA3245</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00854AEC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00963DCE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0098EE44</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0078A213</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00526339</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0088574E</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0012445A</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00965243</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00AA23E4</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000168</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00AA2488</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001A4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00965224</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00263554</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00015478</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00963524</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00AEBCDF</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000003C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x008547AE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x009685AA</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x0096335A</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00965234</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000078</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x007845EE</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000B4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00482526</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00326212</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x0000012C</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00747475</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x00000168</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x002314EC</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000001A4</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000009</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000003</span>, <span class=\"number\">0x000000F0</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000005</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x009634EA</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000007</span>, <span class=\"number\">0x00000006</span>, <span class=\"number\">0x00000007</span>]</span><br><span class=\"line\">key = <span class=\"number\">0x0AD00001F</span></span><br><span class=\"line\">reg = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>]</span><br><span class=\"line\">rip = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> rip &lt; <span class=\"built_in\">len</span>(opcode):</span><br><span class=\"line\">    <span class=\"keyword\">match</span> opcode[rip]:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;+++0 reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]&#125;</span>,reg[1]=<span class=\"subst\">&#123;reg[<span class=\"number\">1</span>]&#125;</span>,reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]+reg[<span class=\"number\">1</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[<span class=\"number\">0</span>] += reg[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;---1 reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]&#125;</span>,reg[1]=<span class=\"subst\">&#123;reg[<span class=\"number\">1</span>]&#125;</span>,reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]-reg[<span class=\"number\">1</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[<span class=\"number\">0</span>] -= reg[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            v10 = opcode[rip+<span class=\"number\">1</span>]</span><br><span class=\"line\">            rip += <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"comment\"># print(v10)</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;===2 reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=reg[<span class=\"subst\">&#123;v10&#125;</span>],reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=<span class=\"subst\">&#123;reg[opcode[rip]]&#125;</span>,reg[<span class=\"subst\">&#123;v10&#125;</span>]=<span class=\"subst\">&#123;reg[v10]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[opcode[rip]] = reg[v10]</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            v11 = opcode[rip+<span class=\"number\">1</span>]</span><br><span class=\"line\">            rip += <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;===3 reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=<span class=\"subst\">&#123;v11&#125;</span>,reg[<span class=\"subst\">&#123;opcode[rip]&#125;</span>]=<span class=\"subst\">&#123;reg[opcode[rip]]&#125;</span>,reg[<span class=\"subst\">&#123;v10&#125;</span>]=<span class=\"subst\">&#123;v11&#125;</span>&quot;</span>)</span><br><span class=\"line\">            reg[opcode[rip]] = v11</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            rip += <span class=\"number\">1</span></span><br><span class=\"line\">            v12 = reg[<span class=\"number\">0</span>]</span><br><span class=\"line\">            v13 = reg[<span class=\"number\">0</span>]*(reg[<span class=\"number\">1</span>]+<span class=\"number\">1</span>)</span><br><span class=\"line\">            reg[<span class=\"number\">0</span>] = key^opcode[rip]</span><br><span class=\"line\">            reg[<span class=\"number\">1</span>] = (reg[<span class=\"number\">0</span>] ^ (reg[<span class=\"number\">1</span>] + v12)) % <span class=\"number\">256</span> + (((reg[<span class=\"number\">0</span>] ^ (v12 * reg[<span class=\"number\">1</span>])) % <span class=\"number\">256</span> + (((reg[<span class=\"number\">0</span>] ^ (reg[<span class=\"number\">1</span>] + v13)) % <span class=\"number\">256</span>) &lt;&lt; <span class=\"number\">8</span>)) &lt;&lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;decrypt reg[0]=<span class=\"subst\">&#123;reg[<span class=\"number\">0</span>]&#125;</span>,reg[1]=<span class=\"subst\">&#123;reg[<span class=\"number\">1</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;call-5 reg[4]=<span class=\"subst\">&#123;reg[<span class=\"number\">4</span>]&#125;</span>,reg[5]=<span class=\"subst\">&#123;reg[<span class=\"number\">5</span>]&#125;</span>,reg[6]=<span class=\"subst\">&#123;reg[<span class=\"number\">6</span>]&#125;</span>,reg[7]=<span class=\"subst\">&#123;reg[<span class=\"number\">7</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;call-6 reg[4]=<span class=\"subst\">&#123;reg[<span class=\"number\">4</span>]&#125;</span>,reg[5]=<span class=\"subst\">&#123;reg[<span class=\"number\">5</span>]&#125;</span>,reg[6]=<span class=\"subst\">&#123;reg[<span class=\"number\">6</span>]&#125;</span>,reg[7]=<span class=\"subst\">&#123;reg[<span class=\"number\">7</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\">    rip += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果部分:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">8</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">8</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">4</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">4</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">4</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">3</span> reg[<span class=\"number\">1</span>]=<span class=\"number\">1000</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">4</span>]=<span class=\"number\">1000</span></span><br><span class=\"line\">---<span class=\"number\">1</span> reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">1000</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">950</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">4</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">950</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">9</span>],reg[<span class=\"number\">0</span>]=-<span class=\"number\">950</span>,reg[<span class=\"number\">9</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">5</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">5</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">4</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">4</span>]=-<span class=\"number\">950</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">1</span>]=reg[<span class=\"number\">5</span>],reg[<span class=\"number\">1</span>]=<span class=\"number\">1000</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">decrypt reg[<span class=\"number\">0</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">8060662</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">3</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">3</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">1</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">8060662</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">1</span>]=reg[<span class=\"number\">3</span>],reg[<span class=\"number\">1</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">3</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">6</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">6</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">8060662</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">7</span>]=reg[<span class=\"number\">1</span>],reg[<span class=\"number\">7</span>]=<span class=\"number\">0</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">call-<span class=\"number\">5</span> reg[<span class=\"number\">4</span>]=-<span class=\"number\">950</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">8</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">8</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">4</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">4</span>]=-<span class=\"number\">950</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">9</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">9</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">3</span> reg[<span class=\"number\">1</span>]=<span class=\"number\">60</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">9</span>]=<span class=\"number\">60</span></span><br><span class=\"line\">+++<span class=\"number\">0</span> reg[<span class=\"number\">0</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">60</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">5</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">5</span>],reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span></span><br><span class=\"line\">===<span class=\"number\">3</span> reg[<span class=\"number\">1</span>]=<span class=\"number\">500</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">60</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">500</span></span><br><span class=\"line\">---<span class=\"number\">1</span> reg[<span class=\"number\">0</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">500</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">390</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">5</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">0</span>]=-<span class=\"number\">390</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">0</span>]=reg[<span class=\"number\">4</span>],reg[<span class=\"number\">0</span>]=-<span class=\"number\">390</span>,reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">1</span>]=reg[<span class=\"number\">5</span>],reg[<span class=\"number\">1</span>]=<span class=\"number\">500</span>,reg[<span class=\"number\">5</span>]=-<span class=\"number\">390</span></span><br><span class=\"line\">decrypt reg[<span class=\"number\">0</span>]=<span class=\"number\">2908393011</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">11790239</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">6</span>]=reg[<span class=\"number\">0</span>],reg[<span class=\"number\">6</span>]=<span class=\"number\">8060662</span>,reg[<span class=\"number\">0</span>]=<span class=\"number\">2908393011</span></span><br><span class=\"line\">===<span class=\"number\">2</span> reg[<span class=\"number\">7</span>]=reg[<span class=\"number\">1</span>],reg[<span class=\"number\">7</span>]=<span class=\"number\">2907850890</span>,reg[<span class=\"number\">1</span>]=<span class=\"number\">11790239</span></span><br><span class=\"line\">call-<span class=\"number\">5</span> reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=-<span class=\"number\">390</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2908393011</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">11790239</span></span><br></pre></td></tr></table></figure>\n\n<p>基本都是在case1的时候减了一个大数,然后call的参数就出现负数,简单的加个if条件,将减的那一步选择性的跳过,如果结果为负数,那么就不执行减操作,改下程序得到的参数貌似正常了,得到的“正确“参数如下:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">10637038</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2907850890</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2908393011</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">3100563</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">14547217</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2912443085</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">4632154</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2913560642</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">290</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2910346480</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">545956</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">50</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">350</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">5563432</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2912304824</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2907066890</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2285150</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">10317121</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2911202769</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">230</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">2910162033</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">120253</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">110</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">9170807</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2912462507</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">5</span>]=<span class=\"number\">170</span>,reg[<span class=\"number\">6</span>]=<span class=\"number\">15283589</span>,reg[<span class=\"number\">7</span>]=<span class=\"number\">2911203025</span></span><br></pre></td></tr></table></figure>\n\n<p>尝试hook绘制函数传入这些参数进行绘制看看结果,试了很久一直没有显示,连原图的都不显示了,最后对照了一下第三个和第四个参数发现和之前hook来的参数不同,应该是计算的时候C有溢出但是python没有,重新用C写一遍模拟虚拟机运行的脚本运行得到第三个参数和第四个参数数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> reg6[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0xf814b4</span>,<span class=\"number\">0x1bcd69</span>,<span class=\"number\">0x87a34b</span>,<span class=\"number\">0x1cf400</span>,<span class=\"number\">0x391faa</span>,<span class=\"number\">0xebe72</span>,<span class=\"number\">0x71150</span>,<span class=\"number\">0xc7371b</span>,<span class=\"number\">0x34cf2b</span>,<span class=\"number\">0xd1b52d</span>,<span class=\"number\">0xb36fdf</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> reg7[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0x130bd0</span>,<span class=\"number\">0x7515c9</span>,<span class=\"number\">0xd91997</span>,<span class=\"number\">0xe82b18</span>,<span class=\"number\">0x520efe</span>,<span class=\"number\">0xd77de2</span>,<span class=\"number\">0x788404</span>,<span class=\"number\">0xc42e8b</span>,<span class=\"number\">0x5b8fe7</span>,<span class=\"number\">0xd9e5f1</span>,<span class=\"number\">0xc42d8b</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注入测试</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/QiFy4E5RH6ctnOl.png\" alt=\"image-20240626145848145\"></p>\n<p><img src=\"https://s2.loli.net/2024/09/28/Bc7KTqgd8x4EmlM.png\" alt=\"image-20240626150321144\"></p>\n<p>只显示了四个方块,嘶,怎么会少了7块呢,根据前两个参数的大概位置分析在第2,5,7,9次黄色函数调用处,对比一下他们的虚拟机运行情况</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/c87Y6WDz5NhkHxn.png\" alt=\"image-20240626150951503\"></p>\n<p>在这里看到了有些call调用的前将第三个和第四个参数分别调换了位置,刚好2,5,7,9没有调换!!!</p>\n<p>所以根据这个再把错误的参数位置调换一下进行注入测试</p>\n<p><img src=\"https://s2.loli.net/2024/09/28/kj1fQxgE9NmiMLW.png\" alt=\"image-20240626151806428\"></p>\n<p>HOOK代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">DWORD64 HOOKADDR1 = (<span class=\"type\">long</span> <span class=\"type\">long</span>)GetModuleHandleA(<span class=\"string\">&quot;2022游戏安全技术竞赛初赛.exe&quot;</span>) + <span class=\"number\">0X11E4</span>; <span class=\"comment\">// MEMCPY函数</span></span><br><span class=\"line\">DWORD64 HOOKADDR2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">DWORD64 SHEELCODE = <span class=\"number\">0X0000001400027E2</span>;</span><br><span class=\"line\">DWORD64 SHEELCODE2 = <span class=\"number\">0X0000001400027C9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BYTE oldByte[<span class=\"number\">12</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*myMemecpy)</span><span class=\"params\">(<span class=\"type\">void</span>* dest, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> n)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __int64 (*funptr)(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, __int64, __int64, __int64, __int64, __int64);</span><br><span class=\"line\"><span class=\"comment\">//HOOK绘制函数修改传参</span></span><br><span class=\"line\">__int64 __fastcall <span class=\"title function_\">drawHook</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a1,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a2,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a3,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a4,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> a5,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a6,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a7,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a8,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a9,</span></span><br><span class=\"line\"><span class=\"params\">    __int64 a10)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg4[<span class=\"number\">11</span>] = &#123; <span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span>,<span class=\"number\">230</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg5[<span class=\"number\">11</span>] = &#123; <span class=\"number\">50</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span>,<span class=\"number\">230</span>,<span class=\"number\">290</span>,<span class=\"number\">350</span>,<span class=\"number\">230</span>,<span class=\"number\">230</span>,<span class=\"number\">230</span>,<span class=\"number\">110</span>,<span class=\"number\">170</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg6[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0xf814b4</span>,<span class=\"number\">0x1bcd69</span>,<span class=\"number\">0x87a34b</span>,<span class=\"number\">0x1cf400</span>,<span class=\"number\">0x391faa</span>,<span class=\"number\">0xebe72</span>,<span class=\"number\">0x71150</span>,<span class=\"number\">0xc7371b</span>,<span class=\"number\">0x34cf2b</span>,<span class=\"number\">0xd1b52d</span>,<span class=\"number\">0xb36fdf</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> reg7[<span class=\"number\">11</span>] = &#123; <span class=\"number\">0x130bd0</span>,<span class=\"number\">0x7515c9</span>,<span class=\"number\">0xd91997</span>,<span class=\"number\">0xe82b18</span>,<span class=\"number\">0x520efe</span>,<span class=\"number\">0xd77de2</span>,<span class=\"number\">0x788404</span>,<span class=\"number\">0xc42e8b</span>,<span class=\"number\">0x5b8fe7</span>,<span class=\"number\">0xd9e5f1</span>,<span class=\"number\">0xc42d8b</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">11</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> || i == <span class=\"number\">4</span> || i == <span class=\"number\">6</span> || i == <span class=\"number\">8</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tmp = reg6[i];</span><br><span class=\"line\">            reg6[i] = reg7[i];</span><br><span class=\"line\">            reg7[i] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    funptr fpt;</span><br><span class=\"line\">    fpt = (funptr)(HOOKADDR2 - <span class=\"number\">0x5EE</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a5 == <span class=\"number\">0xffffff00</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> i = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fpt(reg4[i], reg5[i], reg6[i], reg7[i], a5, a6, a7, a8, a9, a10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fpt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二处hook,hook绘制函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">installHook2</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//00000001400027E2, 0000000009E50412</span></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">//0000000009E605EE   | E9 1FFEFFFF                          | jmp 9E60412                                   |</span></span><br><span class=\"line\">    BYTE shellCode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0xE9</span>, <span class=\"number\">0x1F</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    DWORD lpflOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)HOOKADDR2, <span class=\"keyword\">sizeof</span>(shellCode), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HOOKADDR2, shellCode, <span class=\"keyword\">sizeof</span>(shellCode));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027E2   | 48:B8 A91148F6FF7F0000               | mov rax,testhook.7FFFF64811A9                 |</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027EC   | FFD0                                 | call rax                                      |</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027EE   | 48:B8 F305E60900000000               | mov rax,9E605F3                               |</span></span><br><span class=\"line\"><span class=\"comment\">    00000001400027F8   | FFE0                                 | jmp rax                                       |</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    BYTE shellCode2[] = &#123;</span><br><span class=\"line\"> <span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>,</span><br><span class=\"line\"> <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xE0</span></span><br><span class=\"line\">    &#125;;;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode2[<span class=\"number\">2</span>] = (DWORD64)drawHook;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode2[<span class=\"number\">14</span>] = HOOKADDR2 + <span class=\"number\">0X5</span>;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)(SHEELCODE), <span class=\"keyword\">sizeof</span>(shellCode2), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)(SHEELCODE), shellCode2, <span class=\"keyword\">sizeof</span>(shellCode2));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*0000000009E60412   | 48:B8 E227004001000000               | mov rax,2022游戏安全技术竞赛初赛.1400027E2              |</span></span><br><span class=\"line\"><span class=\"comment\">      0000000009E6041C   | FFE0                                 | jmp rax                                       |*/</span></span><br><span class=\"line\">    BYTE shellCode3[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x27</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xE0</span></span><br><span class=\"line\">    &#125;;;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode3[<span class=\"number\">2</span>] = (DWORD64)SHEELCODE;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)(HOOKADDR2 - <span class=\"number\">0x5EE</span> + <span class=\"number\">0X412</span>), <span class=\"keyword\">sizeof</span>(shellCode3), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)(HOOKADDR2 - <span class=\"number\">0x5EE</span> + <span class=\"number\">0X412</span>), shellCode3, <span class=\"keyword\">sizeof</span>(shellCode3));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">memcpyHook</span><span class=\"params\">(<span class=\"type\">void</span>* dest, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> n)</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    HOOKADDR2 = (DWORD64)dest - <span class=\"number\">0x1301</span> + <span class=\"number\">0x5EE</span>;<span class=\"comment\">//跟第一个参数偏移0x1301</span></span><br><span class=\"line\">    installHook2();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">memcpy</span>(dest, src, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一处hook,hook call memcpy</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">installHook1</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//00000001400011E4   | E9 E0150000                          | jmp 2022游戏安全技术竞赛初赛.1400027C9                  |</span></span><br><span class=\"line\">    BYTE shellCode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0xE9</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    DWORD lpflOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)HOOKADDR1, <span class=\"keyword\">sizeof</span>(shellCode), PAGE_EXECUTE_READWRITE, &amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)HOOKADDR1, shellCode, <span class=\"keyword\">sizeof</span>(shellCode));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*00000001400027C9   | 48:B8 111348F6FF7F0000               | mov rax,testhook.7FFFF6481311                 |</span></span><br><span class=\"line\"><span class=\"comment\">         00000001400027D3   | FFD0                                 | call rax                                      |</span></span><br><span class=\"line\"><span class=\"comment\">         00000001400027D5   | E9 0FEAFFFF                          | jmp 2022游戏安全技术竞赛初赛.1400011E9                  |*/</span></span><br><span class=\"line\">    BYTE shellCode2[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x48</span>, <span class=\"number\">0xB8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0xE9</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xEA</span>, <span class=\"number\">0xFF</span>,</span><br><span class=\"line\"> <span class=\"number\">0xFF</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    *(DWORD64*)&amp;shellCode2[<span class=\"number\">2</span>] = (DWORD64)memcpyHook;</span><br><span class=\"line\">    VirtualProtect((<span class=\"type\">void</span>*)SHEELCODE2, <span class=\"keyword\">sizeof</span>(shellCode2), PAGE_EXECUTE_READWRITE,&amp;lpflOldProtect);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>((<span class=\"type\">void</span>*)SHEELCODE2, shellCode2, <span class=\"keyword\">sizeof</span>(shellCode2));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        installHook1();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Typora破解复现","date":"2023-09-17T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png","thumbnail":"https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n最近在逛论坛的时候看到有人写了一份Typora的破解复现，看了下破解过程感觉不是很难，又因为实验室招新活动开始，刚好手里缺技术演示的材料，于是便想自己着手看看这个一直在用的工具是怎么被破解的，记录一下破解过程<!-- more -->\n\n## 1. 找到app.asar文件解包得到License.js加密代码\n\n根据火绒剑在系统日志里监控Typore的启动，找到可疑的asar文件，程序访问并读取了该文件，并启动了其中的main.node模块，疑似开发者对加密源代码的解密过程\n\n![image-20230916115115006](https://s2.loli.net/2024/06/23/KhtnDlNUAuJxjvs.png)\n\n找到app.asar文件，根据日志显示，可以猜测这个类似压缩包，问Bing得知 \n\n<!-- more -->\n\n> [asar是一种用于打包Electron应用程序源代码的文件格式，它可以让应用程序更容易分发和运行。asar文件的工作原理是将所有文件连接在一起，不进行压缩，但支持随机访问。asar文件可以使用asar命令行工具或者electron-packager等工具来创建或解压](https://blog.csdn.net/happydeer/article/details/123162612)\n\n根据提示内容进行解压， `asar extract app.asar unpacked`\n\n\n\n得到unpacked文件，貌似找到关于许可证的有关文件--License.js，Winhex打开看一眼\n\n<img src=\"https://s2.loli.net/2024/06/23/d8kAeVhzfOJ2bMX.png\" alt=\"image-20230916115804959\" style=\"zoom:67%;\" />\n\n有种base64编码的感觉，难道只是base64编码加密？拖进CyberChef解密一下\n\n<img src=\"https://s2.loli.net/2024/06/23/kDaNSiqQP2RH7yU.png\" alt=\"image-20230916115944322\" style=\"zoom:67%;\" />\n\n可能还有一层或几层加密\n\n## 2. 从main.node文件找License.js的解密逻辑\n\n根据火绒剑日志显示，在app.asar解包后运行了main.node模块，又根据前面License.js被加密了，可以推测main.node有可能运行时解密了License.js文件，先DIE看一眼main.node，DLL64位，IDA64打开，先不管其他的，shift+f12查找字符串\n\n![image-20230916120618916](https://s2.loli.net/2024/06/23/C6ou97bBU1xVMlN.png)\n\n疑似有base64解密过程，交叉引用找到引用处伪代码\n\n![image-20230916120721264](https://s2.loli.net/2024/06/23/owiESXPZBKdYFNf.png)\n\n根据Bing得知\n\n> napi_get_named_property 是一个 Node-API 的函数，它的作用是从一个对象中获取一个指定名称的属性，并返回它的值。\n\n> ```C\n> napi_status napi_call_function(napi_env env, napi_value recv, napi_value func, size_t argc, const napi_value* argv, napi_value* result);\n> ```\n>\n> 其中，参数的含义是：\n>\n> - `env`: 当前调用 N-API 的环境。\n> - `recv`: 要作为函数接收者的对象，通常是 `this` 的值。\n> - `func`: 要调用的函数对象。\n> - `argc`: 要传递的参数的个数。\n> - `argv`: 要传递的参数的数组。\n> - `result`: 用于接收函数返回值的指针。\n\n分析得知，这段代码类似给v40进行解码，v40 =  base64.from(v38)，v38又来自函数的第三个参数a3+8，猜测这个a3+8指向的就是密文的地址，动调验证下，x64dbg直接拖Typora，手动下一个main.node的断点，再根据IDA中给出的偏移计算出调试器里解密函数的地址，根据64位下寄存器默认传参顺序是ECX,EDX,R8,R9知道a3的值储存在R8中，所以R8+8指向密文地址，验证：\n\n![image-20230923112047338](https://s2.loli.net/2024/06/23/EmZPiahpzvAbkD1.png)\n\n![image-20230923112119409](https://s2.loli.net/2024/06/23/6ZntLe82dz9CJWG.png)\n\n![image-20230923112137343](https://s2.loli.net/2024/06/23/J4XrjBiNyOw5Pe3.png)\n\n这里的数据刚好对应的是atom.js里的密文\n\n![image-20230923112252136](https://s2.loli.net/2024/06/23/wNSAGJIF2QOrVZp.png)\n\n验证成功，继续分析\n\n<img src=\"https://s2.loli.net/2024/06/23/894OYvGCcjXFe6w.png\" alt=\"image-20230916133915462\" style=\"zoom:67%;\" />\n\n找到类似加密算法的密钥初始化，用findcrypt看一眼发现了AES的S盒和逆S盒，推测这里应该是AES的密钥，而且长度为32个字节，猜测是256位模式\n\n![image-20230916134109117](https://s2.loli.net/2024/06/23/b4T5qNMgQ32zIPG.png)\n\n接着找AES解密线索，找到F4E0偏移处函数\n\n![image-20230916134740069](https://s2.loli.net/2024/06/23/oeP1NbWSXA9OtMu.png)\n\n里面有S盒和异或的继续分析，确定下ECB模式还是CBC模式\n\n![image-20230916140550963](https://s2.loli.net/2024/06/23/5JP7iNeIhmawXS1.png)\n\n进入3A8F偏移处函数分析，在这里先猜测block应该是密文（void 指针数组）\n\n![image-20230916141555652](https://s2.loli.net/2024/06/23/IvoDWVX2gl6GswF.png)\n\n函数里面又出现了一个循环异或，可以肯定这是个CBC模式下的异或偏移量了，那偏移量又是怎么来的呢，追踪a2（密文地址）进行判断的话，函数里面是复制了一份a2给v3，也就是说v3可能指向了密文\n\n![image-20230916142530938](https://s2.loli.net/2024/06/23/MjeshXKzrf1SyOG.png)\n\n那么result就是偏移量了，偏移量来自密文地址+v5处，进行16次循环，也就是说偏移量可能来自密文的0-15个字节位？\n\n## 3. CyberChef验证猜测\n\n依据之前的猜测，main.node通过base64解码，再AES，CBC模式解码，密钥IDA动调得到\n\n> 0x4E, 0xE1, 0xB3, 0x82, 0x94, 0x9A, 0x02, 0x4B, 0x80, 0x2F, 0x52, 0xB4, 0xB4, 0xFE, 0x57, 0xF1, 0xBE, 0xF4, 0x08, 0x53, 0x10, 0x92, 0x56, 0xE2, 0xC2, 0x0D, 0xEC, 0xA3, 0xDD, 0x8D, 0xD5, 0x6D\n\n偏移量为密文的前16个字节，带入CyberChef检验\n\n![image-20230916151516731](https://s2.loli.net/2024/06/23/IF6DAT7fh4SBROZ.png)\n\n这下应该是得到了License.js源码，下载得到文件，找在线js美化工具美化\n\n## 4. 最终的Patch\n\n简单审计了下代码，不懂的找Bing问就是。首先应该patch掉网络验证类似request的东西，找到了几处\n\npatch后的License.js源码\n\n```js\nLL50Du2bPNkYky7Grequire(\"Env.js\");\nvar Dict = require(\"Dict.js\"),\n    electron = require(\"electron\"),\n    shell = electron.shell,\n    app = electron.app,\n    ipc = electron.ipcMain,\n    BrowserWindow = electron.BrowserWindow,\n    isWin = \"win32\" == process.platform,\n    isMac = \"darwin\" == process.platform,\n    isLinux = \"linux\" == process.platform,\n    WindowController = require(\"WindowController.js\"),\n    Raven = require(\"raven\"),\n    errorShown = !1;\nconst mustRequire = function(e) {\n    try {\n        return require(e)\n    } catch (e) {\n        if (errorShown) return;\n        errorShown = !0;\n        var n = e.message;\n        setTimeout(() => {\n            errorShown = !1, dialog = require(\"electron\").dialog, dialog.showMessageBox(null, {\n                type: \"error\",\n                buttons: [\"OK\"],\n                defaultId: 0,\n                cancelId: 0,\n                title: \"A required module cannot be loaded by Typora\",\n                message: n.split(\"\\n\")[0] + \"\\n\\nPlease check if that file exists or reinstall Typora to fix.\"\n            }).then(({\n                response: e\n            }) => {\n                process.exit(1)\n            })\n        }, 1500)\n    }\n};\nvar installDate, lastShown, hasLicense = null,\n    email = \"\",\n    licenseCode = \"\",\n    fingerPrint = \"\";\nconst ActiveResponseCode = {\n        SUCCESS: 0,\n        OUT_OF_LIMIT: 1,\n        INVALIDATE: -1,\n        WRONG_USER: -2\n    },\n    PUB_KEY = \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7nVoGCHqIMJyqgALEUrc\\n5JJhap0+HtJqzPE04pz4y+nrOmY7/12f3HvZyyoRsxKdXTZbO0wEHFIh0cRqsuaJ\\nPyaOOPbA0BsalofIAY3mRhQQ3vSf+rn3g+w0S+udWmKV9DnmJlpWqizFajU4T/E4\\n5ZgMNcXt3E1ips32rdbTR0Nnen9PVITvrbJ3l6CI2BFBImZQZ2P8N+LsqfJsqyVV\\nwDkt3mHAVxV7FZbfYWG+8FDSuKQHaCmvgAtChx9hwl3J6RekkqDVa6GIV13D23LS\\nqdk0Jb521wFJi/V6QAK6SLBiby5gYN6zQQ5RQpjXtR53MwzTdiAzGEuKdOtrY2Me\\nDwIDAQAB\\n-----END PUBLIC KEY-----\\n\\n\",\n    DAY_IN_MS = 864e5;\nvar HOST = \"https://store.typora.io\";\nconst decrypt = e => {return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf8\"))},\n    makeHash = function() {\n        var e = Array.from(arguments);\n        const n = require(\"crypto\").createHash(\"sha256\");\n        return e.forEach(e => {\n            n.update(e)\n        }), n.digest(\"base64\")\n    },\n    readLicenseInfo = () => {\n        const e = getLicenseLocalStore().get(\"SLicense\");\n        if (!e) return null;\n        const [n, t, i] = e.split(\"#\"), a = decrypt(n);\n        return a.fingerprint != fingerPrint ? null : (Object.assign(a, {\n            failCounts: t,\n            lastRetry: new Date(i)\n        }), a)\n    },\n    writeInstallDate = async e => {\n        console.log(`writeInstallDate fromBTime=${e}`);\n        var n = new Date;\n        if (e) try {\n            var t = await require(\"fs-extra\").stat(app.getPath(\"userData\") + \"/profile.data\");\n            n = new Date(t.birthtime), t.birthtime\n        } catch (e) {}\n        installDate = n;\n        const i = n.toLocaleDateString(\"en-US\");\n        return getLicenseLocalStore().put(\"IDate\", i), installDate\n    };\nvar licenseLocalStoreInstance = null;\nconst getLicenseLocalStore = function() {\n    if (null == licenseLocalStoreInstance)\n        if (isWin) licenseLocalStoreInstance = WindowsLicenseLocalStore();\n        else {\n            var e = app.setting.prepDatabase(fingerPrint);\n            licenseLocalStoreInstance = {\n                put: function(n, t) {\n                    console.log(`ls put ${n}`), e.getState()[n] = t, e.write()\n                },\n                get: function(n) {\n                    return e.getState()[n]\n                }\n            }\n        }\n    return licenseLocalStoreInstance\n};\n\nfunction WindowsLicenseLocalStore() {\n    const e = mustRequire(\"native-reg\");\n    return {\n        get: function(n) {\n            const t = e.openKey(e.HKCU, \"Software\\\\Typora\", e.Access.READ);\n            if (null == t) return \"\";\n            const i = e.getValue(t, null, n);\n            return e.closeKey(t), i\n        },\n        put: function(n, t) {\n            const i = e.createKey(e.HKCU, \"Software\\\\Typora\", e.Access.WRITE);\n            e.setValueSZ(i, n, t), e.closeKey(i)\n        }\n    }\n}\nconst getFingerPrint = async() => {\n    if (!fingerPrint) {\n        if (isWin) {\n            const e = mustRequire(\"native-reg\"),\n                n = e.openKey(e.HKEY.LOCAL_MACHINE, \"SOFTWARE\\\\Microsoft\\\\Cryptography\", e.Access.WOW64_64KEY | e.Access.READ);\n            fingerPrint = e.getValue(n, null, \"MachineGuid\"), e.closeKey(n)\n        } else fingerPrint = await require(\"node-machine-id\").machineId({\n            original: !0\n        });\n        fingerPrint || Raven.captureMessage(\"[License] Failed to get fingerPrint\"), fingerPrint = makeHash(fingerPrint, \"typora\").substr(0, 10).replace(/[/=+-]/g, \"a\"), isMac && (fingerPrint += \"darwin\")\n    }\n    return fingerPrint\n};\nvar licenseInitialed = !1;\nconst watchLicense = async e => {\n        console.log(\"[watchLicense]\"), firstValidateLicense(e), await validateTrail(), console.log(`[watchLicense] hasLicense: ${hasLicense}`), showLicensePanelIfNeeded(), addToAnalysis()\n    },\n    addToAnalysis = () => {\n        var e = Raven.getContext().tags;\n        e.hasLicense = hasLicense, Raven.mergeContext(e)\n    },\n    getOS = () => process.platform.replace(/\\d+/, \"\"),\n    renewLicense = async(e, n) => {\n        const t = (new Date).toLocaleDateString(\"en-US\");\n        const {\n            deviceId: i,\n            lastRetry: a\n        } = e || {};\n        if (!n && new Date - a < 432e5) return;\n        const s = {\n            v: getOS() + \"|\" + app.getVersion(),\n            license: licenseCode,\n            l: i,\n            u: app.setting.generateUUID(),\n            type: global.devVersion ? \"dev\" : \"\"\n        };\n        JSON.stringify(s);\n    },\n    getInstallDate = e => {\n        var n = new Date(getLicenseLocalStore().get(\"IDate\"));\n        if (isNaN(n.getTime())) return e ? null : new Date;\n        if (e) return n;\n        var t = 1641734774922;\n        return isNaN(t) ? t = new Date(\"2021-10-01\") : (t = new Date(t), isNaN(t.getTime()) && (t = new Date(\"2021-10-01\"))), n < t ? t : n\n    },\n    getTrailRemains = (e, n) => {\n        n = n || 15;\n        var t = Math.floor((new Date - installDate) / 864e5),\n            i = Math.max(0, n - t);\n        return e && (i > n || isNaN(i)) && (i = n), i\n    },\n    validateTrail = async() => {\n        var e = (installDate = getInstallDate(!global.devVersion)) ? getTrailRemains(!1) : 100;\n        (e > 15 || isNaN(e)) && (console.log(\"[validateTrail] Read from incorrupted InstallDate\"), await writeInstallDate(!0), e = 15), console.log(`[validateTrail] installDate is ${installDate.toLocaleDateString(\"en-US\")}, trail remains: ${e} days`)\n    };\n\nfunction fillLicense(e, n) {\n    licenseCode = n, (hasLicense = !(!(email = e) || !licenseCode)) && onFillLicense()\n}\n\nfunction unfillLicense(e) {\n    hasLicense || (e = \"\"), email = \"\", licenseCode = \"\", hasLicense = !1, getLicenseLocalStore().put(\"SLicense\", \"\"), e && showDialog(Dict.getPanelString(\"Typora is now deactivated\"), Dict.getPanelString(e)), onUnfillLicense()\n}\nconst firstValidateLicense = e => {\n        console.log(\"[License] firstValidateLicense\"), licenseInitialed = !0;\n        const n = readLicenseInfo(),\n            {\n                license: t,\n                email: i\n            } = n || {};\n        t && i ? (fillLicense(i, t), renewLicense(n, e), console.log(\"[License] pass validateLicenseInfoStr\")) : unfillLicense()\n    },\n    showDialog = (e, n) => electron.dialog.showMessageBox(null, {\n        type: \"error\",\n        buttons: [\"OK\"],\n        defaultId: 0,\n        cancelId: 0,\n        title: e,\n        message: n\n    }),\n    endDevTest = function() {\n        app.expired = !0, showDialog(Dict.getPanelString(\"Error\"), Dict.getPanelString(\"This beta version of Typora is expired, please download and install a newer version.\")).then(() => {\n            shell.openExternal(\"https://typora.io/#download\"), setTimeout(() => {\n                process.exit(1)\n            }, 1e3)\n        })\n    },\n    validateDevTest = function() {\n        if (!hasLicense && !isLinux && global.devVersion && global.PRODUCTION_MODE) {\n            var e = getInstallDate(),\n                n = new Date;\n            console.log(\"buildTime is 1641734774922\"), (isNaN(1641734774922) || n - 1641734774922 > 20736e6) && endDevTest(), e -= 0, console.log(\"verInitTime is \" + e), !isNaN(e) && n - e > 1728e7 && endDevTest()\n        }\n    },\n    showLicensePanelIfNeeded = function() {\n        shouldShowNoLicenseHint(!0) && !app.setting.inFirstShow && (isLinux && Math.random() < .95 || (!lastShown || new Date - lastShown > 36e5 * (isLinux ? 4 : 2) || getTrailRemains(!0, 20) <= 0) && showLicensePanel())\n    };\nvar licensePanel = null;\nconst showLicensePanel = async function(e) {\n    if (lastShown = new Date, null == licensePanel) return (licensePanel = WindowController.showPanelWindow({\n        width: 525,\n        height: 420,\n        path: `page-dist/license.html?dayRemains=${getTrailRemains(!0)}&index=${e?1:0}\\n\\t\\t\\t\\t&hasActivated=${hasLicense||!1}&email=${email}&license=${licenseCode}&lang=${app.setting.getUserLocale()}&needLicense=${shouldShowNoLicenseHint()}`,\n        frame: !1,\n        alwaysOnTop: !errorShown\n    })).on(\"closed\", function() {\n        licensePanel = null\n    }), void setTimeout(() => {\n        licensePanel && !licensePanel.isDestroyed() && licensePanel.setAlwaysOnTop(!1)\n    }, 5e3);\n    licensePanel.focus()\n};\nvar welcomePanel = null;\nconst showWelcomePanel = async function() {\n        if (lastShown = new Date, null == welcomePanel) return (welcomePanel = WindowController.showPanelWindow({\n            width: 760,\n            height: 460,\n            path: `page-dist/welcome.html?lang=${app.setting.getUserLocale()}`,\n            frame: !1,\n            alwaysOnTop: !errorShown\n        })).on(\"closed\", function() {\n            welcomePanel = null\n        }), void setTimeout(() => {\n            welcomePanel && !welcomePanel.isDestroyed() && welcomePanel.setAlwaysOnTop(!1)\n        }, 4e3);\n        welcomePanel.focus()\n    },\n    quickValidate = e => {\n        const n = \"L23456789ABCDEFGHJKMNPQRSTUVWXYZ\";\n        if (!/^([A-Z0-9]{6}-){3}[A-Z0-9]{6}$/.exec(e)) return !1;\n        var t = e.replace(/-/g, \"\"),\n            i = t.substr(22);\n        return !t.replace(/[L23456789ABCDEFGHJKMNPQRSTUVWXYZ]/g, \"\") && i == (e => {\n            for (var t = \"\", i = 0; i < 2; i++) {\n                for (var a = 0, s = 0; s < 16; s += 2) a += n.indexOf(e[i + s]);\n                t += n[a %= n.length]\n            }\n            return t\n        })(t)\n    },\n    getComputerName = async function() {\n        var e = process.env.USER;\n        switch (e || (e = require(\"os\").userInfo().username), process.platform) {\n            case \"win32\":\n                return process.env.COMPUTERNAME + \" | \" + e + \" | Windows\";\n            case \"darwin\":\n                return new Promise(n => {\n                    require(\"child_process\").exec(\"scutil --get ComputerName\", {\n                        timeout: 5e3\n                    }, (t, i) => {\n                        n(!t && i ? i.toString().trim() + \" | \" + e + \" | darwin\" : require(\"os\").hostname() + \" | \" + e + \" | darwin\")\n                    })\n                });\n            default:\n                return require(\"os\").hostname() + \" | \" + e + \" | Linux\"\n        }\n    },\n    doActivation = async function(e, n, t) {\n        if (e = (e || \"\").replace(/^[\\s\\u200b ]/g, \"\").replace(/[\\s\\u200b ]$/g, \"\"), n = (n || \"\").replace(/^[\\s\\u200b ]/g, \"\").replace(/[\\s\\u200b ]$/g, \"\"), ! function(e) {\n                return /^[^\\s@'\"/\\\\=?]+@[^\\s@'\"/\\\\]+\\.[^\\s@'\"/\\\\]+$/.test(e)\n            }(e)) return [!1, \"Please input a valid email address\"];\n        //if (!quickValidate(n)) return [!1, \"Please input a valid license code\"];\n        const i = {\n            v: getOS() + \"|\" + app.getVersion(),\n            license: n,\n            email: e,\n            l: await getComputerName(),\n            f: await getFingerPrint(),\n            u: app.setting.generateUUID(),\n            type: global.devVersion ? \"dev\" : \"\",\n            force: t\n        };\n        JSON.stringify(i);\n        try {\n            const e = {\n                data: {\n                    code: 0,\n                    msg: Buffer.from(JSON.stringify(\n                    {\n                       deviceId: i.u,\n                       fingerprint: i.f,\n                       email: i.email,\n                       license: i.license,      \n                       version: i.v,\n                       date: 1\n\n                    }),\"utf8\").toString(\"base64\")\n                }\n            }\n            if (JSON.stringify(e.data), console.log(`[License] response code is ${e.data.code}`), e.data.code == ActiveResponseCode.SUCCESS) return await writeActivationInfo(e.data.msg) ? [!0, \"\"] : [!1, \"Please input a valid license code\"];\n            if (e.data.code == ActiveResponseCode.OUT_OF_LIMIT) return t ? await writeActivationInfo(e.data.msg) ? [!0, \"Your license has exceeded the max devices numbers.\\nThe oldest device was unregistered automatically.\"] : [!1, \"Please input a valid license code\"] : [\"confirm\", 'Your license has exceeded the max devices numbers.\\nIf you click \"Continue Activation\", this device will be activated and the oldest device will be unregistered automatically.'];\n            if (e.data.code == ActiveResponseCode.INVALIDATE) return [!1, \"Please input a valid license code\"];\n            if (e.data.code == ActiveResponseCode.WRONG_USER) return [!1, \"This license code has been used with a different email address.\"]\n        } catch (e) {\n            return e.response && e.response.code ? (console.warn(`[License] error from server ${e.response.code}`), [!1, \"Unknown Error. Please contact hi@typora.io\"]) : (Raven.captureException(e, {\n                level: \"warning\"\n            }), console.error(e.stack), [!1, \"Failed to access the license server. Please check your network or try again later.\"])\n        }\n    },\n    writeActivationInfo = async function(e) {\n        const n = decrypt(e) || {},\n            {\n                deviceId: t,\n                fingerprint: i,\n                email: a,\n                license: s,\n                version: o,\n                date: r\n            } = n;\n            fillLicense(a, s);\n            getLicenseLocalStore().put(\"SLicense\", `${e}#0#${(new Date).toLocaleDateString(\"en-US\")}`);\n            hasLicense = !0;\n            return 1;\n        //return i == await getFingerPrint() && a && s ? (fillLicense(a, s), getLicenseLocalStore().put(\"SLicense\", `${e}#0#${(new Date).toLocaleDateString(\"en-US\")}`), hasLicense = !0, !0) : (console.log(\"[License] validate server return fail\"), unfillLicense(), !1)\n    },\n    doDeactivation = async() => {\n        hasLicense && email && licenseCode || console.error(\"doDeactivation on unregistered device\");\n        const {\n            deviceId: e\n        } = readLicenseInfo() || {};\n        unfillLicense()\n    };\nipc.handle(\"addLicense\", async(e, {\n    email: n,\n    license: t,\n    force: i\n}) => {\n    console.log(\"handle addLicense\");\n    try {\n        return await doActivation(n, t, i)\n    } catch (e) {\n        console.error(e.stack)\n    }\n}), ipc.handle(\"license.show\", (e, n) => {\n    showLicensePanel(n || !1)\n}), ipc.handle(\"license.show.debug\", () => {\n    licensePanel && licensePanel.webContents.openDevTools()\n}), ipc.handle(\"removeLicense\", async e => {\n    console.log(\"handle removeLicense\");\n    try {\n        return await doDeactivation()\n    } catch (e) {\n        console.error(e.stack)\n    }\n});\n    start = async(e, n) => {\n        console.log(`start LM in devVersion=${global.devVersion||!1}`);\n        try {\n             await getFingerPrint(), !e && n || isLinux || (global.devVersion || !n || n.indexOf(\"dev\") > -1) && (console.log(\"re-write InstallDate\"), await writeInstallDate()), validateDevTest(), watchLicense(e)\n        } catch (e) {\n            Raven.captureException(e)\n        }\n    },\n    shouldShowNoLicenseHint = e => !hasLicense && (e || !isLinux) && !global.devVersion,\n    getHasLicense = () => hasLicense,\n    appendLicenseHintIfNeeded = e => {\n        licenseInitialed && shouldShowNoLicenseHint() && onUnfillLicense(e)\n    };\n\nfunction genClassName() {\n    var e = (new Date).getTime();\n    return \"txxxx-xxxx-xxxxy\".replace(/[x]/g, function(n) {\n        var t = (e + 16 * Math.random()) % 16 | 0;\n        return e = Math.floor(e / 16), t.toString(16)\n    })\n}\nconst className = genClassName(),\n    onFillLicense = () => {\n        BrowserWindow.getAllWindows().forEach(e => {\n            e.webContents.executeJavaScript(`try{document.querySelector(\".${className}\").remove();}catch(e){};File.option && (File.option.hasLicense = true);File.megaMenu && File.megaMenu.forceReload();0;`)\n        })\n    },\n    onUnfillLicense = async e => {\n        if (isLinux || global.devVersion) return;\n        await Dict.init();\n        const n = `.typora-sourceview-on .${className}{\\n\\t\\tdisplay:none;\\n\\t}\\n\\t.${className} {\\n\\t\\tposition: fixed;\\n    bottom: 2px;\\n    z-index: 9999;\\n    left: 70px;\\n    font-size: 12px;\\n    line-height: 24px;\\n    background: rgb(120 120 120 / 30%);\\n    padding: 0 12px;\\n    color: var(--text-color);\\n    border-radius: 4px;\\n    cursor: pointer;\\n\\t}\\n\\t.pin-outline .${className}{\\n\\t\\tleft:calc(var(--sidebar-width) + 70px);\\n\\t}`,\n            t = `if(window.File.option){\\n\\t\\tFile.option.hasLicense = false; \\n\\t\\tFile.megaMenu && File.megaMenu.forceReload();\\n\\t\\tif(!document.querySelector(\".${className}\")) {\\n\\t\\t\\tconst pos = Math.round(Math.random() * document.body.children.length);\\n\\t\\t\\tconst dom = document.createElement(\"DIV\");\\n\\t\\t\\tdom.innerText = \"${Dict.getPanelString(\"UNREGISTERED\")} Ã\";\\n\\t\\t\\tdom.classList.add(\"${className}\");\\n\\t\\t\\tdom.style = \"position: fixed !important;bottom: 2px !important; display: block !important; opacity: 1 !important; height: auto !important; width: auto !important; z-index: 9999 !important;\"\\n\\t\\t\\tdom.setAttribute(\"role\", \"button\");\\n\\t\\t\\tdom.addEventListener(\"click\", () => {\\n\\t\\t\\t\\tdom.remove();\\n\\t\\t\\t\\treqnode(\"electron\").ipcRenderer.invoke(\"license.show\");\\n\\t\\t\\t});\\n\\t\\t\\tdocument.body.insertBefore(dom, document.body.children[pos]);\\n\\t\\t}\\n\\t};1;`;\n\n        function i(e) {\n            e.webContents.insertCSS(n), e.webContents.executeJavaScript(t)\n        }\n        e ? i(e) : BrowserWindow.getAllWindows().forEach(i)\n    };\nexports.shouldShowNoLicenseHint = shouldShowNoLicenseHint, exports.start = start, exports.showLicensePanel = showLicensePanel, exports.showWelcomePanel = showWelcomePanel, exports.appendLicenseHintIfNeeded = appendLicenseHintIfNeeded, exports.getHasLicense = getHasLicense, exports.showLicensePanelIfNeeded = showLicensePanelIfNeeded;\n```\n\npatch掉网络验证，对doActivation的验证直接改成永恒真，使得邮箱和序列号随便填即可激活，再改写hasLicense的值，使得下次登录时访问许可证信息时得到软件已被激活的信息，再打包生成app.asar，打开软件随便输入序列号和邮箱即可\n\n## 5. 破解成功\n\n![](https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png)\n","source":"_posts/Typora破解记录.md","raw":"---\ntitle: Typora破解复现\ndate: 2023/9/18\ncategories: 实践\ntags:\n  - 破解\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png\nthumbnail: https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n\n---\n\n最近在逛论坛的时候看到有人写了一份Typora的破解复现，看了下破解过程感觉不是很难，又因为实验室招新活动开始，刚好手里缺技术演示的材料，于是便想自己着手看看这个一直在用的工具是怎么被破解的，记录一下破解过程<!-- more -->\n\n## 1. 找到app.asar文件解包得到License.js加密代码\n\n根据火绒剑在系统日志里监控Typore的启动，找到可疑的asar文件，程序访问并读取了该文件，并启动了其中的main.node模块，疑似开发者对加密源代码的解密过程\n\n![image-20230916115115006](https://s2.loli.net/2024/06/23/KhtnDlNUAuJxjvs.png)\n\n找到app.asar文件，根据日志显示，可以猜测这个类似压缩包，问Bing得知 \n\n<!-- more -->\n\n> [asar是一种用于打包Electron应用程序源代码的文件格式，它可以让应用程序更容易分发和运行。asar文件的工作原理是将所有文件连接在一起，不进行压缩，但支持随机访问。asar文件可以使用asar命令行工具或者electron-packager等工具来创建或解压](https://blog.csdn.net/happydeer/article/details/123162612)\n\n根据提示内容进行解压， `asar extract app.asar unpacked`\n\n\n\n得到unpacked文件，貌似找到关于许可证的有关文件--License.js，Winhex打开看一眼\n\n<img src=\"https://s2.loli.net/2024/06/23/d8kAeVhzfOJ2bMX.png\" alt=\"image-20230916115804959\" style=\"zoom:67%;\" />\n\n有种base64编码的感觉，难道只是base64编码加密？拖进CyberChef解密一下\n\n<img src=\"https://s2.loli.net/2024/06/23/kDaNSiqQP2RH7yU.png\" alt=\"image-20230916115944322\" style=\"zoom:67%;\" />\n\n可能还有一层或几层加密\n\n## 2. 从main.node文件找License.js的解密逻辑\n\n根据火绒剑日志显示，在app.asar解包后运行了main.node模块，又根据前面License.js被加密了，可以推测main.node有可能运行时解密了License.js文件，先DIE看一眼main.node，DLL64位，IDA64打开，先不管其他的，shift+f12查找字符串\n\n![image-20230916120618916](https://s2.loli.net/2024/06/23/C6ou97bBU1xVMlN.png)\n\n疑似有base64解密过程，交叉引用找到引用处伪代码\n\n![image-20230916120721264](https://s2.loli.net/2024/06/23/owiESXPZBKdYFNf.png)\n\n根据Bing得知\n\n> napi_get_named_property 是一个 Node-API 的函数，它的作用是从一个对象中获取一个指定名称的属性，并返回它的值。\n\n> ```C\n> napi_status napi_call_function(napi_env env, napi_value recv, napi_value func, size_t argc, const napi_value* argv, napi_value* result);\n> ```\n>\n> 其中，参数的含义是：\n>\n> - `env`: 当前调用 N-API 的环境。\n> - `recv`: 要作为函数接收者的对象，通常是 `this` 的值。\n> - `func`: 要调用的函数对象。\n> - `argc`: 要传递的参数的个数。\n> - `argv`: 要传递的参数的数组。\n> - `result`: 用于接收函数返回值的指针。\n\n分析得知，这段代码类似给v40进行解码，v40 =  base64.from(v38)，v38又来自函数的第三个参数a3+8，猜测这个a3+8指向的就是密文的地址，动调验证下，x64dbg直接拖Typora，手动下一个main.node的断点，再根据IDA中给出的偏移计算出调试器里解密函数的地址，根据64位下寄存器默认传参顺序是ECX,EDX,R8,R9知道a3的值储存在R8中，所以R8+8指向密文地址，验证：\n\n![image-20230923112047338](https://s2.loli.net/2024/06/23/EmZPiahpzvAbkD1.png)\n\n![image-20230923112119409](https://s2.loli.net/2024/06/23/6ZntLe82dz9CJWG.png)\n\n![image-20230923112137343](https://s2.loli.net/2024/06/23/J4XrjBiNyOw5Pe3.png)\n\n这里的数据刚好对应的是atom.js里的密文\n\n![image-20230923112252136](https://s2.loli.net/2024/06/23/wNSAGJIF2QOrVZp.png)\n\n验证成功，继续分析\n\n<img src=\"https://s2.loli.net/2024/06/23/894OYvGCcjXFe6w.png\" alt=\"image-20230916133915462\" style=\"zoom:67%;\" />\n\n找到类似加密算法的密钥初始化，用findcrypt看一眼发现了AES的S盒和逆S盒，推测这里应该是AES的密钥，而且长度为32个字节，猜测是256位模式\n\n![image-20230916134109117](https://s2.loli.net/2024/06/23/b4T5qNMgQ32zIPG.png)\n\n接着找AES解密线索，找到F4E0偏移处函数\n\n![image-20230916134740069](https://s2.loli.net/2024/06/23/oeP1NbWSXA9OtMu.png)\n\n里面有S盒和异或的继续分析，确定下ECB模式还是CBC模式\n\n![image-20230916140550963](https://s2.loli.net/2024/06/23/5JP7iNeIhmawXS1.png)\n\n进入3A8F偏移处函数分析，在这里先猜测block应该是密文（void 指针数组）\n\n![image-20230916141555652](https://s2.loli.net/2024/06/23/IvoDWVX2gl6GswF.png)\n\n函数里面又出现了一个循环异或，可以肯定这是个CBC模式下的异或偏移量了，那偏移量又是怎么来的呢，追踪a2（密文地址）进行判断的话，函数里面是复制了一份a2给v3，也就是说v3可能指向了密文\n\n![image-20230916142530938](https://s2.loli.net/2024/06/23/MjeshXKzrf1SyOG.png)\n\n那么result就是偏移量了，偏移量来自密文地址+v5处，进行16次循环，也就是说偏移量可能来自密文的0-15个字节位？\n\n## 3. CyberChef验证猜测\n\n依据之前的猜测，main.node通过base64解码，再AES，CBC模式解码，密钥IDA动调得到\n\n> 0x4E, 0xE1, 0xB3, 0x82, 0x94, 0x9A, 0x02, 0x4B, 0x80, 0x2F, 0x52, 0xB4, 0xB4, 0xFE, 0x57, 0xF1, 0xBE, 0xF4, 0x08, 0x53, 0x10, 0x92, 0x56, 0xE2, 0xC2, 0x0D, 0xEC, 0xA3, 0xDD, 0x8D, 0xD5, 0x6D\n\n偏移量为密文的前16个字节，带入CyberChef检验\n\n![image-20230916151516731](https://s2.loli.net/2024/06/23/IF6DAT7fh4SBROZ.png)\n\n这下应该是得到了License.js源码，下载得到文件，找在线js美化工具美化\n\n## 4. 最终的Patch\n\n简单审计了下代码，不懂的找Bing问就是。首先应该patch掉网络验证类似request的东西，找到了几处\n\npatch后的License.js源码\n\n```js\nLL50Du2bPNkYky7Grequire(\"Env.js\");\nvar Dict = require(\"Dict.js\"),\n    electron = require(\"electron\"),\n    shell = electron.shell,\n    app = electron.app,\n    ipc = electron.ipcMain,\n    BrowserWindow = electron.BrowserWindow,\n    isWin = \"win32\" == process.platform,\n    isMac = \"darwin\" == process.platform,\n    isLinux = \"linux\" == process.platform,\n    WindowController = require(\"WindowController.js\"),\n    Raven = require(\"raven\"),\n    errorShown = !1;\nconst mustRequire = function(e) {\n    try {\n        return require(e)\n    } catch (e) {\n        if (errorShown) return;\n        errorShown = !0;\n        var n = e.message;\n        setTimeout(() => {\n            errorShown = !1, dialog = require(\"electron\").dialog, dialog.showMessageBox(null, {\n                type: \"error\",\n                buttons: [\"OK\"],\n                defaultId: 0,\n                cancelId: 0,\n                title: \"A required module cannot be loaded by Typora\",\n                message: n.split(\"\\n\")[0] + \"\\n\\nPlease check if that file exists or reinstall Typora to fix.\"\n            }).then(({\n                response: e\n            }) => {\n                process.exit(1)\n            })\n        }, 1500)\n    }\n};\nvar installDate, lastShown, hasLicense = null,\n    email = \"\",\n    licenseCode = \"\",\n    fingerPrint = \"\";\nconst ActiveResponseCode = {\n        SUCCESS: 0,\n        OUT_OF_LIMIT: 1,\n        INVALIDATE: -1,\n        WRONG_USER: -2\n    },\n    PUB_KEY = \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7nVoGCHqIMJyqgALEUrc\\n5JJhap0+HtJqzPE04pz4y+nrOmY7/12f3HvZyyoRsxKdXTZbO0wEHFIh0cRqsuaJ\\nPyaOOPbA0BsalofIAY3mRhQQ3vSf+rn3g+w0S+udWmKV9DnmJlpWqizFajU4T/E4\\n5ZgMNcXt3E1ips32rdbTR0Nnen9PVITvrbJ3l6CI2BFBImZQZ2P8N+LsqfJsqyVV\\nwDkt3mHAVxV7FZbfYWG+8FDSuKQHaCmvgAtChx9hwl3J6RekkqDVa6GIV13D23LS\\nqdk0Jb521wFJi/V6QAK6SLBiby5gYN6zQQ5RQpjXtR53MwzTdiAzGEuKdOtrY2Me\\nDwIDAQAB\\n-----END PUBLIC KEY-----\\n\\n\",\n    DAY_IN_MS = 864e5;\nvar HOST = \"https://store.typora.io\";\nconst decrypt = e => {return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf8\"))},\n    makeHash = function() {\n        var e = Array.from(arguments);\n        const n = require(\"crypto\").createHash(\"sha256\");\n        return e.forEach(e => {\n            n.update(e)\n        }), n.digest(\"base64\")\n    },\n    readLicenseInfo = () => {\n        const e = getLicenseLocalStore().get(\"SLicense\");\n        if (!e) return null;\n        const [n, t, i] = e.split(\"#\"), a = decrypt(n);\n        return a.fingerprint != fingerPrint ? null : (Object.assign(a, {\n            failCounts: t,\n            lastRetry: new Date(i)\n        }), a)\n    },\n    writeInstallDate = async e => {\n        console.log(`writeInstallDate fromBTime=${e}`);\n        var n = new Date;\n        if (e) try {\n            var t = await require(\"fs-extra\").stat(app.getPath(\"userData\") + \"/profile.data\");\n            n = new Date(t.birthtime), t.birthtime\n        } catch (e) {}\n        installDate = n;\n        const i = n.toLocaleDateString(\"en-US\");\n        return getLicenseLocalStore().put(\"IDate\", i), installDate\n    };\nvar licenseLocalStoreInstance = null;\nconst getLicenseLocalStore = function() {\n    if (null == licenseLocalStoreInstance)\n        if (isWin) licenseLocalStoreInstance = WindowsLicenseLocalStore();\n        else {\n            var e = app.setting.prepDatabase(fingerPrint);\n            licenseLocalStoreInstance = {\n                put: function(n, t) {\n                    console.log(`ls put ${n}`), e.getState()[n] = t, e.write()\n                },\n                get: function(n) {\n                    return e.getState()[n]\n                }\n            }\n        }\n    return licenseLocalStoreInstance\n};\n\nfunction WindowsLicenseLocalStore() {\n    const e = mustRequire(\"native-reg\");\n    return {\n        get: function(n) {\n            const t = e.openKey(e.HKCU, \"Software\\\\Typora\", e.Access.READ);\n            if (null == t) return \"\";\n            const i = e.getValue(t, null, n);\n            return e.closeKey(t), i\n        },\n        put: function(n, t) {\n            const i = e.createKey(e.HKCU, \"Software\\\\Typora\", e.Access.WRITE);\n            e.setValueSZ(i, n, t), e.closeKey(i)\n        }\n    }\n}\nconst getFingerPrint = async() => {\n    if (!fingerPrint) {\n        if (isWin) {\n            const e = mustRequire(\"native-reg\"),\n                n = e.openKey(e.HKEY.LOCAL_MACHINE, \"SOFTWARE\\\\Microsoft\\\\Cryptography\", e.Access.WOW64_64KEY | e.Access.READ);\n            fingerPrint = e.getValue(n, null, \"MachineGuid\"), e.closeKey(n)\n        } else fingerPrint = await require(\"node-machine-id\").machineId({\n            original: !0\n        });\n        fingerPrint || Raven.captureMessage(\"[License] Failed to get fingerPrint\"), fingerPrint = makeHash(fingerPrint, \"typora\").substr(0, 10).replace(/[/=+-]/g, \"a\"), isMac && (fingerPrint += \"darwin\")\n    }\n    return fingerPrint\n};\nvar licenseInitialed = !1;\nconst watchLicense = async e => {\n        console.log(\"[watchLicense]\"), firstValidateLicense(e), await validateTrail(), console.log(`[watchLicense] hasLicense: ${hasLicense}`), showLicensePanelIfNeeded(), addToAnalysis()\n    },\n    addToAnalysis = () => {\n        var e = Raven.getContext().tags;\n        e.hasLicense = hasLicense, Raven.mergeContext(e)\n    },\n    getOS = () => process.platform.replace(/\\d+/, \"\"),\n    renewLicense = async(e, n) => {\n        const t = (new Date).toLocaleDateString(\"en-US\");\n        const {\n            deviceId: i,\n            lastRetry: a\n        } = e || {};\n        if (!n && new Date - a < 432e5) return;\n        const s = {\n            v: getOS() + \"|\" + app.getVersion(),\n            license: licenseCode,\n            l: i,\n            u: app.setting.generateUUID(),\n            type: global.devVersion ? \"dev\" : \"\"\n        };\n        JSON.stringify(s);\n    },\n    getInstallDate = e => {\n        var n = new Date(getLicenseLocalStore().get(\"IDate\"));\n        if (isNaN(n.getTime())) return e ? null : new Date;\n        if (e) return n;\n        var t = 1641734774922;\n        return isNaN(t) ? t = new Date(\"2021-10-01\") : (t = new Date(t), isNaN(t.getTime()) && (t = new Date(\"2021-10-01\"))), n < t ? t : n\n    },\n    getTrailRemains = (e, n) => {\n        n = n || 15;\n        var t = Math.floor((new Date - installDate) / 864e5),\n            i = Math.max(0, n - t);\n        return e && (i > n || isNaN(i)) && (i = n), i\n    },\n    validateTrail = async() => {\n        var e = (installDate = getInstallDate(!global.devVersion)) ? getTrailRemains(!1) : 100;\n        (e > 15 || isNaN(e)) && (console.log(\"[validateTrail] Read from incorrupted InstallDate\"), await writeInstallDate(!0), e = 15), console.log(`[validateTrail] installDate is ${installDate.toLocaleDateString(\"en-US\")}, trail remains: ${e} days`)\n    };\n\nfunction fillLicense(e, n) {\n    licenseCode = n, (hasLicense = !(!(email = e) || !licenseCode)) && onFillLicense()\n}\n\nfunction unfillLicense(e) {\n    hasLicense || (e = \"\"), email = \"\", licenseCode = \"\", hasLicense = !1, getLicenseLocalStore().put(\"SLicense\", \"\"), e && showDialog(Dict.getPanelString(\"Typora is now deactivated\"), Dict.getPanelString(e)), onUnfillLicense()\n}\nconst firstValidateLicense = e => {\n        console.log(\"[License] firstValidateLicense\"), licenseInitialed = !0;\n        const n = readLicenseInfo(),\n            {\n                license: t,\n                email: i\n            } = n || {};\n        t && i ? (fillLicense(i, t), renewLicense(n, e), console.log(\"[License] pass validateLicenseInfoStr\")) : unfillLicense()\n    },\n    showDialog = (e, n) => electron.dialog.showMessageBox(null, {\n        type: \"error\",\n        buttons: [\"OK\"],\n        defaultId: 0,\n        cancelId: 0,\n        title: e,\n        message: n\n    }),\n    endDevTest = function() {\n        app.expired = !0, showDialog(Dict.getPanelString(\"Error\"), Dict.getPanelString(\"This beta version of Typora is expired, please download and install a newer version.\")).then(() => {\n            shell.openExternal(\"https://typora.io/#download\"), setTimeout(() => {\n                process.exit(1)\n            }, 1e3)\n        })\n    },\n    validateDevTest = function() {\n        if (!hasLicense && !isLinux && global.devVersion && global.PRODUCTION_MODE) {\n            var e = getInstallDate(),\n                n = new Date;\n            console.log(\"buildTime is 1641734774922\"), (isNaN(1641734774922) || n - 1641734774922 > 20736e6) && endDevTest(), e -= 0, console.log(\"verInitTime is \" + e), !isNaN(e) && n - e > 1728e7 && endDevTest()\n        }\n    },\n    showLicensePanelIfNeeded = function() {\n        shouldShowNoLicenseHint(!0) && !app.setting.inFirstShow && (isLinux && Math.random() < .95 || (!lastShown || new Date - lastShown > 36e5 * (isLinux ? 4 : 2) || getTrailRemains(!0, 20) <= 0) && showLicensePanel())\n    };\nvar licensePanel = null;\nconst showLicensePanel = async function(e) {\n    if (lastShown = new Date, null == licensePanel) return (licensePanel = WindowController.showPanelWindow({\n        width: 525,\n        height: 420,\n        path: `page-dist/license.html?dayRemains=${getTrailRemains(!0)}&index=${e?1:0}\\n\\t\\t\\t\\t&hasActivated=${hasLicense||!1}&email=${email}&license=${licenseCode}&lang=${app.setting.getUserLocale()}&needLicense=${shouldShowNoLicenseHint()}`,\n        frame: !1,\n        alwaysOnTop: !errorShown\n    })).on(\"closed\", function() {\n        licensePanel = null\n    }), void setTimeout(() => {\n        licensePanel && !licensePanel.isDestroyed() && licensePanel.setAlwaysOnTop(!1)\n    }, 5e3);\n    licensePanel.focus()\n};\nvar welcomePanel = null;\nconst showWelcomePanel = async function() {\n        if (lastShown = new Date, null == welcomePanel) return (welcomePanel = WindowController.showPanelWindow({\n            width: 760,\n            height: 460,\n            path: `page-dist/welcome.html?lang=${app.setting.getUserLocale()}`,\n            frame: !1,\n            alwaysOnTop: !errorShown\n        })).on(\"closed\", function() {\n            welcomePanel = null\n        }), void setTimeout(() => {\n            welcomePanel && !welcomePanel.isDestroyed() && welcomePanel.setAlwaysOnTop(!1)\n        }, 4e3);\n        welcomePanel.focus()\n    },\n    quickValidate = e => {\n        const n = \"L23456789ABCDEFGHJKMNPQRSTUVWXYZ\";\n        if (!/^([A-Z0-9]{6}-){3}[A-Z0-9]{6}$/.exec(e)) return !1;\n        var t = e.replace(/-/g, \"\"),\n            i = t.substr(22);\n        return !t.replace(/[L23456789ABCDEFGHJKMNPQRSTUVWXYZ]/g, \"\") && i == (e => {\n            for (var t = \"\", i = 0; i < 2; i++) {\n                for (var a = 0, s = 0; s < 16; s += 2) a += n.indexOf(e[i + s]);\n                t += n[a %= n.length]\n            }\n            return t\n        })(t)\n    },\n    getComputerName = async function() {\n        var e = process.env.USER;\n        switch (e || (e = require(\"os\").userInfo().username), process.platform) {\n            case \"win32\":\n                return process.env.COMPUTERNAME + \" | \" + e + \" | Windows\";\n            case \"darwin\":\n                return new Promise(n => {\n                    require(\"child_process\").exec(\"scutil --get ComputerName\", {\n                        timeout: 5e3\n                    }, (t, i) => {\n                        n(!t && i ? i.toString().trim() + \" | \" + e + \" | darwin\" : require(\"os\").hostname() + \" | \" + e + \" | darwin\")\n                    })\n                });\n            default:\n                return require(\"os\").hostname() + \" | \" + e + \" | Linux\"\n        }\n    },\n    doActivation = async function(e, n, t) {\n        if (e = (e || \"\").replace(/^[\\s\\u200b ]/g, \"\").replace(/[\\s\\u200b ]$/g, \"\"), n = (n || \"\").replace(/^[\\s\\u200b ]/g, \"\").replace(/[\\s\\u200b ]$/g, \"\"), ! function(e) {\n                return /^[^\\s@'\"/\\\\=?]+@[^\\s@'\"/\\\\]+\\.[^\\s@'\"/\\\\]+$/.test(e)\n            }(e)) return [!1, \"Please input a valid email address\"];\n        //if (!quickValidate(n)) return [!1, \"Please input a valid license code\"];\n        const i = {\n            v: getOS() + \"|\" + app.getVersion(),\n            license: n,\n            email: e,\n            l: await getComputerName(),\n            f: await getFingerPrint(),\n            u: app.setting.generateUUID(),\n            type: global.devVersion ? \"dev\" : \"\",\n            force: t\n        };\n        JSON.stringify(i);\n        try {\n            const e = {\n                data: {\n                    code: 0,\n                    msg: Buffer.from(JSON.stringify(\n                    {\n                       deviceId: i.u,\n                       fingerprint: i.f,\n                       email: i.email,\n                       license: i.license,      \n                       version: i.v,\n                       date: 1\n\n                    }),\"utf8\").toString(\"base64\")\n                }\n            }\n            if (JSON.stringify(e.data), console.log(`[License] response code is ${e.data.code}`), e.data.code == ActiveResponseCode.SUCCESS) return await writeActivationInfo(e.data.msg) ? [!0, \"\"] : [!1, \"Please input a valid license code\"];\n            if (e.data.code == ActiveResponseCode.OUT_OF_LIMIT) return t ? await writeActivationInfo(e.data.msg) ? [!0, \"Your license has exceeded the max devices numbers.\\nThe oldest device was unregistered automatically.\"] : [!1, \"Please input a valid license code\"] : [\"confirm\", 'Your license has exceeded the max devices numbers.\\nIf you click \"Continue Activation\", this device will be activated and the oldest device will be unregistered automatically.'];\n            if (e.data.code == ActiveResponseCode.INVALIDATE) return [!1, \"Please input a valid license code\"];\n            if (e.data.code == ActiveResponseCode.WRONG_USER) return [!1, \"This license code has been used with a different email address.\"]\n        } catch (e) {\n            return e.response && e.response.code ? (console.warn(`[License] error from server ${e.response.code}`), [!1, \"Unknown Error. Please contact hi@typora.io\"]) : (Raven.captureException(e, {\n                level: \"warning\"\n            }), console.error(e.stack), [!1, \"Failed to access the license server. Please check your network or try again later.\"])\n        }\n    },\n    writeActivationInfo = async function(e) {\n        const n = decrypt(e) || {},\n            {\n                deviceId: t,\n                fingerprint: i,\n                email: a,\n                license: s,\n                version: o,\n                date: r\n            } = n;\n            fillLicense(a, s);\n            getLicenseLocalStore().put(\"SLicense\", `${e}#0#${(new Date).toLocaleDateString(\"en-US\")}`);\n            hasLicense = !0;\n            return 1;\n        //return i == await getFingerPrint() && a && s ? (fillLicense(a, s), getLicenseLocalStore().put(\"SLicense\", `${e}#0#${(new Date).toLocaleDateString(\"en-US\")}`), hasLicense = !0, !0) : (console.log(\"[License] validate server return fail\"), unfillLicense(), !1)\n    },\n    doDeactivation = async() => {\n        hasLicense && email && licenseCode || console.error(\"doDeactivation on unregistered device\");\n        const {\n            deviceId: e\n        } = readLicenseInfo() || {};\n        unfillLicense()\n    };\nipc.handle(\"addLicense\", async(e, {\n    email: n,\n    license: t,\n    force: i\n}) => {\n    console.log(\"handle addLicense\");\n    try {\n        return await doActivation(n, t, i)\n    } catch (e) {\n        console.error(e.stack)\n    }\n}), ipc.handle(\"license.show\", (e, n) => {\n    showLicensePanel(n || !1)\n}), ipc.handle(\"license.show.debug\", () => {\n    licensePanel && licensePanel.webContents.openDevTools()\n}), ipc.handle(\"removeLicense\", async e => {\n    console.log(\"handle removeLicense\");\n    try {\n        return await doDeactivation()\n    } catch (e) {\n        console.error(e.stack)\n    }\n});\n    start = async(e, n) => {\n        console.log(`start LM in devVersion=${global.devVersion||!1}`);\n        try {\n             await getFingerPrint(), !e && n || isLinux || (global.devVersion || !n || n.indexOf(\"dev\") > -1) && (console.log(\"re-write InstallDate\"), await writeInstallDate()), validateDevTest(), watchLicense(e)\n        } catch (e) {\n            Raven.captureException(e)\n        }\n    },\n    shouldShowNoLicenseHint = e => !hasLicense && (e || !isLinux) && !global.devVersion,\n    getHasLicense = () => hasLicense,\n    appendLicenseHintIfNeeded = e => {\n        licenseInitialed && shouldShowNoLicenseHint() && onUnfillLicense(e)\n    };\n\nfunction genClassName() {\n    var e = (new Date).getTime();\n    return \"txxxx-xxxx-xxxxy\".replace(/[x]/g, function(n) {\n        var t = (e + 16 * Math.random()) % 16 | 0;\n        return e = Math.floor(e / 16), t.toString(16)\n    })\n}\nconst className = genClassName(),\n    onFillLicense = () => {\n        BrowserWindow.getAllWindows().forEach(e => {\n            e.webContents.executeJavaScript(`try{document.querySelector(\".${className}\").remove();}catch(e){};File.option && (File.option.hasLicense = true);File.megaMenu && File.megaMenu.forceReload();0;`)\n        })\n    },\n    onUnfillLicense = async e => {\n        if (isLinux || global.devVersion) return;\n        await Dict.init();\n        const n = `.typora-sourceview-on .${className}{\\n\\t\\tdisplay:none;\\n\\t}\\n\\t.${className} {\\n\\t\\tposition: fixed;\\n    bottom: 2px;\\n    z-index: 9999;\\n    left: 70px;\\n    font-size: 12px;\\n    line-height: 24px;\\n    background: rgb(120 120 120 / 30%);\\n    padding: 0 12px;\\n    color: var(--text-color);\\n    border-radius: 4px;\\n    cursor: pointer;\\n\\t}\\n\\t.pin-outline .${className}{\\n\\t\\tleft:calc(var(--sidebar-width) + 70px);\\n\\t}`,\n            t = `if(window.File.option){\\n\\t\\tFile.option.hasLicense = false; \\n\\t\\tFile.megaMenu && File.megaMenu.forceReload();\\n\\t\\tif(!document.querySelector(\".${className}\")) {\\n\\t\\t\\tconst pos = Math.round(Math.random() * document.body.children.length);\\n\\t\\t\\tconst dom = document.createElement(\"DIV\");\\n\\t\\t\\tdom.innerText = \"${Dict.getPanelString(\"UNREGISTERED\")} Ã\";\\n\\t\\t\\tdom.classList.add(\"${className}\");\\n\\t\\t\\tdom.style = \"position: fixed !important;bottom: 2px !important; display: block !important; opacity: 1 !important; height: auto !important; width: auto !important; z-index: 9999 !important;\"\\n\\t\\t\\tdom.setAttribute(\"role\", \"button\");\\n\\t\\t\\tdom.addEventListener(\"click\", () => {\\n\\t\\t\\t\\tdom.remove();\\n\\t\\t\\t\\treqnode(\"electron\").ipcRenderer.invoke(\"license.show\");\\n\\t\\t\\t});\\n\\t\\t\\tdocument.body.insertBefore(dom, document.body.children[pos]);\\n\\t\\t}\\n\\t};1;`;\n\n        function i(e) {\n            e.webContents.insertCSS(n), e.webContents.executeJavaScript(t)\n        }\n        e ? i(e) : BrowserWindow.getAllWindows().forEach(i)\n    };\nexports.shouldShowNoLicenseHint = shouldShowNoLicenseHint, exports.start = start, exports.showLicensePanel = showLicensePanel, exports.showWelcomePanel = showWelcomePanel, exports.appendLicenseHintIfNeeded = appendLicenseHintIfNeeded, exports.getHasLicense = getHasLicense, exports.showLicensePanelIfNeeded = showLicensePanelIfNeeded;\n```\n\npatch掉网络验证，对doActivation的验证直接改成永恒真，使得邮箱和序列号随便填即可激活，再改写hasLicense的值，使得下次登录时访问许可证信息时得到软件已被激活的信息，再打包生成app.asar，打开软件随便输入序列号和邮箱即可\n\n## 5. 破解成功\n\n![](https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png)\n","slug":"Typora破解记录","published":1,"updated":"2024-10-02T09:32:00.250Z","layout":"post","photos":[],"link":"","_id":"cm1roa13i000bugie7imgcsu5","content":"<p>最近在逛论坛的时候看到有人写了一份Typora的破解复现，看了下破解过程感觉不是很难，又因为实验室招新活动开始，刚好手里缺技术演示的材料，于是便想自己着手看看这个一直在用的工具是怎么被破解的，记录一下破解过程<span id=\"more\"></span></p>\n<h2 id=\"1-找到app-asar文件解包得到License-js加密代码\"><a href=\"#1-找到app-asar文件解包得到License-js加密代码\" class=\"headerlink\" title=\"1. 找到app.asar文件解包得到License.js加密代码\"></a>1. 找到app.asar文件解包得到License.js加密代码</h2><p>根据火绒剑在系统日志里监控Typore的启动，找到可疑的asar文件，程序访问并读取了该文件，并启动了其中的main.node模块，疑似开发者对加密源代码的解密过程</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/KhtnDlNUAuJxjvs.png\" alt=\"image-20230916115115006\"></p>\n<p>找到app.asar文件，根据日志显示，可以猜测这个类似压缩包，问Bing得知 </p>\n<!-- more -->\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/happydeer/article/details/123162612\">asar是一种用于打包Electron应用程序源代码的文件格式，它可以让应用程序更容易分发和运行。asar文件的工作原理是将所有文件连接在一起，不进行压缩，但支持随机访问。asar文件可以使用asar命令行工具或者electron-packager等工具来创建或解压</a></p>\n</blockquote>\n<p>根据提示内容进行解压， <code>asar extract app.asar unpacked</code></p>\n<p>得到unpacked文件，貌似找到关于许可证的有关文件–License.js，Winhex打开看一眼</p>\n<img src=\"https://s2.loli.net/2024/06/23/d8kAeVhzfOJ2bMX.png\" alt=\"image-20230916115804959\" style=\"zoom:67%;\" />\n\n<p>有种base64编码的感觉，难道只是base64编码加密？拖进CyberChef解密一下</p>\n<img src=\"https://s2.loli.net/2024/06/23/kDaNSiqQP2RH7yU.png\" alt=\"image-20230916115944322\" style=\"zoom:67%;\" />\n\n<p>可能还有一层或几层加密</p>\n<h2 id=\"2-从main-node文件找License-js的解密逻辑\"><a href=\"#2-从main-node文件找License-js的解密逻辑\" class=\"headerlink\" title=\"2. 从main.node文件找License.js的解密逻辑\"></a>2. 从main.node文件找License.js的解密逻辑</h2><p>根据火绒剑日志显示，在app.asar解包后运行了main.node模块，又根据前面License.js被加密了，可以推测main.node有可能运行时解密了License.js文件，先DIE看一眼main.node，DLL64位，IDA64打开，先不管其他的，shift+f12查找字符串</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/C6ou97bBU1xVMlN.png\" alt=\"image-20230916120618916\"></p>\n<p>疑似有base64解密过程，交叉引用找到引用处伪代码</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/owiESXPZBKdYFNf.png\" alt=\"image-20230916120721264\"></p>\n<p>根据Bing得知</p>\n<blockquote>\n<p>napi_get_named_property 是一个 Node-API 的函数，它的作用是从一个对象中获取一个指定名称的属性，并返回它的值。</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">napi_status <span class=\"title function_\">napi_call_function</span><span class=\"params\">(napi_env env, napi_value recv, napi_value func, <span class=\"type\">size_t</span> argc, <span class=\"type\">const</span> napi_value* argv, napi_value* result)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中，参数的含义是：</p>\n<ul>\n<li><code>env</code>: 当前调用 N-API 的环境。</li>\n<li><code>recv</code>: 要作为函数接收者的对象，通常是 <code>this</code> 的值。</li>\n<li><code>func</code>: 要调用的函数对象。</li>\n<li><code>argc</code>: 要传递的参数的个数。</li>\n<li><code>argv</code>: 要传递的参数的数组。</li>\n<li><code>result</code>: 用于接收函数返回值的指针。</li>\n</ul>\n</blockquote>\n<p>分析得知，这段代码类似给v40进行解码，v40 &#x3D;  base64.from(v38)，v38又来自函数的第三个参数a3+8，猜测这个a3+8指向的就是密文的地址，动调验证下，x64dbg直接拖Typora，手动下一个main.node的断点，再根据IDA中给出的偏移计算出调试器里解密函数的地址，根据64位下寄存器默认传参顺序是ECX,EDX,R8,R9知道a3的值储存在R8中，所以R8+8指向密文地址，验证：</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/EmZPiahpzvAbkD1.png\" alt=\"image-20230923112047338\"></p>\n<p><img src=\"https://s2.loli.net/2024/06/23/6ZntLe82dz9CJWG.png\" alt=\"image-20230923112119409\"></p>\n<p><img src=\"https://s2.loli.net/2024/06/23/J4XrjBiNyOw5Pe3.png\" alt=\"image-20230923112137343\"></p>\n<p>这里的数据刚好对应的是atom.js里的密文</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/wNSAGJIF2QOrVZp.png\" alt=\"image-20230923112252136\"></p>\n<p>验证成功，继续分析</p>\n<img src=\"https://s2.loli.net/2024/06/23/894OYvGCcjXFe6w.png\" alt=\"image-20230916133915462\" style=\"zoom:67%;\" />\n\n<p>找到类似加密算法的密钥初始化，用findcrypt看一眼发现了AES的S盒和逆S盒，推测这里应该是AES的密钥，而且长度为32个字节，猜测是256位模式</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/b4T5qNMgQ32zIPG.png\" alt=\"image-20230916134109117\"></p>\n<p>接着找AES解密线索，找到F4E0偏移处函数</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/oeP1NbWSXA9OtMu.png\" alt=\"image-20230916134740069\"></p>\n<p>里面有S盒和异或的继续分析，确定下ECB模式还是CBC模式</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/5JP7iNeIhmawXS1.png\" alt=\"image-20230916140550963\"></p>\n<p>进入3A8F偏移处函数分析，在这里先猜测block应该是密文（void 指针数组）</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/IvoDWVX2gl6GswF.png\" alt=\"image-20230916141555652\"></p>\n<p>函数里面又出现了一个循环异或，可以肯定这是个CBC模式下的异或偏移量了，那偏移量又是怎么来的呢，追踪a2（密文地址）进行判断的话，函数里面是复制了一份a2给v3，也就是说v3可能指向了密文</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/MjeshXKzrf1SyOG.png\" alt=\"image-20230916142530938\"></p>\n<p>那么result就是偏移量了，偏移量来自密文地址+v5处，进行16次循环，也就是说偏移量可能来自密文的0-15个字节位？</p>\n<h2 id=\"3-CyberChef验证猜测\"><a href=\"#3-CyberChef验证猜测\" class=\"headerlink\" title=\"3. CyberChef验证猜测\"></a>3. CyberChef验证猜测</h2><p>依据之前的猜测，main.node通过base64解码，再AES，CBC模式解码，密钥IDA动调得到</p>\n<blockquote>\n<p>0x4E, 0xE1, 0xB3, 0x82, 0x94, 0x9A, 0x02, 0x4B, 0x80, 0x2F, 0x52, 0xB4, 0xB4, 0xFE, 0x57, 0xF1, 0xBE, 0xF4, 0x08, 0x53, 0x10, 0x92, 0x56, 0xE2, 0xC2, 0x0D, 0xEC, 0xA3, 0xDD, 0x8D, 0xD5, 0x6D</p>\n</blockquote>\n<p>偏移量为密文的前16个字节，带入CyberChef检验</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/IF6DAT7fh4SBROZ.png\" alt=\"image-20230916151516731\"></p>\n<p>这下应该是得到了License.js源码，下载得到文件，找在线js美化工具美化</p>\n<h2 id=\"4-最终的Patch\"><a href=\"#4-最终的Patch\" class=\"headerlink\" title=\"4. 最终的Patch\"></a>4. 最终的Patch</h2><p>简单审计了下代码，不懂的找Bing问就是。首先应该patch掉网络验证类似request的东西，找到了几处</p>\n<p>patch后的License.js源码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">LL50Du2</span>bPNkYky7Grequire(<span class=\"string\">&quot;Env.js&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Dict</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;Dict.js&quot;</span>),</span><br><span class=\"line\">    electron = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;electron&quot;</span>),</span><br><span class=\"line\">    shell = electron.<span class=\"property\">shell</span>,</span><br><span class=\"line\">    app = electron.<span class=\"property\">app</span>,</span><br><span class=\"line\">    ipc = electron.<span class=\"property\">ipcMain</span>,</span><br><span class=\"line\">    <span class=\"title class_\">BrowserWindow</span> = electron.<span class=\"property\">BrowserWindow</span>,</span><br><span class=\"line\">    isWin = <span class=\"string\">&quot;win32&quot;</span> == process.<span class=\"property\">platform</span>,</span><br><span class=\"line\">    isMac = <span class=\"string\">&quot;darwin&quot;</span> == process.<span class=\"property\">platform</span>,</span><br><span class=\"line\">    isLinux = <span class=\"string\">&quot;linux&quot;</span> == process.<span class=\"property\">platform</span>,</span><br><span class=\"line\">    <span class=\"title class_\">WindowController</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;WindowController.js&quot;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Raven</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;raven&quot;</span>),</span><br><span class=\"line\">    errorShown = !<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mustRequire = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(e)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errorShown) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        errorShown = !<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = e.<span class=\"property\">message</span>;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            errorShown = !<span class=\"number\">1</span>, dialog = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;electron&quot;</span>).<span class=\"property\">dialog</span>, dialog.<span class=\"title function_\">showMessageBox</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">buttons</span>: [<span class=\"string\">&quot;OK&quot;</span>],</span><br><span class=\"line\">                <span class=\"attr\">defaultId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">cancelId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">title</span>: <span class=\"string\">&quot;A required module cannot be loaded by Typora&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: n.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\n&quot;</span>)[<span class=\"number\">0</span>] + <span class=\"string\">&quot;\\n\\nPlease check if that file exists or reinstall Typora to fix.&quot;</span></span><br><span class=\"line\">            &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                response: e</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> installDate, lastShown, hasLicense = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    email = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    licenseCode = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    fingerPrint = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ActiveResponseCode</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">SUCCESS</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">OUT_OF_LIMIT</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">INVALIDATE</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">WRONG_USER</span>: -<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable constant_\">PUB_KEY</span> = <span class=\"string\">&quot;-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7nVoGCHqIMJyqgALEUrc\\n5JJhap0+HtJqzPE04pz4y+nrOmY7/12f3HvZyyoRsxKdXTZbO0wEHFIh0cRqsuaJ\\nPyaOOPbA0BsalofIAY3mRhQQ3vSf+rn3g+w0S+udWmKV9DnmJlpWqizFajU4T/E4\\n5ZgMNcXt3E1ips32rdbTR0Nnen9PVITvrbJ3l6CI2BFBImZQZ2P8N+LsqfJsqyVV\\nwDkt3mHAVxV7FZbfYWG+8FDSuKQHaCmvgAtChx9hwl3J6RekkqDVa6GIV13D23LS\\nqdk0Jb521wFJi/V6QAK6SLBiby5gYN6zQQ5RQpjXtR53MwzTdiAzGEuKdOtrY2Me\\nDwIDAQAB\\n-----END PUBLIC KEY-----\\n\\n&quot;</span>,</span><br><span class=\"line\">    <span class=\"variable constant_\">DAY_IN_MS</span> = <span class=\"number\">864e5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">HOST</span> = <span class=\"string\">&quot;https://store.typora.io&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">decrypt</span> = e =&gt; &#123;<span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(e, <span class=\"string\">&quot;base64&quot;</span>).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;utf8&quot;</span>))&#125;,</span><br><span class=\"line\">    makeHash = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;crypto&quot;</span>).<span class=\"title function_\">createHash</span>(<span class=\"string\">&quot;sha256&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            n.<span class=\"title function_\">update</span>(e)</span><br><span class=\"line\">        &#125;), n.<span class=\"title function_\">digest</span>(<span class=\"string\">&quot;base64&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    readLicenseInfo = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> e = <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">get</span>(<span class=\"string\">&quot;SLicense&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!e) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [n, t, i] = e.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;#&quot;</span>), a = <span class=\"title function_\">decrypt</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.<span class=\"property\">fingerprint</span> != fingerPrint ? <span class=\"literal\">null</span> : (<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(a, &#123;</span><br><span class=\"line\">            <span class=\"attr\">failCounts</span>: t,</span><br><span class=\"line\">            <span class=\"attr\">lastRetry</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(i)</span><br><span class=\"line\">        &#125;), a)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writeInstallDate = <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`writeInstallDate fromBTime=<span class=\"subst\">$&#123;e&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e) <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = <span class=\"keyword\">await</span> <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>).<span class=\"title function_\">stat</span>(app.<span class=\"title function_\">getPath</span>(<span class=\"string\">&quot;userData&quot;</span>) + <span class=\"string\">&quot;/profile.data&quot;</span>);</span><br><span class=\"line\">            n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(t.<span class=\"property\">birthtime</span>), t.<span class=\"property\">birthtime</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">        installDate = n;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> i = n.<span class=\"title function_\">toLocaleDateString</span>(<span class=\"string\">&quot;en-US&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">put</span>(<span class=\"string\">&quot;IDate&quot;</span>, i), installDate</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> licenseLocalStoreInstance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getLicenseLocalStore = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == licenseLocalStoreInstance)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isWin) licenseLocalStoreInstance = <span class=\"title class_\">WindowsLicenseLocalStore</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = app.<span class=\"property\">setting</span>.<span class=\"title function_\">prepDatabase</span>(fingerPrint);</span><br><span class=\"line\">            licenseLocalStoreInstance = &#123;</span><br><span class=\"line\">                <span class=\"attr\">put</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n, t</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`ls put <span class=\"subst\">$&#123;n&#125;</span>`</span>), e.<span class=\"title function_\">getState</span>()[n] = t, e.<span class=\"title function_\">write</span>()</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e.<span class=\"title function_\">getState</span>()[n]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> licenseLocalStoreInstance</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">WindowsLicenseLocalStore</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> e = <span class=\"title function_\">mustRequire</span>(<span class=\"string\">&quot;native-reg&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> t = e.<span class=\"title function_\">openKey</span>(e.<span class=\"property\">HKCU</span>, <span class=\"string\">&quot;Software\\\\Typora&quot;</span>, e.<span class=\"property\">Access</span>.<span class=\"property\">READ</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == t) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> i = e.<span class=\"title function_\">getValue</span>(t, <span class=\"literal\">null</span>, n);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.<span class=\"title function_\">closeKey</span>(t), i</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">put</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n, t</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> i = e.<span class=\"title function_\">createKey</span>(e.<span class=\"property\">HKCU</span>, <span class=\"string\">&quot;Software\\\\Typora&quot;</span>, e.<span class=\"property\">Access</span>.<span class=\"property\">WRITE</span>);</span><br><span class=\"line\">            e.<span class=\"title function_\">setValueSZ</span>(i, n, t), e.<span class=\"title function_\">closeKey</span>(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getFingerPrint</span> = <span class=\"keyword\">async</span>(<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fingerPrint) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isWin) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> e = <span class=\"title function_\">mustRequire</span>(<span class=\"string\">&quot;native-reg&quot;</span>),</span><br><span class=\"line\">                n = e.<span class=\"title function_\">openKey</span>(e.<span class=\"property\">HKEY</span>.<span class=\"property\">LOCAL_MACHINE</span>, <span class=\"string\">&quot;SOFTWARE\\\\Microsoft\\\\Cryptography&quot;</span>, e.<span class=\"property\">Access</span>.<span class=\"property\">WOW64_64KEY</span> | e.<span class=\"property\">Access</span>.<span class=\"property\">READ</span>);</span><br><span class=\"line\">            fingerPrint = e.<span class=\"title function_\">getValue</span>(n, <span class=\"literal\">null</span>, <span class=\"string\">&quot;MachineGuid&quot;</span>), e.<span class=\"title function_\">closeKey</span>(n)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> fingerPrint = <span class=\"keyword\">await</span> <span class=\"built_in\">require</span>(<span class=\"string\">&quot;node-machine-id&quot;</span>).<span class=\"title function_\">machineId</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">original</span>: !<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        fingerPrint || <span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureMessage</span>(<span class=\"string\">&quot;[License] Failed to get fingerPrint&quot;</span>), fingerPrint = <span class=\"title function_\">makeHash</span>(fingerPrint, <span class=\"string\">&quot;typora&quot;</span>).<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[/=+-]/g</span>, <span class=\"string\">&quot;a&quot;</span>), isMac &amp;&amp; (fingerPrint += <span class=\"string\">&quot;darwin&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fingerPrint</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> licenseInitialed = !<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">watchLicense</span> = <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[watchLicense]&quot;</span>), <span class=\"title function_\">firstValidateLicense</span>(e), <span class=\"keyword\">await</span> <span class=\"title function_\">validateTrail</span>(), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[watchLicense] hasLicense: <span class=\"subst\">$&#123;hasLicense&#125;</span>`</span>), <span class=\"title function_\">showLicensePanelIfNeeded</span>(), <span class=\"title function_\">addToAnalysis</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    addToAnalysis = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"title class_\">Raven</span>.<span class=\"title function_\">getContext</span>().<span class=\"property\">tags</span>;</span><br><span class=\"line\">        e.<span class=\"property\">hasLicense</span> = hasLicense, <span class=\"title class_\">Raven</span>.<span class=\"title function_\">mergeContext</span>(e)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getOS = <span class=\"function\">() =&gt;</span> process.<span class=\"property\">platform</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\d+/</span>, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">    renewLicense = <span class=\"title function_\">async</span>(e, n) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> t = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>).<span class=\"title function_\">toLocaleDateString</span>(<span class=\"string\">&quot;en-US&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">deviceId</span>: i,</span><br><span class=\"line\">            <span class=\"attr\">lastRetry</span>: a</span><br><span class=\"line\">        &#125; = e || &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n &amp;&amp; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - a &lt; <span class=\"number\">432e5</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = &#123;</span><br><span class=\"line\">            <span class=\"attr\">v</span>: <span class=\"title function_\">getOS</span>() + <span class=\"string\">&quot;|&quot;</span> + app.<span class=\"title function_\">getVersion</span>(),</span><br><span class=\"line\">            <span class=\"attr\">license</span>: licenseCode,</span><br><span class=\"line\">            <span class=\"attr\">l</span>: i,</span><br><span class=\"line\">            <span class=\"attr\">u</span>: app.<span class=\"property\">setting</span>.<span class=\"title function_\">generateUUID</span>(),</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> ? <span class=\"string\">&quot;dev&quot;</span> : <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(s);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getInstallDate = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">get</span>(<span class=\"string\">&quot;IDate&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(n.<span class=\"title function_\">getTime</span>())) <span class=\"keyword\">return</span> e ? <span class=\"literal\">null</span> : <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = <span class=\"number\">1641734774922</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">isNaN</span>(t) ? t = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-01&quot;</span>) : (t = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(t), <span class=\"built_in\">isNaN</span>(t.<span class=\"title function_\">getTime</span>()) &amp;&amp; (t = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-01&quot;</span>))), n &lt; t ? t : n</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getTrailRemains = <span class=\"function\">(<span class=\"params\">e, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        n = n || <span class=\"number\">15</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - installDate) / <span class=\"number\">864e5</span>),</span><br><span class=\"line\">            i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, n - t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e &amp;&amp; (i &gt; n || <span class=\"built_in\">isNaN</span>(i)) &amp;&amp; (i = n), i</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    validateTrail = <span class=\"title function_\">async</span>() =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = (installDate = <span class=\"title function_\">getInstallDate</span>(!<span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span>)) ? <span class=\"title function_\">getTrailRemains</span>(!<span class=\"number\">1</span>) : <span class=\"number\">100</span>;</span><br><span class=\"line\">        (e &gt; <span class=\"number\">15</span> || <span class=\"built_in\">isNaN</span>(e)) &amp;&amp; (<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[validateTrail] Read from incorrupted InstallDate&quot;</span>), <span class=\"keyword\">await</span> <span class=\"title function_\">writeInstallDate</span>(!<span class=\"number\">0</span>), e = <span class=\"number\">15</span>), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[validateTrail] installDate is <span class=\"subst\">$&#123;installDate.toLocaleDateString(<span class=\"string\">&quot;en-US&quot;</span>)&#125;</span>, trail remains: <span class=\"subst\">$&#123;e&#125;</span> days`</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fillLicense</span>(<span class=\"params\">e, n</span>) &#123;</span><br><span class=\"line\">    licenseCode = n, (hasLicense = !(!(email = e) || !licenseCode)) &amp;&amp; <span class=\"title function_\">onFillLicense</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">unfillLicense</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    hasLicense || (e = <span class=\"string\">&quot;&quot;</span>), email = <span class=\"string\">&quot;&quot;</span>, licenseCode = <span class=\"string\">&quot;&quot;</span>, hasLicense = !<span class=\"number\">1</span>, <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">put</span>(<span class=\"string\">&quot;SLicense&quot;</span>, <span class=\"string\">&quot;&quot;</span>), e &amp;&amp; <span class=\"title function_\">showDialog</span>(<span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(<span class=\"string\">&quot;Typora is now deactivated&quot;</span>), <span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(e)), <span class=\"title function_\">onUnfillLicense</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">firstValidateLicense</span> = e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[License] firstValidateLicense&quot;</span>), licenseInitialed = !<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"title function_\">readLicenseInfo</span>(),</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">license</span>: t,</span><br><span class=\"line\">                <span class=\"attr\">email</span>: i</span><br><span class=\"line\">            &#125; = n || &#123;&#125;;</span><br><span class=\"line\">        t &amp;&amp; i ? (<span class=\"title function_\">fillLicense</span>(i, t), <span class=\"title function_\">renewLicense</span>(n, e), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[License] pass validateLicenseInfoStr&quot;</span>)) : <span class=\"title function_\">unfillLicense</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showDialog = <span class=\"function\">(<span class=\"params\">e, n</span>) =&gt;</span> electron.<span class=\"property\">dialog</span>.<span class=\"title function_\">showMessageBox</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">buttons</span>: [<span class=\"string\">&quot;OK&quot;</span>],</span><br><span class=\"line\">        <span class=\"attr\">defaultId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">cancelId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>: e,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: n</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    endDevTest = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        app.<span class=\"property\">expired</span> = !<span class=\"number\">0</span>, <span class=\"title function_\">showDialog</span>(<span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(<span class=\"string\">&quot;Error&quot;</span>), <span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(<span class=\"string\">&quot;This beta version of Typora is expired, please download and install a newer version.&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            shell.<span class=\"title function_\">openExternal</span>(<span class=\"string\">&quot;https://typora.io/#download&quot;</span>), <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1e3</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    validateDevTest = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasLicense &amp;&amp; !isLinux &amp;&amp; <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> &amp;&amp; <span class=\"variable language_\">global</span>.<span class=\"property\">PRODUCTION_MODE</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = <span class=\"title function_\">getInstallDate</span>(),</span><br><span class=\"line\">                n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;buildTime is 1641734774922&quot;</span>), (<span class=\"built_in\">isNaN</span>(<span class=\"number\">1641734774922</span>) || n - <span class=\"number\">1641734774922</span> &gt; <span class=\"number\">20736e6</span>) &amp;&amp; <span class=\"title function_\">endDevTest</span>(), e -= <span class=\"number\">0</span>, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;verInitTime is &quot;</span> + e), !<span class=\"built_in\">isNaN</span>(e) &amp;&amp; n - e &gt; <span class=\"number\">1728e7</span> &amp;&amp; <span class=\"title function_\">endDevTest</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showLicensePanelIfNeeded = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">shouldShowNoLicenseHint</span>(!<span class=\"number\">0</span>) &amp;&amp; !app.<span class=\"property\">setting</span>.<span class=\"property\">inFirstShow</span> &amp;&amp; (isLinux &amp;&amp; <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &lt; <span class=\"number\">.95</span> || (!lastShown || <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - lastShown &gt; <span class=\"number\">36e5</span> * (isLinux ? <span class=\"number\">4</span> : <span class=\"number\">2</span>) || <span class=\"title function_\">getTrailRemains</span>(!<span class=\"number\">0</span>, <span class=\"number\">20</span>) &lt;= <span class=\"number\">0</span>) &amp;&amp; <span class=\"title function_\">showLicensePanel</span>())</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> licensePanel = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> showLicensePanel = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastShown = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>, <span class=\"literal\">null</span> == licensePanel) <span class=\"keyword\">return</span> (licensePanel = <span class=\"title class_\">WindowController</span>.<span class=\"title function_\">showPanelWindow</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">525</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">420</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">`page-dist/license.html?dayRemains=<span class=\"subst\">$&#123;getTrailRemains(!<span class=\"number\">0</span>)&#125;</span>&amp;index=<span class=\"subst\">$&#123;e?<span class=\"number\">1</span>:<span class=\"number\">0</span>&#125;</span>\\n\\t\\t\\t\\t&amp;hasActivated=<span class=\"subst\">$&#123;hasLicense||!<span class=\"number\">1</span>&#125;</span>&amp;email=<span class=\"subst\">$&#123;email&#125;</span>&amp;license=<span class=\"subst\">$&#123;licenseCode&#125;</span>&amp;lang=<span class=\"subst\">$&#123;app.setting.getUserLocale()&#125;</span>&amp;needLicense=<span class=\"subst\">$&#123;shouldShowNoLicenseHint()&#125;</span>`</span>,</span><br><span class=\"line\">        <span class=\"attr\">frame</span>: !<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">alwaysOnTop</span>: !errorShown</span><br><span class=\"line\">    &#125;)).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;closed&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        licensePanel = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;), <span class=\"keyword\">void</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        licensePanel &amp;&amp; !licensePanel.<span class=\"title function_\">isDestroyed</span>() &amp;&amp; licensePanel.<span class=\"title function_\">setAlwaysOnTop</span>(!<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">5e3</span>);</span><br><span class=\"line\">    licensePanel.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> welcomePanel = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> showWelcomePanel = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastShown = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>, <span class=\"literal\">null</span> == welcomePanel) <span class=\"keyword\">return</span> (welcomePanel = <span class=\"title class_\">WindowController</span>.<span class=\"title function_\">showPanelWindow</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">760</span>,</span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">460</span>,</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">`page-dist/welcome.html?lang=<span class=\"subst\">$&#123;app.setting.getUserLocale()&#125;</span>`</span>,</span><br><span class=\"line\">            <span class=\"attr\">frame</span>: !<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">alwaysOnTop</span>: !errorShown</span><br><span class=\"line\">        &#125;)).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;closed&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            welcomePanel = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;), <span class=\"keyword\">void</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            welcomePanel &amp;&amp; !welcomePanel.<span class=\"title function_\">isDestroyed</span>() &amp;&amp; welcomePanel.<span class=\"title function_\">setAlwaysOnTop</span>(!<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">4e3</span>);</span><br><span class=\"line\">        welcomePanel.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    quickValidate = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"string\">&quot;L23456789ABCDEFGHJKMNPQRSTUVWXYZ&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^([A-Z0-9]&#123;6&#125;-)&#123;3&#125;[A-Z0-9]&#123;6&#125;$/</span>.<span class=\"title function_\">exec</span>(e)) <span class=\"keyword\">return</span> !<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = e.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">            i = t.<span class=\"title function_\">substr</span>(<span class=\"number\">22</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !t.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[L23456789ABCDEFGHJKMNPQRSTUVWXYZ]/g</span>, <span class=\"string\">&quot;&quot;</span>) &amp;&amp; i == (<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> t = <span class=\"string\">&quot;&quot;</span>, i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">0</span>, s = <span class=\"number\">0</span>; s &lt; <span class=\"number\">16</span>; s += <span class=\"number\">2</span>) a += n.<span class=\"title function_\">indexOf</span>(e[i + s]);</span><br><span class=\"line\">                t += n[a %= n.<span class=\"property\">length</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t</span><br><span class=\"line\">        &#125;)(t)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getComputerName = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = process.<span class=\"property\">env</span>.<span class=\"property\">USER</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (e || (e = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">userInfo</span>().<span class=\"property\">username</span>), process.<span class=\"property\">platform</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;win32&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> process.<span class=\"property\">env</span>.<span class=\"property\">COMPUTERNAME</span> + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | Windows&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;darwin&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>).<span class=\"title function_\">exec</span>(<span class=\"string\">&quot;scutil --get ComputerName&quot;</span>, &#123;</span><br><span class=\"line\">                        <span class=\"attr\">timeout</span>: <span class=\"number\">5e3</span></span><br><span class=\"line\">                    &#125;, <span class=\"function\">(<span class=\"params\">t, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">n</span>(!t &amp;&amp; i ? i.<span class=\"title function_\">toString</span>().<span class=\"title function_\">trim</span>() + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | darwin&quot;</span> : <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">hostname</span>() + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | darwin&quot;</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">hostname</span>() + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | Linux&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doActivation = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\">e, n, t</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e = (e || <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^[\\s\\u200b ]/g</span>, <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\s\\u200b ]$/g</span>, <span class=\"string\">&quot;&quot;</span>), n = (n || <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^[\\s\\u200b ]/g</span>, <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\s\\u200b ]$/g</span>, <span class=\"string\">&quot;&quot;</span>), ! <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"regexp\">/^[^\\s@&#x27;&quot;/\\\\=?]+@[^\\s@&#x27;&quot;/\\\\]+\\.[^\\s@&#x27;&quot;/\\\\]+$/</span>.<span class=\"title function_\">test</span>(e)</span><br><span class=\"line\">            &#125;(e)) <span class=\"keyword\">return</span> [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid email address&quot;</span>];</span><br><span class=\"line\">        <span class=\"comment\">//if (!quickValidate(n)) return [!1, &quot;Please input a valid license code&quot;];</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> i = &#123;</span><br><span class=\"line\">            <span class=\"attr\">v</span>: <span class=\"title function_\">getOS</span>() + <span class=\"string\">&quot;|&quot;</span> + app.<span class=\"title function_\">getVersion</span>(),</span><br><span class=\"line\">            <span class=\"attr\">license</span>: n,</span><br><span class=\"line\">            <span class=\"attr\">email</span>: e,</span><br><span class=\"line\">            <span class=\"attr\">l</span>: <span class=\"keyword\">await</span> <span class=\"title function_\">getComputerName</span>(),</span><br><span class=\"line\">            <span class=\"attr\">f</span>: <span class=\"keyword\">await</span> <span class=\"title function_\">getFingerPrint</span>(),</span><br><span class=\"line\">            <span class=\"attr\">u</span>: app.<span class=\"property\">setting</span>.<span class=\"title function_\">generateUUID</span>(),</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> ? <span class=\"string\">&quot;dev&quot;</span> : <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">force</span>: t</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> e = &#123;</span><br><span class=\"line\">                <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    <span class=\"attr\">msg</span>: <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                       <span class=\"attr\">deviceId</span>: i.<span class=\"property\">u</span>,</span><br><span class=\"line\">                       <span class=\"attr\">fingerprint</span>: i.<span class=\"property\">f</span>,</span><br><span class=\"line\">                       <span class=\"attr\">email</span>: i.<span class=\"property\">email</span>,</span><br><span class=\"line\">                       <span class=\"attr\">license</span>: i.<span class=\"property\">license</span>,      </span><br><span class=\"line\">                       <span class=\"attr\">version</span>: i.<span class=\"property\">v</span>,</span><br><span class=\"line\">                       <span class=\"attr\">date</span>: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;),<span class=\"string\">&quot;utf8&quot;</span>).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;base64&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(e.<span class=\"property\">data</span>), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[License] response code is <span class=\"subst\">$&#123;e.data.code&#125;</span>`</span>), e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">SUCCESS</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">writeActivationInfo</span>(e.<span class=\"property\">data</span>.<span class=\"property\">msg</span>) ? [!<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>] : [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid license code&quot;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">OUT_OF_LIMIT</span>) <span class=\"keyword\">return</span> t ? <span class=\"keyword\">await</span> <span class=\"title function_\">writeActivationInfo</span>(e.<span class=\"property\">data</span>.<span class=\"property\">msg</span>) ? [!<span class=\"number\">0</span>, <span class=\"string\">&quot;Your license has exceeded the max devices numbers.\\nThe oldest device was unregistered automatically.&quot;</span>] : [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid license code&quot;</span>] : [<span class=\"string\">&quot;confirm&quot;</span>, <span class=\"string\">&#x27;Your license has exceeded the max devices numbers.\\nIf you click &quot;Continue Activation&quot;, this device will be activated and the oldest device will be unregistered automatically.&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">INVALIDATE</span>) <span class=\"keyword\">return</span> [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid license code&quot;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">WRONG_USER</span>) <span class=\"keyword\">return</span> [!<span class=\"number\">1</span>, <span class=\"string\">&quot;This license code has been used with a different email address.&quot;</span>]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.<span class=\"property\">response</span> &amp;&amp; e.<span class=\"property\">response</span>.<span class=\"property\">code</span> ? (<span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">`[License] error from server <span class=\"subst\">$&#123;e.response.code&#125;</span>`</span>), [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Unknown Error. Please contact hi@typora.io&quot;</span>]) : (<span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureException</span>(e, &#123;</span><br><span class=\"line\">                <span class=\"attr\">level</span>: <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">            &#125;), <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e.<span class=\"property\">stack</span>), [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Failed to access the license server. Please check your network or try again later.&quot;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writeActivationInfo = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"title function_\">decrypt</span>(e) || &#123;&#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">deviceId</span>: t,</span><br><span class=\"line\">                <span class=\"attr\">fingerprint</span>: i,</span><br><span class=\"line\">                <span class=\"attr\">email</span>: a,</span><br><span class=\"line\">                <span class=\"attr\">license</span>: s,</span><br><span class=\"line\">                <span class=\"attr\">version</span>: o,</span><br><span class=\"line\">                <span class=\"attr\">date</span>: r</span><br><span class=\"line\">            &#125; = n;</span><br><span class=\"line\">            <span class=\"title function_\">fillLicense</span>(a, s);</span><br><span class=\"line\">            <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">put</span>(<span class=\"string\">&quot;SLicense&quot;</span>, <span class=\"string\">`<span class=\"subst\">$&#123;e&#125;</span>#0#<span class=\"subst\">$&#123;(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).toLocaleDateString(<span class=\"string\">&quot;en-US&quot;</span>)&#125;</span>`</span>);</span><br><span class=\"line\">            hasLicense = !<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//return i == await getFingerPrint() &amp;&amp; a &amp;&amp; s ? (fillLicense(a, s), getLicenseLocalStore().put(&quot;SLicense&quot;, `$&#123;e&#125;#0#$&#123;(new Date).toLocaleDateString(&quot;en-US&quot;)&#125;`), hasLicense = !0, !0) : (console.log(&quot;[License] validate server return fail&quot;), unfillLicense(), !1)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doDeactivation = <span class=\"title function_\">async</span>() =&gt; &#123;</span><br><span class=\"line\">        hasLicense &amp;&amp; email &amp;&amp; licenseCode || <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;doDeactivation on unregistered device&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">deviceId</span>: e</span><br><span class=\"line\">        &#125; = <span class=\"title function_\">readLicenseInfo</span>() || &#123;&#125;;</span><br><span class=\"line\">        <span class=\"title function_\">unfillLicense</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;addLicense&quot;</span>, <span class=\"title function_\">async</span>(e, &#123;</span><br><span class=\"line\">    <span class=\"attr\">email</span>: n,</span><br><span class=\"line\">    <span class=\"attr\">license</span>: t,</span><br><span class=\"line\">    <span class=\"attr\">force</span>: i</span><br><span class=\"line\">&#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;handle addLicense&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">doActivation</span>(n, t, i)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e.<span class=\"property\">stack</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;), ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;license.show&quot;</span>, <span class=\"function\">(<span class=\"params\">e, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">showLicensePanel</span>(n || !<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;), ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;license.show.debug&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    licensePanel &amp;&amp; licensePanel.<span class=\"property\">webContents</span>.<span class=\"title function_\">openDevTools</span>()</span><br><span class=\"line\">&#125;), ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;removeLicense&quot;</span>, <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;handle removeLicense&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">doDeactivation</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e.<span class=\"property\">stack</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    start = <span class=\"title function_\">async</span>(e, n) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`start LM in devVersion=<span class=\"subst\">$&#123;<span class=\"variable language_\">global</span>.devVersion||!<span class=\"number\">1</span>&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">await</span> <span class=\"title function_\">getFingerPrint</span>(), !e &amp;&amp; n || isLinux || (<span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> || !n || n.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;dev&quot;</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp; (<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;re-write InstallDate&quot;</span>), <span class=\"keyword\">await</span> <span class=\"title function_\">writeInstallDate</span>()), <span class=\"title function_\">validateDevTest</span>(), <span class=\"title function_\">watchLicense</span>(e)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureException</span>(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shouldShowNoLicenseHint = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> !hasLicense &amp;&amp; (e || !isLinux) &amp;&amp; !<span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span>,</span><br><span class=\"line\">    getHasLicense = <span class=\"function\">() =&gt;</span> hasLicense,</span><br><span class=\"line\">    appendLicenseHintIfNeeded = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        licenseInitialed &amp;&amp; <span class=\"title function_\">shouldShowNoLicenseHint</span>() &amp;&amp; <span class=\"title function_\">onUnfillLicense</span>(e)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genClassName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>).<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;txxxx-xxxx-xxxxy&quot;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[x]/g</span>, <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = (e + <span class=\"number\">16</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) % <span class=\"number\">16</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(e / <span class=\"number\">16</span>), t.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> className = <span class=\"title function_\">genClassName</span>(),</span><br><span class=\"line\">    onFillLicense = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">BrowserWindow</span>.<span class=\"title function_\">getAllWindows</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            e.<span class=\"property\">webContents</span>.<span class=\"title function_\">executeJavaScript</span>(<span class=\"string\">`try&#123;document.querySelector(&quot;.<span class=\"subst\">$&#123;className&#125;</span>&quot;).remove();&#125;catch(e)&#123;&#125;;File.option &amp;&amp; (File.option.hasLicense = true);File.megaMenu &amp;&amp; File.megaMenu.forceReload();0;`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onUnfillLicense = <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isLinux || <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title class_\">Dict</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"string\">`.typora-sourceview-on .<span class=\"subst\">$&#123;className&#125;</span>&#123;\\n\\t\\tdisplay:none;\\n\\t&#125;\\n\\t.<span class=\"subst\">$&#123;className&#125;</span> &#123;\\n\\t\\tposition: fixed;\\n    bottom: 2px;\\n    z-index: 9999;\\n    left: 70px;\\n    font-size: 12px;\\n    line-height: 24px;\\n    background: rgb(120 120 120 / 30%);\\n    padding: 0 12px;\\n    color: var(--text-color);\\n    border-radius: 4px;\\n    cursor: pointer;\\n\\t&#125;\\n\\t.pin-outline .<span class=\"subst\">$&#123;className&#125;</span>&#123;\\n\\t\\tleft:calc(var(--sidebar-width) + 70px);\\n\\t&#125;`</span>,</span><br><span class=\"line\">            t = <span class=\"string\">`if(window.File.option)&#123;\\n\\t\\tFile.option.hasLicense = false; \\n\\t\\tFile.megaMenu &amp;&amp; File.megaMenu.forceReload();\\n\\t\\tif(!document.querySelector(&quot;.<span class=\"subst\">$&#123;className&#125;</span>&quot;)) &#123;\\n\\t\\t\\tconst pos = Math.round(Math.random() * document.body.children.length);\\n\\t\\t\\tconst dom = document.createElement(&quot;DIV&quot;);\\n\\t\\t\\tdom.innerText = &quot;<span class=\"subst\">$&#123;Dict.getPanelString(<span class=\"string\">&quot;UNREGISTERED&quot;</span>)&#125;</span> Ã&quot;;\\n\\t\\t\\tdom.classList.add(&quot;<span class=\"subst\">$&#123;className&#125;</span>&quot;);\\n\\t\\t\\tdom.style = &quot;position: fixed !important;bottom: 2px !important; display: block !important; opacity: 1 !important; height: auto !important; width: auto !important; z-index: 9999 !important;&quot;\\n\\t\\t\\tdom.setAttribute(&quot;role&quot;, &quot;button&quot;);\\n\\t\\t\\tdom.addEventListener(&quot;click&quot;, () =&gt; &#123;\\n\\t\\t\\t\\tdom.remove();\\n\\t\\t\\t\\treqnode(&quot;electron&quot;).ipcRenderer.invoke(&quot;license.show&quot;);\\n\\t\\t\\t&#125;);\\n\\t\\t\\tdocument.body.insertBefore(dom, document.body.children[pos]);\\n\\t\\t&#125;\\n\\t&#125;;1;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">            e.<span class=\"property\">webContents</span>.<span class=\"title function_\">insertCSS</span>(n), e.<span class=\"property\">webContents</span>.<span class=\"title function_\">executeJavaScript</span>(t)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e ? <span class=\"title function_\">i</span>(e) : <span class=\"title class_\">BrowserWindow</span>.<span class=\"title function_\">getAllWindows</span>().<span class=\"title function_\">forEach</span>(i)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">shouldShowNoLicenseHint</span> = shouldShowNoLicenseHint, <span class=\"built_in\">exports</span>.<span class=\"property\">start</span> = start, <span class=\"built_in\">exports</span>.<span class=\"property\">showLicensePanel</span> = showLicensePanel, <span class=\"built_in\">exports</span>.<span class=\"property\">showWelcomePanel</span> = showWelcomePanel, <span class=\"built_in\">exports</span>.<span class=\"property\">appendLicenseHintIfNeeded</span> = appendLicenseHintIfNeeded, <span class=\"built_in\">exports</span>.<span class=\"property\">getHasLicense</span> = getHasLicense, <span class=\"built_in\">exports</span>.<span class=\"property\">showLicensePanelIfNeeded</span> = showLicensePanelIfNeeded;</span><br></pre></td></tr></table></figure>\n\n<p>patch掉网络验证，对doActivation的验证直接改成永恒真，使得邮箱和序列号随便填即可激活，再改写hasLicense的值，使得下次登录时访问许可证信息时得到软件已被激活的信息，再打包生成app.asar，打开软件随便输入序列号和邮箱即可</p>\n<h2 id=\"5-破解成功\"><a href=\"#5-破解成功\" class=\"headerlink\" title=\"5. 破解成功\"></a>5. 破解成功</h2><p><img src=\"https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png\"></p>\n","site":{"data":{}},"excerpt":"<p>最近在逛论坛的时候看到有人写了一份Typora的破解复现，看了下破解过程感觉不是很难，又因为实验室招新活动开始，刚好手里缺技术演示的材料，于是便想自己着手看看这个一直在用的工具是怎么被破解的，记录一下破解过程","more":"</p>\n<h2 id=\"1-找到app-asar文件解包得到License-js加密代码\"><a href=\"#1-找到app-asar文件解包得到License-js加密代码\" class=\"headerlink\" title=\"1. 找到app.asar文件解包得到License.js加密代码\"></a>1. 找到app.asar文件解包得到License.js加密代码</h2><p>根据火绒剑在系统日志里监控Typore的启动，找到可疑的asar文件，程序访问并读取了该文件，并启动了其中的main.node模块，疑似开发者对加密源代码的解密过程</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/KhtnDlNUAuJxjvs.png\" alt=\"image-20230916115115006\"></p>\n<p>找到app.asar文件，根据日志显示，可以猜测这个类似压缩包，问Bing得知 </p>\n<!-- more -->\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/happydeer/article/details/123162612\">asar是一种用于打包Electron应用程序源代码的文件格式，它可以让应用程序更容易分发和运行。asar文件的工作原理是将所有文件连接在一起，不进行压缩，但支持随机访问。asar文件可以使用asar命令行工具或者electron-packager等工具来创建或解压</a></p>\n</blockquote>\n<p>根据提示内容进行解压， <code>asar extract app.asar unpacked</code></p>\n<p>得到unpacked文件，貌似找到关于许可证的有关文件–License.js，Winhex打开看一眼</p>\n<img src=\"https://s2.loli.net/2024/06/23/d8kAeVhzfOJ2bMX.png\" alt=\"image-20230916115804959\" style=\"zoom:67%;\" />\n\n<p>有种base64编码的感觉，难道只是base64编码加密？拖进CyberChef解密一下</p>\n<img src=\"https://s2.loli.net/2024/06/23/kDaNSiqQP2RH7yU.png\" alt=\"image-20230916115944322\" style=\"zoom:67%;\" />\n\n<p>可能还有一层或几层加密</p>\n<h2 id=\"2-从main-node文件找License-js的解密逻辑\"><a href=\"#2-从main-node文件找License-js的解密逻辑\" class=\"headerlink\" title=\"2. 从main.node文件找License.js的解密逻辑\"></a>2. 从main.node文件找License.js的解密逻辑</h2><p>根据火绒剑日志显示，在app.asar解包后运行了main.node模块，又根据前面License.js被加密了，可以推测main.node有可能运行时解密了License.js文件，先DIE看一眼main.node，DLL64位，IDA64打开，先不管其他的，shift+f12查找字符串</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/C6ou97bBU1xVMlN.png\" alt=\"image-20230916120618916\"></p>\n<p>疑似有base64解密过程，交叉引用找到引用处伪代码</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/owiESXPZBKdYFNf.png\" alt=\"image-20230916120721264\"></p>\n<p>根据Bing得知</p>\n<blockquote>\n<p>napi_get_named_property 是一个 Node-API 的函数，它的作用是从一个对象中获取一个指定名称的属性，并返回它的值。</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">napi_status <span class=\"title function_\">napi_call_function</span><span class=\"params\">(napi_env env, napi_value recv, napi_value func, <span class=\"type\">size_t</span> argc, <span class=\"type\">const</span> napi_value* argv, napi_value* result)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中，参数的含义是：</p>\n<ul>\n<li><code>env</code>: 当前调用 N-API 的环境。</li>\n<li><code>recv</code>: 要作为函数接收者的对象，通常是 <code>this</code> 的值。</li>\n<li><code>func</code>: 要调用的函数对象。</li>\n<li><code>argc</code>: 要传递的参数的个数。</li>\n<li><code>argv</code>: 要传递的参数的数组。</li>\n<li><code>result</code>: 用于接收函数返回值的指针。</li>\n</ul>\n</blockquote>\n<p>分析得知，这段代码类似给v40进行解码，v40 &#x3D;  base64.from(v38)，v38又来自函数的第三个参数a3+8，猜测这个a3+8指向的就是密文的地址，动调验证下，x64dbg直接拖Typora，手动下一个main.node的断点，再根据IDA中给出的偏移计算出调试器里解密函数的地址，根据64位下寄存器默认传参顺序是ECX,EDX,R8,R9知道a3的值储存在R8中，所以R8+8指向密文地址，验证：</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/EmZPiahpzvAbkD1.png\" alt=\"image-20230923112047338\"></p>\n<p><img src=\"https://s2.loli.net/2024/06/23/6ZntLe82dz9CJWG.png\" alt=\"image-20230923112119409\"></p>\n<p><img src=\"https://s2.loli.net/2024/06/23/J4XrjBiNyOw5Pe3.png\" alt=\"image-20230923112137343\"></p>\n<p>这里的数据刚好对应的是atom.js里的密文</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/wNSAGJIF2QOrVZp.png\" alt=\"image-20230923112252136\"></p>\n<p>验证成功，继续分析</p>\n<img src=\"https://s2.loli.net/2024/06/23/894OYvGCcjXFe6w.png\" alt=\"image-20230916133915462\" style=\"zoom:67%;\" />\n\n<p>找到类似加密算法的密钥初始化，用findcrypt看一眼发现了AES的S盒和逆S盒，推测这里应该是AES的密钥，而且长度为32个字节，猜测是256位模式</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/b4T5qNMgQ32zIPG.png\" alt=\"image-20230916134109117\"></p>\n<p>接着找AES解密线索，找到F4E0偏移处函数</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/oeP1NbWSXA9OtMu.png\" alt=\"image-20230916134740069\"></p>\n<p>里面有S盒和异或的继续分析，确定下ECB模式还是CBC模式</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/5JP7iNeIhmawXS1.png\" alt=\"image-20230916140550963\"></p>\n<p>进入3A8F偏移处函数分析，在这里先猜测block应该是密文（void 指针数组）</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/IvoDWVX2gl6GswF.png\" alt=\"image-20230916141555652\"></p>\n<p>函数里面又出现了一个循环异或，可以肯定这是个CBC模式下的异或偏移量了，那偏移量又是怎么来的呢，追踪a2（密文地址）进行判断的话，函数里面是复制了一份a2给v3，也就是说v3可能指向了密文</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/MjeshXKzrf1SyOG.png\" alt=\"image-20230916142530938\"></p>\n<p>那么result就是偏移量了，偏移量来自密文地址+v5处，进行16次循环，也就是说偏移量可能来自密文的0-15个字节位？</p>\n<h2 id=\"3-CyberChef验证猜测\"><a href=\"#3-CyberChef验证猜测\" class=\"headerlink\" title=\"3. CyberChef验证猜测\"></a>3. CyberChef验证猜测</h2><p>依据之前的猜测，main.node通过base64解码，再AES，CBC模式解码，密钥IDA动调得到</p>\n<blockquote>\n<p>0x4E, 0xE1, 0xB3, 0x82, 0x94, 0x9A, 0x02, 0x4B, 0x80, 0x2F, 0x52, 0xB4, 0xB4, 0xFE, 0x57, 0xF1, 0xBE, 0xF4, 0x08, 0x53, 0x10, 0x92, 0x56, 0xE2, 0xC2, 0x0D, 0xEC, 0xA3, 0xDD, 0x8D, 0xD5, 0x6D</p>\n</blockquote>\n<p>偏移量为密文的前16个字节，带入CyberChef检验</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/IF6DAT7fh4SBROZ.png\" alt=\"image-20230916151516731\"></p>\n<p>这下应该是得到了License.js源码，下载得到文件，找在线js美化工具美化</p>\n<h2 id=\"4-最终的Patch\"><a href=\"#4-最终的Patch\" class=\"headerlink\" title=\"4. 最终的Patch\"></a>4. 最终的Patch</h2><p>简单审计了下代码，不懂的找Bing问就是。首先应该patch掉网络验证类似request的东西，找到了几处</p>\n<p>patch后的License.js源码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">LL50Du2</span>bPNkYky7Grequire(<span class=\"string\">&quot;Env.js&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Dict</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;Dict.js&quot;</span>),</span><br><span class=\"line\">    electron = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;electron&quot;</span>),</span><br><span class=\"line\">    shell = electron.<span class=\"property\">shell</span>,</span><br><span class=\"line\">    app = electron.<span class=\"property\">app</span>,</span><br><span class=\"line\">    ipc = electron.<span class=\"property\">ipcMain</span>,</span><br><span class=\"line\">    <span class=\"title class_\">BrowserWindow</span> = electron.<span class=\"property\">BrowserWindow</span>,</span><br><span class=\"line\">    isWin = <span class=\"string\">&quot;win32&quot;</span> == process.<span class=\"property\">platform</span>,</span><br><span class=\"line\">    isMac = <span class=\"string\">&quot;darwin&quot;</span> == process.<span class=\"property\">platform</span>,</span><br><span class=\"line\">    isLinux = <span class=\"string\">&quot;linux&quot;</span> == process.<span class=\"property\">platform</span>,</span><br><span class=\"line\">    <span class=\"title class_\">WindowController</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;WindowController.js&quot;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Raven</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;raven&quot;</span>),</span><br><span class=\"line\">    errorShown = !<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mustRequire = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(e)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errorShown) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        errorShown = !<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = e.<span class=\"property\">message</span>;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            errorShown = !<span class=\"number\">1</span>, dialog = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;electron&quot;</span>).<span class=\"property\">dialog</span>, dialog.<span class=\"title function_\">showMessageBox</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">buttons</span>: [<span class=\"string\">&quot;OK&quot;</span>],</span><br><span class=\"line\">                <span class=\"attr\">defaultId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">cancelId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">title</span>: <span class=\"string\">&quot;A required module cannot be loaded by Typora&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: n.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\n&quot;</span>)[<span class=\"number\">0</span>] + <span class=\"string\">&quot;\\n\\nPlease check if that file exists or reinstall Typora to fix.&quot;</span></span><br><span class=\"line\">            &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                response: e</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> installDate, lastShown, hasLicense = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    email = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    licenseCode = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    fingerPrint = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ActiveResponseCode</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">SUCCESS</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">OUT_OF_LIMIT</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">INVALIDATE</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">WRONG_USER</span>: -<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable constant_\">PUB_KEY</span> = <span class=\"string\">&quot;-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7nVoGCHqIMJyqgALEUrc\\n5JJhap0+HtJqzPE04pz4y+nrOmY7/12f3HvZyyoRsxKdXTZbO0wEHFIh0cRqsuaJ\\nPyaOOPbA0BsalofIAY3mRhQQ3vSf+rn3g+w0S+udWmKV9DnmJlpWqizFajU4T/E4\\n5ZgMNcXt3E1ips32rdbTR0Nnen9PVITvrbJ3l6CI2BFBImZQZ2P8N+LsqfJsqyVV\\nwDkt3mHAVxV7FZbfYWG+8FDSuKQHaCmvgAtChx9hwl3J6RekkqDVa6GIV13D23LS\\nqdk0Jb521wFJi/V6QAK6SLBiby5gYN6zQQ5RQpjXtR53MwzTdiAzGEuKdOtrY2Me\\nDwIDAQAB\\n-----END PUBLIC KEY-----\\n\\n&quot;</span>,</span><br><span class=\"line\">    <span class=\"variable constant_\">DAY_IN_MS</span> = <span class=\"number\">864e5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">HOST</span> = <span class=\"string\">&quot;https://store.typora.io&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">decrypt</span> = e =&gt; &#123;<span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(e, <span class=\"string\">&quot;base64&quot;</span>).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;utf8&quot;</span>))&#125;,</span><br><span class=\"line\">    makeHash = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;crypto&quot;</span>).<span class=\"title function_\">createHash</span>(<span class=\"string\">&quot;sha256&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            n.<span class=\"title function_\">update</span>(e)</span><br><span class=\"line\">        &#125;), n.<span class=\"title function_\">digest</span>(<span class=\"string\">&quot;base64&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    readLicenseInfo = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> e = <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">get</span>(<span class=\"string\">&quot;SLicense&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!e) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [n, t, i] = e.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;#&quot;</span>), a = <span class=\"title function_\">decrypt</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.<span class=\"property\">fingerprint</span> != fingerPrint ? <span class=\"literal\">null</span> : (<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(a, &#123;</span><br><span class=\"line\">            <span class=\"attr\">failCounts</span>: t,</span><br><span class=\"line\">            <span class=\"attr\">lastRetry</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(i)</span><br><span class=\"line\">        &#125;), a)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writeInstallDate = <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`writeInstallDate fromBTime=<span class=\"subst\">$&#123;e&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e) <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = <span class=\"keyword\">await</span> <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>).<span class=\"title function_\">stat</span>(app.<span class=\"title function_\">getPath</span>(<span class=\"string\">&quot;userData&quot;</span>) + <span class=\"string\">&quot;/profile.data&quot;</span>);</span><br><span class=\"line\">            n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(t.<span class=\"property\">birthtime</span>), t.<span class=\"property\">birthtime</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">        installDate = n;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> i = n.<span class=\"title function_\">toLocaleDateString</span>(<span class=\"string\">&quot;en-US&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">put</span>(<span class=\"string\">&quot;IDate&quot;</span>, i), installDate</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> licenseLocalStoreInstance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getLicenseLocalStore = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == licenseLocalStoreInstance)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isWin) licenseLocalStoreInstance = <span class=\"title class_\">WindowsLicenseLocalStore</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = app.<span class=\"property\">setting</span>.<span class=\"title function_\">prepDatabase</span>(fingerPrint);</span><br><span class=\"line\">            licenseLocalStoreInstance = &#123;</span><br><span class=\"line\">                <span class=\"attr\">put</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n, t</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`ls put <span class=\"subst\">$&#123;n&#125;</span>`</span>), e.<span class=\"title function_\">getState</span>()[n] = t, e.<span class=\"title function_\">write</span>()</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e.<span class=\"title function_\">getState</span>()[n]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> licenseLocalStoreInstance</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">WindowsLicenseLocalStore</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> e = <span class=\"title function_\">mustRequire</span>(<span class=\"string\">&quot;native-reg&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> t = e.<span class=\"title function_\">openKey</span>(e.<span class=\"property\">HKCU</span>, <span class=\"string\">&quot;Software\\\\Typora&quot;</span>, e.<span class=\"property\">Access</span>.<span class=\"property\">READ</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == t) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> i = e.<span class=\"title function_\">getValue</span>(t, <span class=\"literal\">null</span>, n);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.<span class=\"title function_\">closeKey</span>(t), i</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">put</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n, t</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> i = e.<span class=\"title function_\">createKey</span>(e.<span class=\"property\">HKCU</span>, <span class=\"string\">&quot;Software\\\\Typora&quot;</span>, e.<span class=\"property\">Access</span>.<span class=\"property\">WRITE</span>);</span><br><span class=\"line\">            e.<span class=\"title function_\">setValueSZ</span>(i, n, t), e.<span class=\"title function_\">closeKey</span>(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getFingerPrint</span> = <span class=\"keyword\">async</span>(<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fingerPrint) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isWin) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> e = <span class=\"title function_\">mustRequire</span>(<span class=\"string\">&quot;native-reg&quot;</span>),</span><br><span class=\"line\">                n = e.<span class=\"title function_\">openKey</span>(e.<span class=\"property\">HKEY</span>.<span class=\"property\">LOCAL_MACHINE</span>, <span class=\"string\">&quot;SOFTWARE\\\\Microsoft\\\\Cryptography&quot;</span>, e.<span class=\"property\">Access</span>.<span class=\"property\">WOW64_64KEY</span> | e.<span class=\"property\">Access</span>.<span class=\"property\">READ</span>);</span><br><span class=\"line\">            fingerPrint = e.<span class=\"title function_\">getValue</span>(n, <span class=\"literal\">null</span>, <span class=\"string\">&quot;MachineGuid&quot;</span>), e.<span class=\"title function_\">closeKey</span>(n)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> fingerPrint = <span class=\"keyword\">await</span> <span class=\"built_in\">require</span>(<span class=\"string\">&quot;node-machine-id&quot;</span>).<span class=\"title function_\">machineId</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">original</span>: !<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        fingerPrint || <span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureMessage</span>(<span class=\"string\">&quot;[License] Failed to get fingerPrint&quot;</span>), fingerPrint = <span class=\"title function_\">makeHash</span>(fingerPrint, <span class=\"string\">&quot;typora&quot;</span>).<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[/=+-]/g</span>, <span class=\"string\">&quot;a&quot;</span>), isMac &amp;&amp; (fingerPrint += <span class=\"string\">&quot;darwin&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fingerPrint</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> licenseInitialed = !<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">watchLicense</span> = <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[watchLicense]&quot;</span>), <span class=\"title function_\">firstValidateLicense</span>(e), <span class=\"keyword\">await</span> <span class=\"title function_\">validateTrail</span>(), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[watchLicense] hasLicense: <span class=\"subst\">$&#123;hasLicense&#125;</span>`</span>), <span class=\"title function_\">showLicensePanelIfNeeded</span>(), <span class=\"title function_\">addToAnalysis</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    addToAnalysis = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"title class_\">Raven</span>.<span class=\"title function_\">getContext</span>().<span class=\"property\">tags</span>;</span><br><span class=\"line\">        e.<span class=\"property\">hasLicense</span> = hasLicense, <span class=\"title class_\">Raven</span>.<span class=\"title function_\">mergeContext</span>(e)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getOS = <span class=\"function\">() =&gt;</span> process.<span class=\"property\">platform</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\d+/</span>, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">    renewLicense = <span class=\"title function_\">async</span>(e, n) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> t = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>).<span class=\"title function_\">toLocaleDateString</span>(<span class=\"string\">&quot;en-US&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">deviceId</span>: i,</span><br><span class=\"line\">            <span class=\"attr\">lastRetry</span>: a</span><br><span class=\"line\">        &#125; = e || &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n &amp;&amp; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - a &lt; <span class=\"number\">432e5</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = &#123;</span><br><span class=\"line\">            <span class=\"attr\">v</span>: <span class=\"title function_\">getOS</span>() + <span class=\"string\">&quot;|&quot;</span> + app.<span class=\"title function_\">getVersion</span>(),</span><br><span class=\"line\">            <span class=\"attr\">license</span>: licenseCode,</span><br><span class=\"line\">            <span class=\"attr\">l</span>: i,</span><br><span class=\"line\">            <span class=\"attr\">u</span>: app.<span class=\"property\">setting</span>.<span class=\"title function_\">generateUUID</span>(),</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> ? <span class=\"string\">&quot;dev&quot;</span> : <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(s);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getInstallDate = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">get</span>(<span class=\"string\">&quot;IDate&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(n.<span class=\"title function_\">getTime</span>())) <span class=\"keyword\">return</span> e ? <span class=\"literal\">null</span> : <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = <span class=\"number\">1641734774922</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">isNaN</span>(t) ? t = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-01&quot;</span>) : (t = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(t), <span class=\"built_in\">isNaN</span>(t.<span class=\"title function_\">getTime</span>()) &amp;&amp; (t = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-01&quot;</span>))), n &lt; t ? t : n</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getTrailRemains = <span class=\"function\">(<span class=\"params\">e, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        n = n || <span class=\"number\">15</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - installDate) / <span class=\"number\">864e5</span>),</span><br><span class=\"line\">            i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, n - t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e &amp;&amp; (i &gt; n || <span class=\"built_in\">isNaN</span>(i)) &amp;&amp; (i = n), i</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    validateTrail = <span class=\"title function_\">async</span>() =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = (installDate = <span class=\"title function_\">getInstallDate</span>(!<span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span>)) ? <span class=\"title function_\">getTrailRemains</span>(!<span class=\"number\">1</span>) : <span class=\"number\">100</span>;</span><br><span class=\"line\">        (e &gt; <span class=\"number\">15</span> || <span class=\"built_in\">isNaN</span>(e)) &amp;&amp; (<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[validateTrail] Read from incorrupted InstallDate&quot;</span>), <span class=\"keyword\">await</span> <span class=\"title function_\">writeInstallDate</span>(!<span class=\"number\">0</span>), e = <span class=\"number\">15</span>), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[validateTrail] installDate is <span class=\"subst\">$&#123;installDate.toLocaleDateString(<span class=\"string\">&quot;en-US&quot;</span>)&#125;</span>, trail remains: <span class=\"subst\">$&#123;e&#125;</span> days`</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fillLicense</span>(<span class=\"params\">e, n</span>) &#123;</span><br><span class=\"line\">    licenseCode = n, (hasLicense = !(!(email = e) || !licenseCode)) &amp;&amp; <span class=\"title function_\">onFillLicense</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">unfillLicense</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    hasLicense || (e = <span class=\"string\">&quot;&quot;</span>), email = <span class=\"string\">&quot;&quot;</span>, licenseCode = <span class=\"string\">&quot;&quot;</span>, hasLicense = !<span class=\"number\">1</span>, <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">put</span>(<span class=\"string\">&quot;SLicense&quot;</span>, <span class=\"string\">&quot;&quot;</span>), e &amp;&amp; <span class=\"title function_\">showDialog</span>(<span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(<span class=\"string\">&quot;Typora is now deactivated&quot;</span>), <span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(e)), <span class=\"title function_\">onUnfillLicense</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">firstValidateLicense</span> = e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[License] firstValidateLicense&quot;</span>), licenseInitialed = !<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"title function_\">readLicenseInfo</span>(),</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">license</span>: t,</span><br><span class=\"line\">                <span class=\"attr\">email</span>: i</span><br><span class=\"line\">            &#125; = n || &#123;&#125;;</span><br><span class=\"line\">        t &amp;&amp; i ? (<span class=\"title function_\">fillLicense</span>(i, t), <span class=\"title function_\">renewLicense</span>(n, e), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[License] pass validateLicenseInfoStr&quot;</span>)) : <span class=\"title function_\">unfillLicense</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showDialog = <span class=\"function\">(<span class=\"params\">e, n</span>) =&gt;</span> electron.<span class=\"property\">dialog</span>.<span class=\"title function_\">showMessageBox</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">buttons</span>: [<span class=\"string\">&quot;OK&quot;</span>],</span><br><span class=\"line\">        <span class=\"attr\">defaultId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">cancelId</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>: e,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: n</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    endDevTest = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        app.<span class=\"property\">expired</span> = !<span class=\"number\">0</span>, <span class=\"title function_\">showDialog</span>(<span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(<span class=\"string\">&quot;Error&quot;</span>), <span class=\"title class_\">Dict</span>.<span class=\"title function_\">getPanelString</span>(<span class=\"string\">&quot;This beta version of Typora is expired, please download and install a newer version.&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            shell.<span class=\"title function_\">openExternal</span>(<span class=\"string\">&quot;https://typora.io/#download&quot;</span>), <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1e3</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    validateDevTest = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasLicense &amp;&amp; !isLinux &amp;&amp; <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> &amp;&amp; <span class=\"variable language_\">global</span>.<span class=\"property\">PRODUCTION_MODE</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = <span class=\"title function_\">getInstallDate</span>(),</span><br><span class=\"line\">                n = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;buildTime is 1641734774922&quot;</span>), (<span class=\"built_in\">isNaN</span>(<span class=\"number\">1641734774922</span>) || n - <span class=\"number\">1641734774922</span> &gt; <span class=\"number\">20736e6</span>) &amp;&amp; <span class=\"title function_\">endDevTest</span>(), e -= <span class=\"number\">0</span>, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;verInitTime is &quot;</span> + e), !<span class=\"built_in\">isNaN</span>(e) &amp;&amp; n - e &gt; <span class=\"number\">1728e7</span> &amp;&amp; <span class=\"title function_\">endDevTest</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showLicensePanelIfNeeded = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">shouldShowNoLicenseHint</span>(!<span class=\"number\">0</span>) &amp;&amp; !app.<span class=\"property\">setting</span>.<span class=\"property\">inFirstShow</span> &amp;&amp; (isLinux &amp;&amp; <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &lt; <span class=\"number\">.95</span> || (!lastShown || <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - lastShown &gt; <span class=\"number\">36e5</span> * (isLinux ? <span class=\"number\">4</span> : <span class=\"number\">2</span>) || <span class=\"title function_\">getTrailRemains</span>(!<span class=\"number\">0</span>, <span class=\"number\">20</span>) &lt;= <span class=\"number\">0</span>) &amp;&amp; <span class=\"title function_\">showLicensePanel</span>())</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> licensePanel = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> showLicensePanel = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastShown = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>, <span class=\"literal\">null</span> == licensePanel) <span class=\"keyword\">return</span> (licensePanel = <span class=\"title class_\">WindowController</span>.<span class=\"title function_\">showPanelWindow</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">525</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">420</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">`page-dist/license.html?dayRemains=<span class=\"subst\">$&#123;getTrailRemains(!<span class=\"number\">0</span>)&#125;</span>&amp;index=<span class=\"subst\">$&#123;e?<span class=\"number\">1</span>:<span class=\"number\">0</span>&#125;</span>\\n\\t\\t\\t\\t&amp;hasActivated=<span class=\"subst\">$&#123;hasLicense||!<span class=\"number\">1</span>&#125;</span>&amp;email=<span class=\"subst\">$&#123;email&#125;</span>&amp;license=<span class=\"subst\">$&#123;licenseCode&#125;</span>&amp;lang=<span class=\"subst\">$&#123;app.setting.getUserLocale()&#125;</span>&amp;needLicense=<span class=\"subst\">$&#123;shouldShowNoLicenseHint()&#125;</span>`</span>,</span><br><span class=\"line\">        <span class=\"attr\">frame</span>: !<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">alwaysOnTop</span>: !errorShown</span><br><span class=\"line\">    &#125;)).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;closed&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        licensePanel = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;), <span class=\"keyword\">void</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        licensePanel &amp;&amp; !licensePanel.<span class=\"title function_\">isDestroyed</span>() &amp;&amp; licensePanel.<span class=\"title function_\">setAlwaysOnTop</span>(!<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">5e3</span>);</span><br><span class=\"line\">    licensePanel.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> welcomePanel = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> showWelcomePanel = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastShown = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>, <span class=\"literal\">null</span> == welcomePanel) <span class=\"keyword\">return</span> (welcomePanel = <span class=\"title class_\">WindowController</span>.<span class=\"title function_\">showPanelWindow</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">760</span>,</span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">460</span>,</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">`page-dist/welcome.html?lang=<span class=\"subst\">$&#123;app.setting.getUserLocale()&#125;</span>`</span>,</span><br><span class=\"line\">            <span class=\"attr\">frame</span>: !<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">alwaysOnTop</span>: !errorShown</span><br><span class=\"line\">        &#125;)).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;closed&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            welcomePanel = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;), <span class=\"keyword\">void</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            welcomePanel &amp;&amp; !welcomePanel.<span class=\"title function_\">isDestroyed</span>() &amp;&amp; welcomePanel.<span class=\"title function_\">setAlwaysOnTop</span>(!<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">4e3</span>);</span><br><span class=\"line\">        welcomePanel.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    quickValidate = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"string\">&quot;L23456789ABCDEFGHJKMNPQRSTUVWXYZ&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^([A-Z0-9]&#123;6&#125;-)&#123;3&#125;[A-Z0-9]&#123;6&#125;$/</span>.<span class=\"title function_\">exec</span>(e)) <span class=\"keyword\">return</span> !<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = e.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">            i = t.<span class=\"title function_\">substr</span>(<span class=\"number\">22</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !t.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[L23456789ABCDEFGHJKMNPQRSTUVWXYZ]/g</span>, <span class=\"string\">&quot;&quot;</span>) &amp;&amp; i == (<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> t = <span class=\"string\">&quot;&quot;</span>, i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">0</span>, s = <span class=\"number\">0</span>; s &lt; <span class=\"number\">16</span>; s += <span class=\"number\">2</span>) a += n.<span class=\"title function_\">indexOf</span>(e[i + s]);</span><br><span class=\"line\">                t += n[a %= n.<span class=\"property\">length</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t</span><br><span class=\"line\">        &#125;)(t)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getComputerName = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = process.<span class=\"property\">env</span>.<span class=\"property\">USER</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (e || (e = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">userInfo</span>().<span class=\"property\">username</span>), process.<span class=\"property\">platform</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;win32&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> process.<span class=\"property\">env</span>.<span class=\"property\">COMPUTERNAME</span> + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | Windows&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;darwin&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>).<span class=\"title function_\">exec</span>(<span class=\"string\">&quot;scutil --get ComputerName&quot;</span>, &#123;</span><br><span class=\"line\">                        <span class=\"attr\">timeout</span>: <span class=\"number\">5e3</span></span><br><span class=\"line\">                    &#125;, <span class=\"function\">(<span class=\"params\">t, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">n</span>(!t &amp;&amp; i ? i.<span class=\"title function_\">toString</span>().<span class=\"title function_\">trim</span>() + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | darwin&quot;</span> : <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">hostname</span>() + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | darwin&quot;</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>).<span class=\"title function_\">hostname</span>() + <span class=\"string\">&quot; | &quot;</span> + e + <span class=\"string\">&quot; | Linux&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doActivation = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\">e, n, t</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e = (e || <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^[\\s\\u200b ]/g</span>, <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\s\\u200b ]$/g</span>, <span class=\"string\">&quot;&quot;</span>), n = (n || <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^[\\s\\u200b ]/g</span>, <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\s\\u200b ]$/g</span>, <span class=\"string\">&quot;&quot;</span>), ! <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"regexp\">/^[^\\s@&#x27;&quot;/\\\\=?]+@[^\\s@&#x27;&quot;/\\\\]+\\.[^\\s@&#x27;&quot;/\\\\]+$/</span>.<span class=\"title function_\">test</span>(e)</span><br><span class=\"line\">            &#125;(e)) <span class=\"keyword\">return</span> [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid email address&quot;</span>];</span><br><span class=\"line\">        <span class=\"comment\">//if (!quickValidate(n)) return [!1, &quot;Please input a valid license code&quot;];</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> i = &#123;</span><br><span class=\"line\">            <span class=\"attr\">v</span>: <span class=\"title function_\">getOS</span>() + <span class=\"string\">&quot;|&quot;</span> + app.<span class=\"title function_\">getVersion</span>(),</span><br><span class=\"line\">            <span class=\"attr\">license</span>: n,</span><br><span class=\"line\">            <span class=\"attr\">email</span>: e,</span><br><span class=\"line\">            <span class=\"attr\">l</span>: <span class=\"keyword\">await</span> <span class=\"title function_\">getComputerName</span>(),</span><br><span class=\"line\">            <span class=\"attr\">f</span>: <span class=\"keyword\">await</span> <span class=\"title function_\">getFingerPrint</span>(),</span><br><span class=\"line\">            <span class=\"attr\">u</span>: app.<span class=\"property\">setting</span>.<span class=\"title function_\">generateUUID</span>(),</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> ? <span class=\"string\">&quot;dev&quot;</span> : <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">force</span>: t</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> e = &#123;</span><br><span class=\"line\">                <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    <span class=\"attr\">msg</span>: <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                       <span class=\"attr\">deviceId</span>: i.<span class=\"property\">u</span>,</span><br><span class=\"line\">                       <span class=\"attr\">fingerprint</span>: i.<span class=\"property\">f</span>,</span><br><span class=\"line\">                       <span class=\"attr\">email</span>: i.<span class=\"property\">email</span>,</span><br><span class=\"line\">                       <span class=\"attr\">license</span>: i.<span class=\"property\">license</span>,      </span><br><span class=\"line\">                       <span class=\"attr\">version</span>: i.<span class=\"property\">v</span>,</span><br><span class=\"line\">                       <span class=\"attr\">date</span>: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;),<span class=\"string\">&quot;utf8&quot;</span>).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;base64&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(e.<span class=\"property\">data</span>), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[License] response code is <span class=\"subst\">$&#123;e.data.code&#125;</span>`</span>), e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">SUCCESS</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">writeActivationInfo</span>(e.<span class=\"property\">data</span>.<span class=\"property\">msg</span>) ? [!<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>] : [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid license code&quot;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">OUT_OF_LIMIT</span>) <span class=\"keyword\">return</span> t ? <span class=\"keyword\">await</span> <span class=\"title function_\">writeActivationInfo</span>(e.<span class=\"property\">data</span>.<span class=\"property\">msg</span>) ? [!<span class=\"number\">0</span>, <span class=\"string\">&quot;Your license has exceeded the max devices numbers.\\nThe oldest device was unregistered automatically.&quot;</span>] : [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid license code&quot;</span>] : [<span class=\"string\">&quot;confirm&quot;</span>, <span class=\"string\">&#x27;Your license has exceeded the max devices numbers.\\nIf you click &quot;Continue Activation&quot;, this device will be activated and the oldest device will be unregistered automatically.&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">INVALIDATE</span>) <span class=\"keyword\">return</span> [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Please input a valid license code&quot;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">code</span> == <span class=\"title class_\">ActiveResponseCode</span>.<span class=\"property\">WRONG_USER</span>) <span class=\"keyword\">return</span> [!<span class=\"number\">1</span>, <span class=\"string\">&quot;This license code has been used with a different email address.&quot;</span>]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.<span class=\"property\">response</span> &amp;&amp; e.<span class=\"property\">response</span>.<span class=\"property\">code</span> ? (<span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">`[License] error from server <span class=\"subst\">$&#123;e.response.code&#125;</span>`</span>), [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Unknown Error. Please contact hi@typora.io&quot;</span>]) : (<span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureException</span>(e, &#123;</span><br><span class=\"line\">                <span class=\"attr\">level</span>: <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">            &#125;), <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e.<span class=\"property\">stack</span>), [!<span class=\"number\">1</span>, <span class=\"string\">&quot;Failed to access the license server. Please check your network or try again later.&quot;</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    writeActivationInfo = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"title function_\">decrypt</span>(e) || &#123;&#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">deviceId</span>: t,</span><br><span class=\"line\">                <span class=\"attr\">fingerprint</span>: i,</span><br><span class=\"line\">                <span class=\"attr\">email</span>: a,</span><br><span class=\"line\">                <span class=\"attr\">license</span>: s,</span><br><span class=\"line\">                <span class=\"attr\">version</span>: o,</span><br><span class=\"line\">                <span class=\"attr\">date</span>: r</span><br><span class=\"line\">            &#125; = n;</span><br><span class=\"line\">            <span class=\"title function_\">fillLicense</span>(a, s);</span><br><span class=\"line\">            <span class=\"title function_\">getLicenseLocalStore</span>().<span class=\"title function_\">put</span>(<span class=\"string\">&quot;SLicense&quot;</span>, <span class=\"string\">`<span class=\"subst\">$&#123;e&#125;</span>#0#<span class=\"subst\">$&#123;(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).toLocaleDateString(<span class=\"string\">&quot;en-US&quot;</span>)&#125;</span>`</span>);</span><br><span class=\"line\">            hasLicense = !<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//return i == await getFingerPrint() &amp;&amp; a &amp;&amp; s ? (fillLicense(a, s), getLicenseLocalStore().put(&quot;SLicense&quot;, `$&#123;e&#125;#0#$&#123;(new Date).toLocaleDateString(&quot;en-US&quot;)&#125;`), hasLicense = !0, !0) : (console.log(&quot;[License] validate server return fail&quot;), unfillLicense(), !1)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doDeactivation = <span class=\"title function_\">async</span>() =&gt; &#123;</span><br><span class=\"line\">        hasLicense &amp;&amp; email &amp;&amp; licenseCode || <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;doDeactivation on unregistered device&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">deviceId</span>: e</span><br><span class=\"line\">        &#125; = <span class=\"title function_\">readLicenseInfo</span>() || &#123;&#125;;</span><br><span class=\"line\">        <span class=\"title function_\">unfillLicense</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;addLicense&quot;</span>, <span class=\"title function_\">async</span>(e, &#123;</span><br><span class=\"line\">    <span class=\"attr\">email</span>: n,</span><br><span class=\"line\">    <span class=\"attr\">license</span>: t,</span><br><span class=\"line\">    <span class=\"attr\">force</span>: i</span><br><span class=\"line\">&#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;handle addLicense&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">doActivation</span>(n, t, i)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e.<span class=\"property\">stack</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;), ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;license.show&quot;</span>, <span class=\"function\">(<span class=\"params\">e, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">showLicensePanel</span>(n || !<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;), ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;license.show.debug&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    licensePanel &amp;&amp; licensePanel.<span class=\"property\">webContents</span>.<span class=\"title function_\">openDevTools</span>()</span><br><span class=\"line\">&#125;), ipc.<span class=\"title function_\">handle</span>(<span class=\"string\">&quot;removeLicense&quot;</span>, <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;handle removeLicense&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">doDeactivation</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e.<span class=\"property\">stack</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    start = <span class=\"title function_\">async</span>(e, n) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`start LM in devVersion=<span class=\"subst\">$&#123;<span class=\"variable language_\">global</span>.devVersion||!<span class=\"number\">1</span>&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">await</span> <span class=\"title function_\">getFingerPrint</span>(), !e &amp;&amp; n || isLinux || (<span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span> || !n || n.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;dev&quot;</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp; (<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;re-write InstallDate&quot;</span>), <span class=\"keyword\">await</span> <span class=\"title function_\">writeInstallDate</span>()), <span class=\"title function_\">validateDevTest</span>(), <span class=\"title function_\">watchLicense</span>(e)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureException</span>(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shouldShowNoLicenseHint = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> !hasLicense &amp;&amp; (e || !isLinux) &amp;&amp; !<span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span>,</span><br><span class=\"line\">    getHasLicense = <span class=\"function\">() =&gt;</span> hasLicense,</span><br><span class=\"line\">    appendLicenseHintIfNeeded = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        licenseInitialed &amp;&amp; <span class=\"title function_\">shouldShowNoLicenseHint</span>() &amp;&amp; <span class=\"title function_\">onUnfillLicense</span>(e)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genClassName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>).<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;txxxx-xxxx-xxxxy&quot;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[x]/g</span>, <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = (e + <span class=\"number\">16</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) % <span class=\"number\">16</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(e / <span class=\"number\">16</span>), t.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> className = <span class=\"title function_\">genClassName</span>(),</span><br><span class=\"line\">    onFillLicense = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">BrowserWindow</span>.<span class=\"title function_\">getAllWindows</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            e.<span class=\"property\">webContents</span>.<span class=\"title function_\">executeJavaScript</span>(<span class=\"string\">`try&#123;document.querySelector(&quot;.<span class=\"subst\">$&#123;className&#125;</span>&quot;).remove();&#125;catch(e)&#123;&#125;;File.option &amp;&amp; (File.option.hasLicense = true);File.megaMenu &amp;&amp; File.megaMenu.forceReload();0;`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onUnfillLicense = <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isLinux || <span class=\"variable language_\">global</span>.<span class=\"property\">devVersion</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title class_\">Dict</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"string\">`.typora-sourceview-on .<span class=\"subst\">$&#123;className&#125;</span>&#123;\\n\\t\\tdisplay:none;\\n\\t&#125;\\n\\t.<span class=\"subst\">$&#123;className&#125;</span> &#123;\\n\\t\\tposition: fixed;\\n    bottom: 2px;\\n    z-index: 9999;\\n    left: 70px;\\n    font-size: 12px;\\n    line-height: 24px;\\n    background: rgb(120 120 120 / 30%);\\n    padding: 0 12px;\\n    color: var(--text-color);\\n    border-radius: 4px;\\n    cursor: pointer;\\n\\t&#125;\\n\\t.pin-outline .<span class=\"subst\">$&#123;className&#125;</span>&#123;\\n\\t\\tleft:calc(var(--sidebar-width) + 70px);\\n\\t&#125;`</span>,</span><br><span class=\"line\">            t = <span class=\"string\">`if(window.File.option)&#123;\\n\\t\\tFile.option.hasLicense = false; \\n\\t\\tFile.megaMenu &amp;&amp; File.megaMenu.forceReload();\\n\\t\\tif(!document.querySelector(&quot;.<span class=\"subst\">$&#123;className&#125;</span>&quot;)) &#123;\\n\\t\\t\\tconst pos = Math.round(Math.random() * document.body.children.length);\\n\\t\\t\\tconst dom = document.createElement(&quot;DIV&quot;);\\n\\t\\t\\tdom.innerText = &quot;<span class=\"subst\">$&#123;Dict.getPanelString(<span class=\"string\">&quot;UNREGISTERED&quot;</span>)&#125;</span> Ã&quot;;\\n\\t\\t\\tdom.classList.add(&quot;<span class=\"subst\">$&#123;className&#125;</span>&quot;);\\n\\t\\t\\tdom.style = &quot;position: fixed !important;bottom: 2px !important; display: block !important; opacity: 1 !important; height: auto !important; width: auto !important; z-index: 9999 !important;&quot;\\n\\t\\t\\tdom.setAttribute(&quot;role&quot;, &quot;button&quot;);\\n\\t\\t\\tdom.addEventListener(&quot;click&quot;, () =&gt; &#123;\\n\\t\\t\\t\\tdom.remove();\\n\\t\\t\\t\\treqnode(&quot;electron&quot;).ipcRenderer.invoke(&quot;license.show&quot;);\\n\\t\\t\\t&#125;);\\n\\t\\t\\tdocument.body.insertBefore(dom, document.body.children[pos]);\\n\\t\\t&#125;\\n\\t&#125;;1;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">            e.<span class=\"property\">webContents</span>.<span class=\"title function_\">insertCSS</span>(n), e.<span class=\"property\">webContents</span>.<span class=\"title function_\">executeJavaScript</span>(t)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e ? <span class=\"title function_\">i</span>(e) : <span class=\"title class_\">BrowserWindow</span>.<span class=\"title function_\">getAllWindows</span>().<span class=\"title function_\">forEach</span>(i)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">shouldShowNoLicenseHint</span> = shouldShowNoLicenseHint, <span class=\"built_in\">exports</span>.<span class=\"property\">start</span> = start, <span class=\"built_in\">exports</span>.<span class=\"property\">showLicensePanel</span> = showLicensePanel, <span class=\"built_in\">exports</span>.<span class=\"property\">showWelcomePanel</span> = showWelcomePanel, <span class=\"built_in\">exports</span>.<span class=\"property\">appendLicenseHintIfNeeded</span> = appendLicenseHintIfNeeded, <span class=\"built_in\">exports</span>.<span class=\"property\">getHasLicense</span> = getHasLicense, <span class=\"built_in\">exports</span>.<span class=\"property\">showLicensePanelIfNeeded</span> = showLicensePanelIfNeeded;</span><br></pre></td></tr></table></figure>\n\n<p>patch掉网络验证，对doActivation的验证直接改成永恒真，使得邮箱和序列号随便填即可激活，再改写hasLicense的值，使得下次登录时访问许可证信息时得到软件已被激活的信息，再打包生成app.asar，打开软件随便输入序列号和邮箱即可</p>\n<h2 id=\"5-破解成功\"><a href=\"#5-破解成功\" class=\"headerlink\" title=\"5. 破解成功\"></a>5. 破解成功</h2><p><img src=\"https://s2.loli.net/2024/06/23/HqhbGS7mjDBeLuI.png\"></p>"},{"title":"PE文件笔记","date":"2023-05-22T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg","thumbnail":"https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n跟着b站学习完了PE结构，自己再整理和梳理一遍，巩固一下记忆！<!-- more -->\n\n文件结构图：\n\n![1379525-20191026162634249-935893360](https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg)\n\n## 1. PE文件简介\n\nPE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）\n\nPE文件有自己的一种文件格式，叫做PE文件格式，它包含了可执行文件的描述信息，以及程序运行时需要的数据。PE文件格式由以下几个部分组成：\n\n<!-- more -->\n\n- MS-DOS头部：这是为了兼容MS-DOS系统而保留的一个头部结构，它包含了一些基本信息，如EXE标志、重定位表偏移量、PE头偏移量等 \n- DOS Stub：这是一个可选的字节块，它通常是一个显示“此程序不能在DOS模式下运行”的消息的程序 \n- PE头标识：这是一个四字节的标识，其内容固定为“PE00”，用来表示这是一个PE文件 \n- 标准PE头：这是一个20字节的结构，它记录了PE文件的全局属性，如运行平台、节的数量、创建时间等 \n- 扩展PE头：这是一个224字节的结构，它记录了PE文件执行时的一些重要信息，如入口地址、装载基址、节对齐粒度、校验和等 \n- 数据目录：这是一个128字节的结构，它记录了PE文件中一些特殊数据的位置和大小，如导入表、导出表、资源表等 \n- 节表：这是一个由若干个40字节的结构组成的表格，它记录了PE文件中每个节的名称、位置、大小、属性等信息 \n- 节数据：这是PE文件中实际存放代码和数据的部分，它由若干个节组成，每个节对应于节表中的一项\n\n\n\n## 2. Dos头解析\n\nDOS头是PE文件开头的一个固定长度的结构体，是为了兼容MS-DOS系统而保留的一个头部结构，大小0x40字节。包含如下信息\n\n> - **e_magic**：一个WORD类型，值是一个常数0x4D5A，用文本编辑器查看该值位 MZ，可执行文件必须都是 MZ 开头\n> - **e_lfanew**：为32位可执行文件扩展的域，用来表示DOS头之后的PE头相对文件起始地址的偏移\n> - e_cblp：最后一页中字节数\n> - e_cp：文件中页数\n> - e_crlc：重定位项数\n> - e_cparhdr：头部占用的内存段数\n> - e_minalloc：最小需要的附加内存段数\n> - e_maxalloc：最大需要的附加内存段数\n> - e_ss：初始SS值（相对于段起始地址）\n> - e_sp：初始SP值\n> - e_csum：校验和\n> - e_ip：初始IP值（相对于段起始地址）\n> - e_cs：初始CS值（相对于段起始地址）\n> - e_lfarlc：重定位表相对于文件起始地址的偏移\n> - e_ovno：覆盖号\n> - e_res：保留字\n> - e_oemid：OEM标识符\n> - e_oeminfo：OEM信息\n> - e_res2：保留字\n\n在DOS头中比较重要的两个参数是e_magic和e_lfanew，前者是PE文件标识头，后者是PE文件头的相对文件起始地址的偏移。\n\n![Typora卸载程序的DOS头](https://s2.loli.net/2024/06/23/3AX8hfVCqtcaS9r.png)\n\ne_magic是前两个字节，对应的是字符串是MZ，e_ifanew是后四个字节，因为是小端序，所以对应的值是0x100，也就是说PE文件头对应偏移是0x100\n\n![PE文件头偏移](https://s2.loli.net/2024/06/23/WB6zye9vVgiomGl.png)\n\n在DOS头之后，还有一段DOS块，这段空间是由编译器生成，用来存储一些程序运行的信息，可以随意更改，对程序没有影响\n\n## 3. PE头解析\n\nPE头又叫NT头，是整个PE文件真正的头部，共有三个字段\n\n> 1. `DWORD Signature` PE文件头标识，两个字节，一般是504500\n> 2. `struct IMAGE_FILE_HEADER FileHeader` 结构体，文件头\n> 3. `struct IMAGE_OPTIONAL_HEADER32 OptionalHeader`结构体， 可选文件头\n\n文件头结构体包含6个字段\n\n> 1.  `enum IMAGE_MACHINE Machine` WORD类型，程序允许的的CPU型号，为0则支持所有CPU\n> 2.  `WORD NumberOfSections` **文件中区段的数量**\n> 3.  `time_t TimeDateStamp` 时间戳\n> 4.  `DWORD PointerToSymbolTable` \n> 5.  `DWORD NumberOfSymbols` \n> 6.  `WORD SizeOfOptionalHeader`  **可选PE头的大小**，32位默认0xE0，64位默认0xF0\n> 7.  `struct FILE_CHARACTERISTICS Characteristics` WORD，文件属性，通过16位二进制控制是否可执行，是否是dll之类的文件属性\n\nTypora卸载程序在DIE分析结果如下\n\n![在DIE下Typora卸载程序文件头](https://s2.loli.net/2024/06/23/tuRvPNJUcBT1Fnm.png)\n\n64位下可选PE头包含以下字段\n\n> 1. `enum OPTIONAL_MAGIC Magic` 标识64位32位，前者20B，后者10B\n> 2.  `BYTE MajorLinkerVersion`  \n> 3.  `BYTE MinorLinkerVersion` \n> 4.  `DWORD SizeOfCode` 所有代码段的总大小，按照文件对齐后的大小\n> 5.  `DWORD SizeOfInitializedData` 已初始化的数据大小，按照文件对齐\n> 6.  `DWORD SizeOfUninitializedData` 未初始化的数据大小，按照文件对齐\n> 7.  `DWORD AddressOfEntryPoint` **程序入口的OEP** 存储的是一个偏移值，程序入口的**内存偏移**\n> 8.  `DWORD BaseOfCode` 代码开始地址\n> 9.  `DWORD BaseOfData` 数据开始地址\n> 10.  `DWORD ImageBase` **内存镜像地址**，有可能是动态的，在`DLL_CHARACTERISTICS DllCharacteristics`中定义是否动态\n> 11.  `DWORD SectionAlignment` 内存对齐大小\n> 12.  `DWORD FileAlignment` 文件对齐大小\n> 13.  `WORD MajorOperatingSystemVersion`\n> 14.  `WORD MinorOperatingSystemVersion`\n> 15.  `WORD MajorImageVersion`\n> 16.  `WORD MinorImageVersion`\n> 17.  `WORD MajorSubsystemVersion`\n> 18.  `WORD MinorSubsystemVersion`\n> 19.  `DWORD Win32VersionValue`\n> 20.  `DWORD SizeOfImage` 文件在内存中的大小，按照内存对齐后的大小\n> 21.  `DWORD SizeOfHeaders` DOS头+NT头+标准PE头+可选PE头+区段头，按照文件对齐后的大小\n> 22.  `DWORD CheckSum`\n> 23.  `enum IMAGE_SUBSYSTEM Subsystem`\n> 24.  `struct DLL_CHARACTERISTICS DllCharacteristics`\n> 25.  `DWORD SizeOfStackReserve`\n> 26.  `DWORD SizeOfStackCommit`\n> 27.  `DWORD SizeOfHeapReserve`\n> 28.  `DWORD SizeOfHeapCommit`\n> 29.  `DWORD LoaderFlags`\n> 30.  `DWORD NumberOfRvaAndSizes` 数据目录表的个数\n> 31.  `struct IMAGE_DATA_DIRECTORY_ARRAY DataDirArray` **数据目录表数组**在导出表导入表里分析\n\n![可选头中动静态地址分析](https://s2.loli.net/2024/06/23/SajxQtylMvhB24J.png)\n\n在VS中控制该属性的地方：\n\n![动态基址生成文件](https://s2.loli.net/2024/06/23/4IHRYOuwKins9f3.png)\n\n数据目录表数组以及数据目录表结构体：\n\n```c++\n//数据目录表数组\nstruct IMAGE_DATA_DIRECTORY Export//导出表\nstruct IMAGE_DATA_DIRECTORY Import//导入表\nstruct IMAGE_DATA_DIRECTORY Resource//资源\nstruct IMAGE_DATA_DIRECTORY Exception//异常\nstruct IMAGE_DATA_DIRECTORY Security//安全\nstruct IMAGE_DATA_DIRECTORY BaseRelocationTable//重定位表\nstruct IMAGE_DATA_DIRECTORY DebugDirectory//调试信息\nstruct IMAGE_DATA_DIRECTORY CopyrightOrArchitectureSpecificData//版权信息\nstruct IMAGE_DATA_DIRECTORY GlobalPtr//RVA OF GP\nstruct IMAGE_DATA_DIRECTORY TLSDirectory//TLS directory\nstruct IMAGE_DATA_DIRECTORY LoadConfigurationDirectory\nstruct IMAGE_DATA_DIRECTORY BoundImportDirectory\nstruct IMAGE_DATA_DIRECTORY ImportAddressTable//导入函数地址表\nstruct IMAGE_DATA_DIRECTORY DelayLoadImportDescriptors\nstruct IMAGE_DATA_DIRECTORY COMRuntimedescriptor\nstruct IMAGE_DATA_DIRECTORY Reserved\n\n//表的结构体：\n    typedef struct\n{\n    DWORD   VirtualAddress;//真正表结构体的内存偏移\n    DWORD   Size;//大小，可被修改，没什么用\n} IMAGE_DATA_DIRECTORY;\n\n\n```\n\n\n\n## 4. 区段头分析\n\n010中exe模版下的区段头结构体，数量取决于PE文件头的NumberOfSections\n\n```c++\ntypedef struct\n{\n    BYTE    Name[8] <comment=\"can end without zero\">;\n    //区段名称，字符串不用以0结尾\n    union\n    {\n        DWORD PhysicalAddress;\n        DWORD VirtualSize;\n    } Misc;//该区段在内存中的真实大小\n    DWORD   VirtualAddress;     //区段在内存中的偏移地址    \n    DWORD   SizeOfRawData;    //区段在对齐后的大小      \n    DWORD   PointerToRawData; //区段在文件中的偏移位置       \n    DWORD   PointerToRelocations;//\n    DWORD   PointerToLinenumbers;\n    WORD    NumberOfRelocations;\n    WORD    NumberOfLinenumbers;\n    SECTION_CHARACTERISTICS Characteristics;//区段属性\n} IMAGE_SECTION_HEADER \n\n```\n\n在010中区段头数量和名称分析如下\n\n![image-20230920194909946](https://s2.loli.net/2024/06/23/l8pyL6dSfEg5ZH3.png)\n\n##  5. 导出表分析\n\n导出表结构体：\n\n```c++\ntypedef struct\n{\n    DWORD   Characteristics;\n    time_t  TimeDateStamp;//时间戳\n    WORD    MajorVersion;\n    WORD    MinorVersion;\n    DWORD   Name;//导出表名称\n    DWORD   Base;//导出表起始序号\n    DWORD   NumberOfFunctions;//导出函数数量 = 终止序号-起始序号+1\n    DWORD   NumberOfNames;//以名称导出函数的个数\n    DWORD   AddressOfFunctions;//EAT 导出函数地址表 \n    DWORD   AddressOfNames;//ENT 导出函数名称表         \n    DWORD   AddressOfNameOrdinals; //EOT 导出函数序号表  \n} IMAGE_EXPORT_DIRECTORY ;\n\n```\n\n结构体中地址表。名称表，序号表都指的是内存偏移，也就是RVA，推到公式是RVA = FOA +filebuff\n\n## 6. 导入表分析\n\n跟导出表不同，导入表一个程序可以有多个\n\n导入表结构体：\n\n```c++\ntypedef struct\n{\n    union\n    {\n        ULONG   Characteristics;\n        ULONG   OriginalFirstThunk ;//RVA，指向INT\n    } DUMMYUNIONNAME;\n    ULONG   TimeDateStamp;//时间戳，如果不与dll绑定时，为0\n    ULONG   ForwarderChain;//\n    ULONG   Name;//RVA dll的名称\n    ULONG   FirstThunk;//RVA to IAT\n} IMAGE_IMPORT_DESCRIPTOR \n```\n\n​n\n## 7. 重定位表\n\n```c++\ntypedef struct\n{\n    DWORD   VirtualAddress <format=hex,comment=CommentRVA2FOA>;\n    DWORD   SizeOfBlock;\n//  WORD    TypeOffset[1];\n} IMAGE_BASE_RELOCATION <comment=CommentImageBaseRelocation>;\n```\n\n\n\n## 8. 利用TEB和PEB找到核心模块的信息\n\nPEB：Process Environment Block 进程环境块，存放进程相关信息\n\nTEB：Thread Environment Block  线程环境块\n\n> PEB和TEB分别是进程环境块和线程环境块，它们是存放进程和线程信息的结构体。PEB和TEB的结构体成员有很多，其中一些是用于反调试技术的。PEB和TEB的访问方法有以下几种：\n>\n> - 通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址\n> - 通过Ntdll.NtCurrentTeb()函数获取当前线程的TEB地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址\n> - 通过GetModuleHandle()函数获取进程的ImageBase地址，然后通过ImageBase地址加上偏移量获取PEB的地址\n\nPEB结构体定义\n\n```c++\ntypedef struct _PEB {\n  BYTE                          Reserved1[2];\n  BYTE                          BeingDebugged;\n  BYTE                          Reserved2[1];\n  PVOID                         Reserved3[2];\n  PPEB_LDR_DATA                 Ldr;  //偏移0xc\n  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;\n  PVOID                         Reserved4[3];\n  PVOID                         AtlThunkSListPtr;\n  PVOID                         Reserved5;\n  ULONG                         Reserved6;\n  PVOID                         Reserved7;\n  ULONG                         Reserved8;\n  ULONG                         AtlThunkSListPtr32;\n  PVOID                         Reserved9[45];\n  BYTE                          Reserved10[96];\n  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;\n  BYTE                          Reserved11[128];\n  PVOID                         Reserved12[1];\n  ULONG                         SessionId;\n} PEB, *PPEB;\n\n```\n\nPPEB_LDR_DATA结构体定义\n\n```c++\ntypedef struct _PEB_LDR_DATA {\n  BYTE Reserved1 [8];\n  PVOID Reserved2 [3];\n  LIST_ENTRY InMemoryOrderModuleList;//载入顺序排序的dll\n  LIST_ENTRY InLoadOrderModuleList;//内存排序的dll\n  LIST_ENTRY InInitializationOrderModuleList;//初始化排序的dll，偏移0x1c\n} PEB_LDR_DATA, *PPEB_LDR_DATA;\n```\n\nLIST_ENTRY结构体定义\n\n```c++\ntypedef struct _LIST_ENTRY {\n  struct _LIST_ENTRY *Flink;//下一个节点的指针\n  struct _LIST_ENTRY *Blink;//上一个节点的指针\n} LIST_ENTRY, *PLIST_ENTRY, *PRLIST_ENTRY;\n```\n\n获取kernel32.dll或者kernerbase.dll的模块信息\n\n> [kernel32.dll和kernerbase.dll都是Windows操作系统的重要文件，它们是NT内核系统的底层API接口的DLL文件，与其他应用程序和运行库进行交互。](https://bing.com/search?q=kernel32.dll或者kernerbase.dll都代表什么模块)[1](https://bing.com/search?q=kernel32.dll或者kernerbase.dll都代表什么模块)\n>\n> [kernel32.dll和kernerbase.dll有相同的功能，但是它们的区别在于，kernel32.dll是一个向后兼容的文件，它包含了一些旧版本的Windows API函数，而kernerbase.dll是一个新的文件，它包含了一些新版本的Windows API函数。](https://zhuanlan.zhihu.com/p/242615448)\n\nkernel32.dll和kernerbase.dll包含**GetProcAddress**，***LoadLibraryA***，***LoadModule***等等\n\n更多API->[Geoff Chappell, Software Analyst](https://www.geoffchappell.com/)\n\nuser32.dll->[User32大全详解-CSDN博客](https://blog.csdn.net/qq_38406587/article/details/105505007)\n\n `mov esi,dword ptr fs:[0x30] ` 获取PEB地址\n\n`mov esi,[esi+0xc]` 获取Ldr地址\n\n`mov esi,[esi+0x1c]` 获取InInitializationOrderModuleList\n\n`mov esi,[esi]` 获取InInitializationOrderModuleList的第二项，esi既是LIST_ENTRY结构体地址，也是下一个节点指针的地址\n\n`mov esi,[esi+0x8] ` 模块信息，kernel32或者kernerbase模块基址\n\n> 拿到了dll模块基址，通过基址和固定偏移来访问导出表，再通过导出表和定义好的字符串（函数名称）比较来获取模块指定函数——**GetProcAddress**，***LoadLibraryA***等等，到这就可以利用函数地址调用指定函数了\n\n`mov edx,esi` 保存模块基址\n`mov esi,[esi+0x3c]` 获取NT头偏移\n`lea esi,[edx+esi] ` 得到NT头地址\n`mov esi,[esi+0x78]` 得到导出表RVA\n`lea esi,[edx+esi] ` 得到导出表VA\n`mov edi,[esi+0x1c]` 得到EAT的RVA（地址表）\n`lea edi,[edi+edx]` 得到EAT的RA\n`mov [ebp-0x4],edi` 保存在栈中\n`mov edi,[esi+0x20]` 得到ENT的RVA（名称表）\n`lea edi,[edx+edi]` 得到ENT的VA\n`mov [ebp-0x8],edi` 保存在栈中\n`mov edi,[esi+0x24]` 得到EOT的RVA（序号表）\n`lea edi,[edx+edi]` 得到EOT的VA\n`mov [ebp-0xc],edi` 保存在栈中\n\n**LDR_DATA_TABLE_ENTRY**结构体是一个用来存放模块信息的结构体，它的定义如下：\n\n```c++\ntypedef struct _LDR_DATA_TABLE_ENTRY {\n  PVOID Reserved1[2];\n  LIST_ENTRY InMemoryOrderLinks;//双向链表连接所有模块信息\n  PVOID Reserved2[2];\n  PVOID DllBase;//模块基址\n  PVOID EntryPoint;//模块入口点\n  PVOID Reserved3;\n  UNICODE_STRING FullDllName;//模块完整名称\n  BYTE Reserved4[8];\n  PVOID Reserved5[3];\n  union {\n    ULONG CheckSum;\n    PVOID Reserved6;\n  };\n  ULONG TimeDateStamp;\n} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;\n\n```\n\n> [其中，Reserved1，Reserved2，Reserved3，Reserved4，Reserved5和Reserved6都是保留供操作系统内部使用的字段，不对外公开。DllBase是模块的基址，EntryPoint是模块的入口点，FullDllName是模块的完整名称，CheckSum是模块的校验和，TimeDateStamp是模块的时间戳。InMemoryOrderLinks是一个双向链表节点，它用来将所有的模块信息连接起来。](https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data)\n\n通过导出表kernel32.dll获得其中的“LoadLibraryA\" 和 \"GetProAddress\"\n\n## 9. 增加区段头向PE文件中植入代码\n\n\n\n**ShellCode：**--执行打印helloworld的代码\n$$\n\"\\x60\\x8B\\xEC\\x6A\\x00\\x68\\x72\\x6C\\x64\\x21\\x68\\x6F\\x20\\x77\\x6F\\x68\\x68\\x65\\x6C\\x6C\\x68\\x73\\x73\\x00\\x00\\x68\\x64\\x64\\x72\\x65\\x68\\x72\\x6F\\x63\\x41\\x68\\x47\\x65\\x74\\x50\\x6A\\x00\\x68\\x61\\x72\\x79\\x41\\x68\\x4C\\x69\\x62\\x72\\x68\\x4C\\x6F\\x61\\x64\\x8B\\xCC\\x51\\xE8\\x8F\\x00\\x00\\x00\\x8B\\xE5\\x61\\xE9\\xF7\\x70\\xFB\\xFF\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x56\\x64\\x8B\\x35\\x30\\x00\\x00\\x00\\x8B\\x76\\x0C\\x8B\\x76\\x1C\\x8B\\x36\\x8B\\x76\\x08\\x8B\\xC6\\x5E\\x8B\\xE5\\x5D\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x8B\\x55\\x08\\x8B\\x72\\x3C\\x8D\\x34\\x16\\x8B\\x76\\x78\\x8D\\x34\\x32\\x8B\\x7E\\x1C\\x8D\\x3C\\x17\\x89\\x7D\\xFC\\x8B\\x7E\\x20\\x8D\\x3C\\x17\\x89\\x7D\\xF8\\x8B\\x7E\\x24\\x8D\\x3C\\x17\\x89\\x7D\\xF4\\x33\\xC0\\xEB\\x01\\x40\\x8B\\x75\\xF8\\x8B\\x34\\x86\\x8D\\x34\\x16\\x8B\\x7D\\x0C\\x8B\\x4D\\x10\\xF3\\xA6\\x8B\\x75\\xF4\\x75\\xE9\\x8B\\x75\\xF4\\x33\\xFF\\x66\\x8B\\x3C\\x46\\x8B\\x55\\xFC\\x8B\\x34\\xBA\\x8B\\x55\\x08\\x8D\\x04\\x16\\x8B\\xE5\\x5D\\xC2\\x0C\\x00\\x55\\x8B\\xEC\\x83\\xEC\\x10\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xFC\\x8D\\x4D\\x0C\\x6A\\x0C\\x51\\x50\\xE8\\x80\\xFF\\xFF\\xFF\\x89\\x45\\xF8\\x6A\\x0E\\x8D\\x4D\\x1C\\x51\\xFF\\x75\\xFC\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xF4\\x68\\x6C\\x6C\\x00\\x00\\x68\\x72\\x74\\x2E\\x64\\x68\\x6D\\x73\\x76\\x63\\x36\\x8D\\x4D\\xE4\\x51\\xFF\\x55\\xF8\\x68\\x74\\x66\\x00\\x00\\x68\\x70\\x72\\x69\\x6E\\x8D\\x4D\\xDC\\x51\\x50\\xFF\\x55\\xF4\\x8D\\x4D\\x2C\\x51\\xFF\\xD0\\x8B\\xE5\\x5D\\xC3\"\n$$\n\n>\n> 1. 在文件末尾增加N字节给自己的代码提供空间\n>\n> 2. 向最后一个区段后添加一个和text属性相同的区段\n>\n> 3. 在union misc属性下填入N\n>\n> 4. 在VirtualAddress属性下填入M\n>\n>   M = VirtualAddress(上一个区段)+内存对齐值*（max(SizeOfRawData,VirtualSize)/内存对齐值)\n>\n> 5. 在SizeOfRawData属性下填入N\n>\n> 6. 在PointerToRawData属性下填入X\n>\n>   X = SizeOfRawData(上一个区段)+PointerToRawData(上一个区段)\n>\n> 7. 在文件头的区段数量属性上加一\n> 8. 在可选文件头的SizeOfImage属性上加N、\n> 9. 文件末尾填入ShellCode\n> 10. 修改OEP\n>\n\n# 附录，收集常见段的含义\n\nrdata段\n\n> [rdata段是PE文件中的一个区段，它存储了程序用到的资源数据，如图标、字符串、位图等](https://www.r-project.org/)[1](https://www.r-project.org/)[。rdata段也可以存储一些只读的常量数据，如函数名、类名、导入表等](https://www.r-project.org/about.html)[2](https://www.r-project.org/about.html)。\n>\n> [rdata段是可选的，不是所有的PE文件都有它。如果有rdata段，它通常位于text段和data段之间](https://blog.csdn.net/qq_42458954/article/details/109286979)[3](https://blog.csdn.net/qq_42458954/article/details/109286979)[。rdata段的属性是只读的，不能被修改](https://blog.csdn.net/Simon798/article/details/96876910)[4](https://blog.csdn.net/Simon798/article/details/96876910)。\n\nbss段\n\n> [bss段是PE文件中的一个区段，它存储了程序中未初始化或初始化为零的全局变量和静态局部变量](https://bing.com/search?q=bss段)[1](https://bing.com/search?q=bss段)[。bss段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面](https://zh.wikipedia.org/wiki/BSS段)[2](https://zh.wikipedia.org/wiki/BSS段)[。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区](https://zh.wikipedia.org/wiki/BSS段)[2](https://zh.wikipedia.org/wiki/BSS段)。\n>\n> [bss段是可选的，不是所有的PE文件都有它。如果有bss段，它通常位于text段和data段之间](https://zhuanlan.zhihu.com/p/348026261)[3](https://zhuanlan.zhihu.com/p/348026261)[。bss段的属性是只读的，不能被修改](https://zhuanlan.zhihu.com/p/610583072)[4](https://zhuanlan.zhihu.com/p/610583072)。\n\n","source":"_posts/PE文件解析.md","raw":"---\ntitle: PE文件笔记\ndate: 2023/5/23\ncategories: 笔记\ntags:\n  - 逆向\nsticky: 100\ncover: https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg\nthumbnail: https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n跟着b站学习完了PE结构，自己再整理和梳理一遍，巩固一下记忆！<!-- more -->\n\n文件结构图：\n\n![1379525-20191026162634249-935893360](https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg)\n\n## 1. PE文件简介\n\nPE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）\n\nPE文件有自己的一种文件格式，叫做PE文件格式，它包含了可执行文件的描述信息，以及程序运行时需要的数据。PE文件格式由以下几个部分组成：\n\n<!-- more -->\n\n- MS-DOS头部：这是为了兼容MS-DOS系统而保留的一个头部结构，它包含了一些基本信息，如EXE标志、重定位表偏移量、PE头偏移量等 \n- DOS Stub：这是一个可选的字节块，它通常是一个显示“此程序不能在DOS模式下运行”的消息的程序 \n- PE头标识：这是一个四字节的标识，其内容固定为“PE00”，用来表示这是一个PE文件 \n- 标准PE头：这是一个20字节的结构，它记录了PE文件的全局属性，如运行平台、节的数量、创建时间等 \n- 扩展PE头：这是一个224字节的结构，它记录了PE文件执行时的一些重要信息，如入口地址、装载基址、节对齐粒度、校验和等 \n- 数据目录：这是一个128字节的结构，它记录了PE文件中一些特殊数据的位置和大小，如导入表、导出表、资源表等 \n- 节表：这是一个由若干个40字节的结构组成的表格，它记录了PE文件中每个节的名称、位置、大小、属性等信息 \n- 节数据：这是PE文件中实际存放代码和数据的部分，它由若干个节组成，每个节对应于节表中的一项\n\n\n\n## 2. Dos头解析\n\nDOS头是PE文件开头的一个固定长度的结构体，是为了兼容MS-DOS系统而保留的一个头部结构，大小0x40字节。包含如下信息\n\n> - **e_magic**：一个WORD类型，值是一个常数0x4D5A，用文本编辑器查看该值位 MZ，可执行文件必须都是 MZ 开头\n> - **e_lfanew**：为32位可执行文件扩展的域，用来表示DOS头之后的PE头相对文件起始地址的偏移\n> - e_cblp：最后一页中字节数\n> - e_cp：文件中页数\n> - e_crlc：重定位项数\n> - e_cparhdr：头部占用的内存段数\n> - e_minalloc：最小需要的附加内存段数\n> - e_maxalloc：最大需要的附加内存段数\n> - e_ss：初始SS值（相对于段起始地址）\n> - e_sp：初始SP值\n> - e_csum：校验和\n> - e_ip：初始IP值（相对于段起始地址）\n> - e_cs：初始CS值（相对于段起始地址）\n> - e_lfarlc：重定位表相对于文件起始地址的偏移\n> - e_ovno：覆盖号\n> - e_res：保留字\n> - e_oemid：OEM标识符\n> - e_oeminfo：OEM信息\n> - e_res2：保留字\n\n在DOS头中比较重要的两个参数是e_magic和e_lfanew，前者是PE文件标识头，后者是PE文件头的相对文件起始地址的偏移。\n\n![Typora卸载程序的DOS头](https://s2.loli.net/2024/06/23/3AX8hfVCqtcaS9r.png)\n\ne_magic是前两个字节，对应的是字符串是MZ，e_ifanew是后四个字节，因为是小端序，所以对应的值是0x100，也就是说PE文件头对应偏移是0x100\n\n![PE文件头偏移](https://s2.loli.net/2024/06/23/WB6zye9vVgiomGl.png)\n\n在DOS头之后，还有一段DOS块，这段空间是由编译器生成，用来存储一些程序运行的信息，可以随意更改，对程序没有影响\n\n## 3. PE头解析\n\nPE头又叫NT头，是整个PE文件真正的头部，共有三个字段\n\n> 1. `DWORD Signature` PE文件头标识，两个字节，一般是504500\n> 2. `struct IMAGE_FILE_HEADER FileHeader` 结构体，文件头\n> 3. `struct IMAGE_OPTIONAL_HEADER32 OptionalHeader`结构体， 可选文件头\n\n文件头结构体包含6个字段\n\n> 1.  `enum IMAGE_MACHINE Machine` WORD类型，程序允许的的CPU型号，为0则支持所有CPU\n> 2.  `WORD NumberOfSections` **文件中区段的数量**\n> 3.  `time_t TimeDateStamp` 时间戳\n> 4.  `DWORD PointerToSymbolTable` \n> 5.  `DWORD NumberOfSymbols` \n> 6.  `WORD SizeOfOptionalHeader`  **可选PE头的大小**，32位默认0xE0，64位默认0xF0\n> 7.  `struct FILE_CHARACTERISTICS Characteristics` WORD，文件属性，通过16位二进制控制是否可执行，是否是dll之类的文件属性\n\nTypora卸载程序在DIE分析结果如下\n\n![在DIE下Typora卸载程序文件头](https://s2.loli.net/2024/06/23/tuRvPNJUcBT1Fnm.png)\n\n64位下可选PE头包含以下字段\n\n> 1. `enum OPTIONAL_MAGIC Magic` 标识64位32位，前者20B，后者10B\n> 2.  `BYTE MajorLinkerVersion`  \n> 3.  `BYTE MinorLinkerVersion` \n> 4.  `DWORD SizeOfCode` 所有代码段的总大小，按照文件对齐后的大小\n> 5.  `DWORD SizeOfInitializedData` 已初始化的数据大小，按照文件对齐\n> 6.  `DWORD SizeOfUninitializedData` 未初始化的数据大小，按照文件对齐\n> 7.  `DWORD AddressOfEntryPoint` **程序入口的OEP** 存储的是一个偏移值，程序入口的**内存偏移**\n> 8.  `DWORD BaseOfCode` 代码开始地址\n> 9.  `DWORD BaseOfData` 数据开始地址\n> 10.  `DWORD ImageBase` **内存镜像地址**，有可能是动态的，在`DLL_CHARACTERISTICS DllCharacteristics`中定义是否动态\n> 11.  `DWORD SectionAlignment` 内存对齐大小\n> 12.  `DWORD FileAlignment` 文件对齐大小\n> 13.  `WORD MajorOperatingSystemVersion`\n> 14.  `WORD MinorOperatingSystemVersion`\n> 15.  `WORD MajorImageVersion`\n> 16.  `WORD MinorImageVersion`\n> 17.  `WORD MajorSubsystemVersion`\n> 18.  `WORD MinorSubsystemVersion`\n> 19.  `DWORD Win32VersionValue`\n> 20.  `DWORD SizeOfImage` 文件在内存中的大小，按照内存对齐后的大小\n> 21.  `DWORD SizeOfHeaders` DOS头+NT头+标准PE头+可选PE头+区段头，按照文件对齐后的大小\n> 22.  `DWORD CheckSum`\n> 23.  `enum IMAGE_SUBSYSTEM Subsystem`\n> 24.  `struct DLL_CHARACTERISTICS DllCharacteristics`\n> 25.  `DWORD SizeOfStackReserve`\n> 26.  `DWORD SizeOfStackCommit`\n> 27.  `DWORD SizeOfHeapReserve`\n> 28.  `DWORD SizeOfHeapCommit`\n> 29.  `DWORD LoaderFlags`\n> 30.  `DWORD NumberOfRvaAndSizes` 数据目录表的个数\n> 31.  `struct IMAGE_DATA_DIRECTORY_ARRAY DataDirArray` **数据目录表数组**在导出表导入表里分析\n\n![可选头中动静态地址分析](https://s2.loli.net/2024/06/23/SajxQtylMvhB24J.png)\n\n在VS中控制该属性的地方：\n\n![动态基址生成文件](https://s2.loli.net/2024/06/23/4IHRYOuwKins9f3.png)\n\n数据目录表数组以及数据目录表结构体：\n\n```c++\n//数据目录表数组\nstruct IMAGE_DATA_DIRECTORY Export//导出表\nstruct IMAGE_DATA_DIRECTORY Import//导入表\nstruct IMAGE_DATA_DIRECTORY Resource//资源\nstruct IMAGE_DATA_DIRECTORY Exception//异常\nstruct IMAGE_DATA_DIRECTORY Security//安全\nstruct IMAGE_DATA_DIRECTORY BaseRelocationTable//重定位表\nstruct IMAGE_DATA_DIRECTORY DebugDirectory//调试信息\nstruct IMAGE_DATA_DIRECTORY CopyrightOrArchitectureSpecificData//版权信息\nstruct IMAGE_DATA_DIRECTORY GlobalPtr//RVA OF GP\nstruct IMAGE_DATA_DIRECTORY TLSDirectory//TLS directory\nstruct IMAGE_DATA_DIRECTORY LoadConfigurationDirectory\nstruct IMAGE_DATA_DIRECTORY BoundImportDirectory\nstruct IMAGE_DATA_DIRECTORY ImportAddressTable//导入函数地址表\nstruct IMAGE_DATA_DIRECTORY DelayLoadImportDescriptors\nstruct IMAGE_DATA_DIRECTORY COMRuntimedescriptor\nstruct IMAGE_DATA_DIRECTORY Reserved\n\n//表的结构体：\n    typedef struct\n{\n    DWORD   VirtualAddress;//真正表结构体的内存偏移\n    DWORD   Size;//大小，可被修改，没什么用\n} IMAGE_DATA_DIRECTORY;\n\n\n```\n\n\n\n## 4. 区段头分析\n\n010中exe模版下的区段头结构体，数量取决于PE文件头的NumberOfSections\n\n```c++\ntypedef struct\n{\n    BYTE    Name[8] <comment=\"can end without zero\">;\n    //区段名称，字符串不用以0结尾\n    union\n    {\n        DWORD PhysicalAddress;\n        DWORD VirtualSize;\n    } Misc;//该区段在内存中的真实大小\n    DWORD   VirtualAddress;     //区段在内存中的偏移地址    \n    DWORD   SizeOfRawData;    //区段在对齐后的大小      \n    DWORD   PointerToRawData; //区段在文件中的偏移位置       \n    DWORD   PointerToRelocations;//\n    DWORD   PointerToLinenumbers;\n    WORD    NumberOfRelocations;\n    WORD    NumberOfLinenumbers;\n    SECTION_CHARACTERISTICS Characteristics;//区段属性\n} IMAGE_SECTION_HEADER \n\n```\n\n在010中区段头数量和名称分析如下\n\n![image-20230920194909946](https://s2.loli.net/2024/06/23/l8pyL6dSfEg5ZH3.png)\n\n##  5. 导出表分析\n\n导出表结构体：\n\n```c++\ntypedef struct\n{\n    DWORD   Characteristics;\n    time_t  TimeDateStamp;//时间戳\n    WORD    MajorVersion;\n    WORD    MinorVersion;\n    DWORD   Name;//导出表名称\n    DWORD   Base;//导出表起始序号\n    DWORD   NumberOfFunctions;//导出函数数量 = 终止序号-起始序号+1\n    DWORD   NumberOfNames;//以名称导出函数的个数\n    DWORD   AddressOfFunctions;//EAT 导出函数地址表 \n    DWORD   AddressOfNames;//ENT 导出函数名称表         \n    DWORD   AddressOfNameOrdinals; //EOT 导出函数序号表  \n} IMAGE_EXPORT_DIRECTORY ;\n\n```\n\n结构体中地址表。名称表，序号表都指的是内存偏移，也就是RVA，推到公式是RVA = FOA +filebuff\n\n## 6. 导入表分析\n\n跟导出表不同，导入表一个程序可以有多个\n\n导入表结构体：\n\n```c++\ntypedef struct\n{\n    union\n    {\n        ULONG   Characteristics;\n        ULONG   OriginalFirstThunk ;//RVA，指向INT\n    } DUMMYUNIONNAME;\n    ULONG   TimeDateStamp;//时间戳，如果不与dll绑定时，为0\n    ULONG   ForwarderChain;//\n    ULONG   Name;//RVA dll的名称\n    ULONG   FirstThunk;//RVA to IAT\n} IMAGE_IMPORT_DESCRIPTOR \n```\n\n​n\n## 7. 重定位表\n\n```c++\ntypedef struct\n{\n    DWORD   VirtualAddress <format=hex,comment=CommentRVA2FOA>;\n    DWORD   SizeOfBlock;\n//  WORD    TypeOffset[1];\n} IMAGE_BASE_RELOCATION <comment=CommentImageBaseRelocation>;\n```\n\n\n\n## 8. 利用TEB和PEB找到核心模块的信息\n\nPEB：Process Environment Block 进程环境块，存放进程相关信息\n\nTEB：Thread Environment Block  线程环境块\n\n> PEB和TEB分别是进程环境块和线程环境块，它们是存放进程和线程信息的结构体。PEB和TEB的结构体成员有很多，其中一些是用于反调试技术的。PEB和TEB的访问方法有以下几种：\n>\n> - 通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址\n> - 通过Ntdll.NtCurrentTeb()函数获取当前线程的TEB地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址\n> - 通过GetModuleHandle()函数获取进程的ImageBase地址，然后通过ImageBase地址加上偏移量获取PEB的地址\n\nPEB结构体定义\n\n```c++\ntypedef struct _PEB {\n  BYTE                          Reserved1[2];\n  BYTE                          BeingDebugged;\n  BYTE                          Reserved2[1];\n  PVOID                         Reserved3[2];\n  PPEB_LDR_DATA                 Ldr;  //偏移0xc\n  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;\n  PVOID                         Reserved4[3];\n  PVOID                         AtlThunkSListPtr;\n  PVOID                         Reserved5;\n  ULONG                         Reserved6;\n  PVOID                         Reserved7;\n  ULONG                         Reserved8;\n  ULONG                         AtlThunkSListPtr32;\n  PVOID                         Reserved9[45];\n  BYTE                          Reserved10[96];\n  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;\n  BYTE                          Reserved11[128];\n  PVOID                         Reserved12[1];\n  ULONG                         SessionId;\n} PEB, *PPEB;\n\n```\n\nPPEB_LDR_DATA结构体定义\n\n```c++\ntypedef struct _PEB_LDR_DATA {\n  BYTE Reserved1 [8];\n  PVOID Reserved2 [3];\n  LIST_ENTRY InMemoryOrderModuleList;//载入顺序排序的dll\n  LIST_ENTRY InLoadOrderModuleList;//内存排序的dll\n  LIST_ENTRY InInitializationOrderModuleList;//初始化排序的dll，偏移0x1c\n} PEB_LDR_DATA, *PPEB_LDR_DATA;\n```\n\nLIST_ENTRY结构体定义\n\n```c++\ntypedef struct _LIST_ENTRY {\n  struct _LIST_ENTRY *Flink;//下一个节点的指针\n  struct _LIST_ENTRY *Blink;//上一个节点的指针\n} LIST_ENTRY, *PLIST_ENTRY, *PRLIST_ENTRY;\n```\n\n获取kernel32.dll或者kernerbase.dll的模块信息\n\n> [kernel32.dll和kernerbase.dll都是Windows操作系统的重要文件，它们是NT内核系统的底层API接口的DLL文件，与其他应用程序和运行库进行交互。](https://bing.com/search?q=kernel32.dll或者kernerbase.dll都代表什么模块)[1](https://bing.com/search?q=kernel32.dll或者kernerbase.dll都代表什么模块)\n>\n> [kernel32.dll和kernerbase.dll有相同的功能，但是它们的区别在于，kernel32.dll是一个向后兼容的文件，它包含了一些旧版本的Windows API函数，而kernerbase.dll是一个新的文件，它包含了一些新版本的Windows API函数。](https://zhuanlan.zhihu.com/p/242615448)\n\nkernel32.dll和kernerbase.dll包含**GetProcAddress**，***LoadLibraryA***，***LoadModule***等等\n\n更多API->[Geoff Chappell, Software Analyst](https://www.geoffchappell.com/)\n\nuser32.dll->[User32大全详解-CSDN博客](https://blog.csdn.net/qq_38406587/article/details/105505007)\n\n `mov esi,dword ptr fs:[0x30] ` 获取PEB地址\n\n`mov esi,[esi+0xc]` 获取Ldr地址\n\n`mov esi,[esi+0x1c]` 获取InInitializationOrderModuleList\n\n`mov esi,[esi]` 获取InInitializationOrderModuleList的第二项，esi既是LIST_ENTRY结构体地址，也是下一个节点指针的地址\n\n`mov esi,[esi+0x8] ` 模块信息，kernel32或者kernerbase模块基址\n\n> 拿到了dll模块基址，通过基址和固定偏移来访问导出表，再通过导出表和定义好的字符串（函数名称）比较来获取模块指定函数——**GetProcAddress**，***LoadLibraryA***等等，到这就可以利用函数地址调用指定函数了\n\n`mov edx,esi` 保存模块基址\n`mov esi,[esi+0x3c]` 获取NT头偏移\n`lea esi,[edx+esi] ` 得到NT头地址\n`mov esi,[esi+0x78]` 得到导出表RVA\n`lea esi,[edx+esi] ` 得到导出表VA\n`mov edi,[esi+0x1c]` 得到EAT的RVA（地址表）\n`lea edi,[edi+edx]` 得到EAT的RA\n`mov [ebp-0x4],edi` 保存在栈中\n`mov edi,[esi+0x20]` 得到ENT的RVA（名称表）\n`lea edi,[edx+edi]` 得到ENT的VA\n`mov [ebp-0x8],edi` 保存在栈中\n`mov edi,[esi+0x24]` 得到EOT的RVA（序号表）\n`lea edi,[edx+edi]` 得到EOT的VA\n`mov [ebp-0xc],edi` 保存在栈中\n\n**LDR_DATA_TABLE_ENTRY**结构体是一个用来存放模块信息的结构体，它的定义如下：\n\n```c++\ntypedef struct _LDR_DATA_TABLE_ENTRY {\n  PVOID Reserved1[2];\n  LIST_ENTRY InMemoryOrderLinks;//双向链表连接所有模块信息\n  PVOID Reserved2[2];\n  PVOID DllBase;//模块基址\n  PVOID EntryPoint;//模块入口点\n  PVOID Reserved3;\n  UNICODE_STRING FullDllName;//模块完整名称\n  BYTE Reserved4[8];\n  PVOID Reserved5[3];\n  union {\n    ULONG CheckSum;\n    PVOID Reserved6;\n  };\n  ULONG TimeDateStamp;\n} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;\n\n```\n\n> [其中，Reserved1，Reserved2，Reserved3，Reserved4，Reserved5和Reserved6都是保留供操作系统内部使用的字段，不对外公开。DllBase是模块的基址，EntryPoint是模块的入口点，FullDllName是模块的完整名称，CheckSum是模块的校验和，TimeDateStamp是模块的时间戳。InMemoryOrderLinks是一个双向链表节点，它用来将所有的模块信息连接起来。](https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data)\n\n通过导出表kernel32.dll获得其中的“LoadLibraryA\" 和 \"GetProAddress\"\n\n## 9. 增加区段头向PE文件中植入代码\n\n\n\n**ShellCode：**--执行打印helloworld的代码\n$$\n\"\\x60\\x8B\\xEC\\x6A\\x00\\x68\\x72\\x6C\\x64\\x21\\x68\\x6F\\x20\\x77\\x6F\\x68\\x68\\x65\\x6C\\x6C\\x68\\x73\\x73\\x00\\x00\\x68\\x64\\x64\\x72\\x65\\x68\\x72\\x6F\\x63\\x41\\x68\\x47\\x65\\x74\\x50\\x6A\\x00\\x68\\x61\\x72\\x79\\x41\\x68\\x4C\\x69\\x62\\x72\\x68\\x4C\\x6F\\x61\\x64\\x8B\\xCC\\x51\\xE8\\x8F\\x00\\x00\\x00\\x8B\\xE5\\x61\\xE9\\xF7\\x70\\xFB\\xFF\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x56\\x64\\x8B\\x35\\x30\\x00\\x00\\x00\\x8B\\x76\\x0C\\x8B\\x76\\x1C\\x8B\\x36\\x8B\\x76\\x08\\x8B\\xC6\\x5E\\x8B\\xE5\\x5D\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x8B\\x55\\x08\\x8B\\x72\\x3C\\x8D\\x34\\x16\\x8B\\x76\\x78\\x8D\\x34\\x32\\x8B\\x7E\\x1C\\x8D\\x3C\\x17\\x89\\x7D\\xFC\\x8B\\x7E\\x20\\x8D\\x3C\\x17\\x89\\x7D\\xF8\\x8B\\x7E\\x24\\x8D\\x3C\\x17\\x89\\x7D\\xF4\\x33\\xC0\\xEB\\x01\\x40\\x8B\\x75\\xF8\\x8B\\x34\\x86\\x8D\\x34\\x16\\x8B\\x7D\\x0C\\x8B\\x4D\\x10\\xF3\\xA6\\x8B\\x75\\xF4\\x75\\xE9\\x8B\\x75\\xF4\\x33\\xFF\\x66\\x8B\\x3C\\x46\\x8B\\x55\\xFC\\x8B\\x34\\xBA\\x8B\\x55\\x08\\x8D\\x04\\x16\\x8B\\xE5\\x5D\\xC2\\x0C\\x00\\x55\\x8B\\xEC\\x83\\xEC\\x10\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xFC\\x8D\\x4D\\x0C\\x6A\\x0C\\x51\\x50\\xE8\\x80\\xFF\\xFF\\xFF\\x89\\x45\\xF8\\x6A\\x0E\\x8D\\x4D\\x1C\\x51\\xFF\\x75\\xFC\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xF4\\x68\\x6C\\x6C\\x00\\x00\\x68\\x72\\x74\\x2E\\x64\\x68\\x6D\\x73\\x76\\x63\\x36\\x8D\\x4D\\xE4\\x51\\xFF\\x55\\xF8\\x68\\x74\\x66\\x00\\x00\\x68\\x70\\x72\\x69\\x6E\\x8D\\x4D\\xDC\\x51\\x50\\xFF\\x55\\xF4\\x8D\\x4D\\x2C\\x51\\xFF\\xD0\\x8B\\xE5\\x5D\\xC3\"\n$$\n\n>\n> 1. 在文件末尾增加N字节给自己的代码提供空间\n>\n> 2. 向最后一个区段后添加一个和text属性相同的区段\n>\n> 3. 在union misc属性下填入N\n>\n> 4. 在VirtualAddress属性下填入M\n>\n>   M = VirtualAddress(上一个区段)+内存对齐值*（max(SizeOfRawData,VirtualSize)/内存对齐值)\n>\n> 5. 在SizeOfRawData属性下填入N\n>\n> 6. 在PointerToRawData属性下填入X\n>\n>   X = SizeOfRawData(上一个区段)+PointerToRawData(上一个区段)\n>\n> 7. 在文件头的区段数量属性上加一\n> 8. 在可选文件头的SizeOfImage属性上加N、\n> 9. 文件末尾填入ShellCode\n> 10. 修改OEP\n>\n\n# 附录，收集常见段的含义\n\nrdata段\n\n> [rdata段是PE文件中的一个区段，它存储了程序用到的资源数据，如图标、字符串、位图等](https://www.r-project.org/)[1](https://www.r-project.org/)[。rdata段也可以存储一些只读的常量数据，如函数名、类名、导入表等](https://www.r-project.org/about.html)[2](https://www.r-project.org/about.html)。\n>\n> [rdata段是可选的，不是所有的PE文件都有它。如果有rdata段，它通常位于text段和data段之间](https://blog.csdn.net/qq_42458954/article/details/109286979)[3](https://blog.csdn.net/qq_42458954/article/details/109286979)[。rdata段的属性是只读的，不能被修改](https://blog.csdn.net/Simon798/article/details/96876910)[4](https://blog.csdn.net/Simon798/article/details/96876910)。\n\nbss段\n\n> [bss段是PE文件中的一个区段，它存储了程序中未初始化或初始化为零的全局变量和静态局部变量](https://bing.com/search?q=bss段)[1](https://bing.com/search?q=bss段)[。bss段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面](https://zh.wikipedia.org/wiki/BSS段)[2](https://zh.wikipedia.org/wiki/BSS段)[。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区](https://zh.wikipedia.org/wiki/BSS段)[2](https://zh.wikipedia.org/wiki/BSS段)。\n>\n> [bss段是可选的，不是所有的PE文件都有它。如果有bss段，它通常位于text段和data段之间](https://zhuanlan.zhihu.com/p/348026261)[3](https://zhuanlan.zhihu.com/p/348026261)[。bss段的属性是只读的，不能被修改](https://zhuanlan.zhihu.com/p/610583072)[4](https://zhuanlan.zhihu.com/p/610583072)。\n\n","slug":"PE文件解析","published":1,"updated":"2024-10-02T09:34:27.255Z","layout":"post","photos":[],"link":"","_id":"cm1roa13j000gugie1cqjf8w2","content":"<p>跟着b站学习完了PE结构，自己再整理和梳理一遍，巩固一下记忆！<span id=\"more\"></span></p>\n<p>文件结构图：</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg\" alt=\"1379525-20191026162634249-935893360\"></p>\n<h2 id=\"1-PE文件简介\"><a href=\"#1-PE文件简介\" class=\"headerlink\" title=\"1. PE文件简介\"></a>1. PE文件简介</h2><p>PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）</p>\n<p>PE文件有自己的一种文件格式，叫做PE文件格式，它包含了可执行文件的描述信息，以及程序运行时需要的数据。PE文件格式由以下几个部分组成：</p>\n<!-- more -->\n\n<ul>\n<li>MS-DOS头部：这是为了兼容MS-DOS系统而保留的一个头部结构，它包含了一些基本信息，如EXE标志、重定位表偏移量、PE头偏移量等 </li>\n<li>DOS Stub：这是一个可选的字节块，它通常是一个显示“此程序不能在DOS模式下运行”的消息的程序 </li>\n<li>PE头标识：这是一个四字节的标识，其内容固定为“PE00”，用来表示这是一个PE文件 </li>\n<li>标准PE头：这是一个20字节的结构，它记录了PE文件的全局属性，如运行平台、节的数量、创建时间等 </li>\n<li>扩展PE头：这是一个224字节的结构，它记录了PE文件执行时的一些重要信息，如入口地址、装载基址、节对齐粒度、校验和等 </li>\n<li>数据目录：这是一个128字节的结构，它记录了PE文件中一些特殊数据的位置和大小，如导入表、导出表、资源表等 </li>\n<li>节表：这是一个由若干个40字节的结构组成的表格，它记录了PE文件中每个节的名称、位置、大小、属性等信息 </li>\n<li>节数据：这是PE文件中实际存放代码和数据的部分，它由若干个节组成，每个节对应于节表中的一项</li>\n</ul>\n<h2 id=\"2-Dos头解析\"><a href=\"#2-Dos头解析\" class=\"headerlink\" title=\"2. Dos头解析\"></a>2. Dos头解析</h2><p>DOS头是PE文件开头的一个固定长度的结构体，是为了兼容MS-DOS系统而保留的一个头部结构，大小0x40字节。包含如下信息</p>\n<blockquote>\n<ul>\n<li><strong>e_magic</strong>：一个WORD类型，值是一个常数0x4D5A，用文本编辑器查看该值位 MZ，可执行文件必须都是 MZ 开头</li>\n<li><strong>e_lfanew</strong>：为32位可执行文件扩展的域，用来表示DOS头之后的PE头相对文件起始地址的偏移</li>\n<li>e_cblp：最后一页中字节数</li>\n<li>e_cp：文件中页数</li>\n<li>e_crlc：重定位项数</li>\n<li>e_cparhdr：头部占用的内存段数</li>\n<li>e_minalloc：最小需要的附加内存段数</li>\n<li>e_maxalloc：最大需要的附加内存段数</li>\n<li>e_ss：初始SS值（相对于段起始地址）</li>\n<li>e_sp：初始SP值</li>\n<li>e_csum：校验和</li>\n<li>e_ip：初始IP值（相对于段起始地址）</li>\n<li>e_cs：初始CS值（相对于段起始地址）</li>\n<li>e_lfarlc：重定位表相对于文件起始地址的偏移</li>\n<li>e_ovno：覆盖号</li>\n<li>e_res：保留字</li>\n<li>e_oemid：OEM标识符</li>\n<li>e_oeminfo：OEM信息</li>\n<li>e_res2：保留字</li>\n</ul>\n</blockquote>\n<p>在DOS头中比较重要的两个参数是e_magic和e_lfanew，前者是PE文件标识头，后者是PE文件头的相对文件起始地址的偏移。</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/3AX8hfVCqtcaS9r.png\" alt=\"Typora卸载程序的DOS头\"></p>\n<p>e_magic是前两个字节，对应的是字符串是MZ，e_ifanew是后四个字节，因为是小端序，所以对应的值是0x100，也就是说PE文件头对应偏移是0x100</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/WB6zye9vVgiomGl.png\" alt=\"PE文件头偏移\"></p>\n<p>在DOS头之后，还有一段DOS块，这段空间是由编译器生成，用来存储一些程序运行的信息，可以随意更改，对程序没有影响</p>\n<h2 id=\"3-PE头解析\"><a href=\"#3-PE头解析\" class=\"headerlink\" title=\"3. PE头解析\"></a>3. PE头解析</h2><p>PE头又叫NT头，是整个PE文件真正的头部，共有三个字段</p>\n<blockquote>\n<ol>\n<li><code>DWORD Signature</code> PE文件头标识，两个字节，一般是504500</li>\n<li><code>struct IMAGE_FILE_HEADER FileHeader</code> 结构体，文件头</li>\n<li><code>struct IMAGE_OPTIONAL_HEADER32 OptionalHeader</code>结构体， 可选文件头</li>\n</ol>\n</blockquote>\n<p>文件头结构体包含6个字段</p>\n<blockquote>\n<ol>\n<li><code>enum IMAGE_MACHINE Machine</code> WORD类型，程序允许的的CPU型号，为0则支持所有CPU</li>\n<li><code>WORD NumberOfSections</code> <strong>文件中区段的数量</strong></li>\n<li><code>time_t TimeDateStamp</code> 时间戳</li>\n<li><code>DWORD PointerToSymbolTable</code> </li>\n<li><code>DWORD NumberOfSymbols</code> </li>\n<li><code>WORD SizeOfOptionalHeader</code>  <strong>可选PE头的大小</strong>，32位默认0xE0，64位默认0xF0</li>\n<li><code>struct FILE_CHARACTERISTICS Characteristics</code> WORD，文件属性，通过16位二进制控制是否可执行，是否是dll之类的文件属性</li>\n</ol>\n</blockquote>\n<p>Typora卸载程序在DIE分析结果如下</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/tuRvPNJUcBT1Fnm.png\" alt=\"在DIE下Typora卸载程序文件头\"></p>\n<p>64位下可选PE头包含以下字段</p>\n<blockquote>\n<ol>\n<li><code>enum OPTIONAL_MAGIC Magic</code> 标识64位32位，前者20B，后者10B</li>\n<li><code>BYTE MajorLinkerVersion</code>  </li>\n<li><code>BYTE MinorLinkerVersion</code> </li>\n<li><code>DWORD SizeOfCode</code> 所有代码段的总大小，按照文件对齐后的大小</li>\n<li><code>DWORD SizeOfInitializedData</code> 已初始化的数据大小，按照文件对齐</li>\n<li><code>DWORD SizeOfUninitializedData</code> 未初始化的数据大小，按照文件对齐</li>\n<li><code>DWORD AddressOfEntryPoint</code> <strong>程序入口的OEP</strong> 存储的是一个偏移值，程序入口的<strong>内存偏移</strong></li>\n<li><code>DWORD BaseOfCode</code> 代码开始地址</li>\n<li><code>DWORD BaseOfData</code> 数据开始地址</li>\n<li><code>DWORD ImageBase</code> <strong>内存镜像地址</strong>，有可能是动态的，在<code>DLL_CHARACTERISTICS DllCharacteristics</code>中定义是否动态</li>\n<li><code>DWORD SectionAlignment</code> 内存对齐大小</li>\n<li><code>DWORD FileAlignment</code> 文件对齐大小</li>\n<li><code>WORD MajorOperatingSystemVersion</code></li>\n<li><code>WORD MinorOperatingSystemVersion</code></li>\n<li><code>WORD MajorImageVersion</code></li>\n<li><code>WORD MinorImageVersion</code></li>\n<li><code>WORD MajorSubsystemVersion</code></li>\n<li><code>WORD MinorSubsystemVersion</code></li>\n<li><code>DWORD Win32VersionValue</code></li>\n<li><code>DWORD SizeOfImage</code> 文件在内存中的大小，按照内存对齐后的大小</li>\n<li><code>DWORD SizeOfHeaders</code> DOS头+NT头+标准PE头+可选PE头+区段头，按照文件对齐后的大小</li>\n<li><code>DWORD CheckSum</code></li>\n<li><code>enum IMAGE_SUBSYSTEM Subsystem</code></li>\n<li><code>struct DLL_CHARACTERISTICS DllCharacteristics</code></li>\n<li><code>DWORD SizeOfStackReserve</code></li>\n<li><code>DWORD SizeOfStackCommit</code></li>\n<li><code>DWORD SizeOfHeapReserve</code></li>\n<li><code>DWORD SizeOfHeapCommit</code></li>\n<li><code>DWORD LoaderFlags</code></li>\n<li><code>DWORD NumberOfRvaAndSizes</code> 数据目录表的个数</li>\n<li><code>struct IMAGE_DATA_DIRECTORY_ARRAY DataDirArray</code> <strong>数据目录表数组</strong>在导出表导入表里分析</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2024/06/23/SajxQtylMvhB24J.png\" alt=\"可选头中动静态地址分析\"></p>\n<p>在VS中控制该属性的地方：</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/4IHRYOuwKins9f3.png\" alt=\"动态基址生成文件\"></p>\n<p>数据目录表数组以及数据目录表结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数据目录表数组</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Export<span class=\"comment\">//导出表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Import<span class=\"comment\">//导入表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Resource<span class=\"comment\">//资源</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Exception<span class=\"comment\">//异常</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Security<span class=\"comment\">//安全</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> BaseRelocationTable<span class=\"comment\">//重定位表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> DebugDirectory<span class=\"comment\">//调试信息</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> CopyrightOrArchitectureSpecificData<span class=\"comment\">//版权信息</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> GlobalPtr<span class=\"comment\">//RVA OF GP</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> TLSDirectory<span class=\"comment\">//TLS directory</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> LoadConfigurationDirectory</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> BoundImportDirectory</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> ImportAddressTable<span class=\"comment\">//导入函数地址表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> DelayLoadImportDescriptors</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> COMRuntimedescriptor</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Reserved</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表的结构体：</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD   VirtualAddress;<span class=\"comment\">//真正表结构体的内存偏移</span></span><br><span class=\"line\">    DWORD   Size;<span class=\"comment\">//大小，可被修改，没什么用</span></span><br><span class=\"line\">&#125; IMAGE_DATA_DIRECTORY;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-区段头分析\"><a href=\"#4-区段头分析\" class=\"headerlink\" title=\"4. 区段头分析\"></a>4. 区段头分析</h2><p>010中exe模版下的区段头结构体，数量取决于PE文件头的NumberOfSections</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BYTE    Name[<span class=\"number\">8</span>] &lt;comment=<span class=\"string\">&quot;can end without zero&quot;</span>&gt;;</span><br><span class=\"line\">    <span class=\"comment\">//区段名称，字符串不用以0结尾</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DWORD PhysicalAddress;</span><br><span class=\"line\">        DWORD VirtualSize;</span><br><span class=\"line\">    &#125; Misc;<span class=\"comment\">//该区段在内存中的真实大小</span></span><br><span class=\"line\">    DWORD   VirtualAddress;     <span class=\"comment\">//区段在内存中的偏移地址    </span></span><br><span class=\"line\">    DWORD   SizeOfRawData;    <span class=\"comment\">//区段在对齐后的大小      </span></span><br><span class=\"line\">    DWORD   PointerToRawData; <span class=\"comment\">//区段在文件中的偏移位置       </span></span><br><span class=\"line\">    DWORD   PointerToRelocations;<span class=\"comment\">//</span></span><br><span class=\"line\">    DWORD   PointerToLinenumbers;</span><br><span class=\"line\">    WORD    NumberOfRelocations;</span><br><span class=\"line\">    WORD    NumberOfLinenumbers;</span><br><span class=\"line\">    SECTION_CHARACTERISTICS Characteristics;<span class=\"comment\">//区段属性</span></span><br><span class=\"line\">&#125; IMAGE_SECTION_HEADER </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在010中区段头数量和名称分析如下</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/l8pyL6dSfEg5ZH3.png\" alt=\"image-20230920194909946\"></p>\n<h2 id=\"5-导出表分析\"><a href=\"#5-导出表分析\" class=\"headerlink\" title=\"5. 导出表分析\"></a>5. 导出表分析</h2><p>导出表结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD   Characteristics;</span><br><span class=\"line\">    <span class=\"type\">time_t</span>  TimeDateStamp;<span class=\"comment\">//时间戳</span></span><br><span class=\"line\">    WORD    MajorVersion;</span><br><span class=\"line\">    WORD    MinorVersion;</span><br><span class=\"line\">    DWORD   Name;<span class=\"comment\">//导出表名称</span></span><br><span class=\"line\">    DWORD   Base;<span class=\"comment\">//导出表起始序号</span></span><br><span class=\"line\">    DWORD   NumberOfFunctions;<span class=\"comment\">//导出函数数量 = 终止序号-起始序号+1</span></span><br><span class=\"line\">    DWORD   NumberOfNames;<span class=\"comment\">//以名称导出函数的个数</span></span><br><span class=\"line\">    DWORD   AddressOfFunctions;<span class=\"comment\">//EAT 导出函数地址表 </span></span><br><span class=\"line\">    DWORD   AddressOfNames;<span class=\"comment\">//ENT 导出函数名称表         </span></span><br><span class=\"line\">    DWORD   AddressOfNameOrdinals; <span class=\"comment\">//EOT 导出函数序号表  </span></span><br><span class=\"line\">&#125; IMAGE_EXPORT_DIRECTORY ;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结构体中地址表。名称表，序号表都指的是内存偏移，也就是RVA，推到公式是RVA &#x3D; FOA +filebuff</p>\n<h2 id=\"6-导入表分析\"><a href=\"#6-导入表分析\" class=\"headerlink\" title=\"6. 导入表分析\"></a>6. 导入表分析</h2><p>跟导出表不同，导入表一个程序可以有多个</p>\n<p>导入表结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG   Characteristics;</span><br><span class=\"line\">        ULONG   OriginalFirstThunk ;<span class=\"comment\">//RVA，指向INT</span></span><br><span class=\"line\">    &#125; DUMMYUNIONNAME;</span><br><span class=\"line\">    ULONG   TimeDateStamp;<span class=\"comment\">//时间戳，如果不与dll绑定时，为0</span></span><br><span class=\"line\">    ULONG   ForwarderChain;<span class=\"comment\">//</span></span><br><span class=\"line\">    ULONG   Name;<span class=\"comment\">//RVA dll的名称</span></span><br><span class=\"line\">    ULONG   FirstThunk;<span class=\"comment\">//RVA to IAT</span></span><br><span class=\"line\">&#125; IMAGE_IMPORT_DESCRIPTOR </span><br></pre></td></tr></table></figure>\n\n<p>​p>\n<h2 id=\"7-重定位表\"><a href=\"#7-重定位表\" class=\"headerlink\" title=\"7. 重定位表\"></a>7. 重定位表</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD   VirtualAddress &lt;format=hex,comment=CommentRVA2FOA&gt;;</span><br><span class=\"line\">    DWORD   SizeOfBlock;</span><br><span class=\"line\"><span class=\"comment\">//  WORD    TypeOffset[1];</span></span><br><span class=\"line\">&#125; IMAGE_BASE_RELOCATION &lt;comment=CommentImageBaseRelocation&gt;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-利用TEB和PEB找到核心模块的信息\"><a href=\"#8-利用TEB和PEB找到核心模块的信息\" class=\"headerlink\" title=\"8. 利用TEB和PEB找到核心模块的信息\"></a>8. 利用TEB和PEB找到核心模块的信息</h2><p>PEB：Process Environment Block 进程环境块，存放进程相关信息</p>\n<p>TEB：Thread Environment Block  线程环境块</p>\n<blockquote>\n<p>PEB和TEB分别是进程环境块和线程环境块，它们是存放进程和线程信息的结构体。PEB和TEB的结构体成员有很多，其中一些是用于反调试技术的。PEB和TEB的访问方法有以下几种：</p>\n<ul>\n<li>通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址</li>\n<li>通过Ntdll.NtCurrentTeb()函数获取当前线程的TEB地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址</li>\n<li>通过GetModuleHandle()函数获取进程的ImageBase地址，然后通过ImageBase地址加上偏移量获取PEB的地址</li>\n</ul>\n</blockquote>\n<p>PEB结构体定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_PEB</span> &#123;</span><br><span class=\"line\">  BYTE                          Reserved1[<span class=\"number\">2</span>];</span><br><span class=\"line\">  BYTE                          BeingDebugged;</span><br><span class=\"line\">  BYTE                          Reserved2[<span class=\"number\">1</span>];</span><br><span class=\"line\">  PVOID                         Reserved3[<span class=\"number\">2</span>];</span><br><span class=\"line\">  PPEB_LDR_DATA                 Ldr;  <span class=\"comment\">//偏移0xc</span></span><br><span class=\"line\">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class=\"line\">  PVOID                         Reserved4[<span class=\"number\">3</span>];</span><br><span class=\"line\">  PVOID                         AtlThunkSListPtr;</span><br><span class=\"line\">  PVOID                         Reserved5;</span><br><span class=\"line\">  ULONG                         Reserved6;</span><br><span class=\"line\">  PVOID                         Reserved7;</span><br><span class=\"line\">  ULONG                         Reserved8;</span><br><span class=\"line\">  ULONG                         AtlThunkSListPtr32;</span><br><span class=\"line\">  PVOID                         Reserved9[<span class=\"number\">45</span>];</span><br><span class=\"line\">  BYTE                          Reserved10[<span class=\"number\">96</span>];</span><br><span class=\"line\">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class=\"line\">  BYTE                          Reserved11[<span class=\"number\">128</span>];</span><br><span class=\"line\">  PVOID                         Reserved12[<span class=\"number\">1</span>];</span><br><span class=\"line\">  ULONG                         SessionId;</span><br><span class=\"line\">&#125; PEB, *PPEB;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>PPEB_LDR_DATA结构体定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_PEB_LDR_DATA</span> &#123;</span><br><span class=\"line\">  BYTE Reserved1 [<span class=\"number\">8</span>];</span><br><span class=\"line\">  PVOID Reserved2 [<span class=\"number\">3</span>];</span><br><span class=\"line\">  LIST_ENTRY InMemoryOrderModuleList;<span class=\"comment\">//载入顺序排序的dll</span></span><br><span class=\"line\">  LIST_ENTRY InLoadOrderModuleList;<span class=\"comment\">//内存排序的dll</span></span><br><span class=\"line\">  LIST_ENTRY InInitializationOrderModuleList;<span class=\"comment\">//初始化排序的dll，偏移0x1c</span></span><br><span class=\"line\">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure>\n\n<p>LIST_ENTRY结构体定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> *Flink;<span class=\"comment\">//下一个节点的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> *Blink;<span class=\"comment\">//上一个节点的指针</span></span><br><span class=\"line\">&#125; LIST_ENTRY, *PLIST_ENTRY, *PRLIST_ENTRY;</span><br></pre></td></tr></table></figure>\n\n<p>获取kernel32.dll或者kernerbase.dll的模块信息</p>\n<blockquote>\n<p><a href=\"https://bing.com/search?q=kernel32.dll%E6%88%96%E8%80%85kernerbase.dll%E9%83%BD%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%A8%A1%E5%9D%97\">kernel32.dll和kernerbase.dll都是Windows操作系统的重要文件，它们是NT内核系统的底层API接口的DLL文件，与其他应用程序和运行库进行交互。</a><a href=\"https://bing.com/search?q=kernel32.dll%E6%88%96%E8%80%85kernerbase.dll%E9%83%BD%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%A8%A1%E5%9D%97\">1</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/242615448\">kernel32.dll和kernerbase.dll有相同的功能，但是它们的区别在于，kernel32.dll是一个向后兼容的文件，它包含了一些旧版本的Windows API函数，而kernerbase.dll是一个新的文件，它包含了一些新版本的Windows API函数。</a></p>\n</blockquote>\n<p>kernel32.dll和kernerbase.dll包含<strong>GetProcAddress</strong>，<em><strong>LoadLibraryA</strong></em>，<em><strong>LoadModule</strong></em>等等</p>\n<p>更多API-&gt;<a href=\"https://www.geoffchappell.com/\">Geoff Chappell, Software Analyst</a></p>\n<p>user32.dll-&gt;<a href=\"https://blog.csdn.net/qq_38406587/article/details/105505007\">User32大全详解-CSDN博客</a></p>\n<p> <code>mov esi,dword ptr fs:[0x30] </code> 获取PEB地址</p>\n<p><code>mov esi,[esi+0xc]</code> 获取Ldr地址</p>\n<p><code>mov esi,[esi+0x1c]</code> 获取InInitializationOrderModuleList</p>\n<p><code>mov esi,[esi]</code> 获取InInitializationOrderModuleList的第二项，esi既是LIST_ENTRY结构体地址，也是下一个节点指针的地址</p>\n<p><code>mov esi,[esi+0x8] </code> 模块信息，kernel32或者kernerbase模块基址</p>\n<blockquote>\n<p>拿到了dll模块基址，通过基址和固定偏移来访问导出表，再通过导出表和定义好的字符串（函数名称）比较来获取模块指定函数——<strong>GetProcAddress</strong>，<em><strong>LoadLibraryA</strong></em>等等，到这就可以利用函数地址调用指定函数了</p>\n</blockquote>\n<p><code>mov edx,esi</code> 保存模块基址<br><code>mov esi,[esi+0x3c]</code> 获取NT头偏移<br><code>lea esi,[edx+esi] </code> 得到NT头地址<br><code>mov esi,[esi+0x78]</code> 得到导出表RVA<br><code>lea esi,[edx+esi] </code> 得到导出表VA<br><code>mov edi,[esi+0x1c]</code> 得到EAT的RVA（地址表）<br><code>lea edi,[edi+edx]</code> 得到EAT的RA<br><code>mov [ebp-0x4],edi</code> 保存在栈中<br><code>mov edi,[esi+0x20]</code> 得到ENT的RVA（名称表）<br><code>lea edi,[edx+edi]</code> 得到ENT的VA<br><code>mov [ebp-0x8],edi</code> 保存在栈中<br><code>mov edi,[esi+0x24]</code> 得到EOT的RVA（序号表）<br><code>lea edi,[edx+edi]</code> 得到EOT的VA<br><code>mov [ebp-0xc],edi</code> 保存在栈中</p>\n<p><strong>LDR_DATA_TABLE_ENTRY</strong>结构体是一个用来存放模块信息的结构体，它的定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_LDR_DATA_TABLE_ENTRY</span> &#123;</span><br><span class=\"line\">  PVOID Reserved1[<span class=\"number\">2</span>];</span><br><span class=\"line\">  LIST_ENTRY InMemoryOrderLinks;<span class=\"comment\">//双向链表连接所有模块信息</span></span><br><span class=\"line\">  PVOID Reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">  PVOID DllBase;<span class=\"comment\">//模块基址</span></span><br><span class=\"line\">  PVOID EntryPoint;<span class=\"comment\">//模块入口点</span></span><br><span class=\"line\">  PVOID Reserved3;</span><br><span class=\"line\">  UNICODE_STRING FullDllName;<span class=\"comment\">//模块完整名称</span></span><br><span class=\"line\">  BYTE Reserved4[<span class=\"number\">8</span>];</span><br><span class=\"line\">  PVOID Reserved5[<span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">    ULONG CheckSum;</span><br><span class=\"line\">    PVOID Reserved6;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  ULONG TimeDateStamp;</span><br><span class=\"line\">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data\">其中，Reserved1，Reserved2，Reserved3，Reserved4，Reserved5和Reserved6都是保留供操作系统内部使用的字段，不对外公开。DllBase是模块的基址，EntryPoint是模块的入口点，FullDllName是模块的完整名称，CheckSum是模块的校验和，TimeDateStamp是模块的时间戳。InMemoryOrderLinks是一个双向链表节点，它用来将所有的模块信息连接起来。</a></p>\n</blockquote>\n<p>通过导出表kernel32.dll获得其中的“LoadLibraryA” 和 “GetProAddress”</p>\n<h2 id=\"9-增加区段头向PE文件中植入代码\"><a href=\"#9-增加区段头向PE文件中植入代码\" class=\"headerlink\" title=\"9. 增加区段头向PE文件中植入代码\"></a>9. 增加区段头向PE文件中植入代码</h2><p><strong>ShellCode：</strong>–执行打印helloworld的代码<br>$$<br>“\\x60\\x8B\\xEC\\x6A\\x00\\x68\\x72\\x6C\\x64\\x21\\x68\\x6F\\x20\\x77\\x6F\\x68\\x68\\x65\\x6C\\x6C\\x68\\x73\\x73\\x00\\x00\\x68\\x64\\x64\\x72\\x65\\x68\\x72\\x6F\\x63\\x41\\x68\\x47\\x65\\x74\\x50\\x6A\\x00\\x68\\x61\\x72\\x79\\x41\\x68\\x4C\\x69\\x62\\x72\\x68\\x4C\\x6F\\x61\\x64\\x8B\\xCC\\x51\\xE8\\x8F\\x00\\x00\\x00\\x8B\\xE5\\x61\\xE9\\xF7\\x70\\xFB\\xFF\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x56\\x64\\x8B\\x35\\x30\\x00\\x00\\x00\\x8B\\x76\\x0C\\x8B\\x76\\x1C\\x8B\\x36\\x8B\\x76\\x08\\x8B\\xC6\\x5E\\x8B\\xE5\\x5D\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x8B\\x55\\x08\\x8B\\x72\\x3C\\x8D\\x34\\x16\\x8B\\x76\\x78\\x8D\\x34\\x32\\x8B\\x7E\\x1C\\x8D\\x3C\\x17\\x89\\x7D\\xFC\\x8B\\x7E\\x20\\x8D\\x3C\\x17\\x89\\x7D\\xF8\\x8B\\x7E\\x24\\x8D\\x3C\\x17\\x89\\x7D\\xF4\\x33\\xC0\\xEB\\x01\\x40\\x8B\\x75\\xF8\\x8B\\x34\\x86\\x8D\\x34\\x16\\x8B\\x7D\\x0C\\x8B\\x4D\\x10\\xF3\\xA6\\x8B\\x75\\xF4\\x75\\xE9\\x8B\\x75\\xF4\\x33\\xFF\\x66\\x8B\\x3C\\x46\\x8B\\x55\\xFC\\x8B\\x34\\xBA\\x8B\\x55\\x08\\x8D\\x04\\x16\\x8B\\xE5\\x5D\\xC2\\x0C\\x00\\x55\\x8B\\xEC\\x83\\xEC\\x10\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xFC\\x8D\\x4D\\x0C\\x6A\\x0C\\x51\\x50\\xE8\\x80\\xFF\\xFF\\xFF\\x89\\x45\\xF8\\x6A\\x0E\\x8D\\x4D\\x1C\\x51\\xFF\\x75\\xFC\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xF4\\x68\\x6C\\x6C\\x00\\x00\\x68\\x72\\x74\\x2E\\x64\\x68\\x6D\\x73\\x76\\x63\\x36\\x8D\\x4D\\xE4\\x51\\xFF\\x55\\xF8\\x68\\x74\\x66\\x00\\x00\\x68\\x70\\x72\\x69\\x6E\\x8D\\x4D\\xDC\\x51\\x50\\xFF\\x55\\xF4\\x8D\\x4D\\x2C\\x51\\xFF\\xD0\\x8B\\xE5\\x5D\\xC3”<br>$$</p>\n<blockquote>\n<ol>\n<li><p>在文件末尾增加N字节给自己的代码提供空间</p>\n</li>\n<li><p>向最后一个区段后添加一个和text属性相同的区段</p>\n</li>\n<li><p>在union misc属性下填入N</p>\n</li>\n<li><p>在VirtualAddress属性下填入M</p>\n</li>\n</ol>\n<p>  M &#x3D; VirtualAddress(上一个区段)+内存对齐值*（max(SizeOfRawData,VirtualSize)&#x2F;内存对齐值)</p>\n<ol start=\"5\">\n<li><p>在SizeOfRawData属性下填入N</p>\n</li>\n<li><p>在PointerToRawData属性下填入X</p>\n</li>\n</ol>\n<p>  X &#x3D; SizeOfRawData(上一个区段)+PointerToRawData(上一个区段)</p>\n<ol start=\"7\">\n<li>在文件头的区段数量属性上加一</li>\n<li>在可选文件头的SizeOfImage属性上加N、</li>\n<li>文件末尾填入ShellCode</li>\n<li>修改OEP</li>\n</ol>\n</blockquote>\n<h1 id=\"附录，收集常见段的含义\"><a href=\"#附录，收集常见段的含义\" class=\"headerlink\" title=\"附录，收集常见段的含义\"></a>附录，收集常见段的含义</h1><p>rdata段</p>\n<blockquote>\n<p><a href=\"https://www.r-project.org/\">rdata段是PE文件中的一个区段，它存储了程序用到的资源数据，如图标、字符串、位图等</a><a href=\"https://www.r-project.org/\">1</a><a href=\"https://www.r-project.org/about.html\">。rdata段也可以存储一些只读的常量数据，如函数名、类名、导入表等</a><a href=\"https://www.r-project.org/about.html\">2</a>。</p>\n<p><a href=\"https://blog.csdn.net/qq_42458954/article/details/109286979\">rdata段是可选的，不是所有的PE文件都有它。如果有rdata段，它通常位于text段和data段之间</a><a href=\"https://blog.csdn.net/qq_42458954/article/details/109286979\">3</a><a href=\"https://blog.csdn.net/Simon798/article/details/96876910\">。rdata段的属性是只读的，不能被修改</a><a href=\"https://blog.csdn.net/Simon798/article/details/96876910\">4</a>。</p>\n</blockquote>\n<p>bss段</p>\n<blockquote>\n<p><a href=\"https://bing.com/search?q=bss%E6%AE%B5\">bss段是PE文件中的一个区段，它存储了程序中未初始化或初始化为零的全局变量和静态局部变量</a><a href=\"https://bing.com/search?q=bss%E6%AE%B5\">1</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">。bss段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">2</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">2</a>。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348026261\">bss段是可选的，不是所有的PE文件都有它。如果有bss段，它通常位于text段和data段之间</a><a href=\"https://zhuanlan.zhihu.com/p/348026261\">3</a><a href=\"https://zhuanlan.zhihu.com/p/610583072\">。bss段的属性是只读的，不能被修改</a><a href=\"https://zhuanlan.zhihu.com/p/610583072\">4</a>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>跟着b站学习完了PE结构，自己再整理和梳理一遍，巩固一下记忆！","more":"</p>\n<p>文件结构图：</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/4MsNZS1VOXFxH3e.jpg\" alt=\"1379525-20191026162634249-935893360\"></p>\n<h2 id=\"1-PE文件简介\"><a href=\"#1-PE文件简介\" class=\"headerlink\" title=\"1. PE文件简介\"></a>1. PE文件简介</h2><p>PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）</p>\n<p>PE文件有自己的一种文件格式，叫做PE文件格式，它包含了可执行文件的描述信息，以及程序运行时需要的数据。PE文件格式由以下几个部分组成：</p>\n<!-- more -->\n\n<ul>\n<li>MS-DOS头部：这是为了兼容MS-DOS系统而保留的一个头部结构，它包含了一些基本信息，如EXE标志、重定位表偏移量、PE头偏移量等 </li>\n<li>DOS Stub：这是一个可选的字节块，它通常是一个显示“此程序不能在DOS模式下运行”的消息的程序 </li>\n<li>PE头标识：这是一个四字节的标识，其内容固定为“PE00”，用来表示这是一个PE文件 </li>\n<li>标准PE头：这是一个20字节的结构，它记录了PE文件的全局属性，如运行平台、节的数量、创建时间等 </li>\n<li>扩展PE头：这是一个224字节的结构，它记录了PE文件执行时的一些重要信息，如入口地址、装载基址、节对齐粒度、校验和等 </li>\n<li>数据目录：这是一个128字节的结构，它记录了PE文件中一些特殊数据的位置和大小，如导入表、导出表、资源表等 </li>\n<li>节表：这是一个由若干个40字节的结构组成的表格，它记录了PE文件中每个节的名称、位置、大小、属性等信息 </li>\n<li>节数据：这是PE文件中实际存放代码和数据的部分，它由若干个节组成，每个节对应于节表中的一项</li>\n</ul>\n<h2 id=\"2-Dos头解析\"><a href=\"#2-Dos头解析\" class=\"headerlink\" title=\"2. Dos头解析\"></a>2. Dos头解析</h2><p>DOS头是PE文件开头的一个固定长度的结构体，是为了兼容MS-DOS系统而保留的一个头部结构，大小0x40字节。包含如下信息</p>\n<blockquote>\n<ul>\n<li><strong>e_magic</strong>：一个WORD类型，值是一个常数0x4D5A，用文本编辑器查看该值位 MZ，可执行文件必须都是 MZ 开头</li>\n<li><strong>e_lfanew</strong>：为32位可执行文件扩展的域，用来表示DOS头之后的PE头相对文件起始地址的偏移</li>\n<li>e_cblp：最后一页中字节数</li>\n<li>e_cp：文件中页数</li>\n<li>e_crlc：重定位项数</li>\n<li>e_cparhdr：头部占用的内存段数</li>\n<li>e_minalloc：最小需要的附加内存段数</li>\n<li>e_maxalloc：最大需要的附加内存段数</li>\n<li>e_ss：初始SS值（相对于段起始地址）</li>\n<li>e_sp：初始SP值</li>\n<li>e_csum：校验和</li>\n<li>e_ip：初始IP值（相对于段起始地址）</li>\n<li>e_cs：初始CS值（相对于段起始地址）</li>\n<li>e_lfarlc：重定位表相对于文件起始地址的偏移</li>\n<li>e_ovno：覆盖号</li>\n<li>e_res：保留字</li>\n<li>e_oemid：OEM标识符</li>\n<li>e_oeminfo：OEM信息</li>\n<li>e_res2：保留字</li>\n</ul>\n</blockquote>\n<p>在DOS头中比较重要的两个参数是e_magic和e_lfanew，前者是PE文件标识头，后者是PE文件头的相对文件起始地址的偏移。</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/3AX8hfVCqtcaS9r.png\" alt=\"Typora卸载程序的DOS头\"></p>\n<p>e_magic是前两个字节，对应的是字符串是MZ，e_ifanew是后四个字节，因为是小端序，所以对应的值是0x100，也就是说PE文件头对应偏移是0x100</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/WB6zye9vVgiomGl.png\" alt=\"PE文件头偏移\"></p>\n<p>在DOS头之后，还有一段DOS块，这段空间是由编译器生成，用来存储一些程序运行的信息，可以随意更改，对程序没有影响</p>\n<h2 id=\"3-PE头解析\"><a href=\"#3-PE头解析\" class=\"headerlink\" title=\"3. PE头解析\"></a>3. PE头解析</h2><p>PE头又叫NT头，是整个PE文件真正的头部，共有三个字段</p>\n<blockquote>\n<ol>\n<li><code>DWORD Signature</code> PE文件头标识，两个字节，一般是504500</li>\n<li><code>struct IMAGE_FILE_HEADER FileHeader</code> 结构体，文件头</li>\n<li><code>struct IMAGE_OPTIONAL_HEADER32 OptionalHeader</code>结构体， 可选文件头</li>\n</ol>\n</blockquote>\n<p>文件头结构体包含6个字段</p>\n<blockquote>\n<ol>\n<li><code>enum IMAGE_MACHINE Machine</code> WORD类型，程序允许的的CPU型号，为0则支持所有CPU</li>\n<li><code>WORD NumberOfSections</code> <strong>文件中区段的数量</strong></li>\n<li><code>time_t TimeDateStamp</code> 时间戳</li>\n<li><code>DWORD PointerToSymbolTable</code> </li>\n<li><code>DWORD NumberOfSymbols</code> </li>\n<li><code>WORD SizeOfOptionalHeader</code>  <strong>可选PE头的大小</strong>，32位默认0xE0，64位默认0xF0</li>\n<li><code>struct FILE_CHARACTERISTICS Characteristics</code> WORD，文件属性，通过16位二进制控制是否可执行，是否是dll之类的文件属性</li>\n</ol>\n</blockquote>\n<p>Typora卸载程序在DIE分析结果如下</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/tuRvPNJUcBT1Fnm.png\" alt=\"在DIE下Typora卸载程序文件头\"></p>\n<p>64位下可选PE头包含以下字段</p>\n<blockquote>\n<ol>\n<li><code>enum OPTIONAL_MAGIC Magic</code> 标识64位32位，前者20B，后者10B</li>\n<li><code>BYTE MajorLinkerVersion</code>  </li>\n<li><code>BYTE MinorLinkerVersion</code> </li>\n<li><code>DWORD SizeOfCode</code> 所有代码段的总大小，按照文件对齐后的大小</li>\n<li><code>DWORD SizeOfInitializedData</code> 已初始化的数据大小，按照文件对齐</li>\n<li><code>DWORD SizeOfUninitializedData</code> 未初始化的数据大小，按照文件对齐</li>\n<li><code>DWORD AddressOfEntryPoint</code> <strong>程序入口的OEP</strong> 存储的是一个偏移值，程序入口的<strong>内存偏移</strong></li>\n<li><code>DWORD BaseOfCode</code> 代码开始地址</li>\n<li><code>DWORD BaseOfData</code> 数据开始地址</li>\n<li><code>DWORD ImageBase</code> <strong>内存镜像地址</strong>，有可能是动态的，在<code>DLL_CHARACTERISTICS DllCharacteristics</code>中定义是否动态</li>\n<li><code>DWORD SectionAlignment</code> 内存对齐大小</li>\n<li><code>DWORD FileAlignment</code> 文件对齐大小</li>\n<li><code>WORD MajorOperatingSystemVersion</code></li>\n<li><code>WORD MinorOperatingSystemVersion</code></li>\n<li><code>WORD MajorImageVersion</code></li>\n<li><code>WORD MinorImageVersion</code></li>\n<li><code>WORD MajorSubsystemVersion</code></li>\n<li><code>WORD MinorSubsystemVersion</code></li>\n<li><code>DWORD Win32VersionValue</code></li>\n<li><code>DWORD SizeOfImage</code> 文件在内存中的大小，按照内存对齐后的大小</li>\n<li><code>DWORD SizeOfHeaders</code> DOS头+NT头+标准PE头+可选PE头+区段头，按照文件对齐后的大小</li>\n<li><code>DWORD CheckSum</code></li>\n<li><code>enum IMAGE_SUBSYSTEM Subsystem</code></li>\n<li><code>struct DLL_CHARACTERISTICS DllCharacteristics</code></li>\n<li><code>DWORD SizeOfStackReserve</code></li>\n<li><code>DWORD SizeOfStackCommit</code></li>\n<li><code>DWORD SizeOfHeapReserve</code></li>\n<li><code>DWORD SizeOfHeapCommit</code></li>\n<li><code>DWORD LoaderFlags</code></li>\n<li><code>DWORD NumberOfRvaAndSizes</code> 数据目录表的个数</li>\n<li><code>struct IMAGE_DATA_DIRECTORY_ARRAY DataDirArray</code> <strong>数据目录表数组</strong>在导出表导入表里分析</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2024/06/23/SajxQtylMvhB24J.png\" alt=\"可选头中动静态地址分析\"></p>\n<p>在VS中控制该属性的地方：</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/4IHRYOuwKins9f3.png\" alt=\"动态基址生成文件\"></p>\n<p>数据目录表数组以及数据目录表结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数据目录表数组</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Export<span class=\"comment\">//导出表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Import<span class=\"comment\">//导入表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Resource<span class=\"comment\">//资源</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Exception<span class=\"comment\">//异常</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Security<span class=\"comment\">//安全</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> BaseRelocationTable<span class=\"comment\">//重定位表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> DebugDirectory<span class=\"comment\">//调试信息</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> CopyrightOrArchitectureSpecificData<span class=\"comment\">//版权信息</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> GlobalPtr<span class=\"comment\">//RVA OF GP</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> TLSDirectory<span class=\"comment\">//TLS directory</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> LoadConfigurationDirectory</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> BoundImportDirectory</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> ImportAddressTable<span class=\"comment\">//导入函数地址表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> DelayLoadImportDescriptors</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> COMRuntimedescriptor</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IMAGE_DATA_DIRECTORY</span> Reserved</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表的结构体：</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD   VirtualAddress;<span class=\"comment\">//真正表结构体的内存偏移</span></span><br><span class=\"line\">    DWORD   Size;<span class=\"comment\">//大小，可被修改，没什么用</span></span><br><span class=\"line\">&#125; IMAGE_DATA_DIRECTORY;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-区段头分析\"><a href=\"#4-区段头分析\" class=\"headerlink\" title=\"4. 区段头分析\"></a>4. 区段头分析</h2><p>010中exe模版下的区段头结构体，数量取决于PE文件头的NumberOfSections</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BYTE    Name[<span class=\"number\">8</span>] &lt;comment=<span class=\"string\">&quot;can end without zero&quot;</span>&gt;;</span><br><span class=\"line\">    <span class=\"comment\">//区段名称，字符串不用以0结尾</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DWORD PhysicalAddress;</span><br><span class=\"line\">        DWORD VirtualSize;</span><br><span class=\"line\">    &#125; Misc;<span class=\"comment\">//该区段在内存中的真实大小</span></span><br><span class=\"line\">    DWORD   VirtualAddress;     <span class=\"comment\">//区段在内存中的偏移地址    </span></span><br><span class=\"line\">    DWORD   SizeOfRawData;    <span class=\"comment\">//区段在对齐后的大小      </span></span><br><span class=\"line\">    DWORD   PointerToRawData; <span class=\"comment\">//区段在文件中的偏移位置       </span></span><br><span class=\"line\">    DWORD   PointerToRelocations;<span class=\"comment\">//</span></span><br><span class=\"line\">    DWORD   PointerToLinenumbers;</span><br><span class=\"line\">    WORD    NumberOfRelocations;</span><br><span class=\"line\">    WORD    NumberOfLinenumbers;</span><br><span class=\"line\">    SECTION_CHARACTERISTICS Characteristics;<span class=\"comment\">//区段属性</span></span><br><span class=\"line\">&#125; IMAGE_SECTION_HEADER </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在010中区段头数量和名称分析如下</p>\n<p><img src=\"https://s2.loli.net/2024/06/23/l8pyL6dSfEg5ZH3.png\" alt=\"image-20230920194909946\"></p>\n<h2 id=\"5-导出表分析\"><a href=\"#5-导出表分析\" class=\"headerlink\" title=\"5. 导出表分析\"></a>5. 导出表分析</h2><p>导出表结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD   Characteristics;</span><br><span class=\"line\">    <span class=\"type\">time_t</span>  TimeDateStamp;<span class=\"comment\">//时间戳</span></span><br><span class=\"line\">    WORD    MajorVersion;</span><br><span class=\"line\">    WORD    MinorVersion;</span><br><span class=\"line\">    DWORD   Name;<span class=\"comment\">//导出表名称</span></span><br><span class=\"line\">    DWORD   Base;<span class=\"comment\">//导出表起始序号</span></span><br><span class=\"line\">    DWORD   NumberOfFunctions;<span class=\"comment\">//导出函数数量 = 终止序号-起始序号+1</span></span><br><span class=\"line\">    DWORD   NumberOfNames;<span class=\"comment\">//以名称导出函数的个数</span></span><br><span class=\"line\">    DWORD   AddressOfFunctions;<span class=\"comment\">//EAT 导出函数地址表 </span></span><br><span class=\"line\">    DWORD   AddressOfNames;<span class=\"comment\">//ENT 导出函数名称表         </span></span><br><span class=\"line\">    DWORD   AddressOfNameOrdinals; <span class=\"comment\">//EOT 导出函数序号表  </span></span><br><span class=\"line\">&#125; IMAGE_EXPORT_DIRECTORY ;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结构体中地址表。名称表，序号表都指的是内存偏移，也就是RVA，推到公式是RVA &#x3D; FOA +filebuff</p>\n<h2 id=\"6-导入表分析\"><a href=\"#6-导入表分析\" class=\"headerlink\" title=\"6. 导入表分析\"></a>6. 导入表分析</h2><p>跟导出表不同，导入表一个程序可以有多个</p>\n<p>导入表结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG   Characteristics;</span><br><span class=\"line\">        ULONG   OriginalFirstThunk ;<span class=\"comment\">//RVA，指向INT</span></span><br><span class=\"line\">    &#125; DUMMYUNIONNAME;</span><br><span class=\"line\">    ULONG   TimeDateStamp;<span class=\"comment\">//时间戳，如果不与dll绑定时，为0</span></span><br><span class=\"line\">    ULONG   ForwarderChain;<span class=\"comment\">//</span></span><br><span class=\"line\">    ULONG   Name;<span class=\"comment\">//RVA dll的名称</span></span><br><span class=\"line\">    ULONG   FirstThunk;<span class=\"comment\">//RVA to IAT</span></span><br><span class=\"line\">&#125; IMAGE_IMPORT_DESCRIPTOR </span><br></pre></td></tr></table></figure>\n\n<p>​p>\n<h2 id=\"7-重定位表\"><a href=\"#7-重定位表\" class=\"headerlink\" title=\"7. 重定位表\"></a>7. 重定位表</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD   VirtualAddress &lt;format=hex,comment=CommentRVA2FOA&gt;;</span><br><span class=\"line\">    DWORD   SizeOfBlock;</span><br><span class=\"line\"><span class=\"comment\">//  WORD    TypeOffset[1];</span></span><br><span class=\"line\">&#125; IMAGE_BASE_RELOCATION &lt;comment=CommentImageBaseRelocation&gt;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-利用TEB和PEB找到核心模块的信息\"><a href=\"#8-利用TEB和PEB找到核心模块的信息\" class=\"headerlink\" title=\"8. 利用TEB和PEB找到核心模块的信息\"></a>8. 利用TEB和PEB找到核心模块的信息</h2><p>PEB：Process Environment Block 进程环境块，存放进程相关信息</p>\n<p>TEB：Thread Environment Block  线程环境块</p>\n<blockquote>\n<p>PEB和TEB分别是进程环境块和线程环境块，它们是存放进程和线程信息的结构体。PEB和TEB的结构体成员有很多，其中一些是用于反调试技术的。PEB和TEB的访问方法有以下几种：</p>\n<ul>\n<li>通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址</li>\n<li>通过Ntdll.NtCurrentTeb()函数获取当前线程的TEB地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址</li>\n<li>通过GetModuleHandle()函数获取进程的ImageBase地址，然后通过ImageBase地址加上偏移量获取PEB的地址</li>\n</ul>\n</blockquote>\n<p>PEB结构体定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_PEB</span> &#123;</span><br><span class=\"line\">  BYTE                          Reserved1[<span class=\"number\">2</span>];</span><br><span class=\"line\">  BYTE                          BeingDebugged;</span><br><span class=\"line\">  BYTE                          Reserved2[<span class=\"number\">1</span>];</span><br><span class=\"line\">  PVOID                         Reserved3[<span class=\"number\">2</span>];</span><br><span class=\"line\">  PPEB_LDR_DATA                 Ldr;  <span class=\"comment\">//偏移0xc</span></span><br><span class=\"line\">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class=\"line\">  PVOID                         Reserved4[<span class=\"number\">3</span>];</span><br><span class=\"line\">  PVOID                         AtlThunkSListPtr;</span><br><span class=\"line\">  PVOID                         Reserved5;</span><br><span class=\"line\">  ULONG                         Reserved6;</span><br><span class=\"line\">  PVOID                         Reserved7;</span><br><span class=\"line\">  ULONG                         Reserved8;</span><br><span class=\"line\">  ULONG                         AtlThunkSListPtr32;</span><br><span class=\"line\">  PVOID                         Reserved9[<span class=\"number\">45</span>];</span><br><span class=\"line\">  BYTE                          Reserved10[<span class=\"number\">96</span>];</span><br><span class=\"line\">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class=\"line\">  BYTE                          Reserved11[<span class=\"number\">128</span>];</span><br><span class=\"line\">  PVOID                         Reserved12[<span class=\"number\">1</span>];</span><br><span class=\"line\">  ULONG                         SessionId;</span><br><span class=\"line\">&#125; PEB, *PPEB;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>PPEB_LDR_DATA结构体定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_PEB_LDR_DATA</span> &#123;</span><br><span class=\"line\">  BYTE Reserved1 [<span class=\"number\">8</span>];</span><br><span class=\"line\">  PVOID Reserved2 [<span class=\"number\">3</span>];</span><br><span class=\"line\">  LIST_ENTRY InMemoryOrderModuleList;<span class=\"comment\">//载入顺序排序的dll</span></span><br><span class=\"line\">  LIST_ENTRY InLoadOrderModuleList;<span class=\"comment\">//内存排序的dll</span></span><br><span class=\"line\">  LIST_ENTRY InInitializationOrderModuleList;<span class=\"comment\">//初始化排序的dll，偏移0x1c</span></span><br><span class=\"line\">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure>\n\n<p>LIST_ENTRY结构体定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> *Flink;<span class=\"comment\">//下一个节点的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> *Blink;<span class=\"comment\">//上一个节点的指针</span></span><br><span class=\"line\">&#125; LIST_ENTRY, *PLIST_ENTRY, *PRLIST_ENTRY;</span><br></pre></td></tr></table></figure>\n\n<p>获取kernel32.dll或者kernerbase.dll的模块信息</p>\n<blockquote>\n<p><a href=\"https://bing.com/search?q=kernel32.dll%E6%88%96%E8%80%85kernerbase.dll%E9%83%BD%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%A8%A1%E5%9D%97\">kernel32.dll和kernerbase.dll都是Windows操作系统的重要文件，它们是NT内核系统的底层API接口的DLL文件，与其他应用程序和运行库进行交互。</a><a href=\"https://bing.com/search?q=kernel32.dll%E6%88%96%E8%80%85kernerbase.dll%E9%83%BD%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%A8%A1%E5%9D%97\">1</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/242615448\">kernel32.dll和kernerbase.dll有相同的功能，但是它们的区别在于，kernel32.dll是一个向后兼容的文件，它包含了一些旧版本的Windows API函数，而kernerbase.dll是一个新的文件，它包含了一些新版本的Windows API函数。</a></p>\n</blockquote>\n<p>kernel32.dll和kernerbase.dll包含<strong>GetProcAddress</strong>，<em><strong>LoadLibraryA</strong></em>，<em><strong>LoadModule</strong></em>等等</p>\n<p>更多API-&gt;<a href=\"https://www.geoffchappell.com/\">Geoff Chappell, Software Analyst</a></p>\n<p>user32.dll-&gt;<a href=\"https://blog.csdn.net/qq_38406587/article/details/105505007\">User32大全详解-CSDN博客</a></p>\n<p> <code>mov esi,dword ptr fs:[0x30] </code> 获取PEB地址</p>\n<p><code>mov esi,[esi+0xc]</code> 获取Ldr地址</p>\n<p><code>mov esi,[esi+0x1c]</code> 获取InInitializationOrderModuleList</p>\n<p><code>mov esi,[esi]</code> 获取InInitializationOrderModuleList的第二项，esi既是LIST_ENTRY结构体地址，也是下一个节点指针的地址</p>\n<p><code>mov esi,[esi+0x8] </code> 模块信息，kernel32或者kernerbase模块基址</p>\n<blockquote>\n<p>拿到了dll模块基址，通过基址和固定偏移来访问导出表，再通过导出表和定义好的字符串（函数名称）比较来获取模块指定函数——<strong>GetProcAddress</strong>，<em><strong>LoadLibraryA</strong></em>等等，到这就可以利用函数地址调用指定函数了</p>\n</blockquote>\n<p><code>mov edx,esi</code> 保存模块基址<br><code>mov esi,[esi+0x3c]</code> 获取NT头偏移<br><code>lea esi,[edx+esi] </code> 得到NT头地址<br><code>mov esi,[esi+0x78]</code> 得到导出表RVA<br><code>lea esi,[edx+esi] </code> 得到导出表VA<br><code>mov edi,[esi+0x1c]</code> 得到EAT的RVA（地址表）<br><code>lea edi,[edi+edx]</code> 得到EAT的RA<br><code>mov [ebp-0x4],edi</code> 保存在栈中<br><code>mov edi,[esi+0x20]</code> 得到ENT的RVA（名称表）<br><code>lea edi,[edx+edi]</code> 得到ENT的VA<br><code>mov [ebp-0x8],edi</code> 保存在栈中<br><code>mov edi,[esi+0x24]</code> 得到EOT的RVA（序号表）<br><code>lea edi,[edx+edi]</code> 得到EOT的VA<br><code>mov [ebp-0xc],edi</code> 保存在栈中</p>\n<p><strong>LDR_DATA_TABLE_ENTRY</strong>结构体是一个用来存放模块信息的结构体，它的定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_LDR_DATA_TABLE_ENTRY</span> &#123;</span><br><span class=\"line\">  PVOID Reserved1[<span class=\"number\">2</span>];</span><br><span class=\"line\">  LIST_ENTRY InMemoryOrderLinks;<span class=\"comment\">//双向链表连接所有模块信息</span></span><br><span class=\"line\">  PVOID Reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">  PVOID DllBase;<span class=\"comment\">//模块基址</span></span><br><span class=\"line\">  PVOID EntryPoint;<span class=\"comment\">//模块入口点</span></span><br><span class=\"line\">  PVOID Reserved3;</span><br><span class=\"line\">  UNICODE_STRING FullDllName;<span class=\"comment\">//模块完整名称</span></span><br><span class=\"line\">  BYTE Reserved4[<span class=\"number\">8</span>];</span><br><span class=\"line\">  PVOID Reserved5[<span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">    ULONG CheckSum;</span><br><span class=\"line\">    PVOID Reserved6;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  ULONG TimeDateStamp;</span><br><span class=\"line\">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data\">其中，Reserved1，Reserved2，Reserved3，Reserved4，Reserved5和Reserved6都是保留供操作系统内部使用的字段，不对外公开。DllBase是模块的基址，EntryPoint是模块的入口点，FullDllName是模块的完整名称，CheckSum是模块的校验和，TimeDateStamp是模块的时间戳。InMemoryOrderLinks是一个双向链表节点，它用来将所有的模块信息连接起来。</a></p>\n</blockquote>\n<p>通过导出表kernel32.dll获得其中的“LoadLibraryA” 和 “GetProAddress”</p>\n<h2 id=\"9-增加区段头向PE文件中植入代码\"><a href=\"#9-增加区段头向PE文件中植入代码\" class=\"headerlink\" title=\"9. 增加区段头向PE文件中植入代码\"></a>9. 增加区段头向PE文件中植入代码</h2><p><strong>ShellCode：</strong>–执行打印helloworld的代码<br>$$<br>“\\x60\\x8B\\xEC\\x6A\\x00\\x68\\x72\\x6C\\x64\\x21\\x68\\x6F\\x20\\x77\\x6F\\x68\\x68\\x65\\x6C\\x6C\\x68\\x73\\x73\\x00\\x00\\x68\\x64\\x64\\x72\\x65\\x68\\x72\\x6F\\x63\\x41\\x68\\x47\\x65\\x74\\x50\\x6A\\x00\\x68\\x61\\x72\\x79\\x41\\x68\\x4C\\x69\\x62\\x72\\x68\\x4C\\x6F\\x61\\x64\\x8B\\xCC\\x51\\xE8\\x8F\\x00\\x00\\x00\\x8B\\xE5\\x61\\xE9\\xF7\\x70\\xFB\\xFF\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x56\\x64\\x8B\\x35\\x30\\x00\\x00\\x00\\x8B\\x76\\x0C\\x8B\\x76\\x1C\\x8B\\x36\\x8B\\x76\\x08\\x8B\\xC6\\x5E\\x8B\\xE5\\x5D\\xC3\\x55\\x8B\\xEC\\x83\\xEC\\x20\\x8B\\x55\\x08\\x8B\\x72\\x3C\\x8D\\x34\\x16\\x8B\\x76\\x78\\x8D\\x34\\x32\\x8B\\x7E\\x1C\\x8D\\x3C\\x17\\x89\\x7D\\xFC\\x8B\\x7E\\x20\\x8D\\x3C\\x17\\x89\\x7D\\xF8\\x8B\\x7E\\x24\\x8D\\x3C\\x17\\x89\\x7D\\xF4\\x33\\xC0\\xEB\\x01\\x40\\x8B\\x75\\xF8\\x8B\\x34\\x86\\x8D\\x34\\x16\\x8B\\x7D\\x0C\\x8B\\x4D\\x10\\xF3\\xA6\\x8B\\x75\\xF4\\x75\\xE9\\x8B\\x75\\xF4\\x33\\xFF\\x66\\x8B\\x3C\\x46\\x8B\\x55\\xFC\\x8B\\x34\\xBA\\x8B\\x55\\x08\\x8D\\x04\\x16\\x8B\\xE5\\x5D\\xC2\\x0C\\x00\\x55\\x8B\\xEC\\x83\\xEC\\x10\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xFC\\x8D\\x4D\\x0C\\x6A\\x0C\\x51\\x50\\xE8\\x80\\xFF\\xFF\\xFF\\x89\\x45\\xF8\\x6A\\x0E\\x8D\\x4D\\x1C\\x51\\xFF\\x75\\xFC\\xE8\\x6F\\xFF\\xFF\\xFF\\x89\\x45\\xF4\\x68\\x6C\\x6C\\x00\\x00\\x68\\x72\\x74\\x2E\\x64\\x68\\x6D\\x73\\x76\\x63\\x36\\x8D\\x4D\\xE4\\x51\\xFF\\x55\\xF8\\x68\\x74\\x66\\x00\\x00\\x68\\x70\\x72\\x69\\x6E\\x8D\\x4D\\xDC\\x51\\x50\\xFF\\x55\\xF4\\x8D\\x4D\\x2C\\x51\\xFF\\xD0\\x8B\\xE5\\x5D\\xC3”<br>$$</p>\n<blockquote>\n<ol>\n<li><p>在文件末尾增加N字节给自己的代码提供空间</p>\n</li>\n<li><p>向最后一个区段后添加一个和text属性相同的区段</p>\n</li>\n<li><p>在union misc属性下填入N</p>\n</li>\n<li><p>在VirtualAddress属性下填入M</p>\n</li>\n</ol>\n<p>  M &#x3D; VirtualAddress(上一个区段)+内存对齐值*（max(SizeOfRawData,VirtualSize)&#x2F;内存对齐值)</p>\n<ol start=\"5\">\n<li><p>在SizeOfRawData属性下填入N</p>\n</li>\n<li><p>在PointerToRawData属性下填入X</p>\n</li>\n</ol>\n<p>  X &#x3D; SizeOfRawData(上一个区段)+PointerToRawData(上一个区段)</p>\n<ol start=\"7\">\n<li>在文件头的区段数量属性上加一</li>\n<li>在可选文件头的SizeOfImage属性上加N、</li>\n<li>文件末尾填入ShellCode</li>\n<li>修改OEP</li>\n</ol>\n</blockquote>\n<h1 id=\"附录，收集常见段的含义\"><a href=\"#附录，收集常见段的含义\" class=\"headerlink\" title=\"附录，收集常见段的含义\"></a>附录，收集常见段的含义</h1><p>rdata段</p>\n<blockquote>\n<p><a href=\"https://www.r-project.org/\">rdata段是PE文件中的一个区段，它存储了程序用到的资源数据，如图标、字符串、位图等</a><a href=\"https://www.r-project.org/\">1</a><a href=\"https://www.r-project.org/about.html\">。rdata段也可以存储一些只读的常量数据，如函数名、类名、导入表等</a><a href=\"https://www.r-project.org/about.html\">2</a>。</p>\n<p><a href=\"https://blog.csdn.net/qq_42458954/article/details/109286979\">rdata段是可选的，不是所有的PE文件都有它。如果有rdata段，它通常位于text段和data段之间</a><a href=\"https://blog.csdn.net/qq_42458954/article/details/109286979\">3</a><a href=\"https://blog.csdn.net/Simon798/article/details/96876910\">。rdata段的属性是只读的，不能被修改</a><a href=\"https://blog.csdn.net/Simon798/article/details/96876910\">4</a>。</p>\n</blockquote>\n<p>bss段</p>\n<blockquote>\n<p><a href=\"https://bing.com/search?q=bss%E6%AE%B5\">bss段是PE文件中的一个区段，它存储了程序中未初始化或初始化为零的全局变量和静态局部变量</a><a href=\"https://bing.com/search?q=bss%E6%AE%B5\">1</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">。bss段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">2</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区</a><a href=\"https://zh.wikipedia.org/wiki/BSS%E6%AE%B5\">2</a>。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/348026261\">bss段是可选的，不是所有的PE文件都有它。如果有bss段，它通常位于text段和data段之间</a><a href=\"https://zhuanlan.zhihu.com/p/348026261\">3</a><a href=\"https://zhuanlan.zhihu.com/p/610583072\">。bss段的属性是只读的，不能被修改</a><a href=\"https://zhuanlan.zhihu.com/p/610583072\">4</a>。</p>\n</blockquote>"},{"title":"植物大战僵尸杂交版辅助制作","date":"2024-03-11T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png","thumbnail":"https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n外挂思路很简单，就是在CE里找有关数据和代码地址，通过修改进程数据和代码实现相关功能，这里简单记录一下我的外挂实现方法<!-- more -->\n\n效果图：\n\n![cbf0daa9-bbe6-4890-b9bf-328cb2e0652f](https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png)\n\n## 小富一手（阳光加1000）\n\n在CE中找到阳光的地址，进行读取和写入操作即可\n\n```C\nBOOL GetRich(HANDLE hProcess)\n{\n        static int count = 0;\n        uint32_t addr = getAddr(hProcess, SunBaseAddr, OFFSET_NUM1, sunOffset);\n        if (addr)\n        {\n                int NowSun = 0;\n                if (ReadProcessMemory(hProcess, (LPVOID)addr, &NowSun, 4, NULL))\n                {\n                        int Buffer = AddSun + NowSun;//读取后进行加1000操作后写入\n                        if (WriteProcessMemory(hProcess, (LPVOID)addr, &Buffer, 4, NULL))\n                        {\n                                return true;\n                        }\n                }\n                \n        }\n        return false;\n}\n```\n\n## 免费种植\n\n根据阳光地址，在CE中找到改写该地址的代码，分析汇编代码找到扣除阳光的逻辑，nop掉即可\n\n```C\n/*免费终止代码实现过程\n* [edi+5560]处是当前阳光值,cmp ebx,eax中ebx是要种植植物所需的阳光,eax是当前阳光值\n* \n0041BA60  | 56                              | push esi                                     |\n0041BA61  | 8BB7 60550000                   | mov esi,dword ptr ds:[edi+5560]              | edi+5560:L\"ē\"\n0041BA67  | 8BD7                            | mov edx,edi                                  | edx:\"╨e\", edi:\"╨e\"\n0041BA69  | E8 12FFFFFF                     | call plantsvszombies.41B980                  |\n0041BA6E  | 03C6                            | add eax,esi                                  |\n0041BA70  | 3BD8                            | cmp ebx,eax                                  |\n0041BA72  | 7F 0C                           | jg plantsvszombies.41BA80                    |\n0041BA74  | 2BF3                            | sub esi,ebx                                  |\n0041BA76  | E9 253C4300                     | jmp plantsvszombies.84F6A0                   |\n\n\n0x0041BA74\n{\n0x2B, 0xF3\n};\n替换成\n{\n0x90, 0x90\n};\n0041BA60  | 56                          | push esi                                     |\n0041BA61  | 8BB7 60550000               | mov esi,dword ptr ds:[edi+5560]              |\n0041BA67  | 8BD7                        | mov edx,edi                                  |\n0041BA69  | E8 12FFFFFF                 | call plantsvszombies.41B980                  |\n0041BA6E  | 03C6                        | add eax,esi                                  |\n0041BA70  | 3BD8                        | cmp ebx,eax                                  |\n0041BA72  | 7F 0C                       | jg plantsvszombies.41BA80                    |\n0041BA74  | 90                          | nop                                          |\n0041BA75  | 90                          | nop                                          |\n0041BA76  | E9 253C4300                 | jmp plantsvszombies.84F6A0                   |\n*/\n\nBOOL Unlimited_SunShine(HANDLE hProcess)\n{\n        uint8_t shellcode[] = {\n0x90, 0x90\n        };//nop指令填充扣除阳光的逻辑代码\n        size_t size = sizeof(shellcode) / sizeof(shellcode[0]);\n        VirtualProtectEx(hProcess, (LPVOID)TextSubSun, size, PAGE_EXECUTE_READWRITE, NULL);\n        if (WriteProcessMemory(hProcess, (LPVOID)TextSubSun, (LPCVOID)shellcode, size, NULL))\n        {\n\n                return true;\n        }\n        return false;\n}\n```\n\n## 零冷却\n\n同理，找到CD的内存地址，在CE中寻找改写该地址的汇编代码，里面含有CD是否冷却完成的条件跳转，转成绝对跳转即可\n\n```C\n/*零CD代码实现过程\n* 植物种下后[ebp+24]地址的双浮点数作为计数器逐渐增加\n00488E71  | 33C0                            | xor eax,eax                                  |\n00488E73  | C645 48 00                      | mov byte ptr ss:[ebp+48],0                   |\n00488E77  | 8945 24                         | mov dword ptr ss:[ebp+24],eax                |\n00488E7A  | 8945 28                         | mov dword ptr ss:[ebp+28],eax                | [ebp+28]:L\"2\"\n00488E7D  | 8845 49                         | mov byte ptr ss:[ebp+49],al                  |\n*/\n\n/*\n* [edi+24]处为计数器,值增加,[edi+28]为植物属性CD\n0048728C  | 8347 24 01                      | add dword ptr ds:[edi+24],1                  |\n00487290  | 8B47 24                         | mov eax,dword ptr ds:[edi+24]                |\n00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |\n00487296  | 7E 14                           | jle plantsvszombies.4872AC                   |\n\n0x0048728C\n{\n0x83, 0x47, 0x24, 0x01, 0x8B, 0x47, 0x24\n};\n\n替换成\n{\n0x8B, 0x47, 0x28, 0x90, 0x83, 0xC0, 0x01, 0x3B, 0x47, 0x28\n};\n修改目的:计数器始终比CD大1,实现绝对跳转0 CD\n0048728C  | 8B47 28                         | mov eax,dword ptr ds:[edi+28]                |\n0048728F  | 90                              | nop                                          |\n00487290  | 83C0 01                         | add eax,1                                    |\n00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |\n*/\n\n\nBOOL zeroCD(HANDLE hProcess)\n{\n        uint8_t shellcode[] = {\n0x8B, 0x47, 0x28, 0x90, 0x83, 0xC0, 0x01, 0x3B, 0x47, 0x28\n        };\n        size_t size = sizeof(shellcode) / sizeof(shellcode[0]);\n        VirtualProtectEx(hProcess, (LPVOID)TextZeroCD, size, PAGE_EXECUTE_READWRITE, NULL);\n        \n        if (WriteProcessMemory(hProcess, (LPVOID)TextZeroCD, (LPCVOID)shellcode, size, NULL))\n        {\n                return true;\n        }\n        return false;\n}\n```","source":"_posts/植物大战僵尸杂交版.md","raw":"---\ntitle: 植物大战僵尸杂交版辅助制作\ndate: 2024/3/12\ncategories: 实践\ntags:\n  - 破解\n  -\t逆向\nsticky: 100\ncover: https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png\nthumbnail: https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n外挂思路很简单，就是在CE里找有关数据和代码地址，通过修改进程数据和代码实现相关功能，这里简单记录一下我的外挂实现方法<!-- more -->\n\n效果图：\n\n![cbf0daa9-bbe6-4890-b9bf-328cb2e0652f](https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png)\n\n## 小富一手（阳光加1000）\n\n在CE中找到阳光的地址，进行读取和写入操作即可\n\n```C\nBOOL GetRich(HANDLE hProcess)\n{\n        static int count = 0;\n        uint32_t addr = getAddr(hProcess, SunBaseAddr, OFFSET_NUM1, sunOffset);\n        if (addr)\n        {\n                int NowSun = 0;\n                if (ReadProcessMemory(hProcess, (LPVOID)addr, &NowSun, 4, NULL))\n                {\n                        int Buffer = AddSun + NowSun;//读取后进行加1000操作后写入\n                        if (WriteProcessMemory(hProcess, (LPVOID)addr, &Buffer, 4, NULL))\n                        {\n                                return true;\n                        }\n                }\n                \n        }\n        return false;\n}\n```\n\n## 免费种植\n\n根据阳光地址，在CE中找到改写该地址的代码，分析汇编代码找到扣除阳光的逻辑，nop掉即可\n\n```C\n/*免费终止代码实现过程\n* [edi+5560]处是当前阳光值,cmp ebx,eax中ebx是要种植植物所需的阳光,eax是当前阳光值\n* \n0041BA60  | 56                              | push esi                                     |\n0041BA61  | 8BB7 60550000                   | mov esi,dword ptr ds:[edi+5560]              | edi+5560:L\"ē\"\n0041BA67  | 8BD7                            | mov edx,edi                                  | edx:\"╨e\", edi:\"╨e\"\n0041BA69  | E8 12FFFFFF                     | call plantsvszombies.41B980                  |\n0041BA6E  | 03C6                            | add eax,esi                                  |\n0041BA70  | 3BD8                            | cmp ebx,eax                                  |\n0041BA72  | 7F 0C                           | jg plantsvszombies.41BA80                    |\n0041BA74  | 2BF3                            | sub esi,ebx                                  |\n0041BA76  | E9 253C4300                     | jmp plantsvszombies.84F6A0                   |\n\n\n0x0041BA74\n{\n0x2B, 0xF3\n};\n替换成\n{\n0x90, 0x90\n};\n0041BA60  | 56                          | push esi                                     |\n0041BA61  | 8BB7 60550000               | mov esi,dword ptr ds:[edi+5560]              |\n0041BA67  | 8BD7                        | mov edx,edi                                  |\n0041BA69  | E8 12FFFFFF                 | call plantsvszombies.41B980                  |\n0041BA6E  | 03C6                        | add eax,esi                                  |\n0041BA70  | 3BD8                        | cmp ebx,eax                                  |\n0041BA72  | 7F 0C                       | jg plantsvszombies.41BA80                    |\n0041BA74  | 90                          | nop                                          |\n0041BA75  | 90                          | nop                                          |\n0041BA76  | E9 253C4300                 | jmp plantsvszombies.84F6A0                   |\n*/\n\nBOOL Unlimited_SunShine(HANDLE hProcess)\n{\n        uint8_t shellcode[] = {\n0x90, 0x90\n        };//nop指令填充扣除阳光的逻辑代码\n        size_t size = sizeof(shellcode) / sizeof(shellcode[0]);\n        VirtualProtectEx(hProcess, (LPVOID)TextSubSun, size, PAGE_EXECUTE_READWRITE, NULL);\n        if (WriteProcessMemory(hProcess, (LPVOID)TextSubSun, (LPCVOID)shellcode, size, NULL))\n        {\n\n                return true;\n        }\n        return false;\n}\n```\n\n## 零冷却\n\n同理，找到CD的内存地址，在CE中寻找改写该地址的汇编代码，里面含有CD是否冷却完成的条件跳转，转成绝对跳转即可\n\n```C\n/*零CD代码实现过程\n* 植物种下后[ebp+24]地址的双浮点数作为计数器逐渐增加\n00488E71  | 33C0                            | xor eax,eax                                  |\n00488E73  | C645 48 00                      | mov byte ptr ss:[ebp+48],0                   |\n00488E77  | 8945 24                         | mov dword ptr ss:[ebp+24],eax                |\n00488E7A  | 8945 28                         | mov dword ptr ss:[ebp+28],eax                | [ebp+28]:L\"2\"\n00488E7D  | 8845 49                         | mov byte ptr ss:[ebp+49],al                  |\n*/\n\n/*\n* [edi+24]处为计数器,值增加,[edi+28]为植物属性CD\n0048728C  | 8347 24 01                      | add dword ptr ds:[edi+24],1                  |\n00487290  | 8B47 24                         | mov eax,dword ptr ds:[edi+24]                |\n00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |\n00487296  | 7E 14                           | jle plantsvszombies.4872AC                   |\n\n0x0048728C\n{\n0x83, 0x47, 0x24, 0x01, 0x8B, 0x47, 0x24\n};\n\n替换成\n{\n0x8B, 0x47, 0x28, 0x90, 0x83, 0xC0, 0x01, 0x3B, 0x47, 0x28\n};\n修改目的:计数器始终比CD大1,实现绝对跳转0 CD\n0048728C  | 8B47 28                         | mov eax,dword ptr ds:[edi+28]                |\n0048728F  | 90                              | nop                                          |\n00487290  | 83C0 01                         | add eax,1                                    |\n00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |\n*/\n\n\nBOOL zeroCD(HANDLE hProcess)\n{\n        uint8_t shellcode[] = {\n0x8B, 0x47, 0x28, 0x90, 0x83, 0xC0, 0x01, 0x3B, 0x47, 0x28\n        };\n        size_t size = sizeof(shellcode) / sizeof(shellcode[0]);\n        VirtualProtectEx(hProcess, (LPVOID)TextZeroCD, size, PAGE_EXECUTE_READWRITE, NULL);\n        \n        if (WriteProcessMemory(hProcess, (LPVOID)TextZeroCD, (LPCVOID)shellcode, size, NULL))\n        {\n                return true;\n        }\n        return false;\n}\n```","slug":"植物大战僵尸杂交版","published":1,"updated":"2024-10-02T09:35:19.256Z","layout":"post","photos":[],"link":"","_id":"cm1roa13k000jugieb6vf5dtc","content":"<p>外挂思路很简单，就是在CE里找有关数据和代码地址，通过修改进程数据和代码实现相关功能，这里简单记录一下我的外挂实现方法<span id=\"more\"></span></p>\n<p>效果图：</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png\" alt=\"cbf0daa9-bbe6-4890-b9bf-328cb2e0652f\"></p>\n<h2 id=\"小富一手（阳光加1000）\"><a href=\"#小富一手（阳光加1000）\" class=\"headerlink\" title=\"小富一手（阳光加1000）\"></a>小富一手（阳光加1000）</h2><p>在CE中找到阳光的地址，进行读取和写入操作即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">GetRich</span><span class=\"params\">(HANDLE hProcess)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> addr = getAddr(hProcess, SunBaseAddr, OFFSET_NUM1, sunOffset);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> NowSun = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ReadProcessMemory(hProcess, (LPVOID)addr, &amp;NowSun, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> Buffer = AddSun + NowSun;<span class=\"comment\">//读取后进行加1000操作后写入</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (WriteProcessMemory(hProcess, (LPVOID)addr, &amp;Buffer, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"免费种植\"><a href=\"#免费种植\" class=\"headerlink\" title=\"免费种植\"></a>免费种植</h2><p>根据阳光地址，在CE中找到改写该地址的代码，分析汇编代码找到扣除阳光的逻辑，nop掉即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*免费终止代码实现过程</span></span><br><span class=\"line\"><span class=\"comment\">* [edi+5560]处是当前阳光值,cmp ebx,eax中ebx是要种植植物所需的阳光,eax是当前阳光值</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">0041BA60  | 56                              | push esi                                     |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA61  | 8BB7 60550000                   | mov esi,dword ptr ds:[edi+5560]              | edi+5560:L&quot;ē&quot;</span></span><br><span class=\"line\"><span class=\"comment\">0041BA67  | 8BD7                            | mov edx,edi                                  | edx:&quot;╨e&quot;, edi:&quot;╨e&quot;</span></span><br><span class=\"line\"><span class=\"comment\">0041BA69  | E8 12FFFFFF                     | call plantsvszombies.41B980                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA6E  | 03C6                            | add eax,esi                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA70  | 3BD8                            | cmp ebx,eax                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA72  | 7F 0C                           | jg plantsvszombies.41BA80                    |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA74  | 2BF3                            | sub esi,ebx                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA76  | E9 253C4300                     | jmp plantsvszombies.84F6A0                   |</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">0x0041BA74</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x2B, 0xF3</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">替换成</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x90, 0x90</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">0041BA60  | 56                          | push esi                                     |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA61  | 8BB7 60550000               | mov esi,dword ptr ds:[edi+5560]              |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA67  | 8BD7                        | mov edx,edi                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA69  | E8 12FFFFFF                 | call plantsvszombies.41B980                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA6E  | 03C6                        | add eax,esi                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA70  | 3BD8                        | cmp ebx,eax                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA72  | 7F 0C                       | jg plantsvszombies.41BA80                    |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA74  | 90                          | nop                                          |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA75  | 90                          | nop                                          |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA76  | E9 253C4300                 | jmp plantsvszombies.84F6A0                   |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">Unlimited_SunShine</span><span class=\"params\">(HANDLE hProcess)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> shellcode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x90</span>, <span class=\"number\">0x90</span></span><br><span class=\"line\">        &#125;;<span class=\"comment\">//nop指令填充扣除阳光的逻辑代码</span></span><br><span class=\"line\">        <span class=\"type\">size_t</span> size = <span class=\"keyword\">sizeof</span>(shellcode) / <span class=\"keyword\">sizeof</span>(shellcode[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        VirtualProtectEx(hProcess, (LPVOID)TextSubSun, size, PAGE_EXECUTE_READWRITE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (WriteProcessMemory(hProcess, (LPVOID)TextSubSun, (LPCVOID)shellcode, size, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"零冷却\"><a href=\"#零冷却\" class=\"headerlink\" title=\"零冷却\"></a>零冷却</h2><p>同理，找到CD的内存地址，在CE中寻找改写该地址的汇编代码，里面含有CD是否冷却完成的条件跳转，转成绝对跳转即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*零CD代码实现过程</span></span><br><span class=\"line\"><span class=\"comment\">* 植物种下后[ebp+24]地址的双浮点数作为计数器逐渐增加</span></span><br><span class=\"line\"><span class=\"comment\">00488E71  | 33C0                            | xor eax,eax                                  |</span></span><br><span class=\"line\"><span class=\"comment\">00488E73  | C645 48 00                      | mov byte ptr ss:[ebp+48],0                   |</span></span><br><span class=\"line\"><span class=\"comment\">00488E77  | 8945 24                         | mov dword ptr ss:[ebp+24],eax                |</span></span><br><span class=\"line\"><span class=\"comment\">00488E7A  | 8945 28                         | mov dword ptr ss:[ebp+28],eax                | [ebp+28]:L&quot;2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">00488E7D  | 8845 49                         | mov byte ptr ss:[ebp+49],al                  |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* [edi+24]处为计数器,值增加,[edi+28]为植物属性CD</span></span><br><span class=\"line\"><span class=\"comment\">0048728C  | 8347 24 01                      | add dword ptr ds:[edi+24],1                  |</span></span><br><span class=\"line\"><span class=\"comment\">00487290  | 8B47 24                         | mov eax,dword ptr ds:[edi+24]                |</span></span><br><span class=\"line\"><span class=\"comment\">00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |</span></span><br><span class=\"line\"><span class=\"comment\">00487296  | 7E 14                           | jle plantsvszombies.4872AC                   |</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">0x0048728C</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x83, 0x47, 0x24, 0x01, 0x8B, 0x47, 0x24</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">替换成</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x8B, 0x47, 0x28, 0x90, 0x83, 0xC0, 0x01, 0x3B, 0x47, 0x28</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">修改目的:计数器始终比CD大1,实现绝对跳转0 CD</span></span><br><span class=\"line\"><span class=\"comment\">0048728C  | 8B47 28                         | mov eax,dword ptr ds:[edi+28]                |</span></span><br><span class=\"line\"><span class=\"comment\">0048728F  | 90                              | nop                                          |</span></span><br><span class=\"line\"><span class=\"comment\">00487290  | 83C0 01                         | add eax,1                                    |</span></span><br><span class=\"line\"><span class=\"comment\">00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">zeroCD</span><span class=\"params\">(HANDLE hProcess)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> shellcode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x8B</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x28</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> size = <span class=\"keyword\">sizeof</span>(shellcode) / <span class=\"keyword\">sizeof</span>(shellcode[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        VirtualProtectEx(hProcess, (LPVOID)TextZeroCD, size, PAGE_EXECUTE_READWRITE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (WriteProcessMemory(hProcess, (LPVOID)TextZeroCD, (LPCVOID)shellcode, size, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>外挂思路很简单，就是在CE里找有关数据和代码地址，通过修改进程数据和代码实现相关功能，这里简单记录一下我的外挂实现方法","more":"</p>\n<p>效果图：</p>\n<p><img src=\"https://s2.loli.net/2024/09/27/rinqudFg1o5tmUz.png\" alt=\"cbf0daa9-bbe6-4890-b9bf-328cb2e0652f\"></p>\n<h2 id=\"小富一手（阳光加1000）\"><a href=\"#小富一手（阳光加1000）\" class=\"headerlink\" title=\"小富一手（阳光加1000）\"></a>小富一手（阳光加1000）</h2><p>在CE中找到阳光的地址，进行读取和写入操作即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">GetRich</span><span class=\"params\">(HANDLE hProcess)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> addr = getAddr(hProcess, SunBaseAddr, OFFSET_NUM1, sunOffset);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> NowSun = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ReadProcessMemory(hProcess, (LPVOID)addr, &amp;NowSun, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> Buffer = AddSun + NowSun;<span class=\"comment\">//读取后进行加1000操作后写入</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (WriteProcessMemory(hProcess, (LPVOID)addr, &amp;Buffer, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"免费种植\"><a href=\"#免费种植\" class=\"headerlink\" title=\"免费种植\"></a>免费种植</h2><p>根据阳光地址，在CE中找到改写该地址的代码，分析汇编代码找到扣除阳光的逻辑，nop掉即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*免费终止代码实现过程</span></span><br><span class=\"line\"><span class=\"comment\">* [edi+5560]处是当前阳光值,cmp ebx,eax中ebx是要种植植物所需的阳光,eax是当前阳光值</span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">0041BA60  | 56                              | push esi                                     |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA61  | 8BB7 60550000                   | mov esi,dword ptr ds:[edi+5560]              | edi+5560:L&quot;ē&quot;</span></span><br><span class=\"line\"><span class=\"comment\">0041BA67  | 8BD7                            | mov edx,edi                                  | edx:&quot;╨e&quot;, edi:&quot;╨e&quot;</span></span><br><span class=\"line\"><span class=\"comment\">0041BA69  | E8 12FFFFFF                     | call plantsvszombies.41B980                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA6E  | 03C6                            | add eax,esi                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA70  | 3BD8                            | cmp ebx,eax                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA72  | 7F 0C                           | jg plantsvszombies.41BA80                    |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA74  | 2BF3                            | sub esi,ebx                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA76  | E9 253C4300                     | jmp plantsvszombies.84F6A0                   |</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">0x0041BA74</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x2B, 0xF3</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">替换成</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x90, 0x90</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">0041BA60  | 56                          | push esi                                     |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA61  | 8BB7 60550000               | mov esi,dword ptr ds:[edi+5560]              |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA67  | 8BD7                        | mov edx,edi                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA69  | E8 12FFFFFF                 | call plantsvszombies.41B980                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA6E  | 03C6                        | add eax,esi                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA70  | 3BD8                        | cmp ebx,eax                                  |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA72  | 7F 0C                       | jg plantsvszombies.41BA80                    |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA74  | 90                          | nop                                          |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA75  | 90                          | nop                                          |</span></span><br><span class=\"line\"><span class=\"comment\">0041BA76  | E9 253C4300                 | jmp plantsvszombies.84F6A0                   |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">Unlimited_SunShine</span><span class=\"params\">(HANDLE hProcess)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> shellcode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x90</span>, <span class=\"number\">0x90</span></span><br><span class=\"line\">        &#125;;<span class=\"comment\">//nop指令填充扣除阳光的逻辑代码</span></span><br><span class=\"line\">        <span class=\"type\">size_t</span> size = <span class=\"keyword\">sizeof</span>(shellcode) / <span class=\"keyword\">sizeof</span>(shellcode[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        VirtualProtectEx(hProcess, (LPVOID)TextSubSun, size, PAGE_EXECUTE_READWRITE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (WriteProcessMemory(hProcess, (LPVOID)TextSubSun, (LPCVOID)shellcode, size, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"零冷却\"><a href=\"#零冷却\" class=\"headerlink\" title=\"零冷却\"></a>零冷却</h2><p>同理，找到CD的内存地址，在CE中寻找改写该地址的汇编代码，里面含有CD是否冷却完成的条件跳转，转成绝对跳转即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*零CD代码实现过程</span></span><br><span class=\"line\"><span class=\"comment\">* 植物种下后[ebp+24]地址的双浮点数作为计数器逐渐增加</span></span><br><span class=\"line\"><span class=\"comment\">00488E71  | 33C0                            | xor eax,eax                                  |</span></span><br><span class=\"line\"><span class=\"comment\">00488E73  | C645 48 00                      | mov byte ptr ss:[ebp+48],0                   |</span></span><br><span class=\"line\"><span class=\"comment\">00488E77  | 8945 24                         | mov dword ptr ss:[ebp+24],eax                |</span></span><br><span class=\"line\"><span class=\"comment\">00488E7A  | 8945 28                         | mov dword ptr ss:[ebp+28],eax                | [ebp+28]:L&quot;2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">00488E7D  | 8845 49                         | mov byte ptr ss:[ebp+49],al                  |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* [edi+24]处为计数器,值增加,[edi+28]为植物属性CD</span></span><br><span class=\"line\"><span class=\"comment\">0048728C  | 8347 24 01                      | add dword ptr ds:[edi+24],1                  |</span></span><br><span class=\"line\"><span class=\"comment\">00487290  | 8B47 24                         | mov eax,dword ptr ds:[edi+24]                |</span></span><br><span class=\"line\"><span class=\"comment\">00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |</span></span><br><span class=\"line\"><span class=\"comment\">00487296  | 7E 14                           | jle plantsvszombies.4872AC                   |</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">0x0048728C</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x83, 0x47, 0x24, 0x01, 0x8B, 0x47, 0x24</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">替换成</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">0x8B, 0x47, 0x28, 0x90, 0x83, 0xC0, 0x01, 0x3B, 0x47, 0x28</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">修改目的:计数器始终比CD大1,实现绝对跳转0 CD</span></span><br><span class=\"line\"><span class=\"comment\">0048728C  | 8B47 28                         | mov eax,dword ptr ds:[edi+28]                |</span></span><br><span class=\"line\"><span class=\"comment\">0048728F  | 90                              | nop                                          |</span></span><br><span class=\"line\"><span class=\"comment\">00487290  | 83C0 01                         | add eax,1                                    |</span></span><br><span class=\"line\"><span class=\"comment\">00487293  | 3B47 28                         | cmp eax,dword ptr ds:[edi+28]                |</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">zeroCD</span><span class=\"params\">(HANDLE hProcess)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> shellcode[] = &#123;</span><br><span class=\"line\"><span class=\"number\">0x8B</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x28</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> size = <span class=\"keyword\">sizeof</span>(shellcode) / <span class=\"keyword\">sizeof</span>(shellcode[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        VirtualProtectEx(hProcess, (LPVOID)TextZeroCD, size, PAGE_EXECUTE_READWRITE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (WriteProcessMemory(hProcess, (LPVOID)TextZeroCD, (LPCVOID)shellcode, size, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"smc总结","date":"2023-09-16T16:00:00.000Z","sticky":100,"pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\nSMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以提高恶意代码的抗分析能力，但也存在一些局限性。作为一名CTF比赛的爱好者，虽然经常接触SMC加密技术，但是对其原理和实现并不深入了解，只是停留在解题的层面。最近，在为新生出题的过程中，产生了将SMC加密技术应用在出题上的想法，于是决定深入探究这门技术的原理、实现和应用。<!-- more -->本文旨在分享作者学习SMC加密技术的心得，以及介绍如何利用SMC加密技术设计出有趣和有挑战性的CTF题目\n本文的结构如下：第一部分介绍SMC加密技术的基本概念和原理；第二部分介绍SMC加密技术的实现方法和工具；第三部分介绍SMC加密技术在CTF出题中的应用和案例\n\n\n\n### SMC加密技术的基本概念和原理\nSMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以将一个可执行文件的指定区段进行加密，使得黑客无法直接分析区段内的代码，从而增加恶意代码分析难度和降低恶意攻击成功的可能性。\nSMC的基本原理是在编译可执行文件时，将需要加密的代码区段（例如函数、代码块等）单独编译成一个section（段），并将其标记为可读、可写、不可执行（readable, writable, non-executable），然后通过某种方式在程序运行时将这个section解密为可执行代码，并将其标记为可读、可执行、不可写（readable, executable, non-writable）。这样，攻击者就无法在内存中找到加密的代码，从而无法直接执行或修改加密的代码。\n具体介绍见原文:https://zhuanlan.zhihu.com/p/624554464\n### SMC加密技术的实现方法\nPS:为了方便,部分示例代码省去了对字节码加密和解密的操作,请注意辨别\n#### 1.数组保存字节码->调整内存执行权限->函数指针运行\n先提取加密段代码的字节码\n写入加密段代码,通过调试工具获取加密代码对应的字节码,例如:\n```c\nbyte addData[] = {0x55,0x89,0xe5,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x5d,0xc3};\n// int add(int a,int b)\n// {\n//   return a+b;\n// }\n```\n通过VirtualProtect函数调整内存为可执行的,定义函数指针,指向addData,调用函数指针\n>BOOL VirtualProtect(\n>  [in] LPVOID lpAddress,  // 要更改保护属性的页区域的起始地址\n>  [in] SIZE_T dwSize,     // 要更改保护属性的区域的大小（以字节为单位）\n>  [in] DWORD flNewProtect,// 新的保护属性值\n>  [out] PDWORD lpflOldProtect // 用于接收原来保护属性值的指针\n>);\n>第三个参数flNewProtect包括但不限于:\n>PAGE_EXECUTE 可执行\n>PAGE_EXECUTE_READ  可读可执行\n>PAGE_EXECUTE_READWRITE 可读可写可执行\n最简单的一种实现方式,以add函数为例\n```c\n#include \"mytool.h\"\ntypedef int (*FnAdd)(int,int);\nbyte addData[] = {0x55,0x89,0xe5,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x5d,0xc3};\n// int add(int a,int b)\n// {\n//   return a+b;\n// }\nint main()\n{  \n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  printf(\"%d\",add(3,4));//7\n  system(\"pause\");\n  return 0;\n}\n```\n运行成功,在IDA中查看效果\n![Alt text](https://s2.loli.net/2024/06/22/dkv3X8WhFH4jawC.png)\n![Alt text](https://s2.loli.net/2024/06/22/rpFYDZmHQ5tA7oT.png)\n(未加密的)函数如期的到了data段\n通过这种方式即可实现大部分的加密算法,例如tea,base64,rc4等\n但是对于一些复杂的逻辑加密,可能需要引入外界的库函数,比如说CTF中简单的输入输出提示,需要用到printf,scanf等库函数\n举例如下,当add中嵌套了printf时\n\n```c\n#include \"mytool.h\"\ntypedef int (*FnAdd)(int,int);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x28,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x45,0xf4,0x8b,0x45,0xf4,0x89,0x44,0x24,0x4,0xc7,0x4,0x24,0x6a,0x50,0x40,0x0,0xe8,0x21,0x26,0x0,0x0,0x8b,0x45,0xf4,0xc9,0xc3};\n// int add(int a,int b)\n// {\n//   int c = a+b;\n//   printf(\"%d\",c);\n//   return c;\n// }\nint main()\n{  \n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  add(3,4);\n  system(\"pause\");\n  return 0;\n}\n```\n正常生成但是运行失败,汇编窗口动调发现在call指令时发生了报错\n分析可知,call指令后跟的是printf的相对地址,在转换到data段之后相对地址发生改变,访问到了非printf地址\n第一种解决方法:可以定义函数指针,在加密函数内通过函数指针来利用库函数\n如下:\n\n```c\n#include \"mytool.h\"\ntypedef int (*PRINTF) (const char *__format, ...);\ntypedef int (*FnAdd)(int,int,PRINTF);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x28,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x45,0xf4,0x66,0xc7,0x45,0xf1,0x25,0x64,0xc6,0x45,0xf3,0x0,0x8b,0x45,0xf4,0x89,0x44,0x24,0x4,0x8d,0x45,0xf1,0x89,0x4,0x24,0x8b,0x45,0x10,0xff,0xd0,0x8b,0x45,0xf4,0xc9,0xc3};\n// int add(int a,int b,PRINTF print)\n// {\n//   int c = a+b;\n//   char format[] = \"%d\";//原.rdata段数据,尽量使用栈来保存函数参数\n//   print(format,c);\n//   return c;\n// }\nint main()\n{\n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  add(3,4,printf);\n  system(\"pause\");\n  return 0;\n}\n```\nIDA中伪代码:\n![Alt text](https://s2.loli.net/2024/06/22/YZny7G8vLoUbF2c.png)\n从这个例子可以看出，这种传参方式很容易暴露自己的意图，此地无银三百两的感觉,并且会出现调用多个库函数时代码可读性差的问题\n为了优化隐蔽性和可读性，我们可以利用kernel32.dll模块来获取LoadLibraryA和GetProcAddress函数的地址，进而动态加载我们需要的模块和函数。\n具体的实现步骤在Get_Func函数中有详细说明。\n下面是修改后的程序，可正常运行。\n\n```c\n//mytool.h\ntypedef HINSTANCE (*LOADLIBRARY)(LPCSTR);//LoadLibraryA的地址\ntypedef FARPROC (*GETPROCADDRESS)(HINSTANCE, LPCSTR);//GetProcAddress的地址\nint Get_Func(int fnNum){//通过传参来返回GetProcAddress函数地址和LoadLibraryA函数地址\n asm(\n    \"mov %esp, %ebp\\n\"\n    \"push $0\\n\"\n    \"push $0x7373\\n\"\n    \"push $0x65726464\\n\"\n    \"push $0x41636f72\\n\"\n    \"push $0x50746547\\n\" // GetProcAddress\n    \"push $0\\n\"\n    \"push $0x41797261\\n\"\n    \"push $0x7262694c\\n\"\n    \"push $0x64616f4c\\n\" // LoadLibraryA\n    \"mov %esp, %ecx\\n\"\n    \"push %ecx\\n\" // esp传参过去\n    \"cmp $0,0x8(%ebp)\\n\"//传参是0就得到LoadLibraryA的地址\n    \"jnz label2\\n\"\n    \"call Get_Load\\n\"\n    \"jmp label1\\n\"\n\"label2:\"\n    \"call Get_Proc\\n\"//传参是1就得到GetProcAddress的地址\n\"label1:\"\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetModule:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"push %esi\\n\"\n    \"mov %fs:0x30, %esi\\n\" // PEB结构体地址\n    \"mov 0xc(%esi), %esi\\n\" // LDR结构体地址\n    \"mov 0x1c(%esi), %esi\\n\" // list\n    \"mov (%esi), %esi\\n\" // list 第二项kernel32或者kernelbase\n    \"mov 0x8(%esi), %esi\\n\" // dllbase\n    \"mov %esi, %eax\\n\"\n    \"pop %esi\\n\"\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetAddr:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"mov 0x3c(%edx), %esi\\n\" // if_anew\n    \"lea (%edx, %esi), %esi\\n\"  // NT header\n    \"mov 0x78(%esi), %esi\\n\"  // 导出表RVA\n    \"lea (%edx, %esi), %esi\\n\"  // 导出表VA\n    \"mov 0x1c(%esi), %edi\\n\"  // EAT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EAT VA\n    \"mov %edi, -0x4(%ebp)\\n\"  // 保存\n    \"mov 0x20(%esi), %edi\\n\"  // ENT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // ENT VA\n    \"mov %edi, -0x8(%ebp)\\n\"  // 保存\n    \"mov 0x24(%esi), %edi\\n\"  // EOT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EOT VA\n    \"mov %edi, -0xc(%ebp)\\n\"  // 保存\n    \"xor %eax, %eax\\n\" \n    \"jmp tag_cmpfirst\\n\" \n\"tag_cmpLoop:\"\n    \"inc %eax\\n\" \n\"tag_cmpfirst:\"\n    \"mov -0x8(%ebp), %esi\\n\"  // ENT\n    \"mov (%esi, %eax, 4), %esi\\n\" // RVA\n    \"lea (%edx, %esi), %esi\\n\" // 函数名称字符串地址\n    \"mov 0xc(%ebp), %edi\\n\"\n    \"mov 0x10(%ebp), %ecx\\n\" // 循环次数，ebp+0x10是传来的参数\n    \"repe cmpsb\\n\"\n    \"mov -0xc(%ebp), %esi\\n\"\n    \"jne tag_cmpLoop\\n\"\n    \"mov -0xc(%ebp), %esi\\n\" // EOT\n    \"xor %edi, %edi\\n\" // 为了不影响结果清空edi\n    \"mov (%esi, %eax, 2), %di\\n\" // word类型,EAT表索引\n    \"mov -0x4(%ebp), %edx\\n\" // EAT\n    \"mov (%edx, %edi, 4), %esi\\n\" // 函数地址RVA\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"lea (%edx, %esi), %eax\\n\" // 最终函数地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret $0xc\\n\" // 在栈中弹出三个参数\n\n\"Get_Load:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x10, %esp\\n\"\n    \"call Func_GetModule\\n\" // 获取kernel模块基址\n    \"mov %eax, -0x4(%ebp)\\n\" // 保存模块基址\n    \"lea 0xc(%ebp), %ecx\\n\" // load地址\n    \"push $0xc\\n\"\n    \"push %ecx\\n\"\n    \"push %eax\\n\"\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\"Get_Proc:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x10, %esp\\n\"\n    \"call Func_GetModule\\n\" // 获取kernel模块基址\n    \"mov %eax, -0x4(%ebp)\\n\" // 保存模块基址\n    \"push $0xe\\n\"\n    \"lea 0x1c(%ebp), %ecx\\n\" // Get字符串\n    \"push %ecx\\n\"\n    \"push -0x4(%ebp)\\n\" // 模块基址\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n    );\n}\n```\n\n\n```c\n \t\n```\n这里就是通过Get_Func来获取GetProcAddress函数地址和LoadLibraryA函数地址\n从而在加密函数内可以调用这两个函数来获取其他库函数地址\nGet_Func函数具体实现方式大致是(大佬略过~~):\n通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址,再通过PEB结构体获取其成员Ldr(加载模块列表)(偏移量为0xc),通过Ldr结构体访问InInitializationOrderModuleList成员(导入模块列表)(偏移量0x1c),InInitializationOrderModuleList的第二个成员即为kernel32.dll模块,我们想要的GetProcAddress函数地址和LoadLibraryA函数地址都在kernel32.dll里面了,通过了解PE文件结构访问其导出表即可\n\n好了,转成字节码试一下效果\n原函数转成字节码之后代码如下:\n\n```c\n#include \"mytool.h\"\ntypedef int (*PRINTF) (const char *__format, ...);\ntypedef int (*GET_FUNC)(int); \ntypedef int (*FnAdd)(int,int,GET_FUNC);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x48,0xc7,0x4,0x24,0x0,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf4,0xc7,0x4,0x24,0x1,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf0,0xc7,0x45,0xdd,0x6d,0x73,0x76,0x63,0xc7,0x45,0xe1,0x72,0x74,0x2e,0x64,0x66,0xc7,0x45,0xe5,0x6c,0x6c,0xc6,0x45,0xe7,0x0,0x8d,0x45,0xdd,0x89,0x4,0x24,0x8b,0x45,0xf4,0xff,0xd0,0x89,0x45,0xec,0xc7,0x45,0xd6,0x70,0x72,0x69,0x6e,0x66,0xc7,0x45,0xda,0x74,0x66,0xc6,0x45,0xdc,0x0,0x8d,0x45,0xd6,0x89,0x44,0x24,0x4,0x8b,0x45,0xec,0x89,0x4,0x24,0x8b,0x45,0xf0,0xff,0xd0,0x89,0x45,0xe8,0xc7,0x45,0xd2,0x25,0x64,0xa,0x0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x44,0x24,0x4,0x8d,0x45,0xd2,0x89,0x4,0x24,0x8b,0x45,0xe8,0xff,0xd0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0xc9,0xc3};//add字节码\n// int add(int a,int b,GET_FUNC get_func)\n// {\n//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);\n//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);\n//     char Module_name[] = \"msvcrt.dll\";\n//     HINSTANCE mAddress = load(Module_name);\n//     char fnName[] = \"printf\";\n//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);\n//     char format[] = \"%d\\n\";\n//     print(format,a+b);\n//     return a+b;\n// }\nint main()\n{\n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  add(3,4,Get_Func);\n  system(\"pause\");\n  return 0;\n}\n```\n运行成功,输出7\n在IDA中的伪代码窗口如下:\n![Alt text](https://s2.loli.net/2024/06/22/UJTCFPotApOenDi.png)\n![Alt text](https://s2.loli.net/2024/06/22/5z2WBxpEe8hajJQ.png)\n\n隐藏性有所提升,但是还可以进一步提升\n我们可以把Get_Func函数也通过SMC加密,从而进一步提高代码的隐藏性\n```c\n#include \"mytool.h\"\ntypedef int (*PRINTF) (const char *__format, ...);\ntypedef int (*GET_FUNC)(int); \ntypedef int (*FnAdd)(int,int,GET_FUNC);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x48,0xc7,0x4,0x24,0x0,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf4,0xc7,0x4,0x24,0x1,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf0,0xc7,0x45,0xdd,0x6d,0x73,0x76,0x63,0xc7,0x45,0xe1,0x72,0x74,0x2e,0x64,0x66,0xc7,0x45,0xe5,0x6c,0x6c,0xc6,0x45,0xe7,0x0,0x8d,0x45,0xdd,0x89,0x4,0x24,0x8b,0x45,0xf4,0xff,0xd0,0x89,0x45,0xec,0xc7,0x45,0xd6,0x70,0x72,0x69,0x6e,0x66,0xc7,0x45,0xda,0x74,0x66,0xc6,0x45,0xdc,0x0,0x8d,0x45,0xd6,0x89,0x44,0x24,0x4,0x8b,0x45,0xec,0x89,0x4,0x24,0x8b,0x45,0xf0,0xff,0xd0,0x89,0x45,0xe8,0xc7,0x45,0xd2,0x25,0x64,0xa,0x0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x44,0x24,0x4,0x8d,0x45,0xd2,0x89,0x4,0x24,0x8b,0x45,0xe8,0xff,0xd0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0xc9,0xc3};\nbyte get_func[] = {0x55, 0x89, 0xE5, 0x89, 0xE5, 0x6A, 0x00, 0x68, 0x73, 0x73, 0x00, 0x00, 0x68, 0x64, 0x64, 0x72, 0x65, 0x68, 0x72, 0x6F, 0x63, 0x41, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6A, 0x00, 0x68, 0x61, 0x72, 0x79, 0x41, 0x68, 0x4C, 0x69, 0x62, 0x72, 0x68, 0x4C, 0x6F, 0x61, 0x64, 0x89, 0xE1, 0x51, 0x83, 0x7D, 0x08, 0x00, 0x75, 0x07, 0xE8, 0x91, 0x00, 0x00, 0x00, 0xEB, 0x05, 0xE8, 0xA8, 0x00, 0x00, 0x00, 0x89, 0xEC, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x20, 0x56, 0x64, 0x8B, 0x35, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x76, 0x0C, 0x8B, 0x76, 0x1C, 0x8B, 0x36, 0x8B, 0x76, 0x08, 0x89, 0xF0, 0x5E, 0x89, 0xEC, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x20, 0x8B, 0x55, 0x08, 0x8B, 0x72, 0x3C, 0x8D, 0x34, 0x32, 0x8B, 0x76, 0x78, 0x8D, 0x34, 0x32, 0x8B, 0x7E, 0x1C, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xFC, 0x8B, 0x7E, 0x20, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xF8, 0x8B, 0x7E, 0x24, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xF4, 0x31, 0xC0, 0xEB, 0x01, 0x40, 0x8B, 0x75, 0xF8, 0x8B, 0x34, 0x86, 0x8D, 0x34, 0x32, 0x8B, 0x7D, 0x0C, 0x8B, 0x4D, 0x10, 0xF3, 0xA6, 0x8B, 0x75, 0xF4, 0x75, 0xE9, 0x8B, 0x75, 0xF4, 0x31, 0xFF, 0x66, 0x8B, 0x3C, 0x46, 0x8B, 0x55, 0xFC, 0x8B, 0x34, 0xBA, 0x8B, 0x55, 0x08, 0x8D, 0x04, 0x32, 0x89, 0xEC, 0x5D, 0xC2, 0x0C, 0x00, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x10, 0xE8, 0x6F, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0xFC, 0x8D, 0x4D, 0x0C, 0x6A, 0x0C, 0x51, 0x50, 0xE8, 0x80, 0xFF, 0xFF, 0xFF, 0x89, 0xEC, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x10, 0xE8, 0x51, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0xFC, 0x6A, 0x0E, 0x8D, 0x4D, 0x1C, 0x51, 0xFF, 0x75, 0xFC, 0xE8, 0x60, 0xFF, 0xFF, 0xFF, 0x89, 0xEC, 0x5D, 0xc3};\n// int add(int a,int b,GET_FUNC get_func)\n// {\n//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);\n//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);\n//     char Module_name[] = \"msvcrt.dll\";\n//     HINSTANCE mAddress = load(Module_name);\n//     char fnName[] = \"printf\";\n//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);\n//     char format[] = \"%d\\n\";\n//     print(format,a+b);\n//     return a+b;\n// }\nint main()\n{\n\n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect)||\n     !VirtualProtect(get_func,sizeof(get_func),PAGE_EXECUTE,&fOldProtect)   )\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  GET_FUNC get_fn = (GET_FUNC)get_func;\n  add(3,4,get_fn);\n  system(\"pause\");\n  return 0;\n}\n```\n实现效果:\n![Alt text](https://s2.loli.net/2024/06/22/K3JQN64RGt1ieVo.png)\n#### 2.新建可执行的节段存储加密函数\n#### 3.\n\n\nLinux下把加密代码放到数据段:\n\n```c++\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/mman.h>\n\n// 一个全局变量，用来存放机器指令\nunsigned char code[8] = {0};\n\n// 一个函数指针，用来指向机器指令的地址\ntypedef int (*func_ptr)();\n\nint main()\n{\n    // 获取当前系统的内存页大小\n    int pagesize = sysconf(_SC_PAGESIZE);\n    printf(\"pagesize = %d\\n\", pagesize);\n\n    // 计算全局变量code的地址所在的内存页的起始地址\n    unsigned long start = (unsigned long)code & ~(pagesize - 1);\n    printf(\"start = %p\\n\", (void *)start);\n\n    // 计算全局变量code的地址所在的内存页的结束地址\n    unsigned long end = ((unsigned long)code + sizeof(code) + pagesize - 1) & ~(pagesize - 1);\n    printf(\"end = %p\\n\", (void *)end);\n\n    // 计算全局变量code所占用的内存页的长度\n    size_t len = end - start;\n    printf(\"len = %ld\\n\", len);\n\n    // 给全局变量code所在的内存页可执行权限\n    int ret = mprotect((void *)start, len, PROT_READ | PROT_EXEC);\n    if (ret == -1)\n    {\n        perror(\"mprotect\");\n        return -1;\n    }\n\n    // 在全局变量code中写入一段机器指令，其功能是将rax加1并返回\n    // 该指令的二进制码为：48 ff c0 c3\n    code[0] = 0x48;\n    code[1] = 0xff;\n    code[2] = 0xc0;\n    code[3] = 0xc3;\n\n    // 将函数指针指向全局变量code的地址\n    func_ptr f = (func_ptr)code;\n\n    // 调用函数指针，执行机器指令\n    int result = f();\n    printf(\"result = %d\\n\", result);\n\n    return 0;\n}\n```\n### CTF出题中的应用\n\n\n\n#### ,\n","source":"_posts/smc总结.md","raw":"---\ntitle: smc总结\ndate: 2023/9/17\ncategories: 笔记\ntags:\n  - 逆向\nsticky: 100\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\nSMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以提高恶意代码的抗分析能力，但也存在一些局限性。作为一名CTF比赛的爱好者，虽然经常接触SMC加密技术，但是对其原理和实现并不深入了解，只是停留在解题的层面。最近，在为新生出题的过程中，产生了将SMC加密技术应用在出题上的想法，于是决定深入探究这门技术的原理、实现和应用。<!-- more -->本文旨在分享作者学习SMC加密技术的心得，以及介绍如何利用SMC加密技术设计出有趣和有挑战性的CTF题目\n本文的结构如下：第一部分介绍SMC加密技术的基本概念和原理；第二部分介绍SMC加密技术的实现方法和工具；第三部分介绍SMC加密技术在CTF出题中的应用和案例\n\n\n\n### SMC加密技术的基本概念和原理\nSMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以将一个可执行文件的指定区段进行加密，使得黑客无法直接分析区段内的代码，从而增加恶意代码分析难度和降低恶意攻击成功的可能性。\nSMC的基本原理是在编译可执行文件时，将需要加密的代码区段（例如函数、代码块等）单独编译成一个section（段），并将其标记为可读、可写、不可执行（readable, writable, non-executable），然后通过某种方式在程序运行时将这个section解密为可执行代码，并将其标记为可读、可执行、不可写（readable, executable, non-writable）。这样，攻击者就无法在内存中找到加密的代码，从而无法直接执行或修改加密的代码。\n具体介绍见原文:https://zhuanlan.zhihu.com/p/624554464\n### SMC加密技术的实现方法\nPS:为了方便,部分示例代码省去了对字节码加密和解密的操作,请注意辨别\n#### 1.数组保存字节码->调整内存执行权限->函数指针运行\n先提取加密段代码的字节码\n写入加密段代码,通过调试工具获取加密代码对应的字节码,例如:\n```c\nbyte addData[] = {0x55,0x89,0xe5,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x5d,0xc3};\n// int add(int a,int b)\n// {\n//   return a+b;\n// }\n```\n通过VirtualProtect函数调整内存为可执行的,定义函数指针,指向addData,调用函数指针\n>BOOL VirtualProtect(\n>  [in] LPVOID lpAddress,  // 要更改保护属性的页区域的起始地址\n>  [in] SIZE_T dwSize,     // 要更改保护属性的区域的大小（以字节为单位）\n>  [in] DWORD flNewProtect,// 新的保护属性值\n>  [out] PDWORD lpflOldProtect // 用于接收原来保护属性值的指针\n>);\n>第三个参数flNewProtect包括但不限于:\n>PAGE_EXECUTE 可执行\n>PAGE_EXECUTE_READ  可读可执行\n>PAGE_EXECUTE_READWRITE 可读可写可执行\n最简单的一种实现方式,以add函数为例\n```c\n#include \"mytool.h\"\ntypedef int (*FnAdd)(int,int);\nbyte addData[] = {0x55,0x89,0xe5,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x5d,0xc3};\n// int add(int a,int b)\n// {\n//   return a+b;\n// }\nint main()\n{  \n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  printf(\"%d\",add(3,4));//7\n  system(\"pause\");\n  return 0;\n}\n```\n运行成功,在IDA中查看效果\n![Alt text](https://s2.loli.net/2024/06/22/dkv3X8WhFH4jawC.png)\n![Alt text](https://s2.loli.net/2024/06/22/rpFYDZmHQ5tA7oT.png)\n(未加密的)函数如期的到了data段\n通过这种方式即可实现大部分的加密算法,例如tea,base64,rc4等\n但是对于一些复杂的逻辑加密,可能需要引入外界的库函数,比如说CTF中简单的输入输出提示,需要用到printf,scanf等库函数\n举例如下,当add中嵌套了printf时\n\n```c\n#include \"mytool.h\"\ntypedef int (*FnAdd)(int,int);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x28,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x45,0xf4,0x8b,0x45,0xf4,0x89,0x44,0x24,0x4,0xc7,0x4,0x24,0x6a,0x50,0x40,0x0,0xe8,0x21,0x26,0x0,0x0,0x8b,0x45,0xf4,0xc9,0xc3};\n// int add(int a,int b)\n// {\n//   int c = a+b;\n//   printf(\"%d\",c);\n//   return c;\n// }\nint main()\n{  \n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  add(3,4);\n  system(\"pause\");\n  return 0;\n}\n```\n正常生成但是运行失败,汇编窗口动调发现在call指令时发生了报错\n分析可知,call指令后跟的是printf的相对地址,在转换到data段之后相对地址发生改变,访问到了非printf地址\n第一种解决方法:可以定义函数指针,在加密函数内通过函数指针来利用库函数\n如下:\n\n```c\n#include \"mytool.h\"\ntypedef int (*PRINTF) (const char *__format, ...);\ntypedef int (*FnAdd)(int,int,PRINTF);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x28,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x45,0xf4,0x66,0xc7,0x45,0xf1,0x25,0x64,0xc6,0x45,0xf3,0x0,0x8b,0x45,0xf4,0x89,0x44,0x24,0x4,0x8d,0x45,0xf1,0x89,0x4,0x24,0x8b,0x45,0x10,0xff,0xd0,0x8b,0x45,0xf4,0xc9,0xc3};\n// int add(int a,int b,PRINTF print)\n// {\n//   int c = a+b;\n//   char format[] = \"%d\";//原.rdata段数据,尽量使用栈来保存函数参数\n//   print(format,c);\n//   return c;\n// }\nint main()\n{\n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  add(3,4,printf);\n  system(\"pause\");\n  return 0;\n}\n```\nIDA中伪代码:\n![Alt text](https://s2.loli.net/2024/06/22/YZny7G8vLoUbF2c.png)\n从这个例子可以看出，这种传参方式很容易暴露自己的意图，此地无银三百两的感觉,并且会出现调用多个库函数时代码可读性差的问题\n为了优化隐蔽性和可读性，我们可以利用kernel32.dll模块来获取LoadLibraryA和GetProcAddress函数的地址，进而动态加载我们需要的模块和函数。\n具体的实现步骤在Get_Func函数中有详细说明。\n下面是修改后的程序，可正常运行。\n\n```c\n//mytool.h\ntypedef HINSTANCE (*LOADLIBRARY)(LPCSTR);//LoadLibraryA的地址\ntypedef FARPROC (*GETPROCADDRESS)(HINSTANCE, LPCSTR);//GetProcAddress的地址\nint Get_Func(int fnNum){//通过传参来返回GetProcAddress函数地址和LoadLibraryA函数地址\n asm(\n    \"mov %esp, %ebp\\n\"\n    \"push $0\\n\"\n    \"push $0x7373\\n\"\n    \"push $0x65726464\\n\"\n    \"push $0x41636f72\\n\"\n    \"push $0x50746547\\n\" // GetProcAddress\n    \"push $0\\n\"\n    \"push $0x41797261\\n\"\n    \"push $0x7262694c\\n\"\n    \"push $0x64616f4c\\n\" // LoadLibraryA\n    \"mov %esp, %ecx\\n\"\n    \"push %ecx\\n\" // esp传参过去\n    \"cmp $0,0x8(%ebp)\\n\"//传参是0就得到LoadLibraryA的地址\n    \"jnz label2\\n\"\n    \"call Get_Load\\n\"\n    \"jmp label1\\n\"\n\"label2:\"\n    \"call Get_Proc\\n\"//传参是1就得到GetProcAddress的地址\n\"label1:\"\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetModule:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"push %esi\\n\"\n    \"mov %fs:0x30, %esi\\n\" // PEB结构体地址\n    \"mov 0xc(%esi), %esi\\n\" // LDR结构体地址\n    \"mov 0x1c(%esi), %esi\\n\" // list\n    \"mov (%esi), %esi\\n\" // list 第二项kernel32或者kernelbase\n    \"mov 0x8(%esi), %esi\\n\" // dllbase\n    \"mov %esi, %eax\\n\"\n    \"pop %esi\\n\"\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetAddr:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"mov 0x3c(%edx), %esi\\n\" // if_anew\n    \"lea (%edx, %esi), %esi\\n\"  // NT header\n    \"mov 0x78(%esi), %esi\\n\"  // 导出表RVA\n    \"lea (%edx, %esi), %esi\\n\"  // 导出表VA\n    \"mov 0x1c(%esi), %edi\\n\"  // EAT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EAT VA\n    \"mov %edi, -0x4(%ebp)\\n\"  // 保存\n    \"mov 0x20(%esi), %edi\\n\"  // ENT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // ENT VA\n    \"mov %edi, -0x8(%ebp)\\n\"  // 保存\n    \"mov 0x24(%esi), %edi\\n\"  // EOT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EOT VA\n    \"mov %edi, -0xc(%ebp)\\n\"  // 保存\n    \"xor %eax, %eax\\n\" \n    \"jmp tag_cmpfirst\\n\" \n\"tag_cmpLoop:\"\n    \"inc %eax\\n\" \n\"tag_cmpfirst:\"\n    \"mov -0x8(%ebp), %esi\\n\"  // ENT\n    \"mov (%esi, %eax, 4), %esi\\n\" // RVA\n    \"lea (%edx, %esi), %esi\\n\" // 函数名称字符串地址\n    \"mov 0xc(%ebp), %edi\\n\"\n    \"mov 0x10(%ebp), %ecx\\n\" // 循环次数，ebp+0x10是传来的参数\n    \"repe cmpsb\\n\"\n    \"mov -0xc(%ebp), %esi\\n\"\n    \"jne tag_cmpLoop\\n\"\n    \"mov -0xc(%ebp), %esi\\n\" // EOT\n    \"xor %edi, %edi\\n\" // 为了不影响结果清空edi\n    \"mov (%esi, %eax, 2), %di\\n\" // word类型,EAT表索引\n    \"mov -0x4(%ebp), %edx\\n\" // EAT\n    \"mov (%edx, %edi, 4), %esi\\n\" // 函数地址RVA\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"lea (%edx, %esi), %eax\\n\" // 最终函数地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret $0xc\\n\" // 在栈中弹出三个参数\n\n\"Get_Load:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x10, %esp\\n\"\n    \"call Func_GetModule\\n\" // 获取kernel模块基址\n    \"mov %eax, -0x4(%ebp)\\n\" // 保存模块基址\n    \"lea 0xc(%ebp), %ecx\\n\" // load地址\n    \"push $0xc\\n\"\n    \"push %ecx\\n\"\n    \"push %eax\\n\"\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\"Get_Proc:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x10, %esp\\n\"\n    \"call Func_GetModule\\n\" // 获取kernel模块基址\n    \"mov %eax, -0x4(%ebp)\\n\" // 保存模块基址\n    \"push $0xe\\n\"\n    \"lea 0x1c(%ebp), %ecx\\n\" // Get字符串\n    \"push %ecx\\n\"\n    \"push -0x4(%ebp)\\n\" // 模块基址\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n    );\n}\n```\n\n\n```c\n \t\n```\n这里就是通过Get_Func来获取GetProcAddress函数地址和LoadLibraryA函数地址\n从而在加密函数内可以调用这两个函数来获取其他库函数地址\nGet_Func函数具体实现方式大致是(大佬略过~~):\n通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址,再通过PEB结构体获取其成员Ldr(加载模块列表)(偏移量为0xc),通过Ldr结构体访问InInitializationOrderModuleList成员(导入模块列表)(偏移量0x1c),InInitializationOrderModuleList的第二个成员即为kernel32.dll模块,我们想要的GetProcAddress函数地址和LoadLibraryA函数地址都在kernel32.dll里面了,通过了解PE文件结构访问其导出表即可\n\n好了,转成字节码试一下效果\n原函数转成字节码之后代码如下:\n\n```c\n#include \"mytool.h\"\ntypedef int (*PRINTF) (const char *__format, ...);\ntypedef int (*GET_FUNC)(int); \ntypedef int (*FnAdd)(int,int,GET_FUNC);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x48,0xc7,0x4,0x24,0x0,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf4,0xc7,0x4,0x24,0x1,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf0,0xc7,0x45,0xdd,0x6d,0x73,0x76,0x63,0xc7,0x45,0xe1,0x72,0x74,0x2e,0x64,0x66,0xc7,0x45,0xe5,0x6c,0x6c,0xc6,0x45,0xe7,0x0,0x8d,0x45,0xdd,0x89,0x4,0x24,0x8b,0x45,0xf4,0xff,0xd0,0x89,0x45,0xec,0xc7,0x45,0xd6,0x70,0x72,0x69,0x6e,0x66,0xc7,0x45,0xda,0x74,0x66,0xc6,0x45,0xdc,0x0,0x8d,0x45,0xd6,0x89,0x44,0x24,0x4,0x8b,0x45,0xec,0x89,0x4,0x24,0x8b,0x45,0xf0,0xff,0xd0,0x89,0x45,0xe8,0xc7,0x45,0xd2,0x25,0x64,0xa,0x0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x44,0x24,0x4,0x8d,0x45,0xd2,0x89,0x4,0x24,0x8b,0x45,0xe8,0xff,0xd0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0xc9,0xc3};//add字节码\n// int add(int a,int b,GET_FUNC get_func)\n// {\n//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);\n//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);\n//     char Module_name[] = \"msvcrt.dll\";\n//     HINSTANCE mAddress = load(Module_name);\n//     char fnName[] = \"printf\";\n//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);\n//     char format[] = \"%d\\n\";\n//     print(format,a+b);\n//     return a+b;\n// }\nint main()\n{\n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect))\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  add(3,4,Get_Func);\n  system(\"pause\");\n  return 0;\n}\n```\n运行成功,输出7\n在IDA中的伪代码窗口如下:\n![Alt text](https://s2.loli.net/2024/06/22/UJTCFPotApOenDi.png)\n![Alt text](https://s2.loli.net/2024/06/22/5z2WBxpEe8hajJQ.png)\n\n隐藏性有所提升,但是还可以进一步提升\n我们可以把Get_Func函数也通过SMC加密,从而进一步提高代码的隐藏性\n```c\n#include \"mytool.h\"\ntypedef int (*PRINTF) (const char *__format, ...);\ntypedef int (*GET_FUNC)(int); \ntypedef int (*FnAdd)(int,int,GET_FUNC);\nbyte addData[] = {0x55,0x89,0xe5,0x83,0xec,0x48,0xc7,0x4,0x24,0x0,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf4,0xc7,0x4,0x24,0x1,0x0,0x0,0x0,0x8b,0x45,0x10,0xff,0xd0,0x89,0x45,0xf0,0xc7,0x45,0xdd,0x6d,0x73,0x76,0x63,0xc7,0x45,0xe1,0x72,0x74,0x2e,0x64,0x66,0xc7,0x45,0xe5,0x6c,0x6c,0xc6,0x45,0xe7,0x0,0x8d,0x45,0xdd,0x89,0x4,0x24,0x8b,0x45,0xf4,0xff,0xd0,0x89,0x45,0xec,0xc7,0x45,0xd6,0x70,0x72,0x69,0x6e,0x66,0xc7,0x45,0xda,0x74,0x66,0xc6,0x45,0xdc,0x0,0x8d,0x45,0xd6,0x89,0x44,0x24,0x4,0x8b,0x45,0xec,0x89,0x4,0x24,0x8b,0x45,0xf0,0xff,0xd0,0x89,0x45,0xe8,0xc7,0x45,0xd2,0x25,0x64,0xa,0x0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0x89,0x44,0x24,0x4,0x8d,0x45,0xd2,0x89,0x4,0x24,0x8b,0x45,0xe8,0xff,0xd0,0x8b,0x55,0x8,0x8b,0x45,0xc,0x1,0xd0,0xc9,0xc3};\nbyte get_func[] = {0x55, 0x89, 0xE5, 0x89, 0xE5, 0x6A, 0x00, 0x68, 0x73, 0x73, 0x00, 0x00, 0x68, 0x64, 0x64, 0x72, 0x65, 0x68, 0x72, 0x6F, 0x63, 0x41, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6A, 0x00, 0x68, 0x61, 0x72, 0x79, 0x41, 0x68, 0x4C, 0x69, 0x62, 0x72, 0x68, 0x4C, 0x6F, 0x61, 0x64, 0x89, 0xE1, 0x51, 0x83, 0x7D, 0x08, 0x00, 0x75, 0x07, 0xE8, 0x91, 0x00, 0x00, 0x00, 0xEB, 0x05, 0xE8, 0xA8, 0x00, 0x00, 0x00, 0x89, 0xEC, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x20, 0x56, 0x64, 0x8B, 0x35, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x76, 0x0C, 0x8B, 0x76, 0x1C, 0x8B, 0x36, 0x8B, 0x76, 0x08, 0x89, 0xF0, 0x5E, 0x89, 0xEC, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x20, 0x8B, 0x55, 0x08, 0x8B, 0x72, 0x3C, 0x8D, 0x34, 0x32, 0x8B, 0x76, 0x78, 0x8D, 0x34, 0x32, 0x8B, 0x7E, 0x1C, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xFC, 0x8B, 0x7E, 0x20, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xF8, 0x8B, 0x7E, 0x24, 0x8D, 0x3C, 0x3A, 0x89, 0x7D, 0xF4, 0x31, 0xC0, 0xEB, 0x01, 0x40, 0x8B, 0x75, 0xF8, 0x8B, 0x34, 0x86, 0x8D, 0x34, 0x32, 0x8B, 0x7D, 0x0C, 0x8B, 0x4D, 0x10, 0xF3, 0xA6, 0x8B, 0x75, 0xF4, 0x75, 0xE9, 0x8B, 0x75, 0xF4, 0x31, 0xFF, 0x66, 0x8B, 0x3C, 0x46, 0x8B, 0x55, 0xFC, 0x8B, 0x34, 0xBA, 0x8B, 0x55, 0x08, 0x8D, 0x04, 0x32, 0x89, 0xEC, 0x5D, 0xC2, 0x0C, 0x00, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x10, 0xE8, 0x6F, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0xFC, 0x8D, 0x4D, 0x0C, 0x6A, 0x0C, 0x51, 0x50, 0xE8, 0x80, 0xFF, 0xFF, 0xFF, 0x89, 0xEC, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x10, 0xE8, 0x51, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0xFC, 0x6A, 0x0E, 0x8D, 0x4D, 0x1C, 0x51, 0xFF, 0x75, 0xFC, 0xE8, 0x60, 0xFF, 0xFF, 0xFF, 0x89, 0xEC, 0x5D, 0xc3};\n// int add(int a,int b,GET_FUNC get_func)\n// {\n//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);\n//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);\n//     char Module_name[] = \"msvcrt.dll\";\n//     HINSTANCE mAddress = load(Module_name);\n//     char fnName[] = \"printf\";\n//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);\n//     char format[] = \"%d\\n\";\n//     print(format,a+b);\n//     return a+b;\n// }\nint main()\n{\n\n  DWORD fOldProtect = 0;\n  if(!VirtualProtect(addData,sizeof(addData),PAGE_EXECUTE,&fOldProtect)||\n     !VirtualProtect(get_func,sizeof(get_func),PAGE_EXECUTE,&fOldProtect)   )\n  {\n    perror(\"VirtualProtect failed\");\n    system(\"pause\");\n  }\n  FnAdd add = (FnAdd)addData;\n  GET_FUNC get_fn = (GET_FUNC)get_func;\n  add(3,4,get_fn);\n  system(\"pause\");\n  return 0;\n}\n```\n实现效果:\n![Alt text](https://s2.loli.net/2024/06/22/K3JQN64RGt1ieVo.png)\n#### 2.新建可执行的节段存储加密函数\n#### 3.\n\n\nLinux下把加密代码放到数据段:\n\n```c++\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/mman.h>\n\n// 一个全局变量，用来存放机器指令\nunsigned char code[8] = {0};\n\n// 一个函数指针，用来指向机器指令的地址\ntypedef int (*func_ptr)();\n\nint main()\n{\n    // 获取当前系统的内存页大小\n    int pagesize = sysconf(_SC_PAGESIZE);\n    printf(\"pagesize = %d\\n\", pagesize);\n\n    // 计算全局变量code的地址所在的内存页的起始地址\n    unsigned long start = (unsigned long)code & ~(pagesize - 1);\n    printf(\"start = %p\\n\", (void *)start);\n\n    // 计算全局变量code的地址所在的内存页的结束地址\n    unsigned long end = ((unsigned long)code + sizeof(code) + pagesize - 1) & ~(pagesize - 1);\n    printf(\"end = %p\\n\", (void *)end);\n\n    // 计算全局变量code所占用的内存页的长度\n    size_t len = end - start;\n    printf(\"len = %ld\\n\", len);\n\n    // 给全局变量code所在的内存页可执行权限\n    int ret = mprotect((void *)start, len, PROT_READ | PROT_EXEC);\n    if (ret == -1)\n    {\n        perror(\"mprotect\");\n        return -1;\n    }\n\n    // 在全局变量code中写入一段机器指令，其功能是将rax加1并返回\n    // 该指令的二进制码为：48 ff c0 c3\n    code[0] = 0x48;\n    code[1] = 0xff;\n    code[2] = 0xc0;\n    code[3] = 0xc3;\n\n    // 将函数指针指向全局变量code的地址\n    func_ptr f = (func_ptr)code;\n\n    // 调用函数指针，执行机器指令\n    int result = f();\n    printf(\"result = %d\\n\", result);\n\n    return 0;\n}\n```\n### CTF出题中的应用\n\n\n\n#### ,\n","slug":"smc总结","published":1,"updated":"2024-10-02T09:32:24.954Z","layout":"post","photos":[],"link":"","_id":"cm1roa13l000ougie6bln7p12","content":"<p>SMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以提高恶意代码的抗分析能力，但也存在一些局限性。作为一名CTF比赛的爱好者，虽然经常接触SMC加密技术，但是对其原理和实现并不深入了解，只是停留在解题的层面。最近，在为新生出题的过程中，产生了将SMC加密技术应用在出题上的想法，于是决定深入探究这门技术的原理、实现和应用。<span id=\"more\"></span>本文旨在分享作者学习SMC加密技术的心得，以及介绍如何利用SMC加密技术设计出有趣和有挑战性的CTF题目<br>本文的结构如下：第一部分介绍SMC加密技术的基本概念和原理；第二部分介绍SMC加密技术的实现方法和工具；第三部分介绍SMC加密技术在CTF出题中的应用和案例</p>\n<h3 id=\"SMC加密技术的基本概念和原理\"><a href=\"#SMC加密技术的基本概念和原理\" class=\"headerlink\" title=\"SMC加密技术的基本概念和原理\"></a>SMC加密技术的基本概念和原理</h3><p>SMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以将一个可执行文件的指定区段进行加密，使得黑客无法直接分析区段内的代码，从而增加恶意代码分析难度和降低恶意攻击成功的可能性。<br>SMC的基本原理是在编译可执行文件时，将需要加密的代码区段（例如函数、代码块等）单独编译成一个section（段），并将其标记为可读、可写、不可执行（readable, writable, non-executable），然后通过某种方式在程序运行时将这个section解密为可执行代码，并将其标记为可读、可执行、不可写（readable, executable, non-writable）。这样，攻击者就无法在内存中找到加密的代码，从而无法直接执行或修改加密的代码。<br>具体介绍见原文:<a href=\"https://zhuanlan.zhihu.com/p/624554464\">https://zhuanlan.zhihu.com/p/624554464</a></p>\n<h3 id=\"SMC加密技术的实现方法\"><a href=\"#SMC加密技术的实现方法\" class=\"headerlink\" title=\"SMC加密技术的实现方法\"></a>SMC加密技术的实现方法</h3><p>PS:为了方便,部分示例代码省去了对字节码加密和解密的操作,请注意辨别</p>\n<h4 id=\"1-数组保存字节码-调整内存执行权限-函数指针运行\"><a href=\"#1-数组保存字节码-调整内存执行权限-函数指针运行\" class=\"headerlink\" title=\"1.数组保存字节码-&gt;调整内存执行权限-&gt;函数指针运行\"></a>1.数组保存字节码-&gt;调整内存执行权限-&gt;函数指针运行</h4><p>先提取加密段代码的字节码<br>写入加密段代码,通过调试工具获取加密代码对应的字节码,例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x5d</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>通过VirtualProtect函数调整内存为可执行的,定义函数指针,指向addData,调用函数指针</p>\n<blockquote>\n<p>BOOL VirtualProtect(<br> [in] LPVOID lpAddress,  &#x2F;&#x2F; 要更改保护属性的页区域的起始地址<br> [in] SIZE_T dwSize,     &#x2F;&#x2F; 要更改保护属性的区域的大小（以字节为单位）<br> [in] DWORD flNewProtect,&#x2F;&#x2F; 新的保护属性值<br> [out] PDWORD lpflOldProtect &#x2F;&#x2F; 用于接收原来保护属性值的指针<br>);<br>第三个参数flNewProtect包括但不限于:<br>PAGE_EXECUTE 可执行<br>PAGE_EXECUTE_READ  可读可执行<br>PAGE_EXECUTE_READWRITE 可读可写可执行<br>最简单的一种实现方式,以add函数为例</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x5d</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,add(<span class=\"number\">3</span>,<span class=\"number\">4</span>));<span class=\"comment\">//7</span></span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行成功,在IDA中查看效果<br><img src=\"https://s2.loli.net/2024/06/22/dkv3X8WhFH4jawC.png\" alt=\"Alt text\"><br><img src=\"https://s2.loli.net/2024/06/22/rpFYDZmHQ5tA7oT.png\" alt=\"Alt text\"><br>(未加密的)函数如期的到了data段<br>通过这种方式即可实现大部分的加密算法,例如tea,base64,rc4等<br>但是对于一些复杂的逻辑加密,可能需要引入外界的库函数,比如说CTF中简单的输入输出提示,需要用到printf,scanf等库函数<br>举例如下,当add中嵌套了printf时</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x28</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x6a</span>,<span class=\"number\">0x50</span>,<span class=\"number\">0x40</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0x21</span>,<span class=\"number\">0x26</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   int c = a+b;</span></span><br><span class=\"line\"><span class=\"comment\">//   printf(&quot;%d&quot;,c);</span></span><br><span class=\"line\"><span class=\"comment\">//   return c;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正常生成但是运行失败,汇编窗口动调发现在call指令时发生了报错<br>分析可知,call指令后跟的是printf的相对地址,在转换到data段之后相对地址发生改变,访问到了非printf地址<br>第一种解决方法:可以定义函数指针,在加密函数内通过函数指针来利用库函数<br>如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*PRINTF)</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *__format, ...)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>,PRINTF)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x28</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf1</span>,<span class=\"number\">0x25</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf3</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf1</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b,PRINTF print)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   int c = a+b;</span></span><br><span class=\"line\"><span class=\"comment\">//   char format[] = &quot;%d&quot;;//原.rdata段数据,尽量使用栈来保存函数参数</span></span><br><span class=\"line\"><span class=\"comment\">//   print(format,c);</span></span><br><span class=\"line\"><span class=\"comment\">//   return c;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"built_in\">printf</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IDA中伪代码:<br><img src=\"https://s2.loli.net/2024/06/22/YZny7G8vLoUbF2c.png\" alt=\"Alt text\"><br>从这个例子可以看出，这种传参方式很容易暴露自己的意图，此地无银三百两的感觉,并且会出现调用多个库函数时代码可读性差的问题<br>为了优化隐蔽性和可读性，我们可以利用kernel32.dll模块来获取LoadLibraryA和GetProcAddress函数的地址，进而动态加载我们需要的模块和函数。<br>具体的实现步骤在Get_Func函数中有详细说明。<br>下面是修改后的程序，可正常运行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mytool.h</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">HINSTANCE</span> <span class=\"params\">(*LOADLIBRARY)</span><span class=\"params\">(LPCSTR)</span>;<span class=\"comment\">//LoadLibraryA的地址</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">FARPROC</span> <span class=\"params\">(*GETPROCADDRESS)</span><span class=\"params\">(HINSTANCE, LPCSTR)</span>;<span class=\"comment\">//GetProcAddress的地址</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Get_Func</span><span class=\"params\">(<span class=\"type\">int</span> fnNum)</span>&#123;<span class=\"comment\">//通过传参来返回GetProcAddress函数地址和LoadLibraryA函数地址</span></span><br><span class=\"line\"> <span class=\"keyword\">asm</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x7373\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x65726464\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x41636f72\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x50746547\\n&quot;</span> <span class=\"comment\">// GetProcAddress</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x41797261\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x7262694c\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x64616f4c\\n&quot;</span> <span class=\"comment\">// LoadLibraryA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ecx\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ecx\\n&quot;</span> <span class=\"comment\">// esp传参过去</span></span><br><span class=\"line\">    <span class=\"string\">&quot;cmp $0,0x8(%ebp)\\n&quot;</span><span class=\"comment\">//传参是0就得到LoadLibraryA的地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jnz label2\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Get_Load\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jmp label1\\n&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;label2:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Get_Proc\\n&quot;</span><span class=\"comment\">//传参是1就得到GetProcAddress的地址</span></span><br><span class=\"line\"><span class=\"string\">&quot;label1:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Func_GetModule:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %esi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %fs:0x30, %esi\\n&quot;</span> <span class=\"comment\">// PEB结构体地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0xc(%esi), %esi\\n&quot;</span> <span class=\"comment\">// LDR结构体地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x1c(%esi), %esi\\n&quot;</span> <span class=\"comment\">// list</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%esi), %esi\\n&quot;</span> <span class=\"comment\">// list 第二项kernel32或者kernelbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x8(%esi), %esi\\n&quot;</span> <span class=\"comment\">// dllbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esi, %eax\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %esi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Func_GetAddr:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x8(%ebp), %edx\\n&quot;</span> <span class=\"comment\">// dllbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x3c(%edx), %esi\\n&quot;</span> <span class=\"comment\">// if_anew</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %esi\\n&quot;</span>  <span class=\"comment\">// NT header</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x78(%esi), %esi\\n&quot;</span>  <span class=\"comment\">// 导出表RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %esi\\n&quot;</span>  <span class=\"comment\">// 导出表VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x1c(%esi), %edi\\n&quot;</span>  <span class=\"comment\">// EAT RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %edi), %edi\\n&quot;</span>  <span class=\"comment\">// EAT VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %edi, -0x4(%ebp)\\n&quot;</span>  <span class=\"comment\">// 保存</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x20(%esi), %edi\\n&quot;</span>  <span class=\"comment\">// ENT RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %edi), %edi\\n&quot;</span>  <span class=\"comment\">// ENT VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %edi, -0x8(%ebp)\\n&quot;</span>  <span class=\"comment\">// 保存</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x24(%esi), %edi\\n&quot;</span>  <span class=\"comment\">// EOT RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %edi), %edi\\n&quot;</span>  <span class=\"comment\">// EOT VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %edi, -0xc(%ebp)\\n&quot;</span>  <span class=\"comment\">// 保存</span></span><br><span class=\"line\">    <span class=\"string\">&quot;xor %eax, %eax\\n&quot;</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;jmp tag_cmpfirst\\n&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;tag_cmpLoop:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;inc %eax\\n&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;tag_cmpfirst:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0x8(%ebp), %esi\\n&quot;</span>  <span class=\"comment\">// ENT</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%esi, %eax, 4), %esi\\n&quot;</span> <span class=\"comment\">// RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %esi\\n&quot;</span> <span class=\"comment\">// 函数名称字符串地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0xc(%ebp), %edi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x10(%ebp), %ecx\\n&quot;</span> <span class=\"comment\">// 循环次数，ebp+0x10是传来的参数</span></span><br><span class=\"line\">    <span class=\"string\">&quot;repe cmpsb\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0xc(%ebp), %esi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jne tag_cmpLoop\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0xc(%ebp), %esi\\n&quot;</span> <span class=\"comment\">// EOT</span></span><br><span class=\"line\">    <span class=\"string\">&quot;xor %edi, %edi\\n&quot;</span> <span class=\"comment\">// 为了不影响结果清空edi</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%esi, %eax, 2), %di\\n&quot;</span> <span class=\"comment\">// word类型,EAT表索引</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0x4(%ebp), %edx\\n&quot;</span> <span class=\"comment\">// EAT</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%edx, %edi, 4), %esi\\n&quot;</span> <span class=\"comment\">// 函数地址RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x8(%ebp), %edx\\n&quot;</span> <span class=\"comment\">// dllbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %eax\\n&quot;</span> <span class=\"comment\">// 最终函数地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret $0xc\\n&quot;</span> <span class=\"comment\">// 在栈中弹出三个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Get_Load:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x10, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetModule\\n&quot;</span> <span class=\"comment\">// 获取kernel模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %eax, -0x4(%ebp)\\n&quot;</span> <span class=\"comment\">// 保存模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea 0xc(%ebp), %ecx\\n&quot;</span> <span class=\"comment\">// load地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0xc\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ecx\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %eax\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetAddr\\n&quot;</span> <span class=\"comment\">// 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Get_Proc:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x10, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetModule\\n&quot;</span> <span class=\"comment\">// 获取kernel模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %eax, -0x4(%ebp)\\n&quot;</span> <span class=\"comment\">// 保存模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0xe\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea 0x1c(%ebp), %ecx\\n&quot;</span> <span class=\"comment\">// Get字符串</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ecx\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push -0x4(%ebp)\\n&quot;</span> <span class=\"comment\">// 模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetAddr\\n&quot;</span> <span class=\"comment\">// 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t</span><br></pre></td></tr></table></figure>\n<p>这里就是通过Get_Func来获取GetProcAddress函数地址和LoadLibraryA函数地址<br>从而在加密函数内可以调用这两个函数来获取其他库函数地址<br>Get_Func函数具体实现方式大致是(大佬略过~~):<br>通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址,再通过PEB结构体获取其成员Ldr(加载模块列表)(偏移量为0xc),通过Ldr结构体访问InInitializationOrderModuleList成员(导入模块列表)(偏移量0x1c),InInitializationOrderModuleList的第二个成员即为kernel32.dll模块,我们想要的GetProcAddress函数地址和LoadLibraryA函数地址都在kernel32.dll里面了,通过了解PE文件结构访问其导出表即可</p>\n<p>好了,转成字节码试一下效果<br>原函数转成字节码之后代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*PRINTF)</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *__format, ...)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*GET_FUNC)</span><span class=\"params\">(<span class=\"type\">int</span>)</span>; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>,GET_FUNC)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x6d</span>,<span class=\"number\">0x73</span>,<span class=\"number\">0x76</span>,<span class=\"number\">0x63</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe1</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x2e</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe7</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x70</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x69</span>,<span class=\"number\">0x6e</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xda</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdc</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x25</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0xa</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;<span class=\"comment\">//add字节码</span></span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b,GET_FUNC get_func)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);</span></span><br><span class=\"line\"><span class=\"comment\">//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     char Module_name[] = &quot;msvcrt.dll&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     HINSTANCE mAddress = load(Module_name);</span></span><br><span class=\"line\"><span class=\"comment\">//     char fnName[] = &quot;printf&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);</span></span><br><span class=\"line\"><span class=\"comment\">//     char format[] = &quot;%d\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     print(format,a+b);</span></span><br><span class=\"line\"><span class=\"comment\">//     return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,Get_Func);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行成功,输出7<br>在IDA中的伪代码窗口如下:<br><img src=\"https://s2.loli.net/2024/06/22/UJTCFPotApOenDi.png\" alt=\"Alt text\"><br><img src=\"https://s2.loli.net/2024/06/22/5z2WBxpEe8hajJQ.png\" alt=\"Alt text\"></p>\n<p>隐藏性有所提升,但是还可以进一步提升<br>我们可以把Get_Func函数也通过SMC加密,从而进一步提高代码的隐藏性</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*PRINTF)</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *__format, ...)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*GET_FUNC)</span><span class=\"params\">(<span class=\"type\">int</span>)</span>; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>,GET_FUNC)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x6d</span>,<span class=\"number\">0x73</span>,<span class=\"number\">0x76</span>,<span class=\"number\">0x63</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe1</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x2e</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe7</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x70</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x69</span>,<span class=\"number\">0x6e</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xda</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdc</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x25</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0xa</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\">byte get_func[] = &#123;<span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE1</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x91</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0xA8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7E</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7E</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7E</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xF3</span>, <span class=\"number\">0xA6</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE9</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xBA</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x0E</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b,GET_FUNC get_func)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);</span></span><br><span class=\"line\"><span class=\"comment\">//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     char Module_name[] = &quot;msvcrt.dll&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     HINSTANCE mAddress = load(Module_name);</span></span><br><span class=\"line\"><span class=\"comment\">//     char fnName[] = &quot;printf&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);</span></span><br><span class=\"line\"><span class=\"comment\">//     char format[] = &quot;%d\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     print(format,a+b);</span></span><br><span class=\"line\"><span class=\"comment\">//     return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect)||</span><br><span class=\"line\">     !VirtualProtect(get_func,<span class=\"keyword\">sizeof</span>(get_func),PAGE_EXECUTE,&amp;fOldProtect)   )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  GET_FUNC get_fn = (GET_FUNC)get_func;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,get_fn);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现效果:<br><img src=\"https://s2.loli.net/2024/06/22/K3JQN64RGt1ieVo.png\" alt=\"Alt text\"></p>\n<h4 id=\"2-新建可执行的节段存储加密函数\"><a href=\"#2-新建可执行的节段存储加密函数\" class=\"headerlink\" title=\"2.新建可执行的节段存储加密函数\"></a>2.新建可执行的节段存储加密函数</h4><h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h4><p>Linux下把加密代码放到数据段:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个全局变量，用来存放机器指令</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> code[<span class=\"number\">8</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个函数指针，用来指向机器指令的地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*func_ptr)</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前系统的内存页大小</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pagesize = <span class=\"built_in\">sysconf</span>(_SC_PAGESIZE);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pagesize = %d\\n&quot;</span>, pagesize);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算全局变量code的地址所在的内存页的起始地址</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> start = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)code &amp; ~(pagesize - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start = %p\\n&quot;</span>, (<span class=\"type\">void</span> *)start);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算全局变量code的地址所在的内存页的结束地址</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> end = ((<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)code + <span class=\"built_in\">sizeof</span>(code) + pagesize - <span class=\"number\">1</span>) &amp; ~(pagesize - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;end = %p\\n&quot;</span>, (<span class=\"type\">void</span> *)end);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算全局变量code所占用的内存页的长度</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> len = end - start;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;len = %ld\\n&quot;</span>, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 给全局变量code所在的内存页可执行权限</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">mprotect</span>((<span class=\"type\">void</span> *)start, len, PROT_READ | PROT_EXEC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;mprotect&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在全局变量code中写入一段机器指令，其功能是将rax加1并返回</span></span><br><span class=\"line\">    <span class=\"comment\">// 该指令的二进制码为：48 ff c0 c3</span></span><br><span class=\"line\">    code[<span class=\"number\">0</span>] = <span class=\"number\">0x48</span>;</span><br><span class=\"line\">    code[<span class=\"number\">1</span>] = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    code[<span class=\"number\">2</span>] = <span class=\"number\">0xc0</span>;</span><br><span class=\"line\">    code[<span class=\"number\">3</span>] = <span class=\"number\">0xc3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将函数指针指向全局变量code的地址</span></span><br><span class=\"line\">    func_ptr f = (func_ptr)code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用函数指针，执行机器指令</span></span><br><span class=\"line\">    <span class=\"type\">int</span> result = <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;result = %d\\n&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CTF出题中的应用\"><a href=\"#CTF出题中的应用\" class=\"headerlink\" title=\"CTF出题中的应用\"></a>CTF出题中的应用</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\",\"></a>,</h4>","site":{"data":{}},"excerpt":"<p>SMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以提高恶意代码的抗分析能力，但也存在一些局限性。作为一名CTF比赛的爱好者，虽然经常接触SMC加密技术，但是对其原理和实现并不深入了解，只是停留在解题的层面。最近，在为新生出题的过程中，产生了将SMC加密技术应用在出题上的想法，于是决定深入探究这门技术的原理、实现和应用。","more":"本文旨在分享作者学习SMC加密技术的心得，以及介绍如何利用SMC加密技术设计出有趣和有挑战性的CTF题目<br>本文的结构如下：第一部分介绍SMC加密技术的基本概念和原理；第二部分介绍SMC加密技术的实现方法和工具；第三部分介绍SMC加密技术在CTF出题中的应用和案例</p>\n<h3 id=\"SMC加密技术的基本概念和原理\"><a href=\"#SMC加密技术的基本概念和原理\" class=\"headerlink\" title=\"SMC加密技术的基本概念和原理\"></a>SMC加密技术的基本概念和原理</h3><p>SMC（Software-Based Memory Encryption）是一种局部代码加密技术，它可以将一个可执行文件的指定区段进行加密，使得黑客无法直接分析区段内的代码，从而增加恶意代码分析难度和降低恶意攻击成功的可能性。<br>SMC的基本原理是在编译可执行文件时，将需要加密的代码区段（例如函数、代码块等）单独编译成一个section（段），并将其标记为可读、可写、不可执行（readable, writable, non-executable），然后通过某种方式在程序运行时将这个section解密为可执行代码，并将其标记为可读、可执行、不可写（readable, executable, non-writable）。这样，攻击者就无法在内存中找到加密的代码，从而无法直接执行或修改加密的代码。<br>具体介绍见原文:<a href=\"https://zhuanlan.zhihu.com/p/624554464\">https://zhuanlan.zhihu.com/p/624554464</a></p>\n<h3 id=\"SMC加密技术的实现方法\"><a href=\"#SMC加密技术的实现方法\" class=\"headerlink\" title=\"SMC加密技术的实现方法\"></a>SMC加密技术的实现方法</h3><p>PS:为了方便,部分示例代码省去了对字节码加密和解密的操作,请注意辨别</p>\n<h4 id=\"1-数组保存字节码-调整内存执行权限-函数指针运行\"><a href=\"#1-数组保存字节码-调整内存执行权限-函数指针运行\" class=\"headerlink\" title=\"1.数组保存字节码-&gt;调整内存执行权限-&gt;函数指针运行\"></a>1.数组保存字节码-&gt;调整内存执行权限-&gt;函数指针运行</h4><p>先提取加密段代码的字节码<br>写入加密段代码,通过调试工具获取加密代码对应的字节码,例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x5d</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>通过VirtualProtect函数调整内存为可执行的,定义函数指针,指向addData,调用函数指针</p>\n<blockquote>\n<p>BOOL VirtualProtect(<br> [in] LPVOID lpAddress,  &#x2F;&#x2F; 要更改保护属性的页区域的起始地址<br> [in] SIZE_T dwSize,     &#x2F;&#x2F; 要更改保护属性的区域的大小（以字节为单位）<br> [in] DWORD flNewProtect,&#x2F;&#x2F; 新的保护属性值<br> [out] PDWORD lpflOldProtect &#x2F;&#x2F; 用于接收原来保护属性值的指针<br>);<br>第三个参数flNewProtect包括但不限于:<br>PAGE_EXECUTE 可执行<br>PAGE_EXECUTE_READ  可读可执行<br>PAGE_EXECUTE_READWRITE 可读可写可执行<br>最简单的一种实现方式,以add函数为例</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x5d</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,add(<span class=\"number\">3</span>,<span class=\"number\">4</span>));<span class=\"comment\">//7</span></span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行成功,在IDA中查看效果<br><img src=\"https://s2.loli.net/2024/06/22/dkv3X8WhFH4jawC.png\" alt=\"Alt text\"><br><img src=\"https://s2.loli.net/2024/06/22/rpFYDZmHQ5tA7oT.png\" alt=\"Alt text\"><br>(未加密的)函数如期的到了data段<br>通过这种方式即可实现大部分的加密算法,例如tea,base64,rc4等<br>但是对于一些复杂的逻辑加密,可能需要引入外界的库函数,比如说CTF中简单的输入输出提示,需要用到printf,scanf等库函数<br>举例如下,当add中嵌套了printf时</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x28</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x6a</span>,<span class=\"number\">0x50</span>,<span class=\"number\">0x40</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0x21</span>,<span class=\"number\">0x26</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   int c = a+b;</span></span><br><span class=\"line\"><span class=\"comment\">//   printf(&quot;%d&quot;,c);</span></span><br><span class=\"line\"><span class=\"comment\">//   return c;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正常生成但是运行失败,汇编窗口动调发现在call指令时发生了报错<br>分析可知,call指令后跟的是printf的相对地址,在转换到data段之后相对地址发生改变,访问到了非printf地址<br>第一种解决方法:可以定义函数指针,在加密函数内通过函数指针来利用库函数<br>如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*PRINTF)</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *__format, ...)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>,PRINTF)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x28</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf1</span>,<span class=\"number\">0x25</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf3</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf1</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b,PRINTF print)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   int c = a+b;</span></span><br><span class=\"line\"><span class=\"comment\">//   char format[] = &quot;%d&quot;;//原.rdata段数据,尽量使用栈来保存函数参数</span></span><br><span class=\"line\"><span class=\"comment\">//   print(format,c);</span></span><br><span class=\"line\"><span class=\"comment\">//   return c;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"built_in\">printf</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IDA中伪代码:<br><img src=\"https://s2.loli.net/2024/06/22/YZny7G8vLoUbF2c.png\" alt=\"Alt text\"><br>从这个例子可以看出，这种传参方式很容易暴露自己的意图，此地无银三百两的感觉,并且会出现调用多个库函数时代码可读性差的问题<br>为了优化隐蔽性和可读性，我们可以利用kernel32.dll模块来获取LoadLibraryA和GetProcAddress函数的地址，进而动态加载我们需要的模块和函数。<br>具体的实现步骤在Get_Func函数中有详细说明。<br>下面是修改后的程序，可正常运行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mytool.h</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">HINSTANCE</span> <span class=\"params\">(*LOADLIBRARY)</span><span class=\"params\">(LPCSTR)</span>;<span class=\"comment\">//LoadLibraryA的地址</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">FARPROC</span> <span class=\"params\">(*GETPROCADDRESS)</span><span class=\"params\">(HINSTANCE, LPCSTR)</span>;<span class=\"comment\">//GetProcAddress的地址</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Get_Func</span><span class=\"params\">(<span class=\"type\">int</span> fnNum)</span>&#123;<span class=\"comment\">//通过传参来返回GetProcAddress函数地址和LoadLibraryA函数地址</span></span><br><span class=\"line\"> <span class=\"keyword\">asm</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x7373\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x65726464\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x41636f72\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x50746547\\n&quot;</span> <span class=\"comment\">// GetProcAddress</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x41797261\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x7262694c\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0x64616f4c\\n&quot;</span> <span class=\"comment\">// LoadLibraryA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ecx\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ecx\\n&quot;</span> <span class=\"comment\">// esp传参过去</span></span><br><span class=\"line\">    <span class=\"string\">&quot;cmp $0,0x8(%ebp)\\n&quot;</span><span class=\"comment\">//传参是0就得到LoadLibraryA的地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jnz label2\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Get_Load\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jmp label1\\n&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;label2:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Get_Proc\\n&quot;</span><span class=\"comment\">//传参是1就得到GetProcAddress的地址</span></span><br><span class=\"line\"><span class=\"string\">&quot;label1:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Func_GetModule:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %esi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %fs:0x30, %esi\\n&quot;</span> <span class=\"comment\">// PEB结构体地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0xc(%esi), %esi\\n&quot;</span> <span class=\"comment\">// LDR结构体地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x1c(%esi), %esi\\n&quot;</span> <span class=\"comment\">// list</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%esi), %esi\\n&quot;</span> <span class=\"comment\">// list 第二项kernel32或者kernelbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x8(%esi), %esi\\n&quot;</span> <span class=\"comment\">// dllbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esi, %eax\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %esi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Func_GetAddr:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x8(%ebp), %edx\\n&quot;</span> <span class=\"comment\">// dllbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x3c(%edx), %esi\\n&quot;</span> <span class=\"comment\">// if_anew</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %esi\\n&quot;</span>  <span class=\"comment\">// NT header</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x78(%esi), %esi\\n&quot;</span>  <span class=\"comment\">// 导出表RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %esi\\n&quot;</span>  <span class=\"comment\">// 导出表VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x1c(%esi), %edi\\n&quot;</span>  <span class=\"comment\">// EAT RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %edi), %edi\\n&quot;</span>  <span class=\"comment\">// EAT VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %edi, -0x4(%ebp)\\n&quot;</span>  <span class=\"comment\">// 保存</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x20(%esi), %edi\\n&quot;</span>  <span class=\"comment\">// ENT RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %edi), %edi\\n&quot;</span>  <span class=\"comment\">// ENT VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %edi, -0x8(%ebp)\\n&quot;</span>  <span class=\"comment\">// 保存</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x24(%esi), %edi\\n&quot;</span>  <span class=\"comment\">// EOT RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %edi), %edi\\n&quot;</span>  <span class=\"comment\">// EOT VA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %edi, -0xc(%ebp)\\n&quot;</span>  <span class=\"comment\">// 保存</span></span><br><span class=\"line\">    <span class=\"string\">&quot;xor %eax, %eax\\n&quot;</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;jmp tag_cmpfirst\\n&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;tag_cmpLoop:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;inc %eax\\n&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;tag_cmpfirst:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0x8(%ebp), %esi\\n&quot;</span>  <span class=\"comment\">// ENT</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%esi, %eax, 4), %esi\\n&quot;</span> <span class=\"comment\">// RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %esi\\n&quot;</span> <span class=\"comment\">// 函数名称字符串地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0xc(%ebp), %edi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x10(%ebp), %ecx\\n&quot;</span> <span class=\"comment\">// 循环次数，ebp+0x10是传来的参数</span></span><br><span class=\"line\">    <span class=\"string\">&quot;repe cmpsb\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0xc(%ebp), %esi\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jne tag_cmpLoop\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0xc(%ebp), %esi\\n&quot;</span> <span class=\"comment\">// EOT</span></span><br><span class=\"line\">    <span class=\"string\">&quot;xor %edi, %edi\\n&quot;</span> <span class=\"comment\">// 为了不影响结果清空edi</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%esi, %eax, 2), %di\\n&quot;</span> <span class=\"comment\">// word类型,EAT表索引</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov -0x4(%ebp), %edx\\n&quot;</span> <span class=\"comment\">// EAT</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov (%edx, %edi, 4), %esi\\n&quot;</span> <span class=\"comment\">// 函数地址RVA</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov 0x8(%ebp), %edx\\n&quot;</span> <span class=\"comment\">// dllbase</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea (%edx, %esi), %eax\\n&quot;</span> <span class=\"comment\">// 最终函数地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret $0xc\\n&quot;</span> <span class=\"comment\">// 在栈中弹出三个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Get_Load:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x10, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetModule\\n&quot;</span> <span class=\"comment\">// 获取kernel模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %eax, -0x4(%ebp)\\n&quot;</span> <span class=\"comment\">// 保存模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea 0xc(%ebp), %ecx\\n&quot;</span> <span class=\"comment\">// load地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0xc\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ecx\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %eax\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetAddr\\n&quot;</span> <span class=\"comment\">// 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Get_Proc:&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sub $0x10, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetModule\\n&quot;</span> <span class=\"comment\">// 获取kernel模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %eax, -0x4(%ebp)\\n&quot;</span> <span class=\"comment\">// 保存模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push $0xe\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lea 0x1c(%ebp), %ecx\\n&quot;</span> <span class=\"comment\">// Get字符串</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push %ecx\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push -0x4(%ebp)\\n&quot;</span> <span class=\"comment\">// 模块基址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;call Func_GetAddr\\n&quot;</span> <span class=\"comment\">// 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ret\\n&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t</span><br></pre></td></tr></table></figure>\n<p>这里就是通过Get_Func来获取GetProcAddress函数地址和LoadLibraryA函数地址<br>从而在加密函数内可以调用这两个函数来获取其他库函数地址<br>Get_Func函数具体实现方式大致是(大佬略过~~):<br>通过FS段寄存器获取TEB的地址，然后通过TEB的ProcessEnvironmentBlock成员（偏移量为0x30）获取PEB的地址,再通过PEB结构体获取其成员Ldr(加载模块列表)(偏移量为0xc),通过Ldr结构体访问InInitializationOrderModuleList成员(导入模块列表)(偏移量0x1c),InInitializationOrderModuleList的第二个成员即为kernel32.dll模块,我们想要的GetProcAddress函数地址和LoadLibraryA函数地址都在kernel32.dll里面了,通过了解PE文件结构访问其导出表即可</p>\n<p>好了,转成字节码试一下效果<br>原函数转成字节码之后代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*PRINTF)</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *__format, ...)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*GET_FUNC)</span><span class=\"params\">(<span class=\"type\">int</span>)</span>; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>,GET_FUNC)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x6d</span>,<span class=\"number\">0x73</span>,<span class=\"number\">0x76</span>,<span class=\"number\">0x63</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe1</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x2e</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe7</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x70</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x69</span>,<span class=\"number\">0x6e</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xda</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdc</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x25</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0xa</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;<span class=\"comment\">//add字节码</span></span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b,GET_FUNC get_func)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);</span></span><br><span class=\"line\"><span class=\"comment\">//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     char Module_name[] = &quot;msvcrt.dll&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     HINSTANCE mAddress = load(Module_name);</span></span><br><span class=\"line\"><span class=\"comment\">//     char fnName[] = &quot;printf&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);</span></span><br><span class=\"line\"><span class=\"comment\">//     char format[] = &quot;%d\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     print(format,a+b);</span></span><br><span class=\"line\"><span class=\"comment\">//     return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,Get_Func);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行成功,输出7<br>在IDA中的伪代码窗口如下:<br><img src=\"https://s2.loli.net/2024/06/22/UJTCFPotApOenDi.png\" alt=\"Alt text\"><br><img src=\"https://s2.loli.net/2024/06/22/5z2WBxpEe8hajJQ.png\" alt=\"Alt text\"></p>\n<p>隐藏性有所提升,但是还可以进一步提升<br>我们可以把Get_Func函数也通过SMC加密,从而进一步提高代码的隐藏性</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mytool.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*PRINTF)</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *__format, ...)</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*GET_FUNC)</span><span class=\"params\">(<span class=\"type\">int</span>)</span>; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*FnAdd)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>,GET_FUNC)</span>;</span><br><span class=\"line\">byte addData[] = &#123;<span class=\"number\">0x55</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0x10</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x6d</span>,<span class=\"number\">0x73</span>,<span class=\"number\">0x76</span>,<span class=\"number\">0x63</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe1</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x2e</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe5</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0x6c</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe7</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdd</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf4</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x70</span>,<span class=\"number\">0x72</span>,<span class=\"number\">0x69</span>,<span class=\"number\">0x6e</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xda</span>,<span class=\"number\">0x74</span>,<span class=\"number\">0x66</span>,<span class=\"number\">0xc6</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xdc</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd6</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xec</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xf0</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xc7</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x25</span>,<span class=\"number\">0x64</span>,<span class=\"number\">0xa</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x44</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x8d</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xd2</span>,<span class=\"number\">0x89</span>,<span class=\"number\">0x4</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x55</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0x8b</span>,<span class=\"number\">0x45</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0x1</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0xc9</span>,<span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\">byte get_func[] = &#123;<span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE1</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x91</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0xA8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7E</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7E</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7E</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xF3</span>, <span class=\"number\">0xA6</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE9</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xBA</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xE5</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x0E</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xFC</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x5D</span>, <span class=\"number\">0xc3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// int add(int a,int b,GET_FUNC get_func)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     LOADLIBRARY load = (LOADLIBRARY)get_func(0);</span></span><br><span class=\"line\"><span class=\"comment\">//     GETPROCADDRESS ProcAddress = (GETPROCADDRESS)get_func(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     char Module_name[] = &quot;msvcrt.dll&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     HINSTANCE mAddress = load(Module_name);</span></span><br><span class=\"line\"><span class=\"comment\">//     char fnName[] = &quot;printf&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     PRINTF print = (PRINTF)ProcAddress(mAddress,fnName);</span></span><br><span class=\"line\"><span class=\"comment\">//     char format[] = &quot;%d\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//     print(format,a+b);</span></span><br><span class=\"line\"><span class=\"comment\">//     return a+b;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  DWORD fOldProtect = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!VirtualProtect(addData,<span class=\"keyword\">sizeof</span>(addData),PAGE_EXECUTE,&amp;fOldProtect)||</span><br><span class=\"line\">     !VirtualProtect(get_func,<span class=\"keyword\">sizeof</span>(get_func),PAGE_EXECUTE,&amp;fOldProtect)   )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;VirtualProtect failed&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  FnAdd add = (FnAdd)addData;</span><br><span class=\"line\">  GET_FUNC get_fn = (GET_FUNC)get_func;</span><br><span class=\"line\">  add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,get_fn);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现效果:<br><img src=\"https://s2.loli.net/2024/06/22/K3JQN64RGt1ieVo.png\" alt=\"Alt text\"></p>\n<h4 id=\"2-新建可执行的节段存储加密函数\"><a href=\"#2-新建可执行的节段存储加密函数\" class=\"headerlink\" title=\"2.新建可执行的节段存储加密函数\"></a>2.新建可执行的节段存储加密函数</h4><h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h4><p>Linux下把加密代码放到数据段:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个全局变量，用来存放机器指令</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> code[<span class=\"number\">8</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个函数指针，用来指向机器指令的地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*func_ptr)</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前系统的内存页大小</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pagesize = <span class=\"built_in\">sysconf</span>(_SC_PAGESIZE);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pagesize = %d\\n&quot;</span>, pagesize);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算全局变量code的地址所在的内存页的起始地址</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> start = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)code &amp; ~(pagesize - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start = %p\\n&quot;</span>, (<span class=\"type\">void</span> *)start);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算全局变量code的地址所在的内存页的结束地址</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> end = ((<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)code + <span class=\"built_in\">sizeof</span>(code) + pagesize - <span class=\"number\">1</span>) &amp; ~(pagesize - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;end = %p\\n&quot;</span>, (<span class=\"type\">void</span> *)end);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算全局变量code所占用的内存页的长度</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> len = end - start;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;len = %ld\\n&quot;</span>, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 给全局变量code所在的内存页可执行权限</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">mprotect</span>((<span class=\"type\">void</span> *)start, len, PROT_READ | PROT_EXEC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;mprotect&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在全局变量code中写入一段机器指令，其功能是将rax加1并返回</span></span><br><span class=\"line\">    <span class=\"comment\">// 该指令的二进制码为：48 ff c0 c3</span></span><br><span class=\"line\">    code[<span class=\"number\">0</span>] = <span class=\"number\">0x48</span>;</span><br><span class=\"line\">    code[<span class=\"number\">1</span>] = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    code[<span class=\"number\">2</span>] = <span class=\"number\">0xc0</span>;</span><br><span class=\"line\">    code[<span class=\"number\">3</span>] = <span class=\"number\">0xc3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将函数指针指向全局变量code的地址</span></span><br><span class=\"line\">    func_ptr f = (func_ptr)code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用函数指针，执行机器指令</span></span><br><span class=\"line\">    <span class=\"type\">int</span> result = <span class=\"built_in\">f</span>();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;result = %d\\n&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CTF出题中的应用\"><a href=\"#CTF出题中的应用\" class=\"headerlink\" title=\"CTF出题中的应用\"></a>CTF出题中的应用</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\",\"></a>,</h4>"},{"title":"c++笔记","date":"2023-05-09T16:00:00.000Z","sticky":100,"pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n记载一些学习C/C++语法，库函数，开发框架等<!-- more -->\n\n## *1. 好用的方法：*\n\n### 1. PixmapToRound函数\n\n将QPixmap的图像转换为圆形，美化界面用，代码如下：\n\n```c++\n#ifndef ROUNDIMG_H\n#define ROUNDIMG_H\n#include <QPixmap>\n#include <QPainter>\n#include <QPainterPath>//此处radius是半径\nQPixmap PixmapToRound(const QPixmap &src, int radius)\n{\n    if (src.isNull())\n    {\n        return QPixmap();\n    }\n\n    //按比例缩放\n    QPixmap pixmapa;\n    if(src.width() != radius || src.height() != radius)\n    {\n        pixmapa = src.scaled(radius, radius, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);\n    }\n    else\n    {\n        pixmapa = src;\n    }\n    QPixmap pixmap(radius,radius);\n    pixmap.fill(Qt::transparent);\n\n    QPainter painter(&pixmap);\n    painter.setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);\n\n    QPainterPath path;\n    path.addEllipse(0, 0, radius, radius);\n    painter.setClipPath(path);\n    painter.drawPixmap(0, 0, radius, radius, pixmapa);\n\n    return pixmap;\n}\n#endif // ROUNDIMG_H\n\n//示例：\nQPixmap img;//上端圆形图片，用自己头像嘿嘿\n    img.load(\"://res/login.jpg\");//图片加载\n    QPixmap pixMap= img.scaled(100,100, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);\n    //50为圆形的半径\n    pixMap =  PixmapToRound(pixMap, 50);\n    ui->label_img->setPixmap(pixMap);\n```\n\n### 2. 使用正则表达式规定输入规范\n\n```c++\nui->lineEdit_1->setValidator(new QRegularExpressionValidator(QRegularExpression(\"[0-9]+$\")));//只能输入数字，个数不限\nui->lineEdit_1->setValidator(new QRegularExpressionValidator(QRegularExpression(\"[A-Fa-f0-9]{1,12}\")));//能输入数字和a-f大小写，控制个数不多于12个\n```\n\n### 3. 使用花指令增加逆向破解难度：\n\n```c++\n__asm__(\"test $0,%eax\\n\"\n        \"jz label\\n\"\n        \"add $0xff,%esp\\n\"\n        \".byte 0xe8,0x80,0x80,0x80\\n\"\n        \"label:\\n\"\n        );//破坏了堆栈平衡，以及插入了一些junkcode\n```\n\n### 4. 与数据库互通的一些操作：\n\nCMakeList.txt文件里写入：`find_package(Qt6 COMPONENTS Sql REQUIRED)`  `target_link_libraries(TeamProject PRIVATE Qt6::Sql)` \n\n连接数据库，代码段里写入：\n\n```c++\nvoid MainWindow::linkDatabase()//连接数据库\n{\n    database=QSqlDatabase::addDatabase(\"QMYSQL\");//QMYSQL对应数据库类型，此处为mysql\n    database.setHostName(\"192.168.76.1\");//对应ip地址\n    database.setPort(3306);//对应开放的端口号\n    database.setUserName(\"root\");//对应用户名，此处为root用户\n    database.setPassword(\"123456\");//对应密码\n    database.setDatabaseName(\"test\");//使用的数据库名称\n    database.open();//连接数据库\n    if(!database.isOpen())//判断是否连接成功\n    {\n        setWindowTitle(\"数据库没有连接成功呐！\");\n        //exit(0);\n    }\n}\n```\n\n### 5. 给Qt生成的可执行文件设置图标，以及窗口左上角图标：\n\n给可执行文件设置图标，先在cpp同级目录下创建一个ico.rc文件（后缀一定要是.rc），然后再CMake.txt文件下写入文件编译区，然后再Source Files下找到该文件并写入 `IDI_ICON_LOGO ICON DISCARDABLE \"res/logo.ico\"`，双引号里面是图标的相对路径，.ico文件可在 `D:\\Pixillion`软件中进行图片格式转换。\n\n窗口左上角图标设置：`setWindowIcon(QIcon(\":/res/R-C2.jpg\"));`。\n\n在Qt中调用其他系统命令或执行文件时，可用QProcess函数：\n\n```c++\nQProcess process(this);\nQString str = QApplication::applicationDirPath();\nstr += \"/firmware_upgrade_v1.0.0.exe\";//子程序exe对应主程序exe的相对路径\nprocess.startDetached(str);//startDetached使执行文件与主程序分离，主程序关闭并不影响子程序的运行，start与之相反。\n```\n\n### 6. 数据库查询和写入操作\n\n```c++\n    QSqlQuery query;\n    QString s = QString(\"select * from users where id='%1'\").arg(id);//查询语句\n    QString s2 = QString(\"INSERT INTO users (id,passwordMD5,`password`,name)VALUES ('%1','%2','%3','%4')\").arg(user).arg(pwdMD5).arg(pwd).arg(name);//插入语句，此处按表中字段顺序插入对应值\n    query.exec(s);\n    if(!query.first())//如果查询不到\n    {}\n    else//查询到了\n    {}\n    //用query.value()函数等来访问查到的值\n    //注意一定要在query.first操作后访问query.value()的值，该操作的目的是让查询指针移动\n```\n\n### 7. QThreadPool线程池的使用\n\n先创建一个继承QRunable和QObject的线程类，在类中定义一个public的void run()函数，然后在主线程创建类对象，用QThreadPool::globalInstance()调用类对象实现多线程,示例代码：\n\n```c++\nthread1 *thread = new thread1;\nQThreadPool::globalInstance()->start(thread);\n//.h\n#include <QObject>\n#include <QRunnable>\nclass thread1 : public QObject,public QRunnable\n{\n    Q_OBJECT\npublic:\n    explicit thread1(QObject *parent = nullptr);\n    void run();\nsignals:\n\n};\n//.cpp\n#include \"m_thread.h\"\n#include \"gamehall.h\"\nthread1::thread1(QObject *parent)\n    : QObject{parent},QRunnable()\n{\n}\n\nvoid thread1::run()\n{\n    GameHall* gamehall = new GameHall();\n    gamehall->show();\n//    connect(gamehall,&GameHall::m_show,this,&MainWindow::Show);\n}\n\n```\n\n\n\n------\n\n\n\n## *2. Qt中一些好用的部件属性对应的qss代码：*\n\n### 1. LineEdit部件：\n\n设置形成的是一个浅绿色圆角编辑框。\n\n```c++\nui->lineEdit_1->setStyleSheet(\"font: 25 14pt '微软雅黑 Light';\" //字体\n                                  \"color: rgb(31,31,31);\"\t\t//字体颜色\n                                  \"padding-left:20px;\"       //内边距-字体缩进\n                                  \"background-color: rgb(255, 255, 255);\" //背景颜色\n                                  \"border:2px solid rgb(20,196,188);border-radius:15px;\");//边框粗细-颜色-圆角\n```\n\n\n\n\n\n### 2. PushButton部件：\n\n设置形成的是一个浅绿色按钮，鼠标悬浮或摁下有不同颜色\n\n```c++\nui->signup->setStyleSheet(\"QPushButton{font: 25 14pt '微软雅黑 Light';color: rgb(255,255,255);background-color: rgb(20,196,188);\"\n                              \"border: none;border-radius:5px;}\"\n                              \"QPushButton:hover{background-color: rgb(22,218,208);}\"//hover\n                              \"QPushButton:pressed{background-color: rgb(17,171,164);}\");//pressed\n```\n\n设置的是一个蓝白渐变色的按钮，鼠标悬浮有不同的颜色\n\n```c++\nui->signUp->setStyleSheet(\"QPushButton{background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,\"\n                              \"stop:0.0112994 rgba(64, 145, 252, 255),stop:1 rgba(255, 255, 255, 255));\"\n                              \"color: rgb(255, 255, 255);\"\n                              \"border:0px groove gray;border-radius:7px;padding:2px 4px;\"\n                              \"font: 10pt 'Candara';}\"\n                              \"QPushButton:hover{background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,\"\n                              \"stop:0.0112994 rgba(66, 175, 255, 255),stop:1 rgba(255, 255, 255, 255))};\");\n```\n\n设置是一个蔚蓝色的按钮，按动悬浮有不同颜色\n\n```c++\nui->pushButton->setStyleSheet(\"QPushButton{background:qlineargradient(spread:pad,  x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:\"\n\"0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));\"\n        \"border-radius:8px;\"\n       \"border:2px solid rgb(0, 170, 255);\"\n        \"color:rgb(17,17,17);}\"\n\"QPushButton:hover{background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.443091, y2:0.898, stop:0 rgba(0, 255, 255, 255), stop:1 rgba(255, 255, 255, 255))}\"\n\"QPushButton:hover:pressed{background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));}\");\n```\n\n\n\n------\n\n\n\n\n## *3. 遇到的一些问题：*\n\n- 2023/5/23->在Qt的两个窗口头文件中都调用了相同的一个头文件，然后报了multiple definition of ~的错，分析是因为两个函数重复定义了。\n\n  解决办法是：新建了一个.cpp文件，然后将.h文件中全部内容转到cpp文件中，然后.h文件只包含函数的定义.\n\n- 2023/5/24->在注册成功窗口想要直接将注册窗口和本窗口同时关闭并且转到登录窗口时遇到了问题——如何在子窗口中通过按钮将父窗口也关闭。\n\n  解决办法是：在父窗口调用子窗口前增加一个信号槽连接，信号由子窗口.h文件中定义并在按按钮之后发出，槽函数在父窗口中声明并实现，从而实现信号通过子窗口发出并在父窗口中做出关闭操作。\n\n  核心代码：\n\n  ```c++\n          SignSucess *signsucess = new SignSucess();\n          connect(signsucess,&SignSucess::Close,this,&LoginWindow::Close);\n          signsucess->exec();\n  //Close()函数分别为子窗口和父窗口中自定义的信号和槽函数\n  ```\n\n\n- 2023/5/24->在写记住密码功能时，用到QSetting库，然后通过该库与本地ini文件交互，但是把ini文件放在源代码目录下则无法保存修改，查了网上的有关说法，利用sync()函数或者重构closeEvent函数(该函数在右上角关闭窗口时自动起作用)，或者在该窗口的析构函数中servalue，最终都没很好的解决我的问题。\n\n  解决办法是：将init.ini文件放在exe程序目录下(撒花！)\n\n  绝对路径可以这样在父类头文件窗口直接定义：\n\n  ```c++\n  QString inipath= QCoreApplication::applicationDirPath() + \"/init.ini\"\n  ```\n\n- 2023/5/24->Qt6编译生成的exe程序无法打开，显示缺少一些dll文件。\n\n  解决办法是：打开编译器对应的命令行，这里对应的是MinGW64（已加入环境变量），先新建一个文件夹，将exe程序单独放进去，然后”cd [exe程序所在文件夹的路径]”，输入`windeployqt exe文件名`，例如`windeployqt TeamProject.exe`。\n\n- 2023/5/24->Qt6打包生成exe文件后，打开exe程序不能连接数据库的问题。\n\n  解决办法是：在编译器(这里对应的是MinGW64)对应的bin目录下找到libmysql.dll文件，复制到exe程序的同级目录下即可。\n\n- 2023/5/25->Qt6打包生成的exe文件在远端虚拟机上无法连接数据库成功的问题。\n\n  解决办法是：在Mysql文件夹的MysqlServer文件bin中所有文件转移到exe文件同级目录下\n\n- 2023/5/25->Qt6打包生成的exe文件在远端虚拟机上连接上了数据库，但是远端正常机上连不上\n\n  解决办法是：把代码中 `database.setHostName(\"192.168.123.120\");`ip地址设置为无线局域网适配器 WLAN的IPv4地址（本机ip地址）。\n\n- 2023/6/10->QMovie播放gif时，想要使得同一个label通过按钮切换gif时出现gif暂停不切换的情况\n\n  解决办法是：在gif切换时movie->start()，前加入movie->stop()。\n\n- 2023/6/11->在提升控件类时，运行出现无法找到头文件的情况\n\n  解决办法是：在cmake.txt文件中加入 `INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})`运行报错点击“忽略错误”。\n\n- 2023/6/11->QToolButton重写鼠标进入事件 `void HallBtn::enterEvent(QEnterEvent *event)`\n\n- 2023/6/14->连接阿里云数据库后，查询表时navicate报“lost connection ...during query\"错误\n\n  解决办法是：换校园网。。\n\n\n- 2023/6/24->实现邮箱辅助账号注册时，引用QTcpSocket时报错 `QTcpSocket file not found` \n\n  解决办法是：CMakeList.txt中添加 \n\n  ```c++\n  find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Network)\n  find_package(Qt${QT_VERSION_MAJOR} REQUIRED Network COMPONENTS Core)\n  target_link_libraries(TeamProject PRIVATE Qt${QT_VERSION_MAJOR}::Core)\n  target_link_libraries(TeamProject PRIVATE Qt6::Network)\n  ```\n\n\n\n------\n\n\n\n## *4. Windows编程：*\n\n- `LPCVOID`是一个Windows API数据类型，它是一个指向常量（只读）void的指针。在Windows API中，`LPCVOID`通常用于指向要**读取**的数据的缓冲区\n\n- `LPVOID`是一个Windows API数据类型，它是一个指向void的指针。在Windows API中，`LPVOID`通常用于指向要**读取或写入**的数据的缓冲区\n\n- `ReadProcessMemory`函数是Windows API的一部分，它允许一个进程读取另一个进程的内存区域。该函数的语法如下：\n\n  ```C++\n  BOOL ReadProcessMemory(\n    HANDLE  hProcess,\n    LPCVOID lpBaseAddress,\n    LPVOID  lpBuffer,\n    SIZE_T  nSize,\n    SIZE_T  *lpNumberOfBytesRead\n  );\n  ```\n\n  其中，`hProcess`参数是要读取内存的进程的句柄，`lpBaseAddress`参数是要读取的内存地址（**读取目标地址**），`lpBuffer`参数是用于存储读取数据的缓冲区（**保存读取结果**），`nSize`参数是要读取的字节数，`lpNumberOfBytesRead`参数是指向变量的指针（**没有用到则填NULL**），该变量将接收实际读取的字节数。\n\n- `WriteProcessMemory`函数是Windows API的一部分，它允许一个进程向另一个进程的内存区域写入数据。该函数的语法如下：\n\n  ```C++\n  BOOL WriteProcessMemory(\n    HANDLE  hProcess,\n    LPVOID  lpBaseAddress,\n    LPCVOID lpBuffer,\n    SIZE_T  nSize,\n    SIZE_T  *lpNumberOfBytesWritten\n  );\n  ```\n\n  其中，`hProcess`参数是要读取内存的进程的句柄，`lpBaseAddress`参数是要读取的内存地址（**读取目标地址**），`lpBuffer`参数是用于存储读取数据的缓冲区（**保存读取结果**），`nSize`参数是要读取的字节数，`lpNumberOfBytesWritten`参数是指向变量的指针（**没有用到则填NULL**），该变量将接收实际读取的字节数。\n\n- 获得指定进程PID的方法：\n\n  ```c++\n  DWORD MainWindow::getProcessId(const QString& processName)//获取进程PID\n  {\n      PROCESSENTRY32 entry;\n      entry.dwSize = sizeof(PROCESSENTRY32);\n      HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n      if (Process32First(snapshot, &entry))\n      {\n          do\n          {\n              if (QString::fromWCharArray(entry.szExeFile) == processName)\n              {\n                  CloseHandle(snapshot);\n                  return entry.th32ProcessID;\n              }\n          } while (Process32Next(snapshot, &entry));\n      }\n      CloseHandle(snapshot);\n      return 0;\n  }\n  ```\n  用法：DWORD pid=getProcessId(processname);\n\n- 获取进程的总基地址的方法：\n\n  ``` c++\n  PVOID MainWindow::GetProcessBase(DWORD dwProcessId)\n  {\n      PVOID pProcessImageBase = NULL;\n      //打开进程, 获取进程句柄\n      HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);\n      if (NULL == hProcess)\n      {\n          return pProcessImageBase;\n      }\n      // 遍历进程模块,\n      HMODULE hModule[100] = { 0 };\n      DWORD dwRet = 0;\n      BOOL bRet;\n      bRet = EnumProcessModulesEx(hProcess, (HMODULE*)(hModule), sizeof(hModule), &dwRet, NULL);\n      if (FALSE == bRet)\n      {\n          CloseHandle(hProcess);\n          return pProcessImageBase;\n      }\n      // 获取第一个模块加载基址\n      pProcessImageBase = hModule[0];\n      // 关闭句柄\n      CloseHandle(hProcess);\n      return pProcessImageBase;\n  }\n  ```\n\n  用法：long long baseAddress = (long long)GetProcessBase(Pid)//进程对应PID\n\n- 获取进程句柄：`HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);`\n\n\n\n\n\n------\n\n\n\n## *5. C++语法：*\n\n### 1. 虚继承\n\n```c++\n#include<iostream>\n//虚继承：对类的继承内存存储方式进行了改变\n//从原先的拷贝复制的方式变成了在子类内部空间增加了一个地址，\n// 该地址指向了一些偏移量，通过指针去访问地址+偏移量\n//从而锁定子类从父类那继承来的对象地址，解决了多重继承导致的父类对象重复引起子类访问时目标对象不明确的问题\nclass A\n{\npublic:\n    int flagA;\n    int test;\n    A()\n    {\n        test = 0x666666;\n        flagA = 0x111111;\n    }\n};\n\nclass B :virtual public A\n{\npublic:\n    int flagB;\n    B()\n    {\n        flagB = 0X222222;\n    }\n};\n\nclass C :virtual public A\n{\npublic:\n    int flagC;\n    C()\n    {\n        flagC = 0x3333333;\n    }\n};\n\nclass D :virtual public B,virtual public C\n{\npublic:\n    int flagD;\n    D()\n    {\n        flagD = 0x444444;\n    }\n};\nint main()\n{\n    B b;\n    C c;\n    D d;\n    d.flagA = 0x5555555;\n    //d.C::value = 1;\n    printf(\"%d\\n\", sizeof(d));\n    system(\"pause\");\n}\n```\n\n### 2. 友元函数\n\n在类内声明友元函数，关键词 `friend` ，从而使类外定义的非成员函数可以访问该类的私有成员\n\n```c++\n#include<iostream>\n//友元函数\nclass Student\n{\npublic:\n\tStudent(const char* name);\n\t~Student();\nprivate:\n\tchar name[20];\n\tfriend void printName(Student &stu);\n};\n\nStudent::Student(const char* name)\n{\n\tstrcpy_s(this->name, 20, name);\n}\n\nStudent::~Student()\n{\n}\n\nvoid printName(Student &stu)\n{\n\tstd::cout << stu.name << std::endl;\n}\n\nint main()\n{\n\tStudent stu(\"I am Kvancy\");\n\tprintName(stu);\n\tsystem(\"pause\");\n}\n```\n\n### 3. 重载运算符\n\n```c++\n#include<iostream>\n//重载运算符\nusing std::ostream;\nclass A\n{\npublic:\n\tA(const char* name);\n\t~A();\n\tvoid printName();\n\tchar* get_name();\n\tfriend A operator+(A& a1, A& a2);\n\tfriend ostream& operator<<(ostream& os, A& a1);\nprivate:\n\tchar* name;\n\n};\n\nA::A(const char* name)\n{\n\tif (this->name = (char*)malloc(strlen(name) + 1))\n\t{\n\t\tstrcpy_s(this->name, strlen(name) + 1, name);\n\t}\n\n}\n\nA::~A()\n{\n\tfree(this->name);\n}\n\nvoid A::printName()\n{\n\tstd::cout << this->name << std::endl;\n}\nchar* A::get_name()\n{\n\treturn this->name;\n}\nA operator+(A &a1, A &a2)\n{\n\tA a3(\"\");\n\tchar* buff = nullptr;\n\tint len = strlen(a1.name) + strlen(a2.name);\n\tif (buff = (char*)malloc(len + 1))\n\t{\n\t\tstrcpy_s(buff, len + 1, a1.name);\n\t\tstrcat_s(buff, len + 1, a2.name);\n\t}\n\ta3.name = buff;\n\treturn a3;\n}\nostream& operator<<(ostream& os, A &a1)\n{\n\tos << a1.name;\n\treturn os;\n}\n\nint main()\n{\n\tA a1(\"我是A1\");\n\tA a2(\"我是A2\");\n\tA a3 = a1 + a2;\n\tstd::cout << a3 << std::endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 4. 虚函数\n\n```c++\n#include<iostream>\n//子类重写函数之后，如果定义的父类对象想调用子类重写的函数\n//这个时候如果直接用父类对象的指针指向子类对象，然后调用子类重写的函数\n//这个时候成功调用\n//如果我们把该父类成员函数定义成虚函数，我们可以通过改变指针指向调用子类重写的函数\n//编译从静态联编->动态联编\n//内存中创造了虚函数表，我们可以通过父类的指针指向正确调用函数地址，从而实现调用\n//virtual 关键词父类定义了子类就无需定义\n//override 关键词可以避免因函数签名不一致而导致的错误，提前帮你报错显示提醒你\nclass Animal\n{\npublic:\n\tAnimal();\n\t~Animal();\n\tvirtual void make_sound () const\n\t{\n\t\tprintf(\"Animal:make\\n\");\n\t}\n};\n\nAnimal::Animal()\n{\n}\n\nAnimal::~Animal()\n{\n}\n\nclass Bird:public Animal\n{\npublic:\n\tBird();\n\t~Bird();\n\tvoid make_sound() const override\n\t//如果不加override,忘写了const关键字\n\t//编译器正常编译,父类没有成功调用子类函数，打印出\"Animal:make\"\n\t{\n\t\tprintf(\"Bird:make\\n\");\n\t}\n};\n\nBird::Bird()\n{\n}\nBird::~Bird()\n{\n}\nint main()\n{\n\tAnimal* animal = new Animal();\n\tBird bird;\n\tanimal = &bird;\n\tanimal->make_sound();\n\tsystem(\"pause\");\n\tdelete animal;\n\treturn 0;\n}\n```\n\n### 5. 模版\n\n```c++\n#include<iostream>\n//模版函数{函数模版，类模版}关键词typename或者class随意，在底层中无影响，编译器在编译的时候替换\n//第一种\ntemplate<typename T>\nT sum(T a, T b)\n{\n\treturn a + b;\n}\n\n//第二种,参数类型不相同\ntemplate<typename T,typename T2>\nvoid swap(T &a,T2 &b)\n{ \n\tT  c;\n\tc = b;\n\tb = a;\n\ta = c;\n}\t\t\t\n//第三种，类模版\ntemplate<typename T>\nclass A\n{\npublic:\n\tT getValue()\n\t{\n\t\treturn value;\n\t}\n\tvoid setValue(T va);\n\t\n\tA(T value);\n\t~A();\n\nprivate:\n\tT value;\n};\n//模板类是带参数的类，要求在接口实现中的类名称后面加入模板类参数，函数返回值亦如此\n//格式举例如下\ntemplate<typename T>\nA<T>::A(T value)\n{\n\tthis->value = value;\n}\ntemplate<typename T>\nA<T>::~A()\n{\n}\ntemplate<typename T>\nvoid A<T>::setValue(T va)\n{\n\t\tvalue = va;\n}\nint main()\n{\n\tchar a = 1;\n\tchar b = 2;\n\tprintf(\"第一种:%d\\n\",sum(a, b));\n\tswap(a, b);\n\tprintf(\"第二种：a:%d,b:%d\\n\", a, b);\n\tA<int> c(1);\n\tc.setValue(2);\n\tprintf(\"第三种：%d\\n\", c.getValue());\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 6. 异常处理\n\n```c++\n#include<iostream>\n//C++异常处理机制\n//throw，try,catch\n//在汇编代码中没有try catch，throw函数，正常运行异常代码，然后再一个jmp指令到某一个地址（实际上catch函数）里执行相应功能\ndouble fun(double a, int b)\n{\n\tif (b == 0)\n\t{\n\t\tthrow 2;//这里throw什么类型，就是catch里面参数类型\n\t}\n\treturn a/b;\n}\nint main()\n{\n\ttry\n\t{\n\t\tfun(2, 0);\n\t}\n\t/*catch (int judge)\n\t{\n\t\tif(judge==1)\n\t\tprintf(\"异常\\n\");\n\t\tif(judge==2)\n\t\tprintf(\"异常2\\n\");\n\t}*/\n\tcatch (...)\n\t{\n\t\tprintf(\"我是万能的！\\n\");\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n\t\n}\n```\n\n> perror(char*) 显示报错信息,例如 `perror(\"wrong!:\")` 打印出 \"wrong!:+为什么报错\"\n\n------\n\n\n\n## *6. C++算法*\n\n### 1. 数组 or 容器的遍历算法 `auto,for_each,transform`\n\n```c++\n#include<iostream>\n#include<vector>\n#include <algorithm>\nusing namespace std;\nvector<int>ve;\nvoid visit(int out)\n{\n\tcout << out << \" \";\n}\n//仿函数\nclass print2\n{\npublic:\n\tvoid operator()(int out)\n\t{\n\t\tcout << out << \" \";\n\t}\n};\nclass trans\n{\npublic:\n\tint operator()(int out)\n\t{\n\t\treturn ++out;\n\t}\n};\nint main()\n{\n\t//遍历输出的几种方式\n\tve = { 0,1,2,3,4,5 };\n\tint in[6] = { 0,1,2,3,4,5 };\n\t//正常容器\n\tfor (auto it : in)cout << it << \" \";\n\tcout << endl;\n\tfor_each(in, in + 6, visit);\n\tcout << endl;\n\t//stl容器\n\tfor (auto it : ve){cout << it<<\" \";}\n\tcout << endl;\n\tfor_each(ve.begin(), ve.end(), visit);\n\tcout << endl;\n\tfor_each(ve.begin(), ve.end(), print2());//仿函数输出结果\n\t//transform搬运容器\n\tcout << endl;\n\tvector<int>ve2;\n\t//提前分配内衬\n\tve2.resize(ve.size());\n\ttransform(ve.begin(), ve.end(), ve2.begin(), trans());//把ve内的值可运算性的搬运到ve2中\n\tfor (auto it : ve2)cout << it << \" \" ;\n\tcout << endl;\n}\n```\n\n### 2. 查找算法  `find,find_if,count,count_if,binary_serach`\n\n```c++\n#include<iostream>\n#include<vector>\n#include <algorithm>\nusing namespace std;\nvector<int>ve;\nclass Person\n{\npublic:\n\tstring name;\n\tint age;\n\tbool operator==(const Person& person1)\n\t{\n\t\treturn person1.name == this->name && person1.age == this->age;//注意利用this指针，不能传两个参数\n\t}\n};\n\nclass equal1\n{\npublic:\n\tbool operator()(const Person &person1)\n\t{\n\t\treturn person1.name == \"p2\" && person1.age == 5;\n\t}\n};\nclass equal2\n{\npublic:\n\tbool operator()(int out)\n\t{\n\t\treturn out > 5;\n\t}\n};\nclass count_cmp\n{\npublic:\n\tbool operator()(int out)\n\t{\n\t\treturn out > 5;\n\t}\n};\nint main()\n{\n\t//常用查找算法\n\t//find函数，在algorithm头文件中，find重心在相等\n\tve = { 2,3,4,5,6,7 };\n\tauto it = find(ve.begin(), ve.end(),5);\n\tcout << *it << endl;//返回找到的位置\n\tPerson person1 = { \"p1\",5 };\n\tPerson person2 = { \"p2\",5 };\n\tPerson person3 = { \"p1\",5 };\n\tvector<Person>ve2;\n\tve2.push_back(person1);\n\tve2.push_back(person2);\n\tve2.push_back(person3);\n\tauto it2 = find(ve2.begin(), ve2.end(),person2 );//要重载==运算符\n\tcout <<it2->name << \" \" << it2->age << endl;\n\t/**********************************************/\n\t//find_if语法，find_if重心在比较\n\tauto it3 = find_if(ve.begin(), ve.end(), equal2());//找到大于5的第一个数\n\tcout << *it3 << endl;\n\tauto it4 = find_if(ve2.begin(), ve2.end(), equal1());//自定义类需定义仿函数声明返回标准\n\tcout << it4->name << \" \" << it4->age << endl;\n\t/**********************************************/\n\t//binary_search语法,重心在存在与否,使用条件是查找容器已排序，该查找效率为指数级\n\tauto it5 = binary_search(ve.begin(), ve.end(), 7);//返回值其实是bool类型\n\tcout << it5 << endl;\n\tauto it6 = binary_search(ve.begin(), ve.end(), 8);\n\tcout << it6 << endl;\n\t/***********************************************/\n\t//count语法，用于统计数据，返回某个元素在容器内的个数\n\tint cnt = count(ve.begin(), ve.end(), 2);\n\tcout << cnt << endl;\n\t//统计类的数据时，要重载==运算符\n\t//count_if语法，返回容器内数据条件判断后的个数\n\tcnt = count_if(ve.begin(), ve.end(), count_cmp());\n\tcout << cnt << endl;\n\t//统计类的数据，要用bool型仿函数去定义比较条件\n}\n```\n\n### 3. 排序算法 `sort,rand_shuffle,merge,reverse`\n\n```c++\n\nint main()\n{\n\tsort(ve.begin(), ve.end());//默认升序排列\n\tsort(ve.begin(), ve.end(), greater<int>());//降序排列\n\tsort(ve.begin(), ve.end(), cmpl);//自定义降序排列\n\trandom_shuffle(ve.begin(), ve.end());\n\t//到此每次运行实际上结果一致，使用srand生成随机数\n\tsrand((unsigned int)time(NULL));\n\trandom_shuffle(ve.begin(), ve.end());\n\t//结果每次运行都不同了\n\t/**********************************/\n\t//merge函数，使两个有序的容器合并成一个容器，并且新的容器也是有序的\n\tmerge(ve.begin(), ve.end(), ve1.begin(), ve1.end(), ve2.begin());\n\t//ve2为新的容器\n\t/**************************************/\n\t//reverse函数，翻转函数\n\treverse(ve2.begin(), ve2.end());\n\t/**************************************/\n}\n```\n\n### 4. 拷贝替换算法 `copy replace replace_if `    \n\n```c++\ncopy(ve.begin(), ve.end(), ve2.begin());//把ve的值copy到ve2中，要提前开辟空间\nreplace(ve.begin(), ve.end(), 0, 5);//把ve中0替换成5\nreplace_if(ve.begin(), ve.end(), cmp, 5);//把ve中小于5的替换成5\nswap(ve, ve2);//把ve，ve2容器中数据继续互换\n```\n\n### 5. 常用集合算法 `set_intersection set_union set_difference   ` \n\n```c++\nauto it2 = set_intersection(ve.begin(), ve.end(), ve2.begin(), ve2.end(), ve3.begin());//求v1,v2的交集，保存到v3，返回值为交集结束的迭代器\nauto it3 = set_union(ve.begin(), ve.end(), ve2.begin(), ve2.end(), ve3.begin());//求v1,v2的并集，保存到v3，返回值为并集结束的迭代器\nauto it4 = set_difference(ve.begin(), ve.end(), ve2.begin(), ve2.end(), ve3.begin());//求v1,v2的差集---属于v1，不属于v2的集合\n```\n\n------\n\n\n\n## *7.  运算符优先顺序：*\n\n| 运算符由高到低：                                             |\n| ------------------------------------------------------------ |\n| 第一级：圆括号 ()、下标运算符 []、结构体成员运算符 . 和 ->   |\n| 第二级：逻辑非 !、按位取反 ~、自增自减 ++ 和 --、负号 -、类型转换 (类型)、指针运算符 * 和 &、长度运算符 sizeof |\n| 第三级：乘法运算符 *、/ 和 %                                 |\n| 第四级：加法运算符 + 和 -                                    |\n| 第五级：移位运算符 << 和 >>                                  |\n| 第六级：关系运算符 <、<=、> 和 >=                            |\n| 第七级：相等运算符 == 和 !=                                  |\n| 第八级：按位与 &                                             |\n| 第九级：按位异或 ^                                           |\n| 第十级：按位或                                               |\n| 第十二级：逻辑或                                             |\n| 第十四级：赋值运算符 =、+=、-=、*=、/=、%=、&=、^=、         |\n| 第十五级：逗号运算符 ,                                       |\n|                                                              |\n\n\n\n## 8. MFC\n\n通过空项目创建\n\n```c++\n//mfc.h\n#include<afxwin.h>\n//设置 链接器-系统-窗口\n//设置 在高级里 在共享 DLL 中使用 MFC\nclass Myapp:public CWinApp\n{\npublic:\n\tvirtual BOOL InitInstance();//mfc程序入口\n\nprivate:\n\n};\n\nclass MyFrame:public CFrameWnd\n{\npublic:\n\tMyFrame();\n\t//~MyFrame();\n\tafx_msg void OnLButtonDown(UINT, CPoint point);\nprivate:\n\n\tDECLARE_MESSAGE_MAP()\n};\n\n//mfc.cpp\n#include\"mfc.h\"\n\nMyapp app;//全局应用程序对象\n//MyFrame* m_pMainwnd = new MyFrame;\nBOOL Myapp::InitInstance()\n{\n\tMyFrame* frame = new MyFrame;\n\tframe->ShowWindow(SW_SHOWNORMAL);\n\tframe->UpdateWindow();\n\t//保存程序指针,否则窗口一闪而过,\n\tm_pMainWnd = frame;//m_pMainWnd线程类的一个成员\n\t\n\treturn 1;\n}\n\n\nBEGIN_MESSAGE_MAP(MyFrame, CFrameWnd)\n\tON_WM_LBUTTONDOWN()\nEND_MESSAGE_MAP()\n\nMyFrame::MyFrame()\n{\n\tCreate(NULL, TEXT(\"Crackk\"));\n}\n\nVOID MyFrame::OnLButtonDown(UINT, CPoint point)\n{\n\tTCHAR buf[1024];\n\twsprintf(buf, TEXT(\"X = %d,Y = %d\"), point.x, point.y);\n\tMessageBoxW(buf);\n}\n\n```\n\n通过MFC应用程序模版创建--基于对话框\n\n在app的子类里有首界面的创建\n\n```c++\nCMFC2Dlg dlg;\nm_pMainWnd = &dlg;//第一个显示的界面\n//First dlg;\n//m_pMainWnd = &dlg;//第一个显示的界面\nINT_PTR nResponse = dlg.DoModal();\nif (nResponse == IDOK)\n```\n\n如果要修改首界面可以添加界面类(先创建资源,再创建类)\n\n但是新界面没有最小化和最大化和拖拽功能\n\n\n\n如果想要在界面类里访问其他控件,例如staticText类,需要在ui界面添加变量,然后就可以通过名称来访问该控件\n\n```c++\nvoid CMFC2Dlg::OnBnClickedClick()\n{\n\t// TODO: 在此添加控件通知处理程序代码\n\tstatic int count = 0;\n\tcount++;\n\tif (count >= 5)\n\t{    //hint为staticText的名称\n\t\thint.SetWindowTextW(TEXT(\"flag{1111}\"));\n\t}\n}\n```\n\n这里代码块实际做的操作有两处\n\n第一处:在父界面类的头文件中包含该控件\n\n```c++\nCStatic hint;\n```\n\n第二处:在父界面类的源文件中DoDataExchange函数里添加控件关联\n\n```c++\nDDX_Control(pDX, IDC_HINT, hint);//p_DX是传来的参数,后者是相关联控件id和名称\n```\n\n\n\n给按钮添加事件处理程序时,代码层实际修改了三处代码\n\n所属界面类的头文件中包含该事件处理函数\n\n```c++\nafx_msg void OnBnClickedClick();\nafx_msg void OnBnClickedDClick();\n```\n\n在源文件消息队列声明(BEGIN_MESSAGE_MAP)后添加消息声明\n\n```c++\nON_BN_CLICKED(IDC_Click, &CMFC2Dlg::OnBnClickedClick)//id和处理函数指针\nON_BN_CLICKED(IDC_DClick, &CMFC2Dlg::OnBnClickedDClick)\n```\n\n在源文件中添加处理函数的实现\n\n```c++\nvoid CMFC2Dlg::OnBnClickedClick()\n{\n\t// TODO: 在此添加控件通知处理程序代码\n\tstatic int count = 0;\n\tcount++;\n\tif (count >= 5)\n\t{\n\t\thint.SetWindowTextW(TEXT(\"flag{1111}\"));\n\t}\n}\n\n\nvoid CMFC2Dlg::OnBnClickedDClick()\n{\n\t// TODO: 在此添加控件通知处理程序代码\n\thint.SetWindowTextW(TEXT(\"you are so smart!!\"));\n}\n\n```\n\n\n\n如何格式化SetwindowTextW的参数TEXT,参数为CSting形式,等于LPCTSTR(),TEXT(),_T(),可以用Format来格式化text\n\n```c++\nCString text;\ntext.Format(_T(\"gogogogo!%d\"), count);\nhint.SetWindowTextW(text);\n```\n\n## 9. QML\n\n```js\nimport QtQuick 2.15\nimport QtQuick.Window 2.15\nimport QtQuick.Controls\nWindow {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr(\"Hello World\")\n    property int myvalue: 0\n\n    minimumHeight: 400\n    maximumHeight: 540\n    minimumWidth: 540\n    maximumWidth: 720\n\n    onWidthChanged: {\n        console.log(\"width:\",width);\n    }\n    onMyvalueChanged:\n    {\n        console.log(\"myvalue:\",myvalue);\n    }\n\n    Button{\n        id: btn1\n        objectName: \"btn1\"\n        x: 100\n        width: 50\n        height: 50\n        background: Rectangle{\n            border.color: btn1.focus?\"blue\":\"black\"//按钮按下获得焦点\n        }\n        Keys.onLeftPressed: {//方向键左按下\n            btn1.focus = false\n        }\n    }\n    Button{\n        id: btn2\n        objectName: \"btn2\"\n        x: 100\n        y: 100\n        width: 50\n        height: 50\n        background: Rectangle{\n            border.color: btn2.focus?\"blue\":\"black\"\n        }\n        Keys.onLeftPressed: {//方向键左按下\n            btn2.focus = true\n        }\n    }\n    onActiveFocusItemChanged: { //焦点发生改变时\n        console.log(\"active focus item changed:\",activeFocusItem)//objectName\n    }\n\n\n    Rectangle{\n        x: 100\n        y: 100\n        z: 2//可以在2d中进行覆盖或者隐藏\n        width: 100\n        height: 100\n        color: \"blue\"\n        focus: true\n\n        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                console.log(\"on clicked\")\n            }\n        }\n        Keys.onReturnPressed: {//控件获取键盘信号前需要获取焦点\n            console.log(\"on return pressed\")\n        }\n    }\n\n    \n       Rectangle {\n           id: rect1\n           width: 100\n           height: 50\n           color: \"black\"\n//           anchors.centerIn: parent//水平垂直居中\n           anchors.horizontalCenter: parent.horizontalCenter//水平居中\n           anchors.verticalCenter: parent.verticalCenter//垂直居中\n           rotation: 60 //旋转角度\n           scale: 2 //放缩,放大两倍\n           antialiasing: false //抗锯齿\n           border.width: 2 //边框\n           border.color: \"red\"\n           radius: 30 //弧度\n           gradient: Gradient {//渐变色 覆盖原有颜色 边框颜色不覆盖\n               GradientStop { position: 0.0; color: \"lights teelblue\" }\n               GradientStop { position: 1.0; color: \"blue\"}\n           }\n       }\n\n       Rectangle {\n           id: rect2\n           width: 100\n           height: 50\n           anchors.left: rect1.right//类似弹簧,rect1左边与rect1右边重合\n           anchors.leftMargin: 20//与rect1左侧相距20\n           anchors.top: rect1.top//y轴距离相同\n           color: \"blue\"\n       }\n    Rectangle {\n        id: root\n        width: 100; height: 100\n        state: \"red_color\" //控制状态\n        states: [\n            State {\n                name: \"red_color\"\n                PropertyChanges { root.color: \"red\" }\n            },\n            State {\n                name: \"blue_color\"\n                PropertyChanges { root.color: \"blue\" }\n            }\n        ]\n        MouseArea {\n            anchors.fill: parent\n            onPressed: {\n                root.state = \"blue_color\"\n            }\n            onReleased: {\n                root.state = \"red_color\"\n\n            }\n        }\n        transitions: [//状态改变时进行动画,而不是瞬间完成状态改变\n            Transition {\n                from: \"red_color\"//状态\n                to: \"blue_color\"\n\n                ColorAnimation {\n                    target: root\n                    duration: 1000\n                }\n            },\n            Transition {\n                from: \"blue_color\"\n                to: \"red_color\"\n\n                ColorAnimation {\n                    target: root\n                    duration: 1000\n                }\n            }\n        ]\n    }\n       Rectangle {\n           id: flashingblob\n           width: 100\n           height: 100\n           color: \"blue\"\n           opacity: 1.0\n\n           SequentialAnimation on color {//多段式动画\n\n               ColorAnimation {\n//                   from: \"white\"\n                   to: \"red\"\n                   duration: 200\n               }\n\n               ColorAnimation {\n//                   from: \"white\"\n                   to: \"blue\"\n                   duration: 200\n               }\n           }\n\n           MouseArea {\n               anchors.fill: parent\n               onClicked: {\n                   animateColor.start()\n                   animateOpacity.start()\n               }\n           }\n\n           PropertyAnimation { //属性为字符串的动画\n               id: animateColor;\n               target: flashingblob\n               properties: \"color\"\n               to: \"green\"\n               duration: 1000\n           }\n\n           NumberAnimation {//属性为数字的动画\n               id: animateOpacity\n               target: flashingblob\n               property: \"opacity\"\n               duration: 1000\n               from: 1.0\n               to: 0.5\n           }\n           PropertyAnimation on x {//立即触发的动画\n           to: 100\n           duration: 1000\n           }\n\n       }\n\n\n         Component { //不会立即出现的组件,需要load\n             id: com\n             Rectangle {\n                 width: 100\n                 height: 100\n                 color: \"blue\"\n                 Component.onCompleted: {//构造函数\n                     console.log(\"Completed\")\n                 }\n                 Component.onDestruction: {//析构函数\n                     console.log(\"Destruction\")\n                 }\n             }\n         }\n\n         Component { //不会立即出现的组件,需要load\n             id: com2\n             Image {//img\n                 id: img\n                 source: \"/login2.jpg\"\n             }\n         }\n\n         Component { //不会立即出现的组件,需要load\n             id: com3\n             AnimatedImage {//gif\n                 id: gif\n                 source: \"/GIF-1.gif\"\n                 speed: 10\n             }\n         }\n\n         Loader {//加载组件或文件\n             id: load\n             sourceComponent: com3\n\n             onStateChanged: {\n                 console.log(\"status:\",status)\n             }\n         }\n         Button {\n             id: button\n             width: 50\n             height: 50\n             x: 200\n             onClicked: {\n                 load.item.paused = !load.item.paused//播放键\n             }\n         }\n\n\n        MouseArea {\n            id: mousearea\n            width: 100\n            height: 100\n            enabled: true //是否使能,默认为true\n            acceptedButtons: Qt.LeftButton | Qt.RightButton //默认只接受左键\n            cursorShape: Qt.CrossCursor //鼠标样式\n            hoverEnabled: true //默认关闭,打开可以接受悬浮信号\n\n            Rectangle {\n                anchors.fill: parent\n                color: \"blue\"\n            }\n            onClicked: {\n                console.log(\"clicked\")\n            }\n            onHoveredChanged: {//是否悬浮\n                console.log(\"Onhoverchanged\")\n            }\n\n            onPressed: {\n                var ret = pressedButtons & Qt.LeftButton\n                var ret2 = pressedButtons & Qt.RightButton\n                if(ret == Qt.LeftButton)//控制左右键不同回应\n                    console.log(\"LEFT\")\n                else\n                    console.log(\"RIGHT\")\n                console.log(\"pressed\")\n            }\n            onReleased: {\n                console.log(\"released\")\n            }\n            onPressAndHold://长摁 , 在 Press信号之后\n              {\n                console.log(\"hold\")\n              }\n\n        }\n\n\n        Rectangle {\n            id: rect\n            width: 50\n            height: 50\n            color: \"red\"\n            opacity: (600.0 - rect.x) / 600\n            MouseArea {\n                anchors.fill: parent\n                drag.target: rect //加载拖动效果\n                drag.axis: Drag.XAxis /*| Drag.YAxis*/\n                drag.minimumX: 0\n                drag.maximumX: container.width - rect.width\n//                drag.filterChildren: true//子控件是否能拖动\n            }\n        }\n\n\n\n\n}\n\n```\n\n## Libxl使用\n\n#### 引入库\n\n```cpp\n#include \"libxl-3.1/libxl-3.1.0/include_cpp/libxl.h\"\n#pragma comment(lib,\"libxl-3.1/libxl-3.1.0/lib/libxl.lib\")\nusing namespace libxl;\n```\n\n#### 读取文件\n\n```c++\nBook* book = xlCreateBook();\nbook->load(\"xxx.xls\");\nSheet* sheet = book->getSheet(0);\n```\n\n#### 读取文件大小\n   ```cpp\n   int rowfirst = sheet->firstRow();\n   int rowlast  = sheet->lastRow();\n   int colfirst = sheet->firstCol();\n   int collast  = sheet->lastCol();\n   ```\n\n#### 读取文件内容（表格左上角为（0,0））\n   ```cpp\n   double date1 = sheet->readNum(0, 0);\n   const char* date2 = sheet->readStr(0, 1);\n   ```\n\n#### 创建新sheet\n   ```cpp\n   Book* book1 = xlCreateBook();\n   Sheet* sheet1 = book1->addSheet(\"sheet1\");\n   ```\n\n#### 设置行宽列高\n   ```cpp\n   sheetM->setCol(0, 0, 20);\n   sheetM->setRow(0 , 20);\n   ```\n\n#### 合并单元格\n   ```cpp\n   sheet->setMerge(0,0,1,2); // 合并第0行的1~2列\n   ```\n\n#### 设置字体\n   ```cpp\n   Font *titleFont = bookM->addFont();\n   titleFont->setName(\"宋体\");\n   titleFont->setSize(16);\n   titleFont->setBold(true);\n   Format* titleFormat = bookM->addFormat();\n   titleFormat->setAlignH(ALIGNH_CENTER);\n   titleFormat->setFont(titleFont);\n   titleFormat->setWrap(true);\n   titleFormat->setAlignV(ALIGNV_DISTRIBUTED);\n   ```\n\n#### 向文件写入内容\n   ```cpp\n   sheet->writeStr(1,0,\"xxx\");\n   sheet->writeNum(1,1, 123);\n   ```\n\n#### 保存结束\n   ```cpp\n   book->save(\"文件保存路径\");\n   book->release();\n   ```\n\n\n\n## JSONCPP\n\n这篇博客概括的很全\n\nhttps://www.coonote.com/cplusplus-note/jsoncpp.html\n","source":"_posts/c++.md","raw":"---\ntitle: c++笔记\ndate: 2023/5/10\ncategories: 笔记\ntags:\n  - C++\nsticky: 100\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n记载一些学习C/C++语法，库函数，开发框架等<!-- more -->\n\n## *1. 好用的方法：*\n\n### 1. PixmapToRound函数\n\n将QPixmap的图像转换为圆形，美化界面用，代码如下：\n\n```c++\n#ifndef ROUNDIMG_H\n#define ROUNDIMG_H\n#include <QPixmap>\n#include <QPainter>\n#include <QPainterPath>//此处radius是半径\nQPixmap PixmapToRound(const QPixmap &src, int radius)\n{\n    if (src.isNull())\n    {\n        return QPixmap();\n    }\n\n    //按比例缩放\n    QPixmap pixmapa;\n    if(src.width() != radius || src.height() != radius)\n    {\n        pixmapa = src.scaled(radius, radius, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);\n    }\n    else\n    {\n        pixmapa = src;\n    }\n    QPixmap pixmap(radius,radius);\n    pixmap.fill(Qt::transparent);\n\n    QPainter painter(&pixmap);\n    painter.setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);\n\n    QPainterPath path;\n    path.addEllipse(0, 0, radius, radius);\n    painter.setClipPath(path);\n    painter.drawPixmap(0, 0, radius, radius, pixmapa);\n\n    return pixmap;\n}\n#endif // ROUNDIMG_H\n\n//示例：\nQPixmap img;//上端圆形图片，用自己头像嘿嘿\n    img.load(\"://res/login.jpg\");//图片加载\n    QPixmap pixMap= img.scaled(100,100, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);\n    //50为圆形的半径\n    pixMap =  PixmapToRound(pixMap, 50);\n    ui->label_img->setPixmap(pixMap);\n```\n\n### 2. 使用正则表达式规定输入规范\n\n```c++\nui->lineEdit_1->setValidator(new QRegularExpressionValidator(QRegularExpression(\"[0-9]+$\")));//只能输入数字，个数不限\nui->lineEdit_1->setValidator(new QRegularExpressionValidator(QRegularExpression(\"[A-Fa-f0-9]{1,12}\")));//能输入数字和a-f大小写，控制个数不多于12个\n```\n\n### 3. 使用花指令增加逆向破解难度：\n\n```c++\n__asm__(\"test $0,%eax\\n\"\n        \"jz label\\n\"\n        \"add $0xff,%esp\\n\"\n        \".byte 0xe8,0x80,0x80,0x80\\n\"\n        \"label:\\n\"\n        );//破坏了堆栈平衡，以及插入了一些junkcode\n```\n\n### 4. 与数据库互通的一些操作：\n\nCMakeList.txt文件里写入：`find_package(Qt6 COMPONENTS Sql REQUIRED)`  `target_link_libraries(TeamProject PRIVATE Qt6::Sql)` \n\n连接数据库，代码段里写入：\n\n```c++\nvoid MainWindow::linkDatabase()//连接数据库\n{\n    database=QSqlDatabase::addDatabase(\"QMYSQL\");//QMYSQL对应数据库类型，此处为mysql\n    database.setHostName(\"192.168.76.1\");//对应ip地址\n    database.setPort(3306);//对应开放的端口号\n    database.setUserName(\"root\");//对应用户名，此处为root用户\n    database.setPassword(\"123456\");//对应密码\n    database.setDatabaseName(\"test\");//使用的数据库名称\n    database.open();//连接数据库\n    if(!database.isOpen())//判断是否连接成功\n    {\n        setWindowTitle(\"数据库没有连接成功呐！\");\n        //exit(0);\n    }\n}\n```\n\n### 5. 给Qt生成的可执行文件设置图标，以及窗口左上角图标：\n\n给可执行文件设置图标，先在cpp同级目录下创建一个ico.rc文件（后缀一定要是.rc），然后再CMake.txt文件下写入文件编译区，然后再Source Files下找到该文件并写入 `IDI_ICON_LOGO ICON DISCARDABLE \"res/logo.ico\"`，双引号里面是图标的相对路径，.ico文件可在 `D:\\Pixillion`软件中进行图片格式转换。\n\n窗口左上角图标设置：`setWindowIcon(QIcon(\":/res/R-C2.jpg\"));`。\n\n在Qt中调用其他系统命令或执行文件时，可用QProcess函数：\n\n```c++\nQProcess process(this);\nQString str = QApplication::applicationDirPath();\nstr += \"/firmware_upgrade_v1.0.0.exe\";//子程序exe对应主程序exe的相对路径\nprocess.startDetached(str);//startDetached使执行文件与主程序分离，主程序关闭并不影响子程序的运行，start与之相反。\n```\n\n### 6. 数据库查询和写入操作\n\n```c++\n    QSqlQuery query;\n    QString s = QString(\"select * from users where id='%1'\").arg(id);//查询语句\n    QString s2 = QString(\"INSERT INTO users (id,passwordMD5,`password`,name)VALUES ('%1','%2','%3','%4')\").arg(user).arg(pwdMD5).arg(pwd).arg(name);//插入语句，此处按表中字段顺序插入对应值\n    query.exec(s);\n    if(!query.first())//如果查询不到\n    {}\n    else//查询到了\n    {}\n    //用query.value()函数等来访问查到的值\n    //注意一定要在query.first操作后访问query.value()的值，该操作的目的是让查询指针移动\n```\n\n### 7. QThreadPool线程池的使用\n\n先创建一个继承QRunable和QObject的线程类，在类中定义一个public的void run()函数，然后在主线程创建类对象，用QThreadPool::globalInstance()调用类对象实现多线程,示例代码：\n\n```c++\nthread1 *thread = new thread1;\nQThreadPool::globalInstance()->start(thread);\n//.h\n#include <QObject>\n#include <QRunnable>\nclass thread1 : public QObject,public QRunnable\n{\n    Q_OBJECT\npublic:\n    explicit thread1(QObject *parent = nullptr);\n    void run();\nsignals:\n\n};\n//.cpp\n#include \"m_thread.h\"\n#include \"gamehall.h\"\nthread1::thread1(QObject *parent)\n    : QObject{parent},QRunnable()\n{\n}\n\nvoid thread1::run()\n{\n    GameHall* gamehall = new GameHall();\n    gamehall->show();\n//    connect(gamehall,&GameHall::m_show,this,&MainWindow::Show);\n}\n\n```\n\n\n\n------\n\n\n\n## *2. Qt中一些好用的部件属性对应的qss代码：*\n\n### 1. LineEdit部件：\n\n设置形成的是一个浅绿色圆角编辑框。\n\n```c++\nui->lineEdit_1->setStyleSheet(\"font: 25 14pt '微软雅黑 Light';\" //字体\n                                  \"color: rgb(31,31,31);\"\t\t//字体颜色\n                                  \"padding-left:20px;\"       //内边距-字体缩进\n                                  \"background-color: rgb(255, 255, 255);\" //背景颜色\n                                  \"border:2px solid rgb(20,196,188);border-radius:15px;\");//边框粗细-颜色-圆角\n```\n\n\n\n\n\n### 2. PushButton部件：\n\n设置形成的是一个浅绿色按钮，鼠标悬浮或摁下有不同颜色\n\n```c++\nui->signup->setStyleSheet(\"QPushButton{font: 25 14pt '微软雅黑 Light';color: rgb(255,255,255);background-color: rgb(20,196,188);\"\n                              \"border: none;border-radius:5px;}\"\n                              \"QPushButton:hover{background-color: rgb(22,218,208);}\"//hover\n                              \"QPushButton:pressed{background-color: rgb(17,171,164);}\");//pressed\n```\n\n设置的是一个蓝白渐变色的按钮，鼠标悬浮有不同的颜色\n\n```c++\nui->signUp->setStyleSheet(\"QPushButton{background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,\"\n                              \"stop:0.0112994 rgba(64, 145, 252, 255),stop:1 rgba(255, 255, 255, 255));\"\n                              \"color: rgb(255, 255, 255);\"\n                              \"border:0px groove gray;border-radius:7px;padding:2px 4px;\"\n                              \"font: 10pt 'Candara';}\"\n                              \"QPushButton:hover{background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,\"\n                              \"stop:0.0112994 rgba(66, 175, 255, 255),stop:1 rgba(255, 255, 255, 255))};\");\n```\n\n设置是一个蔚蓝色的按钮，按动悬浮有不同颜色\n\n```c++\nui->pushButton->setStyleSheet(\"QPushButton{background:qlineargradient(spread:pad,  x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:\"\n\"0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));\"\n        \"border-radius:8px;\"\n       \"border:2px solid rgb(0, 170, 255);\"\n        \"color:rgb(17,17,17);}\"\n\"QPushButton:hover{background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.443091, y2:0.898, stop:0 rgba(0, 255, 255, 255), stop:1 rgba(255, 255, 255, 255))}\"\n\"QPushButton:hover:pressed{background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));}\");\n```\n\n\n\n------\n\n\n\n\n## *3. 遇到的一些问题：*\n\n- 2023/5/23->在Qt的两个窗口头文件中都调用了相同的一个头文件，然后报了multiple definition of ~的错，分析是因为两个函数重复定义了。\n\n  解决办法是：新建了一个.cpp文件，然后将.h文件中全部内容转到cpp文件中，然后.h文件只包含函数的定义.\n\n- 2023/5/24->在注册成功窗口想要直接将注册窗口和本窗口同时关闭并且转到登录窗口时遇到了问题——如何在子窗口中通过按钮将父窗口也关闭。\n\n  解决办法是：在父窗口调用子窗口前增加一个信号槽连接，信号由子窗口.h文件中定义并在按按钮之后发出，槽函数在父窗口中声明并实现，从而实现信号通过子窗口发出并在父窗口中做出关闭操作。\n\n  核心代码：\n\n  ```c++\n          SignSucess *signsucess = new SignSucess();\n          connect(signsucess,&SignSucess::Close,this,&LoginWindow::Close);\n          signsucess->exec();\n  //Close()函数分别为子窗口和父窗口中自定义的信号和槽函数\n  ```\n\n\n- 2023/5/24->在写记住密码功能时，用到QSetting库，然后通过该库与本地ini文件交互，但是把ini文件放在源代码目录下则无法保存修改，查了网上的有关说法，利用sync()函数或者重构closeEvent函数(该函数在右上角关闭窗口时自动起作用)，或者在该窗口的析构函数中servalue，最终都没很好的解决我的问题。\n\n  解决办法是：将init.ini文件放在exe程序目录下(撒花！)\n\n  绝对路径可以这样在父类头文件窗口直接定义：\n\n  ```c++\n  QString inipath= QCoreApplication::applicationDirPath() + \"/init.ini\"\n  ```\n\n- 2023/5/24->Qt6编译生成的exe程序无法打开，显示缺少一些dll文件。\n\n  解决办法是：打开编译器对应的命令行，这里对应的是MinGW64（已加入环境变量），先新建一个文件夹，将exe程序单独放进去，然后”cd [exe程序所在文件夹的路径]”，输入`windeployqt exe文件名`，例如`windeployqt TeamProject.exe`。\n\n- 2023/5/24->Qt6打包生成exe文件后，打开exe程序不能连接数据库的问题。\n\n  解决办法是：在编译器(这里对应的是MinGW64)对应的bin目录下找到libmysql.dll文件，复制到exe程序的同级目录下即可。\n\n- 2023/5/25->Qt6打包生成的exe文件在远端虚拟机上无法连接数据库成功的问题。\n\n  解决办法是：在Mysql文件夹的MysqlServer文件bin中所有文件转移到exe文件同级目录下\n\n- 2023/5/25->Qt6打包生成的exe文件在远端虚拟机上连接上了数据库，但是远端正常机上连不上\n\n  解决办法是：把代码中 `database.setHostName(\"192.168.123.120\");`ip地址设置为无线局域网适配器 WLAN的IPv4地址（本机ip地址）。\n\n- 2023/6/10->QMovie播放gif时，想要使得同一个label通过按钮切换gif时出现gif暂停不切换的情况\n\n  解决办法是：在gif切换时movie->start()，前加入movie->stop()。\n\n- 2023/6/11->在提升控件类时，运行出现无法找到头文件的情况\n\n  解决办法是：在cmake.txt文件中加入 `INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})`运行报错点击“忽略错误”。\n\n- 2023/6/11->QToolButton重写鼠标进入事件 `void HallBtn::enterEvent(QEnterEvent *event)`\n\n- 2023/6/14->连接阿里云数据库后，查询表时navicate报“lost connection ...during query\"错误\n\n  解决办法是：换校园网。。\n\n\n- 2023/6/24->实现邮箱辅助账号注册时，引用QTcpSocket时报错 `QTcpSocket file not found` \n\n  解决办法是：CMakeList.txt中添加 \n\n  ```c++\n  find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Network)\n  find_package(Qt${QT_VERSION_MAJOR} REQUIRED Network COMPONENTS Core)\n  target_link_libraries(TeamProject PRIVATE Qt${QT_VERSION_MAJOR}::Core)\n  target_link_libraries(TeamProject PRIVATE Qt6::Network)\n  ```\n\n\n\n------\n\n\n\n## *4. Windows编程：*\n\n- `LPCVOID`是一个Windows API数据类型，它是一个指向常量（只读）void的指针。在Windows API中，`LPCVOID`通常用于指向要**读取**的数据的缓冲区\n\n- `LPVOID`是一个Windows API数据类型，它是一个指向void的指针。在Windows API中，`LPVOID`通常用于指向要**读取或写入**的数据的缓冲区\n\n- `ReadProcessMemory`函数是Windows API的一部分，它允许一个进程读取另一个进程的内存区域。该函数的语法如下：\n\n  ```C++\n  BOOL ReadProcessMemory(\n    HANDLE  hProcess,\n    LPCVOID lpBaseAddress,\n    LPVOID  lpBuffer,\n    SIZE_T  nSize,\n    SIZE_T  *lpNumberOfBytesRead\n  );\n  ```\n\n  其中，`hProcess`参数是要读取内存的进程的句柄，`lpBaseAddress`参数是要读取的内存地址（**读取目标地址**），`lpBuffer`参数是用于存储读取数据的缓冲区（**保存读取结果**），`nSize`参数是要读取的字节数，`lpNumberOfBytesRead`参数是指向变量的指针（**没有用到则填NULL**），该变量将接收实际读取的字节数。\n\n- `WriteProcessMemory`函数是Windows API的一部分，它允许一个进程向另一个进程的内存区域写入数据。该函数的语法如下：\n\n  ```C++\n  BOOL WriteProcessMemory(\n    HANDLE  hProcess,\n    LPVOID  lpBaseAddress,\n    LPCVOID lpBuffer,\n    SIZE_T  nSize,\n    SIZE_T  *lpNumberOfBytesWritten\n  );\n  ```\n\n  其中，`hProcess`参数是要读取内存的进程的句柄，`lpBaseAddress`参数是要读取的内存地址（**读取目标地址**），`lpBuffer`参数是用于存储读取数据的缓冲区（**保存读取结果**），`nSize`参数是要读取的字节数，`lpNumberOfBytesWritten`参数是指向变量的指针（**没有用到则填NULL**），该变量将接收实际读取的字节数。\n\n- 获得指定进程PID的方法：\n\n  ```c++\n  DWORD MainWindow::getProcessId(const QString& processName)//获取进程PID\n  {\n      PROCESSENTRY32 entry;\n      entry.dwSize = sizeof(PROCESSENTRY32);\n      HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n      if (Process32First(snapshot, &entry))\n      {\n          do\n          {\n              if (QString::fromWCharArray(entry.szExeFile) == processName)\n              {\n                  CloseHandle(snapshot);\n                  return entry.th32ProcessID;\n              }\n          } while (Process32Next(snapshot, &entry));\n      }\n      CloseHandle(snapshot);\n      return 0;\n  }\n  ```\n  用法：DWORD pid=getProcessId(processname);\n\n- 获取进程的总基地址的方法：\n\n  ``` c++\n  PVOID MainWindow::GetProcessBase(DWORD dwProcessId)\n  {\n      PVOID pProcessImageBase = NULL;\n      //打开进程, 获取进程句柄\n      HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);\n      if (NULL == hProcess)\n      {\n          return pProcessImageBase;\n      }\n      // 遍历进程模块,\n      HMODULE hModule[100] = { 0 };\n      DWORD dwRet = 0;\n      BOOL bRet;\n      bRet = EnumProcessModulesEx(hProcess, (HMODULE*)(hModule), sizeof(hModule), &dwRet, NULL);\n      if (FALSE == bRet)\n      {\n          CloseHandle(hProcess);\n          return pProcessImageBase;\n      }\n      // 获取第一个模块加载基址\n      pProcessImageBase = hModule[0];\n      // 关闭句柄\n      CloseHandle(hProcess);\n      return pProcessImageBase;\n  }\n  ```\n\n  用法：long long baseAddress = (long long)GetProcessBase(Pid)//进程对应PID\n\n- 获取进程句柄：`HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);`\n\n\n\n\n\n------\n\n\n\n## *5. C++语法：*\n\n### 1. 虚继承\n\n```c++\n#include<iostream>\n//虚继承：对类的继承内存存储方式进行了改变\n//从原先的拷贝复制的方式变成了在子类内部空间增加了一个地址，\n// 该地址指向了一些偏移量，通过指针去访问地址+偏移量\n//从而锁定子类从父类那继承来的对象地址，解决了多重继承导致的父类对象重复引起子类访问时目标对象不明确的问题\nclass A\n{\npublic:\n    int flagA;\n    int test;\n    A()\n    {\n        test = 0x666666;\n        flagA = 0x111111;\n    }\n};\n\nclass B :virtual public A\n{\npublic:\n    int flagB;\n    B()\n    {\n        flagB = 0X222222;\n    }\n};\n\nclass C :virtual public A\n{\npublic:\n    int flagC;\n    C()\n    {\n        flagC = 0x3333333;\n    }\n};\n\nclass D :virtual public B,virtual public C\n{\npublic:\n    int flagD;\n    D()\n    {\n        flagD = 0x444444;\n    }\n};\nint main()\n{\n    B b;\n    C c;\n    D d;\n    d.flagA = 0x5555555;\n    //d.C::value = 1;\n    printf(\"%d\\n\", sizeof(d));\n    system(\"pause\");\n}\n```\n\n### 2. 友元函数\n\n在类内声明友元函数，关键词 `friend` ，从而使类外定义的非成员函数可以访问该类的私有成员\n\n```c++\n#include<iostream>\n//友元函数\nclass Student\n{\npublic:\n\tStudent(const char* name);\n\t~Student();\nprivate:\n\tchar name[20];\n\tfriend void printName(Student &stu);\n};\n\nStudent::Student(const char* name)\n{\n\tstrcpy_s(this->name, 20, name);\n}\n\nStudent::~Student()\n{\n}\n\nvoid printName(Student &stu)\n{\n\tstd::cout << stu.name << std::endl;\n}\n\nint main()\n{\n\tStudent stu(\"I am Kvancy\");\n\tprintName(stu);\n\tsystem(\"pause\");\n}\n```\n\n### 3. 重载运算符\n\n```c++\n#include<iostream>\n//重载运算符\nusing std::ostream;\nclass A\n{\npublic:\n\tA(const char* name);\n\t~A();\n\tvoid printName();\n\tchar* get_name();\n\tfriend A operator+(A& a1, A& a2);\n\tfriend ostream& operator<<(ostream& os, A& a1);\nprivate:\n\tchar* name;\n\n};\n\nA::A(const char* name)\n{\n\tif (this->name = (char*)malloc(strlen(name) + 1))\n\t{\n\t\tstrcpy_s(this->name, strlen(name) + 1, name);\n\t}\n\n}\n\nA::~A()\n{\n\tfree(this->name);\n}\n\nvoid A::printName()\n{\n\tstd::cout << this->name << std::endl;\n}\nchar* A::get_name()\n{\n\treturn this->name;\n}\nA operator+(A &a1, A &a2)\n{\n\tA a3(\"\");\n\tchar* buff = nullptr;\n\tint len = strlen(a1.name) + strlen(a2.name);\n\tif (buff = (char*)malloc(len + 1))\n\t{\n\t\tstrcpy_s(buff, len + 1, a1.name);\n\t\tstrcat_s(buff, len + 1, a2.name);\n\t}\n\ta3.name = buff;\n\treturn a3;\n}\nostream& operator<<(ostream& os, A &a1)\n{\n\tos << a1.name;\n\treturn os;\n}\n\nint main()\n{\n\tA a1(\"我是A1\");\n\tA a2(\"我是A2\");\n\tA a3 = a1 + a2;\n\tstd::cout << a3 << std::endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 4. 虚函数\n\n```c++\n#include<iostream>\n//子类重写函数之后，如果定义的父类对象想调用子类重写的函数\n//这个时候如果直接用父类对象的指针指向子类对象，然后调用子类重写的函数\n//这个时候成功调用\n//如果我们把该父类成员函数定义成虚函数，我们可以通过改变指针指向调用子类重写的函数\n//编译从静态联编->动态联编\n//内存中创造了虚函数表，我们可以通过父类的指针指向正确调用函数地址，从而实现调用\n//virtual 关键词父类定义了子类就无需定义\n//override 关键词可以避免因函数签名不一致而导致的错误，提前帮你报错显示提醒你\nclass Animal\n{\npublic:\n\tAnimal();\n\t~Animal();\n\tvirtual void make_sound () const\n\t{\n\t\tprintf(\"Animal:make\\n\");\n\t}\n};\n\nAnimal::Animal()\n{\n}\n\nAnimal::~Animal()\n{\n}\n\nclass Bird:public Animal\n{\npublic:\n\tBird();\n\t~Bird();\n\tvoid make_sound() const override\n\t//如果不加override,忘写了const关键字\n\t//编译器正常编译,父类没有成功调用子类函数，打印出\"Animal:make\"\n\t{\n\t\tprintf(\"Bird:make\\n\");\n\t}\n};\n\nBird::Bird()\n{\n}\nBird::~Bird()\n{\n}\nint main()\n{\n\tAnimal* animal = new Animal();\n\tBird bird;\n\tanimal = &bird;\n\tanimal->make_sound();\n\tsystem(\"pause\");\n\tdelete animal;\n\treturn 0;\n}\n```\n\n### 5. 模版\n\n```c++\n#include<iostream>\n//模版函数{函数模版，类模版}关键词typename或者class随意，在底层中无影响，编译器在编译的时候替换\n//第一种\ntemplate<typename T>\nT sum(T a, T b)\n{\n\treturn a + b;\n}\n\n//第二种,参数类型不相同\ntemplate<typename T,typename T2>\nvoid swap(T &a,T2 &b)\n{ \n\tT  c;\n\tc = b;\n\tb = a;\n\ta = c;\n}\t\t\t\n//第三种，类模版\ntemplate<typename T>\nclass A\n{\npublic:\n\tT getValue()\n\t{\n\t\treturn value;\n\t}\n\tvoid setValue(T va);\n\t\n\tA(T value);\n\t~A();\n\nprivate:\n\tT value;\n};\n//模板类是带参数的类，要求在接口实现中的类名称后面加入模板类参数，函数返回值亦如此\n//格式举例如下\ntemplate<typename T>\nA<T>::A(T value)\n{\n\tthis->value = value;\n}\ntemplate<typename T>\nA<T>::~A()\n{\n}\ntemplate<typename T>\nvoid A<T>::setValue(T va)\n{\n\t\tvalue = va;\n}\nint main()\n{\n\tchar a = 1;\n\tchar b = 2;\n\tprintf(\"第一种:%d\\n\",sum(a, b));\n\tswap(a, b);\n\tprintf(\"第二种：a:%d,b:%d\\n\", a, b);\n\tA<int> c(1);\n\tc.setValue(2);\n\tprintf(\"第三种：%d\\n\", c.getValue());\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 6. 异常处理\n\n```c++\n#include<iostream>\n//C++异常处理机制\n//throw，try,catch\n//在汇编代码中没有try catch，throw函数，正常运行异常代码，然后再一个jmp指令到某一个地址（实际上catch函数）里执行相应功能\ndouble fun(double a, int b)\n{\n\tif (b == 0)\n\t{\n\t\tthrow 2;//这里throw什么类型，就是catch里面参数类型\n\t}\n\treturn a/b;\n}\nint main()\n{\n\ttry\n\t{\n\t\tfun(2, 0);\n\t}\n\t/*catch (int judge)\n\t{\n\t\tif(judge==1)\n\t\tprintf(\"异常\\n\");\n\t\tif(judge==2)\n\t\tprintf(\"异常2\\n\");\n\t}*/\n\tcatch (...)\n\t{\n\t\tprintf(\"我是万能的！\\n\");\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n\t\n}\n```\n\n> perror(char*) 显示报错信息,例如 `perror(\"wrong!:\")` 打印出 \"wrong!:+为什么报错\"\n\n------\n\n\n\n## *6. C++算法*\n\n### 1. 数组 or 容器的遍历算法 `auto,for_each,transform`\n\n```c++\n#include<iostream>\n#include<vector>\n#include <algorithm>\nusing namespace std;\nvector<int>ve;\nvoid visit(int out)\n{\n\tcout << out << \" \";\n}\n//仿函数\nclass print2\n{\npublic:\n\tvoid operator()(int out)\n\t{\n\t\tcout << out << \" \";\n\t}\n};\nclass trans\n{\npublic:\n\tint operator()(int out)\n\t{\n\t\treturn ++out;\n\t}\n};\nint main()\n{\n\t//遍历输出的几种方式\n\tve = { 0,1,2,3,4,5 };\n\tint in[6] = { 0,1,2,3,4,5 };\n\t//正常容器\n\tfor (auto it : in)cout << it << \" \";\n\tcout << endl;\n\tfor_each(in, in + 6, visit);\n\tcout << endl;\n\t//stl容器\n\tfor (auto it : ve){cout << it<<\" \";}\n\tcout << endl;\n\tfor_each(ve.begin(), ve.end(), visit);\n\tcout << endl;\n\tfor_each(ve.begin(), ve.end(), print2());//仿函数输出结果\n\t//transform搬运容器\n\tcout << endl;\n\tvector<int>ve2;\n\t//提前分配内衬\n\tve2.resize(ve.size());\n\ttransform(ve.begin(), ve.end(), ve2.begin(), trans());//把ve内的值可运算性的搬运到ve2中\n\tfor (auto it : ve2)cout << it << \" \" ;\n\tcout << endl;\n}\n```\n\n### 2. 查找算法  `find,find_if,count,count_if,binary_serach`\n\n```c++\n#include<iostream>\n#include<vector>\n#include <algorithm>\nusing namespace std;\nvector<int>ve;\nclass Person\n{\npublic:\n\tstring name;\n\tint age;\n\tbool operator==(const Person& person1)\n\t{\n\t\treturn person1.name == this->name && person1.age == this->age;//注意利用this指针，不能传两个参数\n\t}\n};\n\nclass equal1\n{\npublic:\n\tbool operator()(const Person &person1)\n\t{\n\t\treturn person1.name == \"p2\" && person1.age == 5;\n\t}\n};\nclass equal2\n{\npublic:\n\tbool operator()(int out)\n\t{\n\t\treturn out > 5;\n\t}\n};\nclass count_cmp\n{\npublic:\n\tbool operator()(int out)\n\t{\n\t\treturn out > 5;\n\t}\n};\nint main()\n{\n\t//常用查找算法\n\t//find函数，在algorithm头文件中，find重心在相等\n\tve = { 2,3,4,5,6,7 };\n\tauto it = find(ve.begin(), ve.end(),5);\n\tcout << *it << endl;//返回找到的位置\n\tPerson person1 = { \"p1\",5 };\n\tPerson person2 = { \"p2\",5 };\n\tPerson person3 = { \"p1\",5 };\n\tvector<Person>ve2;\n\tve2.push_back(person1);\n\tve2.push_back(person2);\n\tve2.push_back(person3);\n\tauto it2 = find(ve2.begin(), ve2.end(),person2 );//要重载==运算符\n\tcout <<it2->name << \" \" << it2->age << endl;\n\t/**********************************************/\n\t//find_if语法，find_if重心在比较\n\tauto it3 = find_if(ve.begin(), ve.end(), equal2());//找到大于5的第一个数\n\tcout << *it3 << endl;\n\tauto it4 = find_if(ve2.begin(), ve2.end(), equal1());//自定义类需定义仿函数声明返回标准\n\tcout << it4->name << \" \" << it4->age << endl;\n\t/**********************************************/\n\t//binary_search语法,重心在存在与否,使用条件是查找容器已排序，该查找效率为指数级\n\tauto it5 = binary_search(ve.begin(), ve.end(), 7);//返回值其实是bool类型\n\tcout << it5 << endl;\n\tauto it6 = binary_search(ve.begin(), ve.end(), 8);\n\tcout << it6 << endl;\n\t/***********************************************/\n\t//count语法，用于统计数据，返回某个元素在容器内的个数\n\tint cnt = count(ve.begin(), ve.end(), 2);\n\tcout << cnt << endl;\n\t//统计类的数据时，要重载==运算符\n\t//count_if语法，返回容器内数据条件判断后的个数\n\tcnt = count_if(ve.begin(), ve.end(), count_cmp());\n\tcout << cnt << endl;\n\t//统计类的数据，要用bool型仿函数去定义比较条件\n}\n```\n\n### 3. 排序算法 `sort,rand_shuffle,merge,reverse`\n\n```c++\n\nint main()\n{\n\tsort(ve.begin(), ve.end());//默认升序排列\n\tsort(ve.begin(), ve.end(), greater<int>());//降序排列\n\tsort(ve.begin(), ve.end(), cmpl);//自定义降序排列\n\trandom_shuffle(ve.begin(), ve.end());\n\t//到此每次运行实际上结果一致，使用srand生成随机数\n\tsrand((unsigned int)time(NULL));\n\trandom_shuffle(ve.begin(), ve.end());\n\t//结果每次运行都不同了\n\t/**********************************/\n\t//merge函数，使两个有序的容器合并成一个容器，并且新的容器也是有序的\n\tmerge(ve.begin(), ve.end(), ve1.begin(), ve1.end(), ve2.begin());\n\t//ve2为新的容器\n\t/**************************************/\n\t//reverse函数，翻转函数\n\treverse(ve2.begin(), ve2.end());\n\t/**************************************/\n}\n```\n\n### 4. 拷贝替换算法 `copy replace replace_if `    \n\n```c++\ncopy(ve.begin(), ve.end(), ve2.begin());//把ve的值copy到ve2中，要提前开辟空间\nreplace(ve.begin(), ve.end(), 0, 5);//把ve中0替换成5\nreplace_if(ve.begin(), ve.end(), cmp, 5);//把ve中小于5的替换成5\nswap(ve, ve2);//把ve，ve2容器中数据继续互换\n```\n\n### 5. 常用集合算法 `set_intersection set_union set_difference   ` \n\n```c++\nauto it2 = set_intersection(ve.begin(), ve.end(), ve2.begin(), ve2.end(), ve3.begin());//求v1,v2的交集，保存到v3，返回值为交集结束的迭代器\nauto it3 = set_union(ve.begin(), ve.end(), ve2.begin(), ve2.end(), ve3.begin());//求v1,v2的并集，保存到v3，返回值为并集结束的迭代器\nauto it4 = set_difference(ve.begin(), ve.end(), ve2.begin(), ve2.end(), ve3.begin());//求v1,v2的差集---属于v1，不属于v2的集合\n```\n\n------\n\n\n\n## *7.  运算符优先顺序：*\n\n| 运算符由高到低：                                             |\n| ------------------------------------------------------------ |\n| 第一级：圆括号 ()、下标运算符 []、结构体成员运算符 . 和 ->   |\n| 第二级：逻辑非 !、按位取反 ~、自增自减 ++ 和 --、负号 -、类型转换 (类型)、指针运算符 * 和 &、长度运算符 sizeof |\n| 第三级：乘法运算符 *、/ 和 %                                 |\n| 第四级：加法运算符 + 和 -                                    |\n| 第五级：移位运算符 << 和 >>                                  |\n| 第六级：关系运算符 <、<=、> 和 >=                            |\n| 第七级：相等运算符 == 和 !=                                  |\n| 第八级：按位与 &                                             |\n| 第九级：按位异或 ^                                           |\n| 第十级：按位或                                               |\n| 第十二级：逻辑或                                             |\n| 第十四级：赋值运算符 =、+=、-=、*=、/=、%=、&=、^=、         |\n| 第十五级：逗号运算符 ,                                       |\n|                                                              |\n\n\n\n## 8. MFC\n\n通过空项目创建\n\n```c++\n//mfc.h\n#include<afxwin.h>\n//设置 链接器-系统-窗口\n//设置 在高级里 在共享 DLL 中使用 MFC\nclass Myapp:public CWinApp\n{\npublic:\n\tvirtual BOOL InitInstance();//mfc程序入口\n\nprivate:\n\n};\n\nclass MyFrame:public CFrameWnd\n{\npublic:\n\tMyFrame();\n\t//~MyFrame();\n\tafx_msg void OnLButtonDown(UINT, CPoint point);\nprivate:\n\n\tDECLARE_MESSAGE_MAP()\n};\n\n//mfc.cpp\n#include\"mfc.h\"\n\nMyapp app;//全局应用程序对象\n//MyFrame* m_pMainwnd = new MyFrame;\nBOOL Myapp::InitInstance()\n{\n\tMyFrame* frame = new MyFrame;\n\tframe->ShowWindow(SW_SHOWNORMAL);\n\tframe->UpdateWindow();\n\t//保存程序指针,否则窗口一闪而过,\n\tm_pMainWnd = frame;//m_pMainWnd线程类的一个成员\n\t\n\treturn 1;\n}\n\n\nBEGIN_MESSAGE_MAP(MyFrame, CFrameWnd)\n\tON_WM_LBUTTONDOWN()\nEND_MESSAGE_MAP()\n\nMyFrame::MyFrame()\n{\n\tCreate(NULL, TEXT(\"Crackk\"));\n}\n\nVOID MyFrame::OnLButtonDown(UINT, CPoint point)\n{\n\tTCHAR buf[1024];\n\twsprintf(buf, TEXT(\"X = %d,Y = %d\"), point.x, point.y);\n\tMessageBoxW(buf);\n}\n\n```\n\n通过MFC应用程序模版创建--基于对话框\n\n在app的子类里有首界面的创建\n\n```c++\nCMFC2Dlg dlg;\nm_pMainWnd = &dlg;//第一个显示的界面\n//First dlg;\n//m_pMainWnd = &dlg;//第一个显示的界面\nINT_PTR nResponse = dlg.DoModal();\nif (nResponse == IDOK)\n```\n\n如果要修改首界面可以添加界面类(先创建资源,再创建类)\n\n但是新界面没有最小化和最大化和拖拽功能\n\n\n\n如果想要在界面类里访问其他控件,例如staticText类,需要在ui界面添加变量,然后就可以通过名称来访问该控件\n\n```c++\nvoid CMFC2Dlg::OnBnClickedClick()\n{\n\t// TODO: 在此添加控件通知处理程序代码\n\tstatic int count = 0;\n\tcount++;\n\tif (count >= 5)\n\t{    //hint为staticText的名称\n\t\thint.SetWindowTextW(TEXT(\"flag{1111}\"));\n\t}\n}\n```\n\n这里代码块实际做的操作有两处\n\n第一处:在父界面类的头文件中包含该控件\n\n```c++\nCStatic hint;\n```\n\n第二处:在父界面类的源文件中DoDataExchange函数里添加控件关联\n\n```c++\nDDX_Control(pDX, IDC_HINT, hint);//p_DX是传来的参数,后者是相关联控件id和名称\n```\n\n\n\n给按钮添加事件处理程序时,代码层实际修改了三处代码\n\n所属界面类的头文件中包含该事件处理函数\n\n```c++\nafx_msg void OnBnClickedClick();\nafx_msg void OnBnClickedDClick();\n```\n\n在源文件消息队列声明(BEGIN_MESSAGE_MAP)后添加消息声明\n\n```c++\nON_BN_CLICKED(IDC_Click, &CMFC2Dlg::OnBnClickedClick)//id和处理函数指针\nON_BN_CLICKED(IDC_DClick, &CMFC2Dlg::OnBnClickedDClick)\n```\n\n在源文件中添加处理函数的实现\n\n```c++\nvoid CMFC2Dlg::OnBnClickedClick()\n{\n\t// TODO: 在此添加控件通知处理程序代码\n\tstatic int count = 0;\n\tcount++;\n\tif (count >= 5)\n\t{\n\t\thint.SetWindowTextW(TEXT(\"flag{1111}\"));\n\t}\n}\n\n\nvoid CMFC2Dlg::OnBnClickedDClick()\n{\n\t// TODO: 在此添加控件通知处理程序代码\n\thint.SetWindowTextW(TEXT(\"you are so smart!!\"));\n}\n\n```\n\n\n\n如何格式化SetwindowTextW的参数TEXT,参数为CSting形式,等于LPCTSTR(),TEXT(),_T(),可以用Format来格式化text\n\n```c++\nCString text;\ntext.Format(_T(\"gogogogo!%d\"), count);\nhint.SetWindowTextW(text);\n```\n\n## 9. QML\n\n```js\nimport QtQuick 2.15\nimport QtQuick.Window 2.15\nimport QtQuick.Controls\nWindow {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr(\"Hello World\")\n    property int myvalue: 0\n\n    minimumHeight: 400\n    maximumHeight: 540\n    minimumWidth: 540\n    maximumWidth: 720\n\n    onWidthChanged: {\n        console.log(\"width:\",width);\n    }\n    onMyvalueChanged:\n    {\n        console.log(\"myvalue:\",myvalue);\n    }\n\n    Button{\n        id: btn1\n        objectName: \"btn1\"\n        x: 100\n        width: 50\n        height: 50\n        background: Rectangle{\n            border.color: btn1.focus?\"blue\":\"black\"//按钮按下获得焦点\n        }\n        Keys.onLeftPressed: {//方向键左按下\n            btn1.focus = false\n        }\n    }\n    Button{\n        id: btn2\n        objectName: \"btn2\"\n        x: 100\n        y: 100\n        width: 50\n        height: 50\n        background: Rectangle{\n            border.color: btn2.focus?\"blue\":\"black\"\n        }\n        Keys.onLeftPressed: {//方向键左按下\n            btn2.focus = true\n        }\n    }\n    onActiveFocusItemChanged: { //焦点发生改变时\n        console.log(\"active focus item changed:\",activeFocusItem)//objectName\n    }\n\n\n    Rectangle{\n        x: 100\n        y: 100\n        z: 2//可以在2d中进行覆盖或者隐藏\n        width: 100\n        height: 100\n        color: \"blue\"\n        focus: true\n\n        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                console.log(\"on clicked\")\n            }\n        }\n        Keys.onReturnPressed: {//控件获取键盘信号前需要获取焦点\n            console.log(\"on return pressed\")\n        }\n    }\n\n    \n       Rectangle {\n           id: rect1\n           width: 100\n           height: 50\n           color: \"black\"\n//           anchors.centerIn: parent//水平垂直居中\n           anchors.horizontalCenter: parent.horizontalCenter//水平居中\n           anchors.verticalCenter: parent.verticalCenter//垂直居中\n           rotation: 60 //旋转角度\n           scale: 2 //放缩,放大两倍\n           antialiasing: false //抗锯齿\n           border.width: 2 //边框\n           border.color: \"red\"\n           radius: 30 //弧度\n           gradient: Gradient {//渐变色 覆盖原有颜色 边框颜色不覆盖\n               GradientStop { position: 0.0; color: \"lights teelblue\" }\n               GradientStop { position: 1.0; color: \"blue\"}\n           }\n       }\n\n       Rectangle {\n           id: rect2\n           width: 100\n           height: 50\n           anchors.left: rect1.right//类似弹簧,rect1左边与rect1右边重合\n           anchors.leftMargin: 20//与rect1左侧相距20\n           anchors.top: rect1.top//y轴距离相同\n           color: \"blue\"\n       }\n    Rectangle {\n        id: root\n        width: 100; height: 100\n        state: \"red_color\" //控制状态\n        states: [\n            State {\n                name: \"red_color\"\n                PropertyChanges { root.color: \"red\" }\n            },\n            State {\n                name: \"blue_color\"\n                PropertyChanges { root.color: \"blue\" }\n            }\n        ]\n        MouseArea {\n            anchors.fill: parent\n            onPressed: {\n                root.state = \"blue_color\"\n            }\n            onReleased: {\n                root.state = \"red_color\"\n\n            }\n        }\n        transitions: [//状态改变时进行动画,而不是瞬间完成状态改变\n            Transition {\n                from: \"red_color\"//状态\n                to: \"blue_color\"\n\n                ColorAnimation {\n                    target: root\n                    duration: 1000\n                }\n            },\n            Transition {\n                from: \"blue_color\"\n                to: \"red_color\"\n\n                ColorAnimation {\n                    target: root\n                    duration: 1000\n                }\n            }\n        ]\n    }\n       Rectangle {\n           id: flashingblob\n           width: 100\n           height: 100\n           color: \"blue\"\n           opacity: 1.0\n\n           SequentialAnimation on color {//多段式动画\n\n               ColorAnimation {\n//                   from: \"white\"\n                   to: \"red\"\n                   duration: 200\n               }\n\n               ColorAnimation {\n//                   from: \"white\"\n                   to: \"blue\"\n                   duration: 200\n               }\n           }\n\n           MouseArea {\n               anchors.fill: parent\n               onClicked: {\n                   animateColor.start()\n                   animateOpacity.start()\n               }\n           }\n\n           PropertyAnimation { //属性为字符串的动画\n               id: animateColor;\n               target: flashingblob\n               properties: \"color\"\n               to: \"green\"\n               duration: 1000\n           }\n\n           NumberAnimation {//属性为数字的动画\n               id: animateOpacity\n               target: flashingblob\n               property: \"opacity\"\n               duration: 1000\n               from: 1.0\n               to: 0.5\n           }\n           PropertyAnimation on x {//立即触发的动画\n           to: 100\n           duration: 1000\n           }\n\n       }\n\n\n         Component { //不会立即出现的组件,需要load\n             id: com\n             Rectangle {\n                 width: 100\n                 height: 100\n                 color: \"blue\"\n                 Component.onCompleted: {//构造函数\n                     console.log(\"Completed\")\n                 }\n                 Component.onDestruction: {//析构函数\n                     console.log(\"Destruction\")\n                 }\n             }\n         }\n\n         Component { //不会立即出现的组件,需要load\n             id: com2\n             Image {//img\n                 id: img\n                 source: \"/login2.jpg\"\n             }\n         }\n\n         Component { //不会立即出现的组件,需要load\n             id: com3\n             AnimatedImage {//gif\n                 id: gif\n                 source: \"/GIF-1.gif\"\n                 speed: 10\n             }\n         }\n\n         Loader {//加载组件或文件\n             id: load\n             sourceComponent: com3\n\n             onStateChanged: {\n                 console.log(\"status:\",status)\n             }\n         }\n         Button {\n             id: button\n             width: 50\n             height: 50\n             x: 200\n             onClicked: {\n                 load.item.paused = !load.item.paused//播放键\n             }\n         }\n\n\n        MouseArea {\n            id: mousearea\n            width: 100\n            height: 100\n            enabled: true //是否使能,默认为true\n            acceptedButtons: Qt.LeftButton | Qt.RightButton //默认只接受左键\n            cursorShape: Qt.CrossCursor //鼠标样式\n            hoverEnabled: true //默认关闭,打开可以接受悬浮信号\n\n            Rectangle {\n                anchors.fill: parent\n                color: \"blue\"\n            }\n            onClicked: {\n                console.log(\"clicked\")\n            }\n            onHoveredChanged: {//是否悬浮\n                console.log(\"Onhoverchanged\")\n            }\n\n            onPressed: {\n                var ret = pressedButtons & Qt.LeftButton\n                var ret2 = pressedButtons & Qt.RightButton\n                if(ret == Qt.LeftButton)//控制左右键不同回应\n                    console.log(\"LEFT\")\n                else\n                    console.log(\"RIGHT\")\n                console.log(\"pressed\")\n            }\n            onReleased: {\n                console.log(\"released\")\n            }\n            onPressAndHold://长摁 , 在 Press信号之后\n              {\n                console.log(\"hold\")\n              }\n\n        }\n\n\n        Rectangle {\n            id: rect\n            width: 50\n            height: 50\n            color: \"red\"\n            opacity: (600.0 - rect.x) / 600\n            MouseArea {\n                anchors.fill: parent\n                drag.target: rect //加载拖动效果\n                drag.axis: Drag.XAxis /*| Drag.YAxis*/\n                drag.minimumX: 0\n                drag.maximumX: container.width - rect.width\n//                drag.filterChildren: true//子控件是否能拖动\n            }\n        }\n\n\n\n\n}\n\n```\n\n## Libxl使用\n\n#### 引入库\n\n```cpp\n#include \"libxl-3.1/libxl-3.1.0/include_cpp/libxl.h\"\n#pragma comment(lib,\"libxl-3.1/libxl-3.1.0/lib/libxl.lib\")\nusing namespace libxl;\n```\n\n#### 读取文件\n\n```c++\nBook* book = xlCreateBook();\nbook->load(\"xxx.xls\");\nSheet* sheet = book->getSheet(0);\n```\n\n#### 读取文件大小\n   ```cpp\n   int rowfirst = sheet->firstRow();\n   int rowlast  = sheet->lastRow();\n   int colfirst = sheet->firstCol();\n   int collast  = sheet->lastCol();\n   ```\n\n#### 读取文件内容（表格左上角为（0,0））\n   ```cpp\n   double date1 = sheet->readNum(0, 0);\n   const char* date2 = sheet->readStr(0, 1);\n   ```\n\n#### 创建新sheet\n   ```cpp\n   Book* book1 = xlCreateBook();\n   Sheet* sheet1 = book1->addSheet(\"sheet1\");\n   ```\n\n#### 设置行宽列高\n   ```cpp\n   sheetM->setCol(0, 0, 20);\n   sheetM->setRow(0 , 20);\n   ```\n\n#### 合并单元格\n   ```cpp\n   sheet->setMerge(0,0,1,2); // 合并第0行的1~2列\n   ```\n\n#### 设置字体\n   ```cpp\n   Font *titleFont = bookM->addFont();\n   titleFont->setName(\"宋体\");\n   titleFont->setSize(16);\n   titleFont->setBold(true);\n   Format* titleFormat = bookM->addFormat();\n   titleFormat->setAlignH(ALIGNH_CENTER);\n   titleFormat->setFont(titleFont);\n   titleFormat->setWrap(true);\n   titleFormat->setAlignV(ALIGNV_DISTRIBUTED);\n   ```\n\n#### 向文件写入内容\n   ```cpp\n   sheet->writeStr(1,0,\"xxx\");\n   sheet->writeNum(1,1, 123);\n   ```\n\n#### 保存结束\n   ```cpp\n   book->save(\"文件保存路径\");\n   book->release();\n   ```\n\n\n\n## JSONCPP\n\n这篇博客概括的很全\n\nhttps://www.coonote.com/cplusplus-note/jsoncpp.html\n","slug":"c++","published":1,"updated":"2024-09-27T13:50:31.288Z","layout":"post","photos":[],"link":"","_id":"cm1roa13m000rugiec4cd7jj3","content":"<p>记载一些学习C&#x2F;C++语法，库函数，开发框架等<span id=\"more\"></span></p>\n<h2 id=\"1-好用的方法：\"><a href=\"#1-好用的方法：\" class=\"headerlink\" title=\"1. 好用的方法：\"></a><em>1. 好用的方法：</em></h2><h3 id=\"1-PixmapToRound函数\"><a href=\"#1-PixmapToRound函数\" class=\"headerlink\" title=\"1. PixmapToRound函数\"></a>1. PixmapToRound函数</h3><p>将QPixmap的图像转换为圆形，美化界面用，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ROUNDIMG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ROUNDIMG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPixmap&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPainter&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPainterPath&gt;</span><span class=\"comment\">//此处radius是半径</span></span></span><br><span class=\"line\"><span class=\"function\">QPixmap <span class=\"title\">PixmapToRound</span><span class=\"params\">(<span class=\"type\">const</span> QPixmap &amp;src, <span class=\"type\">int</span> radius)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (src.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">QPixmap</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按比例缩放</span></span><br><span class=\"line\">    QPixmap pixmapa;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(src.<span class=\"built_in\">width</span>() != radius || src.<span class=\"built_in\">height</span>() != radius)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pixmapa = src.<span class=\"built_in\">scaled</span>(radius, radius, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pixmapa = src;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">QPixmap <span class=\"title\">pixmap</span><span class=\"params\">(radius,radius)</span></span>;</span><br><span class=\"line\">    pixmap.<span class=\"built_in\">fill</span>(Qt::transparent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(&amp;pixmap)</span></span>;</span><br><span class=\"line\">    painter.<span class=\"built_in\">setRenderHints</span>(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);</span><br><span class=\"line\"></span><br><span class=\"line\">    QPainterPath path;</span><br><span class=\"line\">    path.<span class=\"built_in\">addEllipse</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, radius, radius);</span><br><span class=\"line\">    painter.<span class=\"built_in\">setClipPath</span>(path);</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawPixmap</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, radius, radius, pixmapa);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pixmap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// ROUNDIMG_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例：</span></span><br><span class=\"line\">QPixmap img;<span class=\"comment\">//上端圆形图片，用自己头像嘿嘿</span></span><br><span class=\"line\">    img.<span class=\"built_in\">load</span>(<span class=\"string\">&quot;://res/login.jpg&quot;</span>);<span class=\"comment\">//图片加载</span></span><br><span class=\"line\">    QPixmap pixMap= img.<span class=\"built_in\">scaled</span>(<span class=\"number\">100</span>,<span class=\"number\">100</span>, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);</span><br><span class=\"line\">    <span class=\"comment\">//50为圆形的半径</span></span><br><span class=\"line\">    pixMap =  <span class=\"built_in\">PixmapToRound</span>(pixMap, <span class=\"number\">50</span>);</span><br><span class=\"line\">    ui-&gt;label_img-&gt;<span class=\"built_in\">setPixmap</span>(pixMap);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用正则表达式规定输入规范\"><a href=\"#2-使用正则表达式规定输入规范\" class=\"headerlink\" title=\"2. 使用正则表达式规定输入规范\"></a>2. 使用正则表达式规定输入规范</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;lineEdit_1-&gt;<span class=\"built_in\">setValidator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">QRegularExpressionValidator</span>(<span class=\"built_in\">QRegularExpression</span>(<span class=\"string\">&quot;[0-9]+$&quot;</span>)));<span class=\"comment\">//只能输入数字，个数不限</span></span><br><span class=\"line\">ui-&gt;lineEdit_1-&gt;<span class=\"built_in\">setValidator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">QRegularExpressionValidator</span>(<span class=\"built_in\">QRegularExpression</span>(<span class=\"string\">&quot;[A-Fa-f0-9]&#123;1,12&#125;&quot;</span>)));<span class=\"comment\">//能输入数字和a-f大小写，控制个数不多于12个</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用花指令增加逆向破解难度：\"><a href=\"#3-使用花指令增加逆向破解难度：\" class=\"headerlink\" title=\"3. 使用花指令增加逆向破解难度：\"></a>3. 使用花指令增加逆向破解难度：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(<span class=\"string\">&quot;test $0,%eax\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;jz label\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;add $0xff,%esp\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;.byte 0xe8,0x80,0x80,0x80\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;label:\\n&quot;</span></span><br><span class=\"line\">        );<span class=\"comment\">//破坏了堆栈平衡，以及插入了一些junkcode</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-与数据库互通的一些操作：\"><a href=\"#4-与数据库互通的一些操作：\" class=\"headerlink\" title=\"4. 与数据库互通的一些操作：\"></a>4. 与数据库互通的一些操作：</h3><p>CMakeList.txt文件里写入：<code>find_package(Qt6 COMPONENTS Sql REQUIRED)</code>  <code>target_link_libraries(TeamProject PRIVATE Qt6::Sql)</code> </p>\n<p>连接数据库，代码段里写入：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MainWindow::linkDatabase</span><span class=\"params\">()</span><span class=\"comment\">//连接数据库</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    database=QSqlDatabase::<span class=\"built_in\">addDatabase</span>(<span class=\"string\">&quot;QMYSQL&quot;</span>);<span class=\"comment\">//QMYSQL对应数据库类型，此处为mysql</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setHostName</span>(<span class=\"string\">&quot;192.168.76.1&quot;</span>);<span class=\"comment\">//对应ip地址</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setPort</span>(<span class=\"number\">3306</span>);<span class=\"comment\">//对应开放的端口号</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setUserName</span>(<span class=\"string\">&quot;root&quot;</span>);<span class=\"comment\">//对应用户名，此处为root用户</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setPassword</span>(<span class=\"string\">&quot;123456&quot;</span>);<span class=\"comment\">//对应密码</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setDatabaseName</span>(<span class=\"string\">&quot;test&quot;</span>);<span class=\"comment\">//使用的数据库名称</span></span><br><span class=\"line\">    database.<span class=\"built_in\">open</span>();<span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!database.<span class=\"built_in\">isOpen</span>())<span class=\"comment\">//判断是否连接成功</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;数据库没有连接成功呐！&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//exit(0);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-给Qt生成的可执行文件设置图标，以及窗口左上角图标：\"><a href=\"#5-给Qt生成的可执行文件设置图标，以及窗口左上角图标：\" class=\"headerlink\" title=\"5. 给Qt生成的可执行文件设置图标，以及窗口左上角图标：\"></a>5. 给Qt生成的可执行文件设置图标，以及窗口左上角图标：</h3><p>给可执行文件设置图标，先在cpp同级目录下创建一个ico.rc文件（后缀一定要是.rc），然后再CMake.txt文件下写入文件编译区，然后再Source Files下找到该文件并写入 <code>IDI_ICON_LOGO ICON DISCARDABLE &quot;res/logo.ico&quot;</code>，双引号里面是图标的相对路径，.ico文件可在 <code>D:\\Pixillion</code>软件中进行图片格式转换。</p>\n<p>窗口左上角图标设置：<code>setWindowIcon(QIcon(&quot;:/res/R-C2.jpg&quot;));</code>。</p>\n<p>在Qt中调用其他系统命令或执行文件时，可用QProcess函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QProcess <span class=\"title\">process</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">QString str = QApplication::<span class=\"built_in\">applicationDirPath</span>();</span><br><span class=\"line\">str += <span class=\"string\">&quot;/firmware_upgrade_v1.0.0.exe&quot;</span>;<span class=\"comment\">//子程序exe对应主程序exe的相对路径</span></span><br><span class=\"line\">process.<span class=\"built_in\">startDetached</span>(str);<span class=\"comment\">//startDetached使执行文件与主程序分离，主程序关闭并不影响子程序的运行，start与之相反。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-数据库查询和写入操作\"><a href=\"#6-数据库查询和写入操作\" class=\"headerlink\" title=\"6. 数据库查询和写入操作\"></a>6. 数据库查询和写入操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QSqlQuery query;</span><br><span class=\"line\">QString s = <span class=\"built_in\">QString</span>(<span class=\"string\">&quot;select * from users where id=&#x27;%1&#x27;&quot;</span>).<span class=\"built_in\">arg</span>(id);<span class=\"comment\">//查询语句</span></span><br><span class=\"line\">QString s2 = <span class=\"built_in\">QString</span>(<span class=\"string\">&quot;INSERT INTO users (id,passwordMD5,`password`,name)VALUES (&#x27;%1&#x27;,&#x27;%2&#x27;,&#x27;%3&#x27;,&#x27;%4&#x27;)&quot;</span>).<span class=\"built_in\">arg</span>(user).<span class=\"built_in\">arg</span>(pwdMD5).<span class=\"built_in\">arg</span>(pwd).<span class=\"built_in\">arg</span>(name);<span class=\"comment\">//插入语句，此处按表中字段顺序插入对应值</span></span><br><span class=\"line\">query.<span class=\"built_in\">exec</span>(s);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!query.<span class=\"built_in\">first</span>())<span class=\"comment\">//如果查询不到</span></span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span><span class=\"comment\">//查询到了</span></span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//用query.value()函数等来访问查到的值</span></span><br><span class=\"line\"><span class=\"comment\">//注意一定要在query.first操作后访问query.value()的值，该操作的目的是让查询指针移动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-QThreadPool线程池的使用\"><a href=\"#7-QThreadPool线程池的使用\" class=\"headerlink\" title=\"7. QThreadPool线程池的使用\"></a>7. QThreadPool线程池的使用</h3><p>先创建一个继承QRunable和QObject的线程类，在类中定义一个public的void run()函数，然后在主线程创建类对象，用QThreadPool::globalInstance()调用类对象实现多线程,示例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread1 *thread = <span class=\"keyword\">new</span> thread1;</span><br><span class=\"line\">QThreadPool::<span class=\"built_in\">globalInstance</span>()-&gt;<span class=\"built_in\">start</span>(thread);</span><br><span class=\"line\"><span class=\"comment\">//.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QRunnable&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">thread1</span> : <span class=\"keyword\">public</span> QObject,<span class=\"keyword\">public</span> QRunnable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">thread1</span><span class=\"params\">(QObject *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">signals:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;m_thread.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gamehall.h&quot;</span></span></span><br><span class=\"line\">thread1::<span class=\"built_in\">thread1</span>(QObject *parent)</span><br><span class=\"line\">    : QObject&#123;parent&#125;,<span class=\"built_in\">QRunnable</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread1::run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    GameHall* gamehall = <span class=\"keyword\">new</span> <span class=\"built_in\">GameHall</span>();</span><br><span class=\"line\">    gamehall-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\"><span class=\"comment\">//    connect(gamehall,&amp;GameHall::m_show,this,&amp;MainWindow::Show);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"2-Qt中一些好用的部件属性对应的qss代码：\"><a href=\"#2-Qt中一些好用的部件属性对应的qss代码：\" class=\"headerlink\" title=\"2. Qt中一些好用的部件属性对应的qss代码：\"></a><em>2. Qt中一些好用的部件属性对应的qss代码：</em></h2><h3 id=\"1-LineEdit部件：\"><a href=\"#1-LineEdit部件：\" class=\"headerlink\" title=\"1. LineEdit部件：\"></a>1. LineEdit部件：</h3><p>设置形成的是一个浅绿色圆角编辑框。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;lineEdit_1-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;font: 25 14pt &#x27;微软雅黑 Light&#x27;;&quot;</span> <span class=\"comment\">//字体</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;color: rgb(31,31,31);&quot;</span>\t\t<span class=\"comment\">//字体颜色</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;padding-left:20px;&quot;</span>       <span class=\"comment\">//内边距-字体缩进</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;background-color: rgb(255, 255, 255);&quot;</span> <span class=\"comment\">//背景颜色</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;border:2px solid rgb(20,196,188);border-radius:15px;&quot;</span>);<span class=\"comment\">//边框粗细-颜色-圆角</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-PushButton部件：\"><a href=\"#2-PushButton部件：\" class=\"headerlink\" title=\"2. PushButton部件：\"></a>2. PushButton部件：</h3><p>设置形成的是一个浅绿色按钮，鼠标悬浮或摁下有不同颜色</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;signup-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;QPushButton&#123;font: 25 14pt &#x27;微软雅黑 Light&#x27;;color: rgb(255,255,255);background-color: rgb(20,196,188);&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;border: none;border-radius:5px;&#125;&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;QPushButton:hover&#123;background-color: rgb(22,218,208);&#125;&quot;</span><span class=\"comment\">//hover</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;QPushButton:pressed&#123;background-color: rgb(17,171,164);&#125;&quot;</span>);<span class=\"comment\">//pressed</span></span><br></pre></td></tr></table></figure>\n\n<p>设置的是一个蓝白渐变色的按钮，鼠标悬浮有不同的颜色</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;signUp-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;QPushButton&#123;background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;stop:0.0112994 rgba(64, 145, 252, 255),stop:1 rgba(255, 255, 255, 255));&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;color: rgb(255, 255, 255);&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;border:0px groove gray;border-radius:7px;padding:2px 4px;&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;font: 10pt &#x27;Candara&#x27;;&#125;&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;QPushButton:hover&#123;background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;stop:0.0112994 rgba(66, 175, 255, 255),stop:1 rgba(255, 255, 255, 255))&#125;;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>设置是一个蔚蓝色的按钮，按动悬浮有不同颜色</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;pushButton-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;QPushButton&#123;background:qlineargradient(spread:pad,  x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;border-radius:8px;&quot;</span></span><br><span class=\"line\">       <span class=\"string\">&quot;border:2px solid rgb(0, 170, 255);&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;color:rgb(17,17,17);&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;QPushButton:hover&#123;background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.443091, y2:0.898, stop:0 rgba(0, 255, 255, 255), stop:1 rgba(255, 255, 255, 255))&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;QPushButton:hover:pressed&#123;background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"3-遇到的一些问题：\"><a href=\"#3-遇到的一些问题：\" class=\"headerlink\" title=\"3. 遇到的一些问题：\"></a><em>3. 遇到的一些问题：</em></h2><ul>\n<li><p>2023&#x2F;5&#x2F;23-&gt;在Qt的两个窗口头文件中都调用了相同的一个头文件，然后报了multiple definition of ~的错，分析是因为两个函数重复定义了。</p>\n<p>解决办法是：新建了一个.cpp文件，然后将.h文件中全部内容转到cpp文件中，然后.h文件只包含函数的定义.</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;在注册成功窗口想要直接将注册窗口和本窗口同时关闭并且转到登录窗口时遇到了问题——如何在子窗口中通过按钮将父窗口也关闭。</p>\n<p>解决办法是：在父窗口调用子窗口前增加一个信号槽连接，信号由子窗口.h文件中定义并在按按钮之后发出，槽函数在父窗口中声明并实现，从而实现信号通过子窗口发出并在父窗口中做出关闭操作。</p>\n<p>核心代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        SignSucess *signsucess = <span class=\"keyword\">new</span> <span class=\"built_in\">SignSucess</span>();</span><br><span class=\"line\">        <span class=\"built_in\">connect</span>(signsucess,&amp;SignSucess::Close,<span class=\"keyword\">this</span>,&amp;LoginWindow::Close);</span><br><span class=\"line\">        signsucess-&gt;<span class=\"built_in\">exec</span>();</span><br><span class=\"line\"><span class=\"comment\">//Close()函数分别为子窗口和父窗口中自定义的信号和槽函数</span></span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;在写记住密码功能时，用到QSetting库，然后通过该库与本地ini文件交互，但是把ini文件放在源代码目录下则无法保存修改，查了网上的有关说法，利用sync()函数或者重构closeEvent函数(该函数在右上角关闭窗口时自动起作用)，或者在该窗口的析构函数中servalue，最终都没很好的解决我的问题。</p>\n<p>解决办法是：将init.ini文件放在exe程序目录下(撒花！)</p>\n<p>绝对路径可以这样在父类头文件窗口直接定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString inipath= QCoreApplication::<span class=\"built_in\">applicationDirPath</span>() + <span class=\"string\">&quot;/init.ini&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;Qt6编译生成的exe程序无法打开，显示缺少一些dll文件。</p>\n<p>解决办法是：打开编译器对应的命令行，这里对应的是MinGW64（已加入环境变量），先新建一个文件夹，将exe程序单独放进去，然后”cd [exe程序所在文件夹的路径]”，输入<code>windeployqt exe文件名</code>，例如<code>windeployqt TeamProject.exe</code>。</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;Qt6打包生成exe文件后，打开exe程序不能连接数据库的问题。</p>\n<p>解决办法是：在编译器(这里对应的是MinGW64)对应的bin目录下找到libmysql.dll文件，复制到exe程序的同级目录下即可。</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;25-&gt;Qt6打包生成的exe文件在远端虚拟机上无法连接数据库成功的问题。</p>\n<p>解决办法是：在Mysql文件夹的MysqlServer文件bin中所有文件转移到exe文件同级目录下</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;25-&gt;Qt6打包生成的exe文件在远端虚拟机上连接上了数据库，但是远端正常机上连不上</p>\n<p>解决办法是：把代码中 <code>database.setHostName(&quot;192.168.123.120&quot;);</code>ip地址设置为无线局域网适配器 WLAN的IPv4地址（本机ip地址）。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;10-&gt;QMovie播放gif时，想要使得同一个label通过按钮切换gif时出现gif暂停不切换的情况</p>\n<p>解决办法是：在gif切换时movie-&gt;start()，前加入movie-&gt;stop()。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;11-&gt;在提升控件类时，运行出现无法找到头文件的情况</p>\n<p>解决办法是：在cmake.txt文件中加入 <code>INCLUDE_DIRECTORIES($&#123;PROJECT_SOURCE_DIR&#125;)</code>运行报错点击“忽略错误”。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;11-&gt;QToolButton重写鼠标进入事件 <code>void HallBtn::enterEvent(QEnterEvent *event)</code></p>\n</li>\n<li><p>2023&#x2F;6&#x2F;14-&gt;连接阿里云数据库后，查询表时navicate报“lost connection …during query”错误</p>\n<p>解决办法是：换校园网。。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;24-&gt;实现邮箱辅助账号注册时，引用QTcpSocket时报错 <code>QTcpSocket file not found</code> </p>\n<p>解决办法是：CMakeList.txt中添加 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find_package</span>(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Network)</span><br><span class=\"line\"><span class=\"built_in\">find_package</span>(Qt$&#123;QT_VERSION_MAJOR&#125; REQUIRED Network COMPONENTS Core)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>(TeamProject PRIVATE Qt$&#123;QT_VERSION_MAJOR&#125;::Core)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>(TeamProject PRIVATE Qt6::Network)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"4-Windows编程：\"><a href=\"#4-Windows编程：\" class=\"headerlink\" title=\"4. Windows编程：\"></a><em>4. Windows编程：</em></h2><ul>\n<li><p><code>LPCVOID</code>是一个Windows API数据类型，它是一个指向常量（只读）void的指针。在Windows API中，<code>LPCVOID</code>通常用于指向要<strong>读取</strong>的数据的缓冲区</p>\n</li>\n<li><p><code>LPVOID</code>是一个Windows API数据类型，它是一个指向void的指针。在Windows API中，<code>LPVOID</code>通常用于指向要<strong>读取或写入</strong>的数据的缓冲区</p>\n</li>\n<li><p><code>ReadProcessMemory</code>函数是Windows API的一部分，它允许一个进程读取另一个进程的内存区域。该函数的语法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">ReadProcessMemory</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HANDLE  hProcess,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCVOID lpBaseAddress,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPVOID  lpBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  nSize,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  *lpNumberOfBytesRead</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>hProcess</code>参数是要读取内存的进程的句柄，<code>lpBaseAddress</code>参数是要读取的内存地址（<strong>读取目标地址</strong>），<code>lpBuffer</code>参数是用于存储读取数据的缓冲区（<strong>保存读取结果</strong>），<code>nSize</code>参数是要读取的字节数，<code>lpNumberOfBytesRead</code>参数是指向变量的指针（<strong>没有用到则填NULL</strong>），该变量将接收实际读取的字节数。</p>\n</li>\n<li><p><code>WriteProcessMemory</code>函数是Windows API的一部分，它允许一个进程向另一个进程的内存区域写入数据。该函数的语法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">WriteProcessMemory</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HANDLE  hProcess,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPVOID  lpBaseAddress,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCVOID lpBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  nSize,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  *lpNumberOfBytesWritten</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>hProcess</code>参数是要读取内存的进程的句柄，<code>lpBaseAddress</code>参数是要读取的内存地址（<strong>读取目标地址</strong>），<code>lpBuffer</code>参数是用于存储读取数据的缓冲区（<strong>保存读取结果</strong>），<code>nSize</code>参数是要读取的字节数，<code>lpNumberOfBytesWritten</code>参数是指向变量的指针（<strong>没有用到则填NULL</strong>），该变量将接收实际读取的字节数。</p>\n</li>\n<li><p>获得指定进程PID的方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">MainWindow::getProcessId</span><span class=\"params\">(<span class=\"type\">const</span> QString&amp; processName)</span><span class=\"comment\">//获取进程PID</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PROCESSENTRY32 entry;</span><br><span class=\"line\">    entry.dwSize = <span class=\"built_in\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">    HANDLE snapshot = <span class=\"built_in\">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Process32First</span>(snapshot, &amp;entry))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (QString::<span class=\"built_in\">fromWCharArray</span>(entry.szExeFile) == processName)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">CloseHandle</span>(snapshot);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> entry.th32ProcessID;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (<span class=\"built_in\">Process32Next</span>(snapshot, &amp;entry));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">CloseHandle</span>(snapshot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用法：DWORD pid&#x3D;getProcessId(processname);</p>\n</li>\n<li><p>获取进程的总基地址的方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PVOID <span class=\"title\">MainWindow::GetProcessBase</span><span class=\"params\">(DWORD dwProcessId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PVOID pProcessImageBase = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">//打开进程, 获取进程句柄</span></span><br><span class=\"line\">    HANDLE hProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == hProcess)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pProcessImageBase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历进程模块,</span></span><br><span class=\"line\">    HMODULE hModule[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    DWORD dwRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">    BOOL bRet;</span><br><span class=\"line\">    bRet = <span class=\"built_in\">EnumProcessModulesEx</span>(hProcess, (HMODULE*)(hModule), <span class=\"built_in\">sizeof</span>(hModule), &amp;dwRet, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (FALSE == bRet)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pProcessImageBase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个模块加载基址</span></span><br><span class=\"line\">    pProcessImageBase = hModule[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 关闭句柄</span></span><br><span class=\"line\">    <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pProcessImageBase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法：long long baseAddress &#x3D; (long long)GetProcessBase(Pid)&#x2F;&#x2F;进程对应PID</p>\n</li>\n<li><p>获取进程句柄：<code>HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-C-语法：\"><a href=\"#5-C-语法：\" class=\"headerlink\" title=\"5. C++语法：\"></a><em>5. C++语法：</em></h2><h3 id=\"1-虚继承\"><a href=\"#1-虚继承\" class=\"headerlink\" title=\"1. 虚继承\"></a>1. 虚继承</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//虚继承：对类的继承内存存储方式进行了改变</span></span><br><span class=\"line\"><span class=\"comment\">//从原先的拷贝复制的方式变成了在子类内部空间增加了一个地址，</span></span><br><span class=\"line\"><span class=\"comment\">// 该地址指向了一些偏移量，通过指针去访问地址+偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//从而锁定子类从父类那继承来的对象地址，解决了多重继承导致的父类对象重复引起子类访问时目标对象不明确的问题</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagA;</span><br><span class=\"line\">    <span class=\"type\">int</span> test;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test = <span class=\"number\">0x666666</span>;</span><br><span class=\"line\">        flagA = <span class=\"number\">0x111111</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> :<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagB;</span><br><span class=\"line\">    <span class=\"built_in\">B</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flagB = <span class=\"number\">0X222222</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> :<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagC;</span><br><span class=\"line\">    <span class=\"built_in\">C</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flagC = <span class=\"number\">0x3333333</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> :<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> B,<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> C</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagD;</span><br><span class=\"line\">    <span class=\"built_in\">D</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flagD = <span class=\"number\">0x444444</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    C c;</span><br><span class=\"line\">    D d;</span><br><span class=\"line\">    d.flagA = <span class=\"number\">0x5555555</span>;</span><br><span class=\"line\">    <span class=\"comment\">//d.C::value = 1;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(d));</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-友元函数\"><a href=\"#2-友元函数\" class=\"headerlink\" title=\"2. 友元函数\"></a>2. 友元函数</h3><p>在类内声明友元函数，关键词 <code>friend</code> ，从而使类外定义的非成员函数可以访问该类的私有成员</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//友元函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Student</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name);</span><br><span class=\"line\">\t~<span class=\"built_in\">Student</span>();</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">printName</span><span class=\"params\">(Student &amp;stu)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Student::<span class=\"built_in\">Student</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy_s</span>(<span class=\"keyword\">this</span>-&gt;name, <span class=\"number\">20</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student::~<span class=\"built_in\">Student</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printName</span><span class=\"params\">(Student &amp;stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; stu.name &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Student <span class=\"title\">stu</span><span class=\"params\">(<span class=\"string\">&quot;I am Kvancy&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printName</span>(stu);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-重载运算符\"><a href=\"#3-重载运算符\" class=\"headerlink\" title=\"3. 重载运算符\"></a>3. 重载运算符</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//重载运算符</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::ostream;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name);</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">get_name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> A <span class=\"keyword\">operator</span>+(A&amp; a1, A&amp; a2);</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, A&amp; a1);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">char</span>* name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">A::<span class=\"built_in\">A</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;name = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(name) + <span class=\"number\">1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy_s</span>(<span class=\"keyword\">this</span>-&gt;name, <span class=\"built_in\">strlen</span>(name) + <span class=\"number\">1</span>, name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(<span class=\"keyword\">this</span>-&gt;name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::printName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">A::get_name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A <span class=\"keyword\">operator</span>+(A &amp;a1, A &amp;a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\">A <span class=\"title\">a3</span><span class=\"params\">(<span class=\"string\">&quot;&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* buff = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(a<span class=\"number\">1.</span>name) + <span class=\"built_in\">strlen</span>(a<span class=\"number\">2.</span>name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (buff = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(len + <span class=\"number\">1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy_s</span>(buff, len + <span class=\"number\">1</span>, a<span class=\"number\">1.</span>name);</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcat_s</span>(buff, len + <span class=\"number\">1</span>, a<span class=\"number\">2.</span>name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta<span class=\"number\">3.</span>name = buff;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, A &amp;a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tos &lt;&lt; a<span class=\"number\">1.</span>name;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">A <span class=\"title\">a1</span><span class=\"params\">(<span class=\"string\">&quot;我是A1&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">A <span class=\"title\">a2</span><span class=\"params\">(<span class=\"string\">&quot;我是A2&quot;</span>)</span></span>;</span><br><span class=\"line\">\tA a3 = a1 + a2;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a3 &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-虚函数\"><a href=\"#4-虚函数\" class=\"headerlink\" title=\"4. 虚函数\"></a>4. 虚函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//子类重写函数之后，如果定义的父类对象想调用子类重写的函数</span></span><br><span class=\"line\"><span class=\"comment\">//这个时候如果直接用父类对象的指针指向子类对象，然后调用子类重写的函数</span></span><br><span class=\"line\"><span class=\"comment\">//这个时候成功调用</span></span><br><span class=\"line\"><span class=\"comment\">//如果我们把该父类成员函数定义成虚函数，我们可以通过改变指针指向调用子类重写的函数</span></span><br><span class=\"line\"><span class=\"comment\">//编译从静态联编-&gt;动态联编</span></span><br><span class=\"line\"><span class=\"comment\">//内存中创造了虚函数表，我们可以通过父类的指针指向正确调用函数地址，从而实现调用</span></span><br><span class=\"line\"><span class=\"comment\">//virtual 关键词父类定义了子类就无需定义</span></span><br><span class=\"line\"><span class=\"comment\">//override 关键词可以避免因函数签名不一致而导致的错误，提前帮你报错显示提醒你</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Animal</span>();</span><br><span class=\"line\">\t~<span class=\"built_in\">Animal</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">make_sound</span> <span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Animal:make\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::~<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span>:<span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Bird</span>();</span><br><span class=\"line\">\t~<span class=\"built_in\">Bird</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make_sound</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">//如果不加override,忘写了const关键字</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">//编译器正常编译,父类没有成功调用子类函数，打印出&quot;Animal:make&quot;</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Bird:make\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Bird::<span class=\"built_in\">Bird</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Bird::~<span class=\"built_in\">Bird</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAnimal* animal = <span class=\"keyword\">new</span> <span class=\"built_in\">Animal</span>();</span><br><span class=\"line\">\tBird bird;</span><br><span class=\"line\">\tanimal = &amp;bird;</span><br><span class=\"line\">\tanimal-&gt;<span class=\"built_in\">make_sound</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> animal;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-模版\"><a href=\"#5-模版\" class=\"headerlink\" title=\"5. 模版\"></a>5. 模版</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//模版函数&#123;函数模版，类模版&#125;关键词typename或者class随意，在底层中无影响，编译器在编译的时候替换</span></span><br><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T a, T b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种,参数类型不相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T &amp;a,T2 &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\tT  c;</span><br><span class=\"line\">\tc = b;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">\ta = c;</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//第三种，类模版</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">getValue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T va)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>(T value);</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//模板类是带参数的类，要求在接口实现中的类名称后面加入模板类参数，函数返回值亦如此</span></span><br><span class=\"line\"><span class=\"comment\">//格式举例如下</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">A&lt;T&gt;::<span class=\"built_in\">A</span>(T value)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;value = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">A&lt;T&gt;::~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> A&lt;T&gt;::<span class=\"built_in\">setValue</span>(T va)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tvalue = va;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第一种:%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(a, b));</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第二种：a:%d,b:%d\\n&quot;</span>, a, b);</span><br><span class=\"line\">\t<span class=\"function\">A&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">c</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\tc.<span class=\"built_in\">setValue</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第三种：%d\\n&quot;</span>, c.<span class=\"built_in\">getValue</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-异常处理\"><a href=\"#6-异常处理\" class=\"headerlink\" title=\"6. 异常处理\"></a>6. 异常处理</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//C++异常处理机制</span></span><br><span class=\"line\"><span class=\"comment\">//throw，try,catch</span></span><br><span class=\"line\"><span class=\"comment\">//在汇编代码中没有try catch，throw函数，正常运行异常代码，然后再一个jmp指令到某一个地址（实际上catch函数）里执行相应功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"type\">double</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"number\">2</span>;<span class=\"comment\">//这里throw什么类型，就是catch里面参数类型</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a/b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fun</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*catch (int judge)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif(judge==1)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;异常\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif(judge==2)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;异常2\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (...)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;我是万能的！\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>perror(char*) 显示报错信息,例如 <code>perror(&quot;wrong!:&quot;)</code> 打印出 “wrong!:+为什么报错”</p>\n</blockquote>\n<hr>\n<h2 id=\"6-C-算法\"><a href=\"#6-C-算法\" class=\"headerlink\" title=\"6. C++算法\"></a><em>6. C++算法</em></h2><h3 id=\"1-数组-or-容器的遍历算法-auto-for-each-transform\"><a href=\"#1-数组-or-容器的遍历算法-auto-for-each-transform\" class=\"headerlink\" title=\"1. 数组 or 容器的遍历算法 auto,for_each,transform\"></a>1. 数组 or 容器的遍历算法 <code>auto,for_each,transform</code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;ve;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; out &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//仿函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">print2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; out &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trans</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ++out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历输出的几种方式</span></span><br><span class=\"line\">\tve = &#123; <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> in[<span class=\"number\">6</span>] = &#123; <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//正常容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : in)cout &lt;&lt; it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tfor_each(in, in + <span class=\"number\">6</span>, visit);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//stl容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : ve)&#123;cout &lt;&lt; it&lt;&lt;<span class=\"string\">&quot; &quot;</span>;&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tfor_each(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), visit);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tfor_each(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">print2</span>());<span class=\"comment\">//仿函数输出结果</span></span><br><span class=\"line\">\t<span class=\"comment\">//transform搬运容器</span></span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;ve2;</span><br><span class=\"line\">\t<span class=\"comment\">//提前分配内衬</span></span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">resize</span>(ve.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">transform</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), <span class=\"built_in\">trans</span>());<span class=\"comment\">//把ve内的值可运算性的搬运到ve2中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : ve2)cout &lt;&lt; it &lt;&lt; <span class=\"string\">&quot; &quot;</span> ;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-查找算法-find-find-if-count-count-if-binary-serach\"><a href=\"#2-查找算法-find-find-if-count-count-if-binary-serach\" class=\"headerlink\" title=\"2. 查找算法  find,find_if,count,count_if,binary_serach\"></a>2. 查找算法  <code>find,find_if,count,count_if,binary_serach</code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;ve;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> Person&amp; person1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> person<span class=\"number\">1.</span>name == <span class=\"keyword\">this</span>-&gt;name &amp;&amp; person<span class=\"number\">1.</span>age == <span class=\"keyword\">this</span>-&gt;age;<span class=\"comment\">//注意利用this指针，不能传两个参数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">equal1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">const</span> Person &amp;person1)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> person<span class=\"number\">1.</span>name == <span class=\"string\">&quot;p2&quot;</span> &amp;&amp; person<span class=\"number\">1.</span>age == <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">equal2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> out &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">count_cmp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> out &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//常用查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//find函数，在algorithm头文件中，find重心在相等</span></span><br><span class=\"line\">\tve = &#123; <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it = <span class=\"built_in\">find</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(),<span class=\"number\">5</span>);</span><br><span class=\"line\">\tcout &lt;&lt; *it &lt;&lt; endl;<span class=\"comment\">//返回找到的位置</span></span><br><span class=\"line\">\tPerson person1 = &#123; <span class=\"string\">&quot;p1&quot;</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tPerson person2 = &#123; <span class=\"string\">&quot;p2&quot;</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tPerson person3 = &#123; <span class=\"string\">&quot;p1&quot;</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tvector&lt;Person&gt;ve2;</span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(person1);</span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(person2);</span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(person3);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it2 = <span class=\"built_in\">find</span>(ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(),person2 );<span class=\"comment\">//要重载==运算符</span></span><br><span class=\"line\">\tcout &lt;&lt;it2-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it2-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">/**********************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//find_if语法，find_if重心在比较</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it3 = <span class=\"built_in\">find_if</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">equal2</span>());<span class=\"comment\">//找到大于5的第一个数</span></span><br><span class=\"line\">\tcout &lt;&lt; *it3 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it4 = <span class=\"built_in\">find_if</span>(ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), <span class=\"built_in\">equal1</span>());<span class=\"comment\">//自定义类需定义仿函数声明返回标准</span></span><br><span class=\"line\">\tcout &lt;&lt; it4-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it4-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">/**********************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//binary_search语法,重心在存在与否,使用条件是查找容器已排序，该查找效率为指数级</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it5 = <span class=\"built_in\">binary_search</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">7</span>);<span class=\"comment\">//返回值其实是bool类型</span></span><br><span class=\"line\">\tcout &lt;&lt; it5 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it6 = <span class=\"built_in\">binary_search</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">8</span>);</span><br><span class=\"line\">\tcout &lt;&lt; it6 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">/***********************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//count语法，用于统计数据，返回某个元素在容器内的个数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> cnt = <span class=\"built_in\">count</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">2</span>);</span><br><span class=\"line\">\tcout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//统计类的数据时，要重载==运算符</span></span><br><span class=\"line\">\t<span class=\"comment\">//count_if语法，返回容器内数据条件判断后的个数</span></span><br><span class=\"line\">\tcnt = <span class=\"built_in\">count_if</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">count_cmp</span>());</span><br><span class=\"line\">\tcout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//统计类的数据，要用bool型仿函数去定义比较条件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-排序算法-sort-rand-shuffle-merge-reverse\"><a href=\"#3-排序算法-sort-rand-shuffle-merge-reverse\" class=\"headerlink\" title=\"3. 排序算法 sort,rand_shuffle,merge,reverse\"></a>3. 排序算法 <code>sort,rand_shuffle,merge,reverse</code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>());<span class=\"comment\">//默认升序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());<span class=\"comment\">//降序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), cmpl);<span class=\"comment\">//自定义降序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">random_shuffle</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//到此每次运行实际上结果一致，使用srand生成随机数</span></span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">random_shuffle</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//结果每次运行都不同了</span></span><br><span class=\"line\">\t<span class=\"comment\">/**********************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//merge函数，使两个有序的容器合并成一个容器，并且新的容器也是有序的</span></span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">1.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">1.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//ve2为新的容器</span></span><br><span class=\"line\">\t<span class=\"comment\">/**************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//reverse函数，翻转函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">/**************************************/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-拷贝替换算法-copy-replace-replace-if\"><a href=\"#4-拷贝替换算法-copy-replace-replace-if\" class=\"headerlink\" title=\"4. 拷贝替换算法 copy replace replace_if \"></a>4. 拷贝替换算法 <code>copy replace replace_if </code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">copy</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//把ve的值copy到ve2中，要提前开辟空间</span></span><br><span class=\"line\"><span class=\"built_in\">replace</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>, <span class=\"number\">5</span>);<span class=\"comment\">//把ve中0替换成5</span></span><br><span class=\"line\"><span class=\"built_in\">replace_if</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), cmp, <span class=\"number\">5</span>);<span class=\"comment\">//把ve中小于5的替换成5</span></span><br><span class=\"line\"><span class=\"built_in\">swap</span>(ve, ve2);<span class=\"comment\">//把ve，ve2容器中数据继续互换</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-常用集合算法-set-intersection-set-union-set-difference\"><a href=\"#5-常用集合算法-set-intersection-set-union-set-difference\" class=\"headerlink\" title=\"5. 常用集合算法 set_intersection set_union set_difference   \"></a>5. 常用集合算法 <code>set_intersection set_union set_difference   </code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it2 = <span class=\"built_in\">set_intersection</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">3.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//求v1,v2的交集，保存到v3，返回值为交集结束的迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it3 = <span class=\"built_in\">set_union</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">3.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//求v1,v2的并集，保存到v3，返回值为并集结束的迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it4 = <span class=\"built_in\">set_difference</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">3.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//求v1,v2的差集---属于v1，不属于v2的集合</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"7-运算符优先顺序：\"><a href=\"#7-运算符优先顺序：\" class=\"headerlink\" title=\"7.  运算符优先顺序：\"></a><em>7.  运算符优先顺序：</em></h2><table>\n<thead>\n<tr>\n<th>运算符由高到低：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>第一级：圆括号 ()、下标运算符 []、结构体成员运算符 . 和 -&gt;</td>\n</tr>\n<tr>\n<td>第二级：逻辑非 !、按位取反 ~、自增自减 ++ 和 –、负号 -、类型转换 (类型)、指针运算符 * 和 &amp;、长度运算符 sizeof</td>\n</tr>\n<tr>\n<td>第三级：乘法运算符 *、&#x2F; 和 %</td>\n</tr>\n<tr>\n<td>第四级：加法运算符 + 和 -</td>\n</tr>\n<tr>\n<td>第五级：移位运算符 &lt;&lt; 和 &gt;&gt;</td>\n</tr>\n<tr>\n<td>第六级：关系运算符 &lt;、&lt;&#x3D;、&gt; 和 &gt;&#x3D;</td>\n</tr>\n<tr>\n<td>第七级：相等运算符 &#x3D;&#x3D; 和 !&#x3D;</td>\n</tr>\n<tr>\n<td>第八级：按位与 &amp;</td>\n</tr>\n<tr>\n<td>第九级：按位异或 ^</td>\n</tr>\n<tr>\n<td>第十级：按位或</td>\n</tr>\n<tr>\n<td>第十二级：逻辑或</td>\n</tr>\n<tr>\n<td>第十四级：赋值运算符 &#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&amp;&#x3D;、^&#x3D;、</td>\n</tr>\n<tr>\n<td>第十五级：逗号运算符 ,</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"8-MFC\"><a href=\"#8-MFC\" class=\"headerlink\" title=\"8. MFC\"></a>8. MFC</h2><p>通过空项目创建</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mfc.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//设置 链接器-系统-窗口</span></span><br><span class=\"line\"><span class=\"comment\">//设置 在高级里 在共享 DLL 中使用 MFC</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Myapp</span>:<span class=\"keyword\">public</span> CWinApp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span></span>;<span class=\"comment\">//mfc程序入口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyFrame</span>:<span class=\"keyword\">public</span> CFrameWnd</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyFrame</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//~MyFrame();</span></span><br><span class=\"line\">\t<span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnLButtonDown</span><span class=\"params\">(UINT, CPoint point)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DECLARE_MESSAGE_MAP</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mfc.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&quot;mfc.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Myapp app;<span class=\"comment\">//全局应用程序对象</span></span><br><span class=\"line\"><span class=\"comment\">//MyFrame* m_pMainwnd = new MyFrame;</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">Myapp::InitInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyFrame* frame = <span class=\"keyword\">new</span> MyFrame;</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOWNORMAL);</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//保存程序指针,否则窗口一闪而过,</span></span><br><span class=\"line\">\tm_pMainWnd = frame;<span class=\"comment\">//m_pMainWnd线程类的一个成员</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(MyFrame, CFrameWnd)</span><br><span class=\"line\">\t<span class=\"built_in\">ON_WM_LBUTTONDOWN</span>()</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">MyFrame::<span class=\"built_in\">MyFrame</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Create</span>(<span class=\"literal\">NULL</span>, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;Crackk&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">MyFrame::OnLButtonDown</span><span class=\"params\">(UINT, CPoint point)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTCHAR buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">wsprintf</span>(buf, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;X = %d,Y = %d&quot;</span>), point.x, point.y);</span><br><span class=\"line\">\t<span class=\"built_in\">MessageBoxW</span>(buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过MFC应用程序模版创建–基于对话框</p>\n<p>在app的子类里有首界面的创建</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMFC2Dlg dlg;</span><br><span class=\"line\">m_pMainWnd = &amp;dlg;<span class=\"comment\">//第一个显示的界面</span></span><br><span class=\"line\"><span class=\"comment\">//First dlg;</span></span><br><span class=\"line\"><span class=\"comment\">//m_pMainWnd = &amp;dlg;//第一个显示的界面</span></span><br><span class=\"line\">INT_PTR nResponse = dlg.<span class=\"built_in\">DoModal</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nResponse == IDOK)</span><br></pre></td></tr></table></figure>\n\n<p>如果要修改首界面可以添加界面类(先创建资源,再创建类)</p>\n<p>但是新界面没有最小化和最大化和拖拽功能</p>\n<p>如果想要在界面类里访问其他控件,例如staticText类,需要在ui界面添加变量,然后就可以通过名称来访问该控件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMFC2Dlg::OnBnClickedClick</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#123;    <span class=\"comment\">//hint为staticText的名称</span></span><br><span class=\"line\">\t\thint.<span class=\"built_in\">SetWindowTextW</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;flag&#123;1111&#125;&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里代码块实际做的操作有两处</p>\n<p>第一处:在父界面类的头文件中包含该控件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CStatic hint;</span><br></pre></td></tr></table></figure>\n\n<p>第二处:在父界面类的源文件中DoDataExchange函数里添加控件关联</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">DDX_Control</span>(pDX, IDC_HINT, hint);<span class=\"comment\">//p_DX是传来的参数,后者是相关联控件id和名称</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>给按钮添加事件处理程序时,代码层实际修改了三处代码</p>\n<p>所属界面类的头文件中包含该事件处理函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnBnClickedClick</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnBnClickedDClick</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>在源文件消息队列声明(BEGIN_MESSAGE_MAP)后添加消息声明</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ON_BN_CLICKED</span>(IDC_Click, &amp;CMFC2Dlg::OnBnClickedClick)<span class=\"comment\">//id和处理函数指针</span></span><br><span class=\"line\"><span class=\"built_in\">ON_BN_CLICKED</span>(IDC_DClick, &amp;CMFC2Dlg::OnBnClickedDClick)</span><br></pre></td></tr></table></figure>\n\n<p>在源文件中添加处理函数的实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMFC2Dlg::OnBnClickedClick</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thint.<span class=\"built_in\">SetWindowTextW</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;flag&#123;1111&#125;&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMFC2Dlg::OnBnClickedDClick</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">\thint.<span class=\"built_in\">SetWindowTextW</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;you are so smart!!&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何格式化SetwindowTextW的参数TEXT,参数为CSting形式,等于LPCTSTR(),TEXT(),_T(),可以用Format来格式化text</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CString text;</span><br><span class=\"line\">text.<span class=\"built_in\">Format</span>(_T(<span class=\"string\">&quot;gogogogo!%d&quot;</span>), count);</span><br><span class=\"line\">hint.<span class=\"built_in\">SetWindowTextW</span>(text);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-QML\"><a href=\"#9-QML\" class=\"headerlink\" title=\"9. QML\"></a>9. QML</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">QtQuick</span> <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">QtQuick</span>.<span class=\"property\">Window</span> <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">QtQuick</span>.<span class=\"property\">Controls</span></span><br><span class=\"line\"><span class=\"title class_\">Window</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: <span class=\"number\">640</span></span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">480</span></span><br><span class=\"line\">    <span class=\"attr\">visible</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"title function_\">qsTr</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    property int <span class=\"attr\">myvalue</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">minimumHeight</span>: <span class=\"number\">400</span></span><br><span class=\"line\">    <span class=\"attr\">maximumHeight</span>: <span class=\"number\">540</span></span><br><span class=\"line\">    <span class=\"attr\">minimumWidth</span>: <span class=\"number\">540</span></span><br><span class=\"line\">    <span class=\"attr\">maximumWidth</span>: <span class=\"number\">720</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">onWidthChanged</span>: &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;width:&quot;</span>,width);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">onMyvalueChanged</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myvalue:&quot;</span>,myvalue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Button</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: btn1</span><br><span class=\"line\">        <span class=\"attr\">objectName</span>: <span class=\"string\">&quot;btn1&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"title class_\">Rectangle</span>&#123;</span><br><span class=\"line\">            border.<span class=\"property\">color</span>: btn1.<span class=\"property\">focus</span>?<span class=\"string\">&quot;blue&quot;</span>:<span class=\"string\">&quot;black&quot;</span><span class=\"comment\">//按钮按下获得焦点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Keys</span>.<span class=\"property\">onLeftPressed</span>: &#123;<span class=\"comment\">//方向键左按下</span></span><br><span class=\"line\">            btn1.<span class=\"property\">focus</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Button</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: btn2</span><br><span class=\"line\">        <span class=\"attr\">objectName</span>: <span class=\"string\">&quot;btn2&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"title class_\">Rectangle</span>&#123;</span><br><span class=\"line\">            border.<span class=\"property\">color</span>: btn2.<span class=\"property\">focus</span>?<span class=\"string\">&quot;blue&quot;</span>:<span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Keys</span>.<span class=\"property\">onLeftPressed</span>: &#123;<span class=\"comment\">//方向键左按下</span></span><br><span class=\"line\">            btn2.<span class=\"property\">focus</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">onActiveFocusItemChanged</span>: &#123; <span class=\"comment\">//焦点发生改变时</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;active focus item changed:&quot;</span>,activeFocusItem)<span class=\"comment\">//objectName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Rectangle</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">z</span>: <span class=\"number\">2</span><span class=\"comment\">//可以在2d中进行覆盖或者隐藏</span></span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">focus</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">            anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">            <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;on clicked&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Keys</span>.<span class=\"property\">onReturnPressed</span>: &#123;<span class=\"comment\">//控件获取键盘信号前需要获取焦点</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;on return pressed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">       <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">id</span>: rect1</span><br><span class=\"line\">           <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">           <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//           anchors.centerIn: parent//水平垂直居中</span></span><br><span class=\"line\">           anchors.<span class=\"property\">horizontalCenter</span>: parent.<span class=\"property\">horizontalCenter</span><span class=\"comment\">//水平居中</span></span><br><span class=\"line\">           anchors.<span class=\"property\">verticalCenter</span>: parent.<span class=\"property\">verticalCenter</span><span class=\"comment\">//垂直居中</span></span><br><span class=\"line\">           <span class=\"attr\">rotation</span>: <span class=\"number\">60</span> <span class=\"comment\">//旋转角度</span></span><br><span class=\"line\">           <span class=\"attr\">scale</span>: <span class=\"number\">2</span> <span class=\"comment\">//放缩,放大两倍</span></span><br><span class=\"line\">           <span class=\"attr\">antialiasing</span>: <span class=\"literal\">false</span> <span class=\"comment\">//抗锯齿</span></span><br><span class=\"line\">           border.<span class=\"property\">width</span>: <span class=\"number\">2</span> <span class=\"comment\">//边框</span></span><br><span class=\"line\">           border.<span class=\"property\">color</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">           <span class=\"attr\">radius</span>: <span class=\"number\">30</span> <span class=\"comment\">//弧度</span></span><br><span class=\"line\">           <span class=\"attr\">gradient</span>: <span class=\"title class_\">Gradient</span> &#123;<span class=\"comment\">//渐变色 覆盖原有颜色 边框颜色不覆盖</span></span><br><span class=\"line\">               <span class=\"title class_\">GradientStop</span> &#123; <span class=\"attr\">position</span>: <span class=\"number\">0.0</span>; <span class=\"attr\">color</span>: <span class=\"string\">&quot;lights teelblue&quot;</span> &#125;</span><br><span class=\"line\">               <span class=\"title class_\">GradientStop</span> &#123; <span class=\"attr\">position</span>: <span class=\"number\">1.0</span>; <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span>&#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">id</span>: rect2</span><br><span class=\"line\">           <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">           anchors.<span class=\"property\">left</span>: rect1.<span class=\"property\">right</span><span class=\"comment\">//类似弹簧,rect1左边与rect1右边重合</span></span><br><span class=\"line\">           anchors.<span class=\"property\">leftMargin</span>: <span class=\"number\">20</span><span class=\"comment\">//与rect1左侧相距20</span></span><br><span class=\"line\">           anchors.<span class=\"property\">top</span>: rect1.<span class=\"property\">top</span><span class=\"comment\">//y轴距离相同</span></span><br><span class=\"line\">           <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: root</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span>; <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">state</span>: <span class=\"string\">&quot;red_color&quot;</span> <span class=\"comment\">//控制状态</span></span><br><span class=\"line\">        <span class=\"attr\">states</span>: [</span><br><span class=\"line\">            <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&quot;red_color&quot;</span></span><br><span class=\"line\">                <span class=\"title class_\">PropertyChanges</span> &#123; root.<span class=\"property\">color</span>: <span class=\"string\">&quot;red&quot;</span> &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\">                <span class=\"title class_\">PropertyChanges</span> &#123; root.<span class=\"property\">color</span>: <span class=\"string\">&quot;blue&quot;</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">            anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">            <span class=\"attr\">onPressed</span>: &#123;</span><br><span class=\"line\">                root.<span class=\"property\">state</span> = <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onReleased</span>: &#123;</span><br><span class=\"line\">                root.<span class=\"property\">state</span> = <span class=\"string\">&quot;red_color&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">transitions</span>: [<span class=\"comment\">//状态改变时进行动画,而不是瞬间完成状态改变</span></span><br><span class=\"line\">            <span class=\"title class_\">Transition</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">from</span>: <span class=\"string\">&quot;red_color&quot;</span><span class=\"comment\">//状态</span></span><br><span class=\"line\">                <span class=\"attr\">to</span>: <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">target</span>: root</span><br><span class=\"line\">                    <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title class_\">Transition</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">from</span>: <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\">                <span class=\"attr\">to</span>: <span class=\"string\">&quot;red_color&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">target</span>: root</span><br><span class=\"line\">                    <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">id</span>: flashingblob</span><br><span class=\"line\">           <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">           <span class=\"attr\">opacity</span>: <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">SequentialAnimation</span> on color &#123;<span class=\"comment\">//多段式动画</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                   from: &quot;white&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">to</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">duration</span>: <span class=\"number\">200</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                   from: &quot;white&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">to</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">duration</span>: <span class=\"number\">200</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">               anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">               <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                   animateColor.<span class=\"title function_\">start</span>()</span><br><span class=\"line\">                   animateOpacity.<span class=\"title function_\">start</span>()</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">PropertyAnimation</span> &#123; <span class=\"comment\">//属性为字符串的动画</span></span><br><span class=\"line\">               <span class=\"attr\">id</span>: animateColor;</span><br><span class=\"line\">               <span class=\"attr\">target</span>: flashingblob</span><br><span class=\"line\">               <span class=\"attr\">properties</span>: <span class=\"string\">&quot;color&quot;</span></span><br><span class=\"line\">               <span class=\"attr\">to</span>: <span class=\"string\">&quot;green&quot;</span></span><br><span class=\"line\">               <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">NumberAnimation</span> &#123;<span class=\"comment\">//属性为数字的动画</span></span><br><span class=\"line\">               <span class=\"attr\">id</span>: animateOpacity</span><br><span class=\"line\">               <span class=\"attr\">target</span>: flashingblob</span><br><span class=\"line\">               <span class=\"attr\">property</span>: <span class=\"string\">&quot;opacity&quot;</span></span><br><span class=\"line\">               <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">               <span class=\"attr\">from</span>: <span class=\"number\">1.0</span></span><br><span class=\"line\">               <span class=\"attr\">to</span>: <span class=\"number\">0.5</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"title class_\">PropertyAnimation</span> on x &#123;<span class=\"comment\">//立即触发的动画</span></span><br><span class=\"line\">           <span class=\"attr\">to</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Component</span> &#123; <span class=\"comment\">//不会立即出现的组件,需要load</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: com</span><br><span class=\"line\">             <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">                 <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                 <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                 <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">                 <span class=\"title class_\">Component</span>.<span class=\"property\">onCompleted</span>: &#123;<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">                     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Completed&quot;</span>)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 <span class=\"title class_\">Component</span>.<span class=\"property\">onDestruction</span>: &#123;<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">                     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Destruction&quot;</span>)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Component</span> &#123; <span class=\"comment\">//不会立即出现的组件,需要load</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: com2</span><br><span class=\"line\">             <span class=\"title class_\">Image</span> &#123;<span class=\"comment\">//img</span></span><br><span class=\"line\">                 <span class=\"attr\">id</span>: img</span><br><span class=\"line\">                 <span class=\"attr\">source</span>: <span class=\"string\">&quot;/login2.jpg&quot;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Component</span> &#123; <span class=\"comment\">//不会立即出现的组件,需要load</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: com3</span><br><span class=\"line\">             <span class=\"title class_\">AnimatedImage</span> &#123;<span class=\"comment\">//gif</span></span><br><span class=\"line\">                 <span class=\"attr\">id</span>: gif</span><br><span class=\"line\">                 <span class=\"attr\">source</span>: <span class=\"string\">&quot;/GIF-1.gif&quot;</span></span><br><span class=\"line\">                 <span class=\"attr\">speed</span>: <span class=\"number\">10</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Loader</span> &#123;<span class=\"comment\">//加载组件或文件</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: load</span><br><span class=\"line\">             <span class=\"attr\">sourceComponent</span>: com3</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"attr\">onStateChanged</span>: &#123;</span><br><span class=\"line\">                 <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;status:&quot;</span>,status)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">             <span class=\"attr\">id</span>: button</span><br><span class=\"line\">             <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">             <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">             <span class=\"attr\">x</span>: <span class=\"number\">200</span></span><br><span class=\"line\">             <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                 load.<span class=\"property\">item</span>.<span class=\"property\">paused</span> = !load.<span class=\"property\">item</span>.<span class=\"property\">paused</span><span class=\"comment\">//播放键</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: mousearea</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">enabled</span>: <span class=\"literal\">true</span> <span class=\"comment\">//是否使能,默认为true</span></span><br><span class=\"line\">            <span class=\"attr\">acceptedButtons</span>: <span class=\"title class_\">Qt</span>.<span class=\"property\">LeftButton</span> | <span class=\"title class_\">Qt</span>.<span class=\"property\">RightButton</span> <span class=\"comment\">//默认只接受左键</span></span><br><span class=\"line\">            <span class=\"attr\">cursorShape</span>: <span class=\"title class_\">Qt</span>.<span class=\"property\">CrossCursor</span> <span class=\"comment\">//鼠标样式</span></span><br><span class=\"line\">            <span class=\"attr\">hoverEnabled</span>: <span class=\"literal\">true</span> <span class=\"comment\">//默认关闭,打开可以接受悬浮信号</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">                anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">                <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;clicked&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onHoveredChanged</span>: &#123;<span class=\"comment\">//是否悬浮</span></span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Onhoverchanged&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">onPressed</span>: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret = pressedButtons &amp; <span class=\"title class_\">Qt</span>.<span class=\"property\">LeftButton</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret2 = pressedButtons &amp; <span class=\"title class_\">Qt</span>.<span class=\"property\">RightButton</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ret == <span class=\"title class_\">Qt</span>.<span class=\"property\">LeftButton</span>)<span class=\"comment\">//控制左右键不同回应</span></span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;LEFT&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;RIGHT&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;pressed&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onReleased</span>: &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;released&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onPressAndHold</span>:<span class=\"comment\">//长摁 , 在 Press信号之后</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hold&quot;</span>)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: rect</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">opacity</span>: (<span class=\"number\">600.0</span> - rect.<span class=\"property\">x</span>) / <span class=\"number\">600</span></span><br><span class=\"line\">            <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">                anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">                drag.<span class=\"property\">target</span>: rect <span class=\"comment\">//加载拖动效果</span></span><br><span class=\"line\">                drag.<span class=\"property\">axis</span>: <span class=\"title class_\">Drag</span>.<span class=\"property\">XAxis</span> <span class=\"comment\">/*| Drag.YAxis*/</span></span><br><span class=\"line\">                drag.<span class=\"property\">minimumX</span>: <span class=\"number\">0</span></span><br><span class=\"line\">                drag.<span class=\"property\">maximumX</span>: container.<span class=\"property\">width</span> - rect.<span class=\"property\">width</span></span><br><span class=\"line\"><span class=\"comment\">//                drag.filterChildren: true//子控件是否能拖动</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Libxl使用\"><a href=\"#Libxl使用\" class=\"headerlink\" title=\"Libxl使用\"></a>Libxl使用</h2><h4 id=\"引入库\"><a href=\"#引入库\" class=\"headerlink\" title=\"引入库\"></a>引入库</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;libxl-3.1/libxl-3.1.0/include_cpp/libxl.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;libxl-3.1/libxl-3.1.0/lib/libxl.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> libxl;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book* book = <span class=\"built_in\">xlCreateBook</span>();</span><br><span class=\"line\">book-&gt;<span class=\"built_in\">load</span>(<span class=\"string\">&quot;xxx.xls&quot;</span>);</span><br><span class=\"line\">Sheet* sheet = book-&gt;<span class=\"built_in\">getSheet</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取文件大小\"><a href=\"#读取文件大小\" class=\"headerlink\" title=\"读取文件大小\"></a>读取文件大小</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> rowfirst = sheet-&gt;<span class=\"built_in\">firstRow</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> rowlast  = sheet-&gt;<span class=\"built_in\">lastRow</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> colfirst = sheet-&gt;<span class=\"built_in\">firstCol</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> collast  = sheet-&gt;<span class=\"built_in\">lastCol</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取文件内容（表格左上角为（0-0））\"><a href=\"#读取文件内容（表格左上角为（0-0））\" class=\"headerlink\" title=\"读取文件内容（表格左上角为（0,0））\"></a>读取文件内容（表格左上角为（0,0））</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> date1 = sheet-&gt;<span class=\"built_in\">readNum</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* date2 = sheet-&gt;<span class=\"built_in\">readStr</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新sheet\"><a href=\"#创建新sheet\" class=\"headerlink\" title=\"创建新sheet\"></a>创建新sheet</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book* book1 = <span class=\"built_in\">xlCreateBook</span>();</span><br><span class=\"line\">Sheet* sheet1 = book1-&gt;<span class=\"built_in\">addSheet</span>(<span class=\"string\">&quot;sheet1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置行宽列高\"><a href=\"#设置行宽列高\" class=\"headerlink\" title=\"设置行宽列高\"></a>设置行宽列高</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheetM-&gt;<span class=\"built_in\">setCol</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">sheetM-&gt;<span class=\"built_in\">setRow</span>(<span class=\"number\">0</span> , <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合并单元格\"><a href=\"#合并单元格\" class=\"headerlink\" title=\"合并单元格\"></a>合并单元格</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet-&gt;<span class=\"built_in\">setMerge</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">// 合并第0行的1~2列</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置字体\"><a href=\"#设置字体\" class=\"headerlink\" title=\"设置字体\"></a>设置字体</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Font *titleFont = bookM-&gt;<span class=\"built_in\">addFont</span>();</span><br><span class=\"line\">titleFont-&gt;<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;宋体&quot;</span>);</span><br><span class=\"line\">titleFont-&gt;<span class=\"built_in\">setSize</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">titleFont-&gt;<span class=\"built_in\">setBold</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">Format* titleFormat = bookM-&gt;<span class=\"built_in\">addFormat</span>();</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setAlignH</span>(ALIGNH_CENTER);</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setFont</span>(titleFont);</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setWrap</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setAlignV</span>(ALIGNV_DISTRIBUTED);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"向文件写入内容\"><a href=\"#向文件写入内容\" class=\"headerlink\" title=\"向文件写入内容\"></a>向文件写入内容</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet-&gt;<span class=\"built_in\">writeStr</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">sheet-&gt;<span class=\"built_in\">writeNum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>, <span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"保存结束\"><a href=\"#保存结束\" class=\"headerlink\" title=\"保存结束\"></a>保存结束</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book-&gt;<span class=\"built_in\">save</span>(<span class=\"string\">&quot;文件保存路径&quot;</span>);</span><br><span class=\"line\">book-&gt;<span class=\"built_in\">release</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"JSONCPP\"><a href=\"#JSONCPP\" class=\"headerlink\" title=\"JSONCPP\"></a>JSONCPP</h2><p>这篇博客概括的很全</p>\n<p><a href=\"https://www.coonote.com/cplusplus-note/jsoncpp.html\">https://www.coonote.com/cplusplus-note/jsoncpp.html</a></p>\n","site":{"data":{}},"excerpt":"<p>记载一些学习C&#x2F;C++语法，库函数，开发框架等","more":"</p>\n<h2 id=\"1-好用的方法：\"><a href=\"#1-好用的方法：\" class=\"headerlink\" title=\"1. 好用的方法：\"></a><em>1. 好用的方法：</em></h2><h3 id=\"1-PixmapToRound函数\"><a href=\"#1-PixmapToRound函数\" class=\"headerlink\" title=\"1. PixmapToRound函数\"></a>1. PixmapToRound函数</h3><p>将QPixmap的图像转换为圆形，美化界面用，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ROUNDIMG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ROUNDIMG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPixmap&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPainter&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPainterPath&gt;</span><span class=\"comment\">//此处radius是半径</span></span></span><br><span class=\"line\"><span class=\"function\">QPixmap <span class=\"title\">PixmapToRound</span><span class=\"params\">(<span class=\"type\">const</span> QPixmap &amp;src, <span class=\"type\">int</span> radius)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (src.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">QPixmap</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按比例缩放</span></span><br><span class=\"line\">    QPixmap pixmapa;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(src.<span class=\"built_in\">width</span>() != radius || src.<span class=\"built_in\">height</span>() != radius)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pixmapa = src.<span class=\"built_in\">scaled</span>(radius, radius, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pixmapa = src;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">QPixmap <span class=\"title\">pixmap</span><span class=\"params\">(radius,radius)</span></span>;</span><br><span class=\"line\">    pixmap.<span class=\"built_in\">fill</span>(Qt::transparent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(&amp;pixmap)</span></span>;</span><br><span class=\"line\">    painter.<span class=\"built_in\">setRenderHints</span>(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);</span><br><span class=\"line\"></span><br><span class=\"line\">    QPainterPath path;</span><br><span class=\"line\">    path.<span class=\"built_in\">addEllipse</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, radius, radius);</span><br><span class=\"line\">    painter.<span class=\"built_in\">setClipPath</span>(path);</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawPixmap</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, radius, radius, pixmapa);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pixmap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// ROUNDIMG_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例：</span></span><br><span class=\"line\">QPixmap img;<span class=\"comment\">//上端圆形图片，用自己头像嘿嘿</span></span><br><span class=\"line\">    img.<span class=\"built_in\">load</span>(<span class=\"string\">&quot;://res/login.jpg&quot;</span>);<span class=\"comment\">//图片加载</span></span><br><span class=\"line\">    QPixmap pixMap= img.<span class=\"built_in\">scaled</span>(<span class=\"number\">100</span>,<span class=\"number\">100</span>, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);</span><br><span class=\"line\">    <span class=\"comment\">//50为圆形的半径</span></span><br><span class=\"line\">    pixMap =  <span class=\"built_in\">PixmapToRound</span>(pixMap, <span class=\"number\">50</span>);</span><br><span class=\"line\">    ui-&gt;label_img-&gt;<span class=\"built_in\">setPixmap</span>(pixMap);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用正则表达式规定输入规范\"><a href=\"#2-使用正则表达式规定输入规范\" class=\"headerlink\" title=\"2. 使用正则表达式规定输入规范\"></a>2. 使用正则表达式规定输入规范</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;lineEdit_1-&gt;<span class=\"built_in\">setValidator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">QRegularExpressionValidator</span>(<span class=\"built_in\">QRegularExpression</span>(<span class=\"string\">&quot;[0-9]+$&quot;</span>)));<span class=\"comment\">//只能输入数字，个数不限</span></span><br><span class=\"line\">ui-&gt;lineEdit_1-&gt;<span class=\"built_in\">setValidator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">QRegularExpressionValidator</span>(<span class=\"built_in\">QRegularExpression</span>(<span class=\"string\">&quot;[A-Fa-f0-9]&#123;1,12&#125;&quot;</span>)));<span class=\"comment\">//能输入数字和a-f大小写，控制个数不多于12个</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用花指令增加逆向破解难度：\"><a href=\"#3-使用花指令增加逆向破解难度：\" class=\"headerlink\" title=\"3. 使用花指令增加逆向破解难度：\"></a>3. 使用花指令增加逆向破解难度：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(<span class=\"string\">&quot;test $0,%eax\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;jz label\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;add $0xff,%esp\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;.byte 0xe8,0x80,0x80,0x80\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;label:\\n&quot;</span></span><br><span class=\"line\">        );<span class=\"comment\">//破坏了堆栈平衡，以及插入了一些junkcode</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-与数据库互通的一些操作：\"><a href=\"#4-与数据库互通的一些操作：\" class=\"headerlink\" title=\"4. 与数据库互通的一些操作：\"></a>4. 与数据库互通的一些操作：</h3><p>CMakeList.txt文件里写入：<code>find_package(Qt6 COMPONENTS Sql REQUIRED)</code>  <code>target_link_libraries(TeamProject PRIVATE Qt6::Sql)</code> </p>\n<p>连接数据库，代码段里写入：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MainWindow::linkDatabase</span><span class=\"params\">()</span><span class=\"comment\">//连接数据库</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    database=QSqlDatabase::<span class=\"built_in\">addDatabase</span>(<span class=\"string\">&quot;QMYSQL&quot;</span>);<span class=\"comment\">//QMYSQL对应数据库类型，此处为mysql</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setHostName</span>(<span class=\"string\">&quot;192.168.76.1&quot;</span>);<span class=\"comment\">//对应ip地址</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setPort</span>(<span class=\"number\">3306</span>);<span class=\"comment\">//对应开放的端口号</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setUserName</span>(<span class=\"string\">&quot;root&quot;</span>);<span class=\"comment\">//对应用户名，此处为root用户</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setPassword</span>(<span class=\"string\">&quot;123456&quot;</span>);<span class=\"comment\">//对应密码</span></span><br><span class=\"line\">    database.<span class=\"built_in\">setDatabaseName</span>(<span class=\"string\">&quot;test&quot;</span>);<span class=\"comment\">//使用的数据库名称</span></span><br><span class=\"line\">    database.<span class=\"built_in\">open</span>();<span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!database.<span class=\"built_in\">isOpen</span>())<span class=\"comment\">//判断是否连接成功</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;数据库没有连接成功呐！&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//exit(0);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-给Qt生成的可执行文件设置图标，以及窗口左上角图标：\"><a href=\"#5-给Qt生成的可执行文件设置图标，以及窗口左上角图标：\" class=\"headerlink\" title=\"5. 给Qt生成的可执行文件设置图标，以及窗口左上角图标：\"></a>5. 给Qt生成的可执行文件设置图标，以及窗口左上角图标：</h3><p>给可执行文件设置图标，先在cpp同级目录下创建一个ico.rc文件（后缀一定要是.rc），然后再CMake.txt文件下写入文件编译区，然后再Source Files下找到该文件并写入 <code>IDI_ICON_LOGO ICON DISCARDABLE &quot;res/logo.ico&quot;</code>，双引号里面是图标的相对路径，.ico文件可在 <code>D:\\Pixillion</code>软件中进行图片格式转换。</p>\n<p>窗口左上角图标设置：<code>setWindowIcon(QIcon(&quot;:/res/R-C2.jpg&quot;));</code>。</p>\n<p>在Qt中调用其他系统命令或执行文件时，可用QProcess函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QProcess <span class=\"title\">process</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">QString str = QApplication::<span class=\"built_in\">applicationDirPath</span>();</span><br><span class=\"line\">str += <span class=\"string\">&quot;/firmware_upgrade_v1.0.0.exe&quot;</span>;<span class=\"comment\">//子程序exe对应主程序exe的相对路径</span></span><br><span class=\"line\">process.<span class=\"built_in\">startDetached</span>(str);<span class=\"comment\">//startDetached使执行文件与主程序分离，主程序关闭并不影响子程序的运行，start与之相反。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-数据库查询和写入操作\"><a href=\"#6-数据库查询和写入操作\" class=\"headerlink\" title=\"6. 数据库查询和写入操作\"></a>6. 数据库查询和写入操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QSqlQuery query;</span><br><span class=\"line\">QString s = <span class=\"built_in\">QString</span>(<span class=\"string\">&quot;select * from users where id=&#x27;%1&#x27;&quot;</span>).<span class=\"built_in\">arg</span>(id);<span class=\"comment\">//查询语句</span></span><br><span class=\"line\">QString s2 = <span class=\"built_in\">QString</span>(<span class=\"string\">&quot;INSERT INTO users (id,passwordMD5,`password`,name)VALUES (&#x27;%1&#x27;,&#x27;%2&#x27;,&#x27;%3&#x27;,&#x27;%4&#x27;)&quot;</span>).<span class=\"built_in\">arg</span>(user).<span class=\"built_in\">arg</span>(pwdMD5).<span class=\"built_in\">arg</span>(pwd).<span class=\"built_in\">arg</span>(name);<span class=\"comment\">//插入语句，此处按表中字段顺序插入对应值</span></span><br><span class=\"line\">query.<span class=\"built_in\">exec</span>(s);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!query.<span class=\"built_in\">first</span>())<span class=\"comment\">//如果查询不到</span></span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span><span class=\"comment\">//查询到了</span></span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//用query.value()函数等来访问查到的值</span></span><br><span class=\"line\"><span class=\"comment\">//注意一定要在query.first操作后访问query.value()的值，该操作的目的是让查询指针移动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-QThreadPool线程池的使用\"><a href=\"#7-QThreadPool线程池的使用\" class=\"headerlink\" title=\"7. QThreadPool线程池的使用\"></a>7. QThreadPool线程池的使用</h3><p>先创建一个继承QRunable和QObject的线程类，在类中定义一个public的void run()函数，然后在主线程创建类对象，用QThreadPool::globalInstance()调用类对象实现多线程,示例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread1 *thread = <span class=\"keyword\">new</span> thread1;</span><br><span class=\"line\">QThreadPool::<span class=\"built_in\">globalInstance</span>()-&gt;<span class=\"built_in\">start</span>(thread);</span><br><span class=\"line\"><span class=\"comment\">//.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QRunnable&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">thread1</span> : <span class=\"keyword\">public</span> QObject,<span class=\"keyword\">public</span> QRunnable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">thread1</span><span class=\"params\">(QObject *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">signals:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;m_thread.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;gamehall.h&quot;</span></span></span><br><span class=\"line\">thread1::<span class=\"built_in\">thread1</span>(QObject *parent)</span><br><span class=\"line\">    : QObject&#123;parent&#125;,<span class=\"built_in\">QRunnable</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread1::run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    GameHall* gamehall = <span class=\"keyword\">new</span> <span class=\"built_in\">GameHall</span>();</span><br><span class=\"line\">    gamehall-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\"><span class=\"comment\">//    connect(gamehall,&amp;GameHall::m_show,this,&amp;MainWindow::Show);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"2-Qt中一些好用的部件属性对应的qss代码：\"><a href=\"#2-Qt中一些好用的部件属性对应的qss代码：\" class=\"headerlink\" title=\"2. Qt中一些好用的部件属性对应的qss代码：\"></a><em>2. Qt中一些好用的部件属性对应的qss代码：</em></h2><h3 id=\"1-LineEdit部件：\"><a href=\"#1-LineEdit部件：\" class=\"headerlink\" title=\"1. LineEdit部件：\"></a>1. LineEdit部件：</h3><p>设置形成的是一个浅绿色圆角编辑框。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;lineEdit_1-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;font: 25 14pt &#x27;微软雅黑 Light&#x27;;&quot;</span> <span class=\"comment\">//字体</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;color: rgb(31,31,31);&quot;</span>\t\t<span class=\"comment\">//字体颜色</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;padding-left:20px;&quot;</span>       <span class=\"comment\">//内边距-字体缩进</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;background-color: rgb(255, 255, 255);&quot;</span> <span class=\"comment\">//背景颜色</span></span><br><span class=\"line\">                                  <span class=\"string\">&quot;border:2px solid rgb(20,196,188);border-radius:15px;&quot;</span>);<span class=\"comment\">//边框粗细-颜色-圆角</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-PushButton部件：\"><a href=\"#2-PushButton部件：\" class=\"headerlink\" title=\"2. PushButton部件：\"></a>2. PushButton部件：</h3><p>设置形成的是一个浅绿色按钮，鼠标悬浮或摁下有不同颜色</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;signup-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;QPushButton&#123;font: 25 14pt &#x27;微软雅黑 Light&#x27;;color: rgb(255,255,255);background-color: rgb(20,196,188);&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;border: none;border-radius:5px;&#125;&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;QPushButton:hover&#123;background-color: rgb(22,218,208);&#125;&quot;</span><span class=\"comment\">//hover</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;QPushButton:pressed&#123;background-color: rgb(17,171,164);&#125;&quot;</span>);<span class=\"comment\">//pressed</span></span><br></pre></td></tr></table></figure>\n\n<p>设置的是一个蓝白渐变色的按钮，鼠标悬浮有不同的颜色</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;signUp-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;QPushButton&#123;background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;stop:0.0112994 rgba(64, 145, 252, 255),stop:1 rgba(255, 255, 255, 255));&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;color: rgb(255, 255, 255);&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;border:0px groove gray;border-radius:7px;padding:2px 4px;&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;font: 10pt &#x27;Candara&#x27;;&#125;&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;QPushButton:hover&#123;background-color: qlineargradient(spread:pad, x1:0.52, y1:1, x2:0.54, y2:0,&quot;</span></span><br><span class=\"line\">                              <span class=\"string\">&quot;stop:0.0112994 rgba(66, 175, 255, 255),stop:1 rgba(255, 255, 255, 255))&#125;;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>设置是一个蔚蓝色的按钮，按动悬浮有不同颜色</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;pushButton-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;QPushButton&#123;background:qlineargradient(spread:pad,  x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;border-radius:8px;&quot;</span></span><br><span class=\"line\">       <span class=\"string\">&quot;border:2px solid rgb(0, 170, 255);&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;color:rgb(17,17,17);&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;QPushButton:hover&#123;background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.443091, y2:0.898, stop:0 rgba(0, 255, 255, 255), stop:1 rgba(255, 255, 255, 255))&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;QPushButton:hover:pressed&#123;background:qlineargradient(spread:pad, x1:0.460227, y1:0, x2:0.465818, y2:0.875, stop:0 rgba(170, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"3-遇到的一些问题：\"><a href=\"#3-遇到的一些问题：\" class=\"headerlink\" title=\"3. 遇到的一些问题：\"></a><em>3. 遇到的一些问题：</em></h2><ul>\n<li><p>2023&#x2F;5&#x2F;23-&gt;在Qt的两个窗口头文件中都调用了相同的一个头文件，然后报了multiple definition of ~的错，分析是因为两个函数重复定义了。</p>\n<p>解决办法是：新建了一个.cpp文件，然后将.h文件中全部内容转到cpp文件中，然后.h文件只包含函数的定义.</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;在注册成功窗口想要直接将注册窗口和本窗口同时关闭并且转到登录窗口时遇到了问题——如何在子窗口中通过按钮将父窗口也关闭。</p>\n<p>解决办法是：在父窗口调用子窗口前增加一个信号槽连接，信号由子窗口.h文件中定义并在按按钮之后发出，槽函数在父窗口中声明并实现，从而实现信号通过子窗口发出并在父窗口中做出关闭操作。</p>\n<p>核心代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        SignSucess *signsucess = <span class=\"keyword\">new</span> <span class=\"built_in\">SignSucess</span>();</span><br><span class=\"line\">        <span class=\"built_in\">connect</span>(signsucess,&amp;SignSucess::Close,<span class=\"keyword\">this</span>,&amp;LoginWindow::Close);</span><br><span class=\"line\">        signsucess-&gt;<span class=\"built_in\">exec</span>();</span><br><span class=\"line\"><span class=\"comment\">//Close()函数分别为子窗口和父窗口中自定义的信号和槽函数</span></span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;在写记住密码功能时，用到QSetting库，然后通过该库与本地ini文件交互，但是把ini文件放在源代码目录下则无法保存修改，查了网上的有关说法，利用sync()函数或者重构closeEvent函数(该函数在右上角关闭窗口时自动起作用)，或者在该窗口的析构函数中servalue，最终都没很好的解决我的问题。</p>\n<p>解决办法是：将init.ini文件放在exe程序目录下(撒花！)</p>\n<p>绝对路径可以这样在父类头文件窗口直接定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString inipath= QCoreApplication::<span class=\"built_in\">applicationDirPath</span>() + <span class=\"string\">&quot;/init.ini&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;Qt6编译生成的exe程序无法打开，显示缺少一些dll文件。</p>\n<p>解决办法是：打开编译器对应的命令行，这里对应的是MinGW64（已加入环境变量），先新建一个文件夹，将exe程序单独放进去，然后”cd [exe程序所在文件夹的路径]”，输入<code>windeployqt exe文件名</code>，例如<code>windeployqt TeamProject.exe</code>。</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;24-&gt;Qt6打包生成exe文件后，打开exe程序不能连接数据库的问题。</p>\n<p>解决办法是：在编译器(这里对应的是MinGW64)对应的bin目录下找到libmysql.dll文件，复制到exe程序的同级目录下即可。</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;25-&gt;Qt6打包生成的exe文件在远端虚拟机上无法连接数据库成功的问题。</p>\n<p>解决办法是：在Mysql文件夹的MysqlServer文件bin中所有文件转移到exe文件同级目录下</p>\n</li>\n<li><p>2023&#x2F;5&#x2F;25-&gt;Qt6打包生成的exe文件在远端虚拟机上连接上了数据库，但是远端正常机上连不上</p>\n<p>解决办法是：把代码中 <code>database.setHostName(&quot;192.168.123.120&quot;);</code>ip地址设置为无线局域网适配器 WLAN的IPv4地址（本机ip地址）。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;10-&gt;QMovie播放gif时，想要使得同一个label通过按钮切换gif时出现gif暂停不切换的情况</p>\n<p>解决办法是：在gif切换时movie-&gt;start()，前加入movie-&gt;stop()。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;11-&gt;在提升控件类时，运行出现无法找到头文件的情况</p>\n<p>解决办法是：在cmake.txt文件中加入 <code>INCLUDE_DIRECTORIES($&#123;PROJECT_SOURCE_DIR&#125;)</code>运行报错点击“忽略错误”。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;11-&gt;QToolButton重写鼠标进入事件 <code>void HallBtn::enterEvent(QEnterEvent *event)</code></p>\n</li>\n<li><p>2023&#x2F;6&#x2F;14-&gt;连接阿里云数据库后，查询表时navicate报“lost connection …during query”错误</p>\n<p>解决办法是：换校园网。。</p>\n</li>\n<li><p>2023&#x2F;6&#x2F;24-&gt;实现邮箱辅助账号注册时，引用QTcpSocket时报错 <code>QTcpSocket file not found</code> </p>\n<p>解决办法是：CMakeList.txt中添加 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find_package</span>(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Network)</span><br><span class=\"line\"><span class=\"built_in\">find_package</span>(Qt$&#123;QT_VERSION_MAJOR&#125; REQUIRED Network COMPONENTS Core)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>(TeamProject PRIVATE Qt$&#123;QT_VERSION_MAJOR&#125;::Core)</span><br><span class=\"line\"><span class=\"built_in\">target_link_libraries</span>(TeamProject PRIVATE Qt6::Network)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"4-Windows编程：\"><a href=\"#4-Windows编程：\" class=\"headerlink\" title=\"4. Windows编程：\"></a><em>4. Windows编程：</em></h2><ul>\n<li><p><code>LPCVOID</code>是一个Windows API数据类型，它是一个指向常量（只读）void的指针。在Windows API中，<code>LPCVOID</code>通常用于指向要<strong>读取</strong>的数据的缓冲区</p>\n</li>\n<li><p><code>LPVOID</code>是一个Windows API数据类型，它是一个指向void的指针。在Windows API中，<code>LPVOID</code>通常用于指向要<strong>读取或写入</strong>的数据的缓冲区</p>\n</li>\n<li><p><code>ReadProcessMemory</code>函数是Windows API的一部分，它允许一个进程读取另一个进程的内存区域。该函数的语法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">ReadProcessMemory</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HANDLE  hProcess,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCVOID lpBaseAddress,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPVOID  lpBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  nSize,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  *lpNumberOfBytesRead</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>hProcess</code>参数是要读取内存的进程的句柄，<code>lpBaseAddress</code>参数是要读取的内存地址（<strong>读取目标地址</strong>），<code>lpBuffer</code>参数是用于存储读取数据的缓冲区（<strong>保存读取结果</strong>），<code>nSize</code>参数是要读取的字节数，<code>lpNumberOfBytesRead</code>参数是指向变量的指针（<strong>没有用到则填NULL</strong>），该变量将接收实际读取的字节数。</p>\n</li>\n<li><p><code>WriteProcessMemory</code>函数是Windows API的一部分，它允许一个进程向另一个进程的内存区域写入数据。该函数的语法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">WriteProcessMemory</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HANDLE  hProcess,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPVOID  lpBaseAddress,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCVOID lpBuffer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  nSize,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  SIZE_T  *lpNumberOfBytesWritten</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>hProcess</code>参数是要读取内存的进程的句柄，<code>lpBaseAddress</code>参数是要读取的内存地址（<strong>读取目标地址</strong>），<code>lpBuffer</code>参数是用于存储读取数据的缓冲区（<strong>保存读取结果</strong>），<code>nSize</code>参数是要读取的字节数，<code>lpNumberOfBytesWritten</code>参数是指向变量的指针（<strong>没有用到则填NULL</strong>），该变量将接收实际读取的字节数。</p>\n</li>\n<li><p>获得指定进程PID的方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">MainWindow::getProcessId</span><span class=\"params\">(<span class=\"type\">const</span> QString&amp; processName)</span><span class=\"comment\">//获取进程PID</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PROCESSENTRY32 entry;</span><br><span class=\"line\">    entry.dwSize = <span class=\"built_in\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">    HANDLE snapshot = <span class=\"built_in\">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Process32First</span>(snapshot, &amp;entry))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (QString::<span class=\"built_in\">fromWCharArray</span>(entry.szExeFile) == processName)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">CloseHandle</span>(snapshot);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> entry.th32ProcessID;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (<span class=\"built_in\">Process32Next</span>(snapshot, &amp;entry));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">CloseHandle</span>(snapshot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用法：DWORD pid&#x3D;getProcessId(processname);</p>\n</li>\n<li><p>获取进程的总基地址的方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PVOID <span class=\"title\">MainWindow::GetProcessBase</span><span class=\"params\">(DWORD dwProcessId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PVOID pProcessImageBase = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">//打开进程, 获取进程句柄</span></span><br><span class=\"line\">    HANDLE hProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == hProcess)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pProcessImageBase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历进程模块,</span></span><br><span class=\"line\">    HMODULE hModule[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    DWORD dwRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">    BOOL bRet;</span><br><span class=\"line\">    bRet = <span class=\"built_in\">EnumProcessModulesEx</span>(hProcess, (HMODULE*)(hModule), <span class=\"built_in\">sizeof</span>(hModule), &amp;dwRet, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (FALSE == bRet)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pProcessImageBase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个模块加载基址</span></span><br><span class=\"line\">    pProcessImageBase = hModule[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 关闭句柄</span></span><br><span class=\"line\">    <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pProcessImageBase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法：long long baseAddress &#x3D; (long long)GetProcessBase(Pid)&#x2F;&#x2F;进程对应PID</p>\n</li>\n<li><p>获取进程句柄：<code>HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-C-语法：\"><a href=\"#5-C-语法：\" class=\"headerlink\" title=\"5. C++语法：\"></a><em>5. C++语法：</em></h2><h3 id=\"1-虚继承\"><a href=\"#1-虚继承\" class=\"headerlink\" title=\"1. 虚继承\"></a>1. 虚继承</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//虚继承：对类的继承内存存储方式进行了改变</span></span><br><span class=\"line\"><span class=\"comment\">//从原先的拷贝复制的方式变成了在子类内部空间增加了一个地址，</span></span><br><span class=\"line\"><span class=\"comment\">// 该地址指向了一些偏移量，通过指针去访问地址+偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//从而锁定子类从父类那继承来的对象地址，解决了多重继承导致的父类对象重复引起子类访问时目标对象不明确的问题</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagA;</span><br><span class=\"line\">    <span class=\"type\">int</span> test;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test = <span class=\"number\">0x666666</span>;</span><br><span class=\"line\">        flagA = <span class=\"number\">0x111111</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> :<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagB;</span><br><span class=\"line\">    <span class=\"built_in\">B</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flagB = <span class=\"number\">0X222222</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> :<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagC;</span><br><span class=\"line\">    <span class=\"built_in\">C</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flagC = <span class=\"number\">0x3333333</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> :<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> B,<span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> C</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> flagD;</span><br><span class=\"line\">    <span class=\"built_in\">D</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flagD = <span class=\"number\">0x444444</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    C c;</span><br><span class=\"line\">    D d;</span><br><span class=\"line\">    d.flagA = <span class=\"number\">0x5555555</span>;</span><br><span class=\"line\">    <span class=\"comment\">//d.C::value = 1;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(d));</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-友元函数\"><a href=\"#2-友元函数\" class=\"headerlink\" title=\"2. 友元函数\"></a>2. 友元函数</h3><p>在类内声明友元函数，关键词 <code>friend</code> ，从而使类外定义的非成员函数可以访问该类的私有成员</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//友元函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Student</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name);</span><br><span class=\"line\">\t~<span class=\"built_in\">Student</span>();</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">printName</span><span class=\"params\">(Student &amp;stu)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Student::<span class=\"built_in\">Student</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy_s</span>(<span class=\"keyword\">this</span>-&gt;name, <span class=\"number\">20</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student::~<span class=\"built_in\">Student</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printName</span><span class=\"params\">(Student &amp;stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; stu.name &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Student <span class=\"title\">stu</span><span class=\"params\">(<span class=\"string\">&quot;I am Kvancy&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printName</span>(stu);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-重载运算符\"><a href=\"#3-重载运算符\" class=\"headerlink\" title=\"3. 重载运算符\"></a>3. 重载运算符</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//重载运算符</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::ostream;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name);</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">get_name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> A <span class=\"keyword\">operator</span>+(A&amp; a1, A&amp; a2);</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, A&amp; a1);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">char</span>* name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">A::<span class=\"built_in\">A</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;name = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(name) + <span class=\"number\">1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy_s</span>(<span class=\"keyword\">this</span>-&gt;name, <span class=\"built_in\">strlen</span>(name) + <span class=\"number\">1</span>, name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(<span class=\"keyword\">this</span>-&gt;name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::printName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"keyword\">this</span>-&gt;name &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">A::get_name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A <span class=\"keyword\">operator</span>+(A &amp;a1, A &amp;a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\">A <span class=\"title\">a3</span><span class=\"params\">(<span class=\"string\">&quot;&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* buff = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(a<span class=\"number\">1.</span>name) + <span class=\"built_in\">strlen</span>(a<span class=\"number\">2.</span>name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (buff = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(len + <span class=\"number\">1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy_s</span>(buff, len + <span class=\"number\">1</span>, a<span class=\"number\">1.</span>name);</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcat_s</span>(buff, len + <span class=\"number\">1</span>, a<span class=\"number\">2.</span>name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta<span class=\"number\">3.</span>name = buff;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, A &amp;a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tos &lt;&lt; a<span class=\"number\">1.</span>name;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">A <span class=\"title\">a1</span><span class=\"params\">(<span class=\"string\">&quot;我是A1&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">A <span class=\"title\">a2</span><span class=\"params\">(<span class=\"string\">&quot;我是A2&quot;</span>)</span></span>;</span><br><span class=\"line\">\tA a3 = a1 + a2;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a3 &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-虚函数\"><a href=\"#4-虚函数\" class=\"headerlink\" title=\"4. 虚函数\"></a>4. 虚函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//子类重写函数之后，如果定义的父类对象想调用子类重写的函数</span></span><br><span class=\"line\"><span class=\"comment\">//这个时候如果直接用父类对象的指针指向子类对象，然后调用子类重写的函数</span></span><br><span class=\"line\"><span class=\"comment\">//这个时候成功调用</span></span><br><span class=\"line\"><span class=\"comment\">//如果我们把该父类成员函数定义成虚函数，我们可以通过改变指针指向调用子类重写的函数</span></span><br><span class=\"line\"><span class=\"comment\">//编译从静态联编-&gt;动态联编</span></span><br><span class=\"line\"><span class=\"comment\">//内存中创造了虚函数表，我们可以通过父类的指针指向正确调用函数地址，从而实现调用</span></span><br><span class=\"line\"><span class=\"comment\">//virtual 关键词父类定义了子类就无需定义</span></span><br><span class=\"line\"><span class=\"comment\">//override 关键词可以避免因函数签名不一致而导致的错误，提前帮你报错显示提醒你</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Animal</span>();</span><br><span class=\"line\">\t~<span class=\"built_in\">Animal</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">make_sound</span> <span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Animal:make\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::~<span class=\"built_in\">Animal</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bird</span>:<span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Bird</span>();</span><br><span class=\"line\">\t~<span class=\"built_in\">Bird</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make_sound</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">//如果不加override,忘写了const关键字</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">//编译器正常编译,父类没有成功调用子类函数，打印出&quot;Animal:make&quot;</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Bird:make\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Bird::<span class=\"built_in\">Bird</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Bird::~<span class=\"built_in\">Bird</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAnimal* animal = <span class=\"keyword\">new</span> <span class=\"built_in\">Animal</span>();</span><br><span class=\"line\">\tBird bird;</span><br><span class=\"line\">\tanimal = &amp;bird;</span><br><span class=\"line\">\tanimal-&gt;<span class=\"built_in\">make_sound</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> animal;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-模版\"><a href=\"#5-模版\" class=\"headerlink\" title=\"5. 模版\"></a>5. 模版</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//模版函数&#123;函数模版，类模版&#125;关键词typename或者class随意，在底层中无影响，编译器在编译的时候替换</span></span><br><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T a, T b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种,参数类型不相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T &amp;a,T2 &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\tT  c;</span><br><span class=\"line\">\tc = b;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">\ta = c;</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//第三种，类模版</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">getValue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T va)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>(T value);</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//模板类是带参数的类，要求在接口实现中的类名称后面加入模板类参数，函数返回值亦如此</span></span><br><span class=\"line\"><span class=\"comment\">//格式举例如下</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">A&lt;T&gt;::<span class=\"built_in\">A</span>(T value)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;value = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">A&lt;T&gt;::~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> A&lt;T&gt;::<span class=\"built_in\">setValue</span>(T va)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tvalue = va;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第一种:%d\\n&quot;</span>,<span class=\"built_in\">sum</span>(a, b));</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第二种：a:%d,b:%d\\n&quot;</span>, a, b);</span><br><span class=\"line\">\t<span class=\"function\">A&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">c</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\tc.<span class=\"built_in\">setValue</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第三种：%d\\n&quot;</span>, c.<span class=\"built_in\">getValue</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-异常处理\"><a href=\"#6-异常处理\" class=\"headerlink\" title=\"6. 异常处理\"></a>6. 异常处理</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//C++异常处理机制</span></span><br><span class=\"line\"><span class=\"comment\">//throw，try,catch</span></span><br><span class=\"line\"><span class=\"comment\">//在汇编代码中没有try catch，throw函数，正常运行异常代码，然后再一个jmp指令到某一个地址（实际上catch函数）里执行相应功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"type\">double</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"number\">2</span>;<span class=\"comment\">//这里throw什么类型，就是catch里面参数类型</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a/b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fun</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*catch (int judge)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif(judge==1)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;异常\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif(judge==2)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;异常2\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (...)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;我是万能的！\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>perror(char*) 显示报错信息,例如 <code>perror(&quot;wrong!:&quot;)</code> 打印出 “wrong!:+为什么报错”</p>\n</blockquote>\n<hr>\n<h2 id=\"6-C-算法\"><a href=\"#6-C-算法\" class=\"headerlink\" title=\"6. C++算法\"></a><em>6. C++算法</em></h2><h3 id=\"1-数组-or-容器的遍历算法-auto-for-each-transform\"><a href=\"#1-数组-or-容器的遍历算法-auto-for-each-transform\" class=\"headerlink\" title=\"1. 数组 or 容器的遍历算法 auto,for_each,transform\"></a>1. 数组 or 容器的遍历算法 <code>auto,for_each,transform</code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;ve;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; out &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//仿函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">print2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; out &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trans</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ++out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历输出的几种方式</span></span><br><span class=\"line\">\tve = &#123; <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> in[<span class=\"number\">6</span>] = &#123; <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//正常容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : in)cout &lt;&lt; it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tfor_each(in, in + <span class=\"number\">6</span>, visit);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//stl容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : ve)&#123;cout &lt;&lt; it&lt;&lt;<span class=\"string\">&quot; &quot;</span>;&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tfor_each(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), visit);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tfor_each(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">print2</span>());<span class=\"comment\">//仿函数输出结果</span></span><br><span class=\"line\">\t<span class=\"comment\">//transform搬运容器</span></span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;ve2;</span><br><span class=\"line\">\t<span class=\"comment\">//提前分配内衬</span></span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">resize</span>(ve.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">transform</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), <span class=\"built_in\">trans</span>());<span class=\"comment\">//把ve内的值可运算性的搬运到ve2中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : ve2)cout &lt;&lt; it &lt;&lt; <span class=\"string\">&quot; &quot;</span> ;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-查找算法-find-find-if-count-count-if-binary-serach\"><a href=\"#2-查找算法-find-find-if-count-count-if-binary-serach\" class=\"headerlink\" title=\"2. 查找算法  find,find_if,count,count_if,binary_serach\"></a>2. 查找算法  <code>find,find_if,count,count_if,binary_serach</code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;ve;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> Person&amp; person1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> person<span class=\"number\">1.</span>name == <span class=\"keyword\">this</span>-&gt;name &amp;&amp; person<span class=\"number\">1.</span>age == <span class=\"keyword\">this</span>-&gt;age;<span class=\"comment\">//注意利用this指针，不能传两个参数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">equal1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">const</span> Person &amp;person1)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> person<span class=\"number\">1.</span>name == <span class=\"string\">&quot;p2&quot;</span> &amp;&amp; person<span class=\"number\">1.</span>age == <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">equal2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> out &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">count_cmp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> out &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//常用查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//find函数，在algorithm头文件中，find重心在相等</span></span><br><span class=\"line\">\tve = &#123; <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it = <span class=\"built_in\">find</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(),<span class=\"number\">5</span>);</span><br><span class=\"line\">\tcout &lt;&lt; *it &lt;&lt; endl;<span class=\"comment\">//返回找到的位置</span></span><br><span class=\"line\">\tPerson person1 = &#123; <span class=\"string\">&quot;p1&quot;</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tPerson person2 = &#123; <span class=\"string\">&quot;p2&quot;</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tPerson person3 = &#123; <span class=\"string\">&quot;p1&quot;</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tvector&lt;Person&gt;ve2;</span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(person1);</span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(person2);</span><br><span class=\"line\">\tve<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(person3);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it2 = <span class=\"built_in\">find</span>(ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(),person2 );<span class=\"comment\">//要重载==运算符</span></span><br><span class=\"line\">\tcout &lt;&lt;it2-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it2-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">/**********************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//find_if语法，find_if重心在比较</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it3 = <span class=\"built_in\">find_if</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">equal2</span>());<span class=\"comment\">//找到大于5的第一个数</span></span><br><span class=\"line\">\tcout &lt;&lt; *it3 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it4 = <span class=\"built_in\">find_if</span>(ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), <span class=\"built_in\">equal1</span>());<span class=\"comment\">//自定义类需定义仿函数声明返回标准</span></span><br><span class=\"line\">\tcout &lt;&lt; it4-&gt;name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; it4-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">/**********************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//binary_search语法,重心在存在与否,使用条件是查找容器已排序，该查找效率为指数级</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it5 = <span class=\"built_in\">binary_search</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">7</span>);<span class=\"comment\">//返回值其实是bool类型</span></span><br><span class=\"line\">\tcout &lt;&lt; it5 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it6 = <span class=\"built_in\">binary_search</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">8</span>);</span><br><span class=\"line\">\tcout &lt;&lt; it6 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">/***********************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//count语法，用于统计数据，返回某个元素在容器内的个数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> cnt = <span class=\"built_in\">count</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">2</span>);</span><br><span class=\"line\">\tcout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//统计类的数据时，要重载==运算符</span></span><br><span class=\"line\">\t<span class=\"comment\">//count_if语法，返回容器内数据条件判断后的个数</span></span><br><span class=\"line\">\tcnt = <span class=\"built_in\">count_if</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">count_cmp</span>());</span><br><span class=\"line\">\tcout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//统计类的数据，要用bool型仿函数去定义比较条件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-排序算法-sort-rand-shuffle-merge-reverse\"><a href=\"#3-排序算法-sort-rand-shuffle-merge-reverse\" class=\"headerlink\" title=\"3. 排序算法 sort,rand_shuffle,merge,reverse\"></a>3. 排序算法 <code>sort,rand_shuffle,merge,reverse</code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>());<span class=\"comment\">//默认升序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());<span class=\"comment\">//降序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), cmpl);<span class=\"comment\">//自定义降序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">random_shuffle</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//到此每次运行实际上结果一致，使用srand生成随机数</span></span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">random_shuffle</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//结果每次运行都不同了</span></span><br><span class=\"line\">\t<span class=\"comment\">/**********************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//merge函数，使两个有序的容器合并成一个容器，并且新的容器也是有序的</span></span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">1.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">1.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//ve2为新的容器</span></span><br><span class=\"line\">\t<span class=\"comment\">/**************************************/</span></span><br><span class=\"line\">\t<span class=\"comment\">//reverse函数，翻转函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">/**************************************/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-拷贝替换算法-copy-replace-replace-if\"><a href=\"#4-拷贝替换算法-copy-replace-replace-if\" class=\"headerlink\" title=\"4. 拷贝替换算法 copy replace replace_if \"></a>4. 拷贝替换算法 <code>copy replace replace_if </code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">copy</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//把ve的值copy到ve2中，要提前开辟空间</span></span><br><span class=\"line\"><span class=\"built_in\">replace</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>, <span class=\"number\">5</span>);<span class=\"comment\">//把ve中0替换成5</span></span><br><span class=\"line\"><span class=\"built_in\">replace_if</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), cmp, <span class=\"number\">5</span>);<span class=\"comment\">//把ve中小于5的替换成5</span></span><br><span class=\"line\"><span class=\"built_in\">swap</span>(ve, ve2);<span class=\"comment\">//把ve，ve2容器中数据继续互换</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-常用集合算法-set-intersection-set-union-set-difference\"><a href=\"#5-常用集合算法-set-intersection-set-union-set-difference\" class=\"headerlink\" title=\"5. 常用集合算法 set_intersection set_union set_difference   \"></a>5. 常用集合算法 <code>set_intersection set_union set_difference   </code></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it2 = <span class=\"built_in\">set_intersection</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">3.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//求v1,v2的交集，保存到v3，返回值为交集结束的迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it3 = <span class=\"built_in\">set_union</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">3.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//求v1,v2的并集，保存到v3，返回值为并集结束的迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it4 = <span class=\"built_in\">set_difference</span>(ve.<span class=\"built_in\">begin</span>(), ve.<span class=\"built_in\">end</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">begin</span>(), ve<span class=\"number\">2.</span><span class=\"built_in\">end</span>(), ve<span class=\"number\">3.</span><span class=\"built_in\">begin</span>());<span class=\"comment\">//求v1,v2的差集---属于v1，不属于v2的集合</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"7-运算符优先顺序：\"><a href=\"#7-运算符优先顺序：\" class=\"headerlink\" title=\"7.  运算符优先顺序：\"></a><em>7.  运算符优先顺序：</em></h2><table>\n<thead>\n<tr>\n<th>运算符由高到低：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>第一级：圆括号 ()、下标运算符 []、结构体成员运算符 . 和 -&gt;</td>\n</tr>\n<tr>\n<td>第二级：逻辑非 !、按位取反 ~、自增自减 ++ 和 –、负号 -、类型转换 (类型)、指针运算符 * 和 &amp;、长度运算符 sizeof</td>\n</tr>\n<tr>\n<td>第三级：乘法运算符 *、&#x2F; 和 %</td>\n</tr>\n<tr>\n<td>第四级：加法运算符 + 和 -</td>\n</tr>\n<tr>\n<td>第五级：移位运算符 &lt;&lt; 和 &gt;&gt;</td>\n</tr>\n<tr>\n<td>第六级：关系运算符 &lt;、&lt;&#x3D;、&gt; 和 &gt;&#x3D;</td>\n</tr>\n<tr>\n<td>第七级：相等运算符 &#x3D;&#x3D; 和 !&#x3D;</td>\n</tr>\n<tr>\n<td>第八级：按位与 &amp;</td>\n</tr>\n<tr>\n<td>第九级：按位异或 ^</td>\n</tr>\n<tr>\n<td>第十级：按位或</td>\n</tr>\n<tr>\n<td>第十二级：逻辑或</td>\n</tr>\n<tr>\n<td>第十四级：赋值运算符 &#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&amp;&#x3D;、^&#x3D;、</td>\n</tr>\n<tr>\n<td>第十五级：逗号运算符 ,</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"8-MFC\"><a href=\"#8-MFC\" class=\"headerlink\" title=\"8. MFC\"></a>8. MFC</h2><p>通过空项目创建</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mfc.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//设置 链接器-系统-窗口</span></span><br><span class=\"line\"><span class=\"comment\">//设置 在高级里 在共享 DLL 中使用 MFC</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Myapp</span>:<span class=\"keyword\">public</span> CWinApp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span></span>;<span class=\"comment\">//mfc程序入口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyFrame</span>:<span class=\"keyword\">public</span> CFrameWnd</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyFrame</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//~MyFrame();</span></span><br><span class=\"line\">\t<span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnLButtonDown</span><span class=\"params\">(UINT, CPoint point)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DECLARE_MESSAGE_MAP</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mfc.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&quot;mfc.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Myapp app;<span class=\"comment\">//全局应用程序对象</span></span><br><span class=\"line\"><span class=\"comment\">//MyFrame* m_pMainwnd = new MyFrame;</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">Myapp::InitInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyFrame* frame = <span class=\"keyword\">new</span> MyFrame;</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOWNORMAL);</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//保存程序指针,否则窗口一闪而过,</span></span><br><span class=\"line\">\tm_pMainWnd = frame;<span class=\"comment\">//m_pMainWnd线程类的一个成员</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(MyFrame, CFrameWnd)</span><br><span class=\"line\">\t<span class=\"built_in\">ON_WM_LBUTTONDOWN</span>()</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">MyFrame::<span class=\"built_in\">MyFrame</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Create</span>(<span class=\"literal\">NULL</span>, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;Crackk&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">MyFrame::OnLButtonDown</span><span class=\"params\">(UINT, CPoint point)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTCHAR buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">wsprintf</span>(buf, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;X = %d,Y = %d&quot;</span>), point.x, point.y);</span><br><span class=\"line\">\t<span class=\"built_in\">MessageBoxW</span>(buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过MFC应用程序模版创建–基于对话框</p>\n<p>在app的子类里有首界面的创建</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMFC2Dlg dlg;</span><br><span class=\"line\">m_pMainWnd = &amp;dlg;<span class=\"comment\">//第一个显示的界面</span></span><br><span class=\"line\"><span class=\"comment\">//First dlg;</span></span><br><span class=\"line\"><span class=\"comment\">//m_pMainWnd = &amp;dlg;//第一个显示的界面</span></span><br><span class=\"line\">INT_PTR nResponse = dlg.<span class=\"built_in\">DoModal</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nResponse == IDOK)</span><br></pre></td></tr></table></figure>\n\n<p>如果要修改首界面可以添加界面类(先创建资源,再创建类)</p>\n<p>但是新界面没有最小化和最大化和拖拽功能</p>\n<p>如果想要在界面类里访问其他控件,例如staticText类,需要在ui界面添加变量,然后就可以通过名称来访问该控件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMFC2Dlg::OnBnClickedClick</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#123;    <span class=\"comment\">//hint为staticText的名称</span></span><br><span class=\"line\">\t\thint.<span class=\"built_in\">SetWindowTextW</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;flag&#123;1111&#125;&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里代码块实际做的操作有两处</p>\n<p>第一处:在父界面类的头文件中包含该控件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CStatic hint;</span><br></pre></td></tr></table></figure>\n\n<p>第二处:在父界面类的源文件中DoDataExchange函数里添加控件关联</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">DDX_Control</span>(pDX, IDC_HINT, hint);<span class=\"comment\">//p_DX是传来的参数,后者是相关联控件id和名称</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>给按钮添加事件处理程序时,代码层实际修改了三处代码</p>\n<p>所属界面类的头文件中包含该事件处理函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnBnClickedClick</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnBnClickedDClick</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>在源文件消息队列声明(BEGIN_MESSAGE_MAP)后添加消息声明</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ON_BN_CLICKED</span>(IDC_Click, &amp;CMFC2Dlg::OnBnClickedClick)<span class=\"comment\">//id和处理函数指针</span></span><br><span class=\"line\"><span class=\"built_in\">ON_BN_CLICKED</span>(IDC_DClick, &amp;CMFC2Dlg::OnBnClickedDClick)</span><br></pre></td></tr></table></figure>\n\n<p>在源文件中添加处理函数的实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMFC2Dlg::OnBnClickedClick</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thint.<span class=\"built_in\">SetWindowTextW</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;flag&#123;1111&#125;&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMFC2Dlg::OnBnClickedDClick</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">\thint.<span class=\"built_in\">SetWindowTextW</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;you are so smart!!&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如何格式化SetwindowTextW的参数TEXT,参数为CSting形式,等于LPCTSTR(),TEXT(),_T(),可以用Format来格式化text</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CString text;</span><br><span class=\"line\">text.<span class=\"built_in\">Format</span>(_T(<span class=\"string\">&quot;gogogogo!%d&quot;</span>), count);</span><br><span class=\"line\">hint.<span class=\"built_in\">SetWindowTextW</span>(text);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-QML\"><a href=\"#9-QML\" class=\"headerlink\" title=\"9. QML\"></a>9. QML</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">QtQuick</span> <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">QtQuick</span>.<span class=\"property\">Window</span> <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">QtQuick</span>.<span class=\"property\">Controls</span></span><br><span class=\"line\"><span class=\"title class_\">Window</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: <span class=\"number\">640</span></span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">480</span></span><br><span class=\"line\">    <span class=\"attr\">visible</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"title function_\">qsTr</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    property int <span class=\"attr\">myvalue</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">minimumHeight</span>: <span class=\"number\">400</span></span><br><span class=\"line\">    <span class=\"attr\">maximumHeight</span>: <span class=\"number\">540</span></span><br><span class=\"line\">    <span class=\"attr\">minimumWidth</span>: <span class=\"number\">540</span></span><br><span class=\"line\">    <span class=\"attr\">maximumWidth</span>: <span class=\"number\">720</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">onWidthChanged</span>: &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;width:&quot;</span>,width);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">onMyvalueChanged</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myvalue:&quot;</span>,myvalue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Button</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: btn1</span><br><span class=\"line\">        <span class=\"attr\">objectName</span>: <span class=\"string\">&quot;btn1&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"title class_\">Rectangle</span>&#123;</span><br><span class=\"line\">            border.<span class=\"property\">color</span>: btn1.<span class=\"property\">focus</span>?<span class=\"string\">&quot;blue&quot;</span>:<span class=\"string\">&quot;black&quot;</span><span class=\"comment\">//按钮按下获得焦点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Keys</span>.<span class=\"property\">onLeftPressed</span>: &#123;<span class=\"comment\">//方向键左按下</span></span><br><span class=\"line\">            btn1.<span class=\"property\">focus</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Button</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: btn2</span><br><span class=\"line\">        <span class=\"attr\">objectName</span>: <span class=\"string\">&quot;btn2&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"title class_\">Rectangle</span>&#123;</span><br><span class=\"line\">            border.<span class=\"property\">color</span>: btn2.<span class=\"property\">focus</span>?<span class=\"string\">&quot;blue&quot;</span>:<span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Keys</span>.<span class=\"property\">onLeftPressed</span>: &#123;<span class=\"comment\">//方向键左按下</span></span><br><span class=\"line\">            btn2.<span class=\"property\">focus</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">onActiveFocusItemChanged</span>: &#123; <span class=\"comment\">//焦点发生改变时</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;active focus item changed:&quot;</span>,activeFocusItem)<span class=\"comment\">//objectName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Rectangle</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">z</span>: <span class=\"number\">2</span><span class=\"comment\">//可以在2d中进行覆盖或者隐藏</span></span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">focus</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">            anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">            <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;on clicked&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Keys</span>.<span class=\"property\">onReturnPressed</span>: &#123;<span class=\"comment\">//控件获取键盘信号前需要获取焦点</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;on return pressed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">       <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">id</span>: rect1</span><br><span class=\"line\">           <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">           <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//           anchors.centerIn: parent//水平垂直居中</span></span><br><span class=\"line\">           anchors.<span class=\"property\">horizontalCenter</span>: parent.<span class=\"property\">horizontalCenter</span><span class=\"comment\">//水平居中</span></span><br><span class=\"line\">           anchors.<span class=\"property\">verticalCenter</span>: parent.<span class=\"property\">verticalCenter</span><span class=\"comment\">//垂直居中</span></span><br><span class=\"line\">           <span class=\"attr\">rotation</span>: <span class=\"number\">60</span> <span class=\"comment\">//旋转角度</span></span><br><span class=\"line\">           <span class=\"attr\">scale</span>: <span class=\"number\">2</span> <span class=\"comment\">//放缩,放大两倍</span></span><br><span class=\"line\">           <span class=\"attr\">antialiasing</span>: <span class=\"literal\">false</span> <span class=\"comment\">//抗锯齿</span></span><br><span class=\"line\">           border.<span class=\"property\">width</span>: <span class=\"number\">2</span> <span class=\"comment\">//边框</span></span><br><span class=\"line\">           border.<span class=\"property\">color</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">           <span class=\"attr\">radius</span>: <span class=\"number\">30</span> <span class=\"comment\">//弧度</span></span><br><span class=\"line\">           <span class=\"attr\">gradient</span>: <span class=\"title class_\">Gradient</span> &#123;<span class=\"comment\">//渐变色 覆盖原有颜色 边框颜色不覆盖</span></span><br><span class=\"line\">               <span class=\"title class_\">GradientStop</span> &#123; <span class=\"attr\">position</span>: <span class=\"number\">0.0</span>; <span class=\"attr\">color</span>: <span class=\"string\">&quot;lights teelblue&quot;</span> &#125;</span><br><span class=\"line\">               <span class=\"title class_\">GradientStop</span> &#123; <span class=\"attr\">position</span>: <span class=\"number\">1.0</span>; <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span>&#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">id</span>: rect2</span><br><span class=\"line\">           <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">           anchors.<span class=\"property\">left</span>: rect1.<span class=\"property\">right</span><span class=\"comment\">//类似弹簧,rect1左边与rect1右边重合</span></span><br><span class=\"line\">           anchors.<span class=\"property\">leftMargin</span>: <span class=\"number\">20</span><span class=\"comment\">//与rect1左侧相距20</span></span><br><span class=\"line\">           anchors.<span class=\"property\">top</span>: rect1.<span class=\"property\">top</span><span class=\"comment\">//y轴距离相同</span></span><br><span class=\"line\">           <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: root</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span>; <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">state</span>: <span class=\"string\">&quot;red_color&quot;</span> <span class=\"comment\">//控制状态</span></span><br><span class=\"line\">        <span class=\"attr\">states</span>: [</span><br><span class=\"line\">            <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&quot;red_color&quot;</span></span><br><span class=\"line\">                <span class=\"title class_\">PropertyChanges</span> &#123; root.<span class=\"property\">color</span>: <span class=\"string\">&quot;red&quot;</span> &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\">                <span class=\"title class_\">PropertyChanges</span> &#123; root.<span class=\"property\">color</span>: <span class=\"string\">&quot;blue&quot;</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">            anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">            <span class=\"attr\">onPressed</span>: &#123;</span><br><span class=\"line\">                root.<span class=\"property\">state</span> = <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onReleased</span>: &#123;</span><br><span class=\"line\">                root.<span class=\"property\">state</span> = <span class=\"string\">&quot;red_color&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">transitions</span>: [<span class=\"comment\">//状态改变时进行动画,而不是瞬间完成状态改变</span></span><br><span class=\"line\">            <span class=\"title class_\">Transition</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">from</span>: <span class=\"string\">&quot;red_color&quot;</span><span class=\"comment\">//状态</span></span><br><span class=\"line\">                <span class=\"attr\">to</span>: <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">target</span>: root</span><br><span class=\"line\">                    <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title class_\">Transition</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">from</span>: <span class=\"string\">&quot;blue_color&quot;</span></span><br><span class=\"line\">                <span class=\"attr\">to</span>: <span class=\"string\">&quot;red_color&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">target</span>: root</span><br><span class=\"line\">                    <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">           <span class=\"attr\">id</span>: flashingblob</span><br><span class=\"line\">           <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">           <span class=\"attr\">opacity</span>: <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">SequentialAnimation</span> on color &#123;<span class=\"comment\">//多段式动画</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                   from: &quot;white&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">to</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">duration</span>: <span class=\"number\">200</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"title class_\">ColorAnimation</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                   from: &quot;white&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">to</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">                   <span class=\"attr\">duration</span>: <span class=\"number\">200</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">               anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">               <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                   animateColor.<span class=\"title function_\">start</span>()</span><br><span class=\"line\">                   animateOpacity.<span class=\"title function_\">start</span>()</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">PropertyAnimation</span> &#123; <span class=\"comment\">//属性为字符串的动画</span></span><br><span class=\"line\">               <span class=\"attr\">id</span>: animateColor;</span><br><span class=\"line\">               <span class=\"attr\">target</span>: flashingblob</span><br><span class=\"line\">               <span class=\"attr\">properties</span>: <span class=\"string\">&quot;color&quot;</span></span><br><span class=\"line\">               <span class=\"attr\">to</span>: <span class=\"string\">&quot;green&quot;</span></span><br><span class=\"line\">               <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"title class_\">NumberAnimation</span> &#123;<span class=\"comment\">//属性为数字的动画</span></span><br><span class=\"line\">               <span class=\"attr\">id</span>: animateOpacity</span><br><span class=\"line\">               <span class=\"attr\">target</span>: flashingblob</span><br><span class=\"line\">               <span class=\"attr\">property</span>: <span class=\"string\">&quot;opacity&quot;</span></span><br><span class=\"line\">               <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">               <span class=\"attr\">from</span>: <span class=\"number\">1.0</span></span><br><span class=\"line\">               <span class=\"attr\">to</span>: <span class=\"number\">0.5</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"title class_\">PropertyAnimation</span> on x &#123;<span class=\"comment\">//立即触发的动画</span></span><br><span class=\"line\">           <span class=\"attr\">to</span>: <span class=\"number\">100</span></span><br><span class=\"line\">           <span class=\"attr\">duration</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Component</span> &#123; <span class=\"comment\">//不会立即出现的组件,需要load</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: com</span><br><span class=\"line\">             <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">                 <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                 <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">                 <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">                 <span class=\"title class_\">Component</span>.<span class=\"property\">onCompleted</span>: &#123;<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">                     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Completed&quot;</span>)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 <span class=\"title class_\">Component</span>.<span class=\"property\">onDestruction</span>: &#123;<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">                     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Destruction&quot;</span>)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Component</span> &#123; <span class=\"comment\">//不会立即出现的组件,需要load</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: com2</span><br><span class=\"line\">             <span class=\"title class_\">Image</span> &#123;<span class=\"comment\">//img</span></span><br><span class=\"line\">                 <span class=\"attr\">id</span>: img</span><br><span class=\"line\">                 <span class=\"attr\">source</span>: <span class=\"string\">&quot;/login2.jpg&quot;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Component</span> &#123; <span class=\"comment\">//不会立即出现的组件,需要load</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: com3</span><br><span class=\"line\">             <span class=\"title class_\">AnimatedImage</span> &#123;<span class=\"comment\">//gif</span></span><br><span class=\"line\">                 <span class=\"attr\">id</span>: gif</span><br><span class=\"line\">                 <span class=\"attr\">source</span>: <span class=\"string\">&quot;/GIF-1.gif&quot;</span></span><br><span class=\"line\">                 <span class=\"attr\">speed</span>: <span class=\"number\">10</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"title class_\">Loader</span> &#123;<span class=\"comment\">//加载组件或文件</span></span><br><span class=\"line\">             <span class=\"attr\">id</span>: load</span><br><span class=\"line\">             <span class=\"attr\">sourceComponent</span>: com3</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"attr\">onStateChanged</span>: &#123;</span><br><span class=\"line\">                 <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;status:&quot;</span>,status)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">             <span class=\"attr\">id</span>: button</span><br><span class=\"line\">             <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">             <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">             <span class=\"attr\">x</span>: <span class=\"number\">200</span></span><br><span class=\"line\">             <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                 load.<span class=\"property\">item</span>.<span class=\"property\">paused</span> = !load.<span class=\"property\">item</span>.<span class=\"property\">paused</span><span class=\"comment\">//播放键</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: mousearea</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">enabled</span>: <span class=\"literal\">true</span> <span class=\"comment\">//是否使能,默认为true</span></span><br><span class=\"line\">            <span class=\"attr\">acceptedButtons</span>: <span class=\"title class_\">Qt</span>.<span class=\"property\">LeftButton</span> | <span class=\"title class_\">Qt</span>.<span class=\"property\">RightButton</span> <span class=\"comment\">//默认只接受左键</span></span><br><span class=\"line\">            <span class=\"attr\">cursorShape</span>: <span class=\"title class_\">Qt</span>.<span class=\"property\">CrossCursor</span> <span class=\"comment\">//鼠标样式</span></span><br><span class=\"line\">            <span class=\"attr\">hoverEnabled</span>: <span class=\"literal\">true</span> <span class=\"comment\">//默认关闭,打开可以接受悬浮信号</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">                anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">                <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onClicked</span>: &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;clicked&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onHoveredChanged</span>: &#123;<span class=\"comment\">//是否悬浮</span></span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Onhoverchanged&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">onPressed</span>: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret = pressedButtons &amp; <span class=\"title class_\">Qt</span>.<span class=\"property\">LeftButton</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret2 = pressedButtons &amp; <span class=\"title class_\">Qt</span>.<span class=\"property\">RightButton</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ret == <span class=\"title class_\">Qt</span>.<span class=\"property\">LeftButton</span>)<span class=\"comment\">//控制左右键不同回应</span></span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;LEFT&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;RIGHT&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;pressed&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onReleased</span>: &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;released&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attr\">onPressAndHold</span>:<span class=\"comment\">//长摁 , 在 Press信号之后</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hold&quot;</span>)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: rect</span><br><span class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span></span><br><span class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span></span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">opacity</span>: (<span class=\"number\">600.0</span> - rect.<span class=\"property\">x</span>) / <span class=\"number\">600</span></span><br><span class=\"line\">            <span class=\"title class_\">MouseArea</span> &#123;</span><br><span class=\"line\">                anchors.<span class=\"property\">fill</span>: parent</span><br><span class=\"line\">                drag.<span class=\"property\">target</span>: rect <span class=\"comment\">//加载拖动效果</span></span><br><span class=\"line\">                drag.<span class=\"property\">axis</span>: <span class=\"title class_\">Drag</span>.<span class=\"property\">XAxis</span> <span class=\"comment\">/*| Drag.YAxis*/</span></span><br><span class=\"line\">                drag.<span class=\"property\">minimumX</span>: <span class=\"number\">0</span></span><br><span class=\"line\">                drag.<span class=\"property\">maximumX</span>: container.<span class=\"property\">width</span> - rect.<span class=\"property\">width</span></span><br><span class=\"line\"><span class=\"comment\">//                drag.filterChildren: true//子控件是否能拖动</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Libxl使用\"><a href=\"#Libxl使用\" class=\"headerlink\" title=\"Libxl使用\"></a>Libxl使用</h2><h4 id=\"引入库\"><a href=\"#引入库\" class=\"headerlink\" title=\"引入库\"></a>引入库</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;libxl-3.1/libxl-3.1.0/include_cpp/libxl.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;libxl-3.1/libxl-3.1.0/lib/libxl.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> libxl;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book* book = <span class=\"built_in\">xlCreateBook</span>();</span><br><span class=\"line\">book-&gt;<span class=\"built_in\">load</span>(<span class=\"string\">&quot;xxx.xls&quot;</span>);</span><br><span class=\"line\">Sheet* sheet = book-&gt;<span class=\"built_in\">getSheet</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取文件大小\"><a href=\"#读取文件大小\" class=\"headerlink\" title=\"读取文件大小\"></a>读取文件大小</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> rowfirst = sheet-&gt;<span class=\"built_in\">firstRow</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> rowlast  = sheet-&gt;<span class=\"built_in\">lastRow</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> colfirst = sheet-&gt;<span class=\"built_in\">firstCol</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> collast  = sheet-&gt;<span class=\"built_in\">lastCol</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取文件内容（表格左上角为（0-0））\"><a href=\"#读取文件内容（表格左上角为（0-0））\" class=\"headerlink\" title=\"读取文件内容（表格左上角为（0,0））\"></a>读取文件内容（表格左上角为（0,0））</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> date1 = sheet-&gt;<span class=\"built_in\">readNum</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* date2 = sheet-&gt;<span class=\"built_in\">readStr</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建新sheet\"><a href=\"#创建新sheet\" class=\"headerlink\" title=\"创建新sheet\"></a>创建新sheet</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book* book1 = <span class=\"built_in\">xlCreateBook</span>();</span><br><span class=\"line\">Sheet* sheet1 = book1-&gt;<span class=\"built_in\">addSheet</span>(<span class=\"string\">&quot;sheet1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置行宽列高\"><a href=\"#设置行宽列高\" class=\"headerlink\" title=\"设置行宽列高\"></a>设置行宽列高</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheetM-&gt;<span class=\"built_in\">setCol</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">sheetM-&gt;<span class=\"built_in\">setRow</span>(<span class=\"number\">0</span> , <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合并单元格\"><a href=\"#合并单元格\" class=\"headerlink\" title=\"合并单元格\"></a>合并单元格</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet-&gt;<span class=\"built_in\">setMerge</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">// 合并第0行的1~2列</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置字体\"><a href=\"#设置字体\" class=\"headerlink\" title=\"设置字体\"></a>设置字体</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Font *titleFont = bookM-&gt;<span class=\"built_in\">addFont</span>();</span><br><span class=\"line\">titleFont-&gt;<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;宋体&quot;</span>);</span><br><span class=\"line\">titleFont-&gt;<span class=\"built_in\">setSize</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">titleFont-&gt;<span class=\"built_in\">setBold</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">Format* titleFormat = bookM-&gt;<span class=\"built_in\">addFormat</span>();</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setAlignH</span>(ALIGNH_CENTER);</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setFont</span>(titleFont);</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setWrap</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">titleFormat-&gt;<span class=\"built_in\">setAlignV</span>(ALIGNV_DISTRIBUTED);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"向文件写入内容\"><a href=\"#向文件写入内容\" class=\"headerlink\" title=\"向文件写入内容\"></a>向文件写入内容</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet-&gt;<span class=\"built_in\">writeStr</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">sheet-&gt;<span class=\"built_in\">writeNum</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>, <span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"保存结束\"><a href=\"#保存结束\" class=\"headerlink\" title=\"保存结束\"></a>保存结束</h4>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book-&gt;<span class=\"built_in\">save</span>(<span class=\"string\">&quot;文件保存路径&quot;</span>);</span><br><span class=\"line\">book-&gt;<span class=\"built_in\">release</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"JSONCPP\"><a href=\"#JSONCPP\" class=\"headerlink\" title=\"JSONCPP\"></a>JSONCPP</h2><p>这篇博客概括的很全</p>\n<p><a href=\"https://www.coonote.com/cplusplus-note/jsoncpp.html\">https://www.coonote.com/cplusplus-note/jsoncpp.html</a></p>"},{"title":"逆向笔记","date":"2023-04-08T16:00:00.000Z","sticky":100,"pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n逆向的开始！从这开始记录我在做逆向题目时遇到的问题以及总结一些逆向的知识点<!-- more -->\n\n## BFS脚本：\n\n```c++\n#include<iostream>\n#include<queue>\nusing namespace std;\nchar map[15][13]={\n1,1,1,1,1,1,1,1,1,1,1,1,1,\n1,3,0,0,1,1,1,1,1,1,0,0,0,\n1,1,1,0,1,1,1,1,1,0,0,1,0,\n1,0,0,0,1,1,1,1,1,0,1,1,0,\n1,0,1,1,1,1,1,1,1,0,1,1,0,\n1,0,1,1,1,1,1,1,1,0,1,0,0,\n1,0,0,0,0,0,1,1,1,0,1,0,1,\n1,1,1,1,1,0,1,1,1,0,1,0,1,\n1,1,1,1,1,0,1,1,1,0,1,0,0,\n1,1,1,0,0,0,1,1,0,0,1,1,0,\n1,1,1,0,1,1,1,1,0,1,1,0,0,\n1,0,0,0,1,1,0,0,0,1,1,0,1,\n1,0,1,1,1,1,0,1,1,1,1,0,1,\n1,0,0,0,0,0,0,1,1,1,1,0,4,\n1,1,1,1,1,1,1,1,1,1,1,1,1};\n\nstruct  Point\n{\n    int x;\n    int y;\n    string path;\n    char mp[15][13]={0};//标记路线\n};\n\nchar w1[4] = {0,1,0,-1};\nchar w2[4] = {1,0,-1,0};\nchar pa[5] = \"sdwa\";\nqueue<Point>q;\n\nint main()\n{\n\n   Point first = {1,1,\"\"};\n   first.mp[first.y][first.x]=1;\n   q.push(first);\n   while(!q.empty())\n   {\n       Point now = q.front();\n       q.pop();\n       for(int i=0;i<4;i++)\n       {\n        Point temp = now;\n        temp.x+=w1[i];\n        temp.y+=w2[i];\n        temp.path+=pa[i];\n        if(map[temp.y][temp.x]==4)\n        {\n            cout<<temp.path<<endl;\n        }\n         if(map[temp.y][temp.x]==0&&temp.x>=0&&temp.x<13&&temp.y>=0&&temp.y<15&&temp.mp[temp.y][temp.x]==0)\n         {     \n            temp.mp[temp.y][temp.x]=1;\n            q.push(temp);\n         }\n       }\n   }   \n}\n```\n\n<!-- more -->\n\n## Frida环境搭建与测试：\n\n进入开发者模式，与手机进行连接`adb connect 127.0.0.1:62001`（PC端命令行）\n\n查看是否连接成功 `adb devices`\n\nfrida-server处理器类型与Android处理器对齐\n\n查询虚拟机处理器架构: `adb shell getprop ro.product.cpu.abi` \n\n进入frida移动端目录 `adb shell`\n\n `cd /data/local/tmp`\n\n运行 `./frida-server`\n\n执行 `frida -U -f MyApplication` 进行连接\\\n\n显示找不到MyApplication,查询app名称的id `frida-ps -U -a`\n\n结果:\n\n![image-20231022105344293](https://s2.loli.net/2024/06/22/URIjbw4sLCHTS8Q.png)\n\n再次执行 `frida -U -f com.example.myapplication`\n\n连接成功,脚本测试\n\n```python\nimport frida\nimport sys\n \ndef on_message(message, data):\n    if message['type'] == 'send':\n        print(\"*****[frida hook]***** : {0}\".format(message['payload']))\n    else:\n        print(\"*****[frida hook]***** : \" + str(message))\n \n#js脚本\njscode = \"\"\"\nJava.perform(function () {\n    var MainActivity = Java.use('com.example.myapplication.MainActivity');\n    MainActivity.print.implementation  = function(){\n        send(\"Hook Start\");\n    };\n });\n\"\"\"\n \nprocess = frida.get_usb_device().attach('MyApplication')#应用程序名称,和包名不一样\nscript = process.create_script(jscode)\nscript.on('message', on_message)\nprint('[*] Running CTF')\nscript.load()\nsys.stdin.read()\n```\n\n\n\n## RC4解密脚本：\n\n```python\nimport base64\nfrom Crypto.Util.number import long_to_bytes\n\ndef rc4_setup(key):\n    if isinstance(key, str):\n        key = key.encode()\n\n    S = list(range(256))\n    j = 0\n    for i in range(256):\n        j = (j + S[i] + key[i % len(key)]) % 256\n        S[i], S[j] = S[j], S[i]\n\n    return S\n\n\ndef rc4_crypt(data, key):#文本解密\n    if isinstance(data, str):\n        data = data.encode()\n\n    S = rc4_setup(key)\n    i, j = 0, 0\n    res = []\n    for byte in data:\n        i = (i + 1) % 256\n        j = (j + S[i]) % 256\n        S[i], S[j] = S[j], S[i]\n        res.append(byte ^ S[(S[i] + S[j]) % 256])\n\n    return bytes(res)\n\ndef rc4_decrypt(key_hex, data_hex):#十六进制解密\n    key = bytes.fromhex(key_hex)\n    data = bytes.fromhex(data_hex)\n    res = rc4_crypt(data, key)\n    return res.hex()\n\n\n    \nif __name__ == '__main__':\n    enc = b'FUZAza8WP5FERi17FvdHowYFSNs6cOk1h0tQLSqk'\n    key = b'BirkenwaldCTF{This_is_f4ke_f1ag}'\n    enc = base64.b64decode(enc)\n    enc = rc4_decrypt(key.hex(),enc.hex())\n    enc = long_to_bytes(int(enc,16)).decode()\n    print(enc)\n    \n\n\n```\n\n\n\n> &0xff在python中可以表示取无符号整数，0xff表示八个比特1，也就是数byte数进行无符号运算,&0x7f表示取有符号字节类型\n>\n\n\n\n## RC4的c语言加密脚本：\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#pragma warning(disable:4996)\n\nunsigned char data[26] = { 0x4e,0xd5,0xc,0xed,0x4d,0xbf,0x9e,0xe8,0x43,0x50,0x8,0xd0,0xa0,0xe2,0x4b,0x62,0xbe,0xab,0x0,0x22,0xb3,0xd8,0x68,0x3f,0x80,0xa4 };\n\n// 初始化 S 表，根据密钥打乱 S 表\nvoid init(unsigned char* S, const unsigned char* key, int keylen) {\n    for (int i = 0; i < 256; i++) {\n        S[i] = i;\n    }\n    int j = 0;\n    for (int i = 0; i < 256; i++) {\n        j = (j + S[i] + key[i % keylen]) % 256;\n        // 交换 S[i] 和 S[j]\n        unsigned char temp = S[i];\n        S[i] = S[j];\n        S[j] = temp;\n    }\n}\n\n// 生成一个字节的密钥流\nunsigned char generate(unsigned char* S, int* i, int* j) {\n    *i = (*i + 1) % 256;\n    *j = (*j + S[*i]) % 256;\n    // 交换 S[i] 和 S[j]\n    unsigned char temp = S[*i];\n    S[*i] = S[*j];\n    S[*j] = temp;\n    // 返回 S[S[i] + S[j]]\n    return S[(S[*i] + S[*j]) % 256];\n}\n\n// 对数据进行加密或解密\nvoid encrypt(unsigned char* data, int datalen, const unsigned char* key, int keylen) {\n    unsigned char S[256]; // 256 字节的数据表\n    int i = 0, j = 0; // 两个索引变量\n    // 初始化 S 表\n    init(S, key, keylen);\n    for (int k = 0; k < datalen; k++) {\n        // 数据和密钥流进行异或运算\n        data[k] ^= generate(S, &i, &j);\n    }\n}\n\n// 测试函数\nint main() {\n    // 假设这是要加密或解密的数据\n    unsigned char input[26];\n    printf(\"Do you know flag?\\n\");\n    printf(\"Please tell me:\\n\");\n    scanf(\"%s\", input);\n    //unsigned char data[] = \"CynopsCTF{RC4_1s_4w3s0m3!}\";\n    int datalen = 26;\n    // 假设这是加密或解密的密钥\n    unsigned char key[] = \"CynopsCTF{This_is_f4ke_f1ag}\";\n    int keylen = strlen((char*)key);\n    // 对数据进行加密\n    encrypt(input, datalen, key, keylen);\n    for (int i = 0; i < 26; i++)\n    {\n        if (input[i] != data[i])\n            goto label;\n    }\n    printf(\"You're so smart. This's what I want!!!\\n\");\n    system(\"pause\");\n    exit(0);\nlabel:\n    printf(\"Oh,You don't seem to know what I want\\n\");\n    printf(\"Please leave here\\n\");\n    system(\"pause\");\n    exit(0);\n\n    return 0;\n}\n\n```\n\n## AES加解密C脚本\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"aes.h\"\n\n/**\n * S盒\n */\nstatic const int S[16][16] = { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };\n\n/**\n * 逆S盒\n */\nstatic const int S2[16][16] = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,\n    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,\n    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,\n    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,\n    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,\n    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,\n    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,\n    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,\n    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,\n    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,\n    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };\n\n/**\n * 获取整形数据的低8位的左4个位\n */\nstatic int getLeft4Bit(int num) {\n    int left = num & 0x000000f0;\n    return left >> 4;\n}\n\n/**\n * 获取整形数据的低8位的右4个位\n */\nstatic int getRight4Bit(int num) {\n    return num & 0x0000000f;\n}\n/**\n * 根据索引，从S盒中获得元素\n */\nstatic int getNumFromSBox(int index) {\n    int row = getLeft4Bit(index);\n    int col = getRight4Bit(index);\n    return S[row][col];\n}\n\n/**\n * 把一个字符转变成整型\n */\nstatic int getIntFromChar(char c) {\n    int result = (int)c;\n    return result & 0x000000ff;\n}\n\n/**\n * 把16个字符转变成4X4的数组，\n * 该矩阵中字节的排列顺序为从上到下，\n * 从左到右依次排列。\n */\nstatic void convertToIntArray(char* str, int pa[4][4]) {\n    int k = 0, i = 0, j = 0;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++) {\n            pa[j][i] = getIntFromChar(str[k]);\n            k++;\n        }\n}\n\n/**\n * 打印4X4的数组\n */\nstatic void printArray(int a[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++) {\n        for (j = 0; j < 4; j++)\n            printf(\"a[%d][%d] = 0x%x \", i, j, a[i][j]);\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n\n/**\n * 打印字符串的ASSCI，\n * 以十六进制显示。\n */\nstatic void printASSCI(char* str, int len) {\n    int i;\n    for (i = 0; i < len; i++)\n        printf(\"0x%x \", getIntFromChar(str[i]));\n    printf(\"\\n\");\n}\n\n/**\n * 把连续的4个字符合并成一个4字节的整型\n */\nstatic int getWordFromStr(char* str)\n{\n    int one = getIntFromChar(str[0]);\n    one = one << 24;\n    int two = getIntFromChar(str[1]);\n    two = two << 16;\n    int three = getIntFromChar(str[2]);\n    three = three << 8;\n    int four = getIntFromChar(str[3]);\n    return one | two | three | four;\n}\n\n/**\n * 把一个4字节的数的第一、二、三、四个字节取出，\n * 入进一个4个元素的整型数组里面。\n */\nstatic void splitIntToArray(int num, int array[4]) {\n    int one = num >> 24;\n    array[0] = one & 0x000000ff;\n    int two = num >> 16;\n    array[1] = two & 0x000000ff;\n    int three = num >> 8;\n    array[2] = three & 0x000000ff;\n    array[3] = num & 0x000000ff;\n}\n\n/**\n * 将数组中的元素循环左移step位\n */\nstatic void leftLoop4int(int array[4], int step) {\n    int temp[4];\n    int i;\n    for (i = 0; i < 4; i++)\n        temp[i] = array[i];\n\n    int index = step % 4 == 0 ? 0 : step % 4;\n    for (i = 0; i < 4; i++) {\n        array[i] = temp[index];\n        index++;\n        index = index % 4;\n    }\n}\n\n/**\n * 把数组中的第一、二、三和四元素分别作为\n * 4字节整型的第一、二、三和四字节，合并成一个4字节整型\n */\nstatic int mergeArrayToInt(int array[4]) {\n    int one = array[0] << 24;\n    int two = array[1] << 16;\n    int three = array[2] << 8;\n    int four = array[3];\n    return one | two | three | four;\n}\n\n/**\n * 常量轮值表\n */\nstatic const int Rcon[10] = { 0x01000000, 0x02000000,\n    0x04000000, 0x08000000,\n    0x10000000, 0x20000000,\n    0x40000000, 0x80000000,\n    0x1b000000, 0x36000000 };\n/**\n * 密钥扩展中的T函数\n */\nstatic int T(int num, int round) {\n    int numArray[4];\n    splitIntToArray(num, numArray);\n    leftLoop4int(numArray, 1);//字循环\n    int i;\n\n    //字节代换\n    for (i = 0; i < 4; i++)\n        numArray[i] = getNumFromSBox(numArray[i]);\n\n    int result = mergeArrayToInt(numArray);\n    return result ^ Rcon[round];\n}\n\n//密钥对应的扩展数组\nstatic int w[44];\n\n/**\n * 扩展密钥，结果是把w[44]中的每个元素初始化\n */\nstatic void extendKey(char* key)\n{\n    int  i, j;\n    for (i = 0; i < 4; i++)\n        w[i] = getWordFromStr(key + i * 4);\n\n    for (i = 4, j = 0; i < 44; i++)\n    {\n        if (i % 4 == 0)\n        {\n            w[i] = w[i - 4] ^ T(w[i - 1], j);\n            j++;//下一轮\n        }\n        else\n            w[i] = w[i - 4] ^ w[i - 1];\n    }\n}\n\n/**\n * 轮密钥加\n */\nstatic void addRoundKey(int array[4][4], int round) {\n    int warray[4];\n    int i, j;\n    for (i = 0; i < 4; i++) {\n\n        splitIntToArray(w[round * 4 + i], warray);\n\n        for (j = 0; j < 4; j++) {\n            array[j][i] = array[j][i] ^ warray[j];\n        }\n    }\n}\n\n/**\n * 字节代换\n */\nstatic void subBytes(int array[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            array[i][j] = getNumFromSBox(array[i][j]);\n}\n\n/**\n * 行移位\n */\nstatic void shiftRows(int array[4][4]) {\n    int rowTwo[4], rowThree[4], rowFour[4];\n    //复制状态矩阵的第2,3,4行\n    int i;\n\n    for (i = 0; i < 4; i++) {\n        rowTwo[i] = array[1][i];\n        rowThree[i] = array[2][i];\n        rowFour[i] = array[3][i];\n    }\n    //循环左移相应的位数\n    leftLoop4int(rowTwo, 1);\n    leftLoop4int(rowThree, 2);\n    leftLoop4int(rowFour, 3);\n\n    //把左移后的行复制回状态矩阵中\n    for (i = 0; i < 4; i++) {\n        array[1][i] = rowTwo[i];\n        array[2][i] = rowThree[i];\n        array[3][i] = rowFour[i];\n    }\n}\n\n/**\n * 列混合要用到的矩阵\n */\nstatic const int colM[4][4] = { 2, 3, 1, 1,\n    1, 2, 3, 1,\n    1, 1, 2, 3,\n    3, 1, 1, 2 };\n\nstatic int GFMul2(int s) {\n    int result = s << 1;\n    int a7 = result & 0x00000100;\n\n    if (a7 != 0) {\n        result = result & 0x000000ff;\n        result = result ^ 0x1b;\n    }\n\n    return result;\n}\n\nstatic int GFMul3(int s) {\n    return GFMul2(s) ^ s;\n}\n\nstatic int GFMul4(int s) {\n    return GFMul2(GFMul2(s));\n}\n\nstatic int GFMul8(int s) {\n    return GFMul2(GFMul4(s));\n}\n\nstatic int GFMul9(int s) {\n    return GFMul8(s) ^ s;\n}\n\nstatic int GFMul11(int s) {\n    return GFMul9(s) ^ GFMul2(s);\n}\n\nstatic int GFMul12(int s) {\n    return GFMul8(s) ^ GFMul4(s);\n}\n\nstatic int GFMul13(int s) {\n    return GFMul12(s) ^ s;\n}\n\nstatic int GFMul14(int s) {\n    return GFMul12(s) ^ GFMul2(s);\n}\n\n/**\n * GF上的二元运算\n */\nstatic int GFMul(int n, int s) {\n    int result;\n\n    if (n == 1)\n        result = s;\n    else if (n == 2)\n        result = GFMul2(s);\n    else if (n == 3)\n        result = GFMul3(s);\n    else if (n == 0x9)\n        result = GFMul9(s);\n    else if (n == 0xb)//11\n        result = GFMul11(s);\n    else if (n == 0xd)//13\n        result = GFMul13(s);\n    else if (n == 0xe)//14\n        result = GFMul14(s);\n\n    return result;\n}\n/**\n * 列混合\n */\nstatic void mixColumns(int array[4][4]) {\n\n    int tempArray[4][4];\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            tempArray[i][j] = array[i][j];\n\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++) {\n            array[i][j] = GFMul(colM[i][0], tempArray[0][j]) ^ GFMul(colM[i][1], tempArray[1][j])\n                ^ GFMul(colM[i][2], tempArray[2][j]) ^ GFMul(colM[i][3], tempArray[3][j]);\n        }\n}\n/**\n * 把4X4数组转回字符串\n */\nstatic void convertArrayToStr(int array[4][4], char* str) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            *str++ = (char)array[j][i];\n}\n/**\n * 检查密钥长度\n */\nstatic int checkKeyLen(int len) {\n    if (len == 16)\n        return 1;\n    else\n        return 0;\n}\n\n/**\n * 参数 p: 明文的字符串数组。\n * 参数 plen: 明文的长度。\n * 参数 key: 密钥的字符串数组。\n */\nvoid aes(char* p, int plen, char* key) {\n\n    int keylen = strlen(key);\n\n    if (!checkKeyLen(keylen)) {\n        printf(\"keylen erro;keylen=%d\\n\", keylen);\n        exit(0);\n    }\n\n    extendKey(key);//扩展密钥\n    int pArray[4][4];\n    int i, k;\n    for (k = 0; k < plen; k += 16) {\n        convertToIntArray(p + k, pArray);\n\n        addRoundKey(pArray, 0);//一开始的轮密钥加\n\n        for (i = 1; i < 10; i++) {//前9轮\n\n            subBytes(pArray);//字节代换\n\n            shiftRows(pArray);//行移位\n\n            mixColumns(pArray);//列混合\n\n            addRoundKey(pArray, i);\n        }\n\n        //第10轮\n        subBytes(pArray);//字节代换\n\n        shiftRows(pArray);//行移位\n\n        addRoundKey(pArray, 10);\n\n        convertArrayToStr(pArray, p + k);\n    }\n}\n/**\n * 根据索引从逆S盒中获取值\n */\nstatic int getNumFromS1Box(int index) {\n    int row = getLeft4Bit(index);\n    int col = getRight4Bit(index);\n    return S2[row][col];\n}\n/**\n * 逆字节变换\n */\nstatic void deSubBytes(int array[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            array[i][j] = getNumFromS1Box(array[i][j]);\n}\n/**\n * 把4个元素的数组循环右移step位\n */\nstatic void rightLoop4int(int array[4], int step) {\n    int temp[4];\n    int i;\n    for (i = 0; i < 4; i++)\n        temp[i] = array[i];\n\n    int index = step % 4 == 0 ? 0 : step % 4;\n    index = 3 - index;\n    for (i = 3; i >= 0; i--) {\n        array[i] = temp[index];\n        index--;\n        index = index == -1 ? 3 : index;\n    }\n}\n\n/**\n * 逆行移位\n */\nstatic void deShiftRows(int array[4][4]) {\n    int rowTwo[4], rowThree[4], rowFour[4];\n    int i;\n    for (i = 0; i < 4; i++) {\n        rowTwo[i] = array[1][i];\n        rowThree[i] = array[2][i];\n        rowFour[i] = array[3][i];\n    }\n\n    rightLoop4int(rowTwo, 1);\n    rightLoop4int(rowThree, 2);\n    rightLoop4int(rowFour, 3);\n\n    for (i = 0; i < 4; i++) {\n        array[1][i] = rowTwo[i];\n        array[2][i] = rowThree[i];\n        array[3][i] = rowFour[i];\n    }\n}\n/**\n * 逆列混合用到的矩阵\n */\nstatic const int deColM[4][4] = { 0xe, 0xb, 0xd, 0x9,\n    0x9, 0xe, 0xb, 0xd,\n    0xd, 0x9, 0xe, 0xb,\n    0xb, 0xd, 0x9, 0xe };\n\n/**\n * 逆列混合\n */\nstatic void deMixColumns(int array[4][4]) {\n    int tempArray[4][4];\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            tempArray[i][j] = array[i][j];\n\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++) {\n            array[i][j] = GFMul(deColM[i][0], tempArray[0][j]) ^ GFMul(deColM[i][1], tempArray[1][j])\n                ^ GFMul(deColM[i][2], tempArray[2][j]) ^ GFMul(deColM[i][3], tempArray[3][j]);\n        }\n}\n/**\n * 把两个4X4数组进行异或\n */\nstatic void addRoundTowArray(int aArray[4][4], int bArray[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            aArray[i][j] = aArray[i][j] ^ bArray[i][j];\n}\n/**\n * 从4个32位的密钥字中获得4X4数组，\n * 用于进行逆列混合\n */\nstatic void getArrayFrom4W(int i, int array[4][4]) {\n    int index = i * 4;\n    int colOne[4], colTwo[4], colThree[4], colFour[4];\n    splitIntToArray(w[index], colOne);\n    splitIntToArray(w[index + 1], colTwo);\n    splitIntToArray(w[index + 2], colThree);\n    splitIntToArray(w[index + 3], colFour);\n\n    for (i = 0; i < 4; i++) {\n        array[i][0] = colOne[i];\n        array[i][1] = colTwo[i];\n        array[i][2] = colThree[i];\n        array[i][3] = colFour[i];\n    }\n}\n\n/**\n * 参数 c: 密文的字符串数组。\n * 参数 clen: 密文的长度。\n * 参数 key: 密钥的字符串数组。\n */\nvoid deAes(char* c, int clen, char* key) {\n\n    int keylen = strlen(key);\n    if (clen == 0 || clen % 16 != 0) {\n        printf(\"Ciphertext characters must be a multiple of 16! Now the length is zero:%d\\n\", clen);\n        exit(0);\n    }\n\n    if (!checkKeyLen(keylen)) {\n        printf(\"Key character length error! The lengths must be 16, 24, and 32. The current length is:%d\\n\", keylen);\n        exit(0);\n    }\n\n    extendKey(key);//扩展密钥\n    int cArray[4][4];\n    int i, k;\n    for (k = 0; k < clen; k += 16) {\n        convertToIntArray(c + k, cArray);\n\n\n        addRoundKey(cArray, 10);\n\n        int wArray[4][4];\n        for (i = 9; i >= 1; i--) {\n            deSubBytes(cArray);\n\n            deShiftRows(cArray);\n\n            deMixColumns(cArray);\n            getArrayFrom4W(i, wArray);\n            deMixColumns(wArray);\n\n            addRoundTowArray(cArray, wArray);\n        }\n\n        deSubBytes(cArray);\n\n        deShiftRows(cArray);\n\n        addRoundKey(cArray, 0);\n\n        convertArrayToStr(cArray, c + k);\n\n    }\n}\n```\n\n\n\n> .rodata段是用来存放只读数据的一块内存区域，例如常量数据。ro代表read only，即只读的意思。.rodata段也叫常量区，它属于静态内存分配。使用const修饰符，例如`const int a = 10;`，这样的变量会被放在.rodata段中\n\n\n\n## Ida Python脚本:\n\n```python\nstart = 0x00401500\nend  = start + 0xBA\nxor = 0x41\nfor i in range(start,end):\n   data = get_wide_byte(i)\n   patch_byte(i,data^xor)\n   print(\"{} patched\".format(i))\n```\n\n## attribute实现main函数之前执行相应函数：\n\n```c++\n#include <stdio.h>\n\nvoid before() __attribute__((constructor));\nvoid after() __attribute__((destructor));\n\nvoid before() {\n    printf(\"this is function %s\\n\",__func__);\n    return;\n}\n\nvoid after(){\n    printf(\"this is function %s\\n\",__func__);\n    return;\n}\n\nint main(){\n    printf(\"this is function %s\\n\",__func__);\n    return 0;\n}\n\n```\n\n\n\n## 函数调用默认传参的几种方式\n\n$$\ncdecl：这是C语言默认的调用约定，它要求参数从右向左依次压入栈中，由调用者负责清理栈空间。这种方式适用于可变数量的参数，如printf函数。在Windows和Linux系统中，cdecl通常用于32位x86架构的编译器。\n$$\n\n$$\nstdcall：这是Windows API默认的调用约定，它要求参数从右向左依次压入栈中，由被调用者负责清理栈空间。这种方式适用于固定数量的参数，如MessageBox函数。在Windows系统中，stdcall通常用于32位x86架构的编译器。\n$$\n\n$$\nfastcall：这是一种优化的调用约定，它要求将部分参数通过寄存器传递，而不是全部压入栈中，以提高函数调用的效率。不同的编译器可能会有不同的fastcall实现，例如Microsoft Visual C++和Borland C++ Builder分别使用ECX和EDX两个寄存器传递前两个参数，而GCC则使用EAX、EDX和ECX三个寄存器传递前三个参数。在Windows和Linux系统中，fastcall通常用于32位x86架构的编译器。\n$$\n\n$$\nthiscall：这是C++类成员函数默认的调用约定，它要求将对象指针（this指针）通过ECX寄存器传递给函数，而其他参数则从右向左依次压入栈中。由于thiscall只适用于类成员函数，因此它通常不需要显式指定。在Windows和Linux系统中，thiscall通常用于32位x86架构的编译器。\n$$\n\n$$\nsyscall：这是Linux内核默认的调用约定，它要求将系统调用号通过EAX寄存器传递给内核，而其他参数则通过EBX、ECX、EDX、ESI、EDI和EBP六个寄存器按顺序传递给内核。如果参数超过六个，则需要通过栈传递。在Linux系统中，syscall通常用于32位x86架构的编译器\n$$\n\n$$\n在64位x86架构（x86_64或AMD64）的编译器中，通常会有更多的寄存器可供使用，因此参数传递方式也会有所不同。例如，在Windows系统中，x64调用约定要求将前四个整数或指针类型的参数通过RCX、RDX、R8和R9四个寄存器传递，而前四个浮点类型的参数通过XMM0、XMM1、XMM2和XMM3四个寄存器传递；在Linux系统中，System V AMD64 ABI要求将前六个整数或指针类型的参数通过RDI、RSI、RDX、RCX、R8和R9六个寄存器传递，而前八个浮点类型的参数通过XMM0到XMM7八个寄存器传递。\n$$\n\n\n\n## gbk解码转中文，先ida64 convert to string，再用b修饰，解码即可\n\n```python\nstr = b\"\\xD7\\xA2\\xB2\\xE1\\xB3\\xC9\\xB9\\xA6\\xA3\\xA1\"\nprint(str.decode('gbk'))\n```\n\n\n\n## 异常处理和反调试\n\n反调试的几种方式记录\n\n```c++\n#include<iostream>\n#include<Windows.h>\nchar flag[5] = \"1234\";\nvoid change()\n{\n    strcpy_s(flag, size_t(5), \"9999\");\n}\n\n\nEXCEPTION_DISPOSITION WINAPI myExceptHandler(\n    struct _EXCEPTION_RECORD* ExceptionRecord,\n    PVOID EstablisherFrame,\n    PCONTEXT pcontext,\n    PVOID DisapatcherContext\n    )\n{\n   // 第五种方式，类似第四种方式\n    if (pcontext->Dr0 != 0 || pcontext->Dr1 != 0 || pcontext->Dr2 != 0 || pcontext->Dr3 != 0)\n    {\n        printf(\"myExceptHandler检测到硬件断点\\n\");\n    }\n    else\n    {\n        printf(\"myExceptHandlerm没有检测到硬件断点\\n\");\n    }\n    pcontext->Eip += 2;//跳过程序异常处，要不然程序一直在异常处不继续运行\n    change();\n    return ExceptionContinueExecution;\n}\n\n\nint main()\n{\n#if 1\n    //第一种，会被x32dbg,OD反反调试器杀掉\n    BOOL flag = IsDebuggerPresent();\n    if (flag)\n    {\n        printf(\"IsDebuggerPresent检测到调试器\\n\");\n    }\n    else\n    {\n        printf(\"IsDebuggerPresent没有检测到调试器\\n\");\n    }\n    //第二种，不会被x32,OD反反调试器杀掉\n    BOOL IsDebug = 0;\n    //第一个参数是进程句柄，可以检测远程进程是否被调试\n    CheckRemoteDebuggerPresent(GetCurrentProcess(), &IsDebug);\n    if (IsDebug)\n    {\n        printf(\"CheckRemoteDebuggerPresent检测到调试器\\n\");\n    }\n    else\n    {\n        printf(\"CheckRemoteDebuggerPresent没有检测到调试器\\n\");\n    }\n    //\n    //第三种，不会被x32,OD反反调试器杀掉\n    //CloseHandle函数会试图关闭指定句柄的进程，\n#if 1 \n    __try\n    {\n        CloseHandle((HANDLE)0x1234);//指定一个不存在的进程句柄\n        printf(\"CloseHandle没有检测到调试器\\n\");\n    }\n    __except(1)\n    {\n        printf(\"CloseHandle检测到调试器\\n\");\n    }\n#endif\n    //第四种,硬件断点反调试，只要在动调时设置硬件断点就会被发现\n    CONTEXT context{ 0 };\n    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;\n    GetThreadContext(GetCurrentThread(),&context);\n    //查找寄存器的值，如果有硬件断点，该寄存器的值会改变\n    if (context.Dr0 != 0 || context.Dr1 != 0 || context.Dr2 != 0 || context.Dr3 != 0)\n    {\n        printf(\"GetThreadContext检测到硬件断点\\n\");\n    }\n    else\n    {\n        printf(\"GetThreadContext没有检测到硬件断点\\n\");\n    }\n#endif\n    //第五种\n    DWORD sehHandler = (DWORD)myExceptHandler;\n    //上面可能是添加一个异常处理函数，然后下面让异常处理链表SEH增加一个节点，把这个异常处理函数插进去\n    _asm\n    {\n        push myExceptHandler//fs: [0] 指向的是TIB[Thread information Block]结构中的EXCEPTION_REGISTRATION 结构\n        mov eax,fs:[0]\n        push eax\n        mov fs:[0],esp//让fs:[0]指向一个新的EXCEPTION_REGISTRATION 结构(就像链表插入一个新节点)\n    }\n    //设置程序异常处\n    int a = 1;\n    a = a / 0;\n    std::cout << flag;\n    system(\"pause\");\n}\n```\n\n\n\n## dll的编译和使用\n\n先编译dll文件，新建生成dll项目，创建一个新的Mydll.cpp和Mydll.h\n\nMydll.cpp\n\n```c++\n#include \"pch.h\"\n#include \"Mydll.h\"\n\nint add(int a, int b)\n{\n\treturn a + b;\n}\n\nint sub(int a, int b)\n{\n\treturn a-b;\n}\n\nint multi(int a, int b)\n{\n\treturn a*b;\n}\n\nint Div(int a, int b)\n{\n\treturn a/b;\n}\n\nint XXOR(int a,int b)\n{\n\treturn a ^ b;\n}\n\n```\n\n导出的两种方式的其中第一种方式，头文件导出\n\n```c\n#pragma once\n\n#ifdef MYDLL_EXPORTS\n#define MYDLL_API __declspec(dllexport)\n#else\n#define MYDLL_API __declspec(dllimport)\n#endif\n\n//第一种导出方式\nextern \"C\" MYDLL_API int add(int a, int b);\n\n// Produce the next value in the sequence.\n// Returns true on success and updates current value and index;\n// false on overflow, leaves current value and index unchanged.\nextern \"C\" MYDLL_API int sub(int a,int b);\n\n// Get the current value in the sequence.\nextern \"C\" MYDLL_API int multi(int a,int b);\n\n// Get the position of the current value in the sequence.\nextern \"C\" MYDLL_API int Div(int a,int b);\n```\n\n导出的第二种方式，源文件新建一个export.def文件\n\n```c++\nLIBRARY \"Mydll\"\nEXPORTS\nXXOR @ 1\n```\n\n新建一个项目导入生成的dll文件\n\n导入的第一种方式，隐式链接的方式调用dll导出寒素\n\n`#pragma comment(lib,\"Mydll.lib\")//lib地址`\n\n头文件main.h\n\n```c++\n#pragma once\n#include<iostream>\n#include<Windows.h>\n#pragma comment(lib,\"Mydll.lib\")//lib地址\nextern \"C\" int add(int a, int b);\n\n```\n\n源文件main.cpp\n\n```c++\n#include\"main.h\"\nint main()\n{\n\tint sum = add(1, 2);\n\tprintf(\"%d\", sum);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n第二种显示链接方式调用导出函数\n\n不需要头文件和lib，源文件main.cpp如下\n\n```c++\n#include<iostream>\n#include<Windows.h>\ntypedef int (*XXOR)(int a, int b);\nint main()\n{\n\tHMODULE hModule = LoadLibraryW(L\"Mydll.dll\");\n\tXXOR Xorr = (XXOR)GetProcAddress(hModule, \"XXOR\");\n\tprintf(\"%d\", Xorr(100, 200));\n\tFreeLibrary(hModule);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n## c语言RC4，base64加解密代码\n\n```c++\nvoid init(unsigned char* S, const unsigned char* key, int keylen) {\n    for (int i = 0; i < 256; i++) {\n        S[i] = i;\n    }\n    int j = 0;\n    for (int i = 0; i < 256; i++) {\n        j = (j + S[i] + key[i % keylen]) % 256;\n        // 交换 S[i] 和 S[j]\n        unsigned char temp = S[i];\n        S[i] = S[j];\n        S[j] = temp;\n    }\n}\n\n// 生成一个字节的密钥流\nunsigned char generate(unsigned char* S, int* i, int* j) {\n    *i = (*i + 1) % 256;\n    *j = (*j + S[*i]) % 256;\n    // 交换 S[i] 和 S[j]\n    unsigned char temp = S[*i];\n    S[*i] = S[*j];\n    S[*j] = temp;\n    // 返回 S[S[i] + S[j]]\n    return S[(S[*i] + S[*j]) % 256];\n}\n\n// 对数据进行加密或解密\nvoid encrypt(unsigned char* data, int datalen, const unsigned char* key, int keylen) {\n    unsigned char S[256]; // 256 字节的数据表\n    int i = 0, j = 0; // 两个索引变量\n    // 初始化 S 表\n    init(S, key, keylen);\n    for (int k = 0; k < datalen; k++) {\n        // 数据和密钥流进行异或运算\n        data[k] ^= generate(S, &i, &j);\n    }\n}\n\nconst char* const base64char = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nint base64_decode(const char* base64, unsigned char* bindata)\n{\n    int i, j;\n    unsigned char k;\n    unsigned char temp[4];\n\n    for (i = 0, j = 0; base64[i] != '\\0'; i += 4)\n    {\n        memset(temp, 0xFF, sizeof(temp));\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i])\n                temp[0] = k;\n        }\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i + 1])\n                temp[1] = k;\n        }\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i + 2])\n                temp[2] = k;\n        }\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i + 3])\n                temp[3] = k;\n        }\n\n        bindata[j++] = ((unsigned char)(((unsigned char)(temp[0] << 2)) & 0xFC)) |\n            ((unsigned char)((unsigned char)(temp[1] >> 4) & 0x03));\n        if (base64[i + 2] == '=')\n            break;\n\n        bindata[j++] = ((unsigned char)(((unsigned char)(temp[1] << 4)) & 0xF0)) |\n            ((unsigned char)((unsigned char)(temp[2] >> 2) & 0x0F));\n        if (base64[i + 3] == '=')\n            break;\n\n        bindata[j++] = ((unsigned char)(((unsigned char)(temp[2] << 6)) & 0xF0)) |\n            ((unsigned char)(temp[3] & 0x3F));\n    }\n    return j;\n}\nchar* base64_encode(const unsigned char* bindata, char* base64, int binlength)//输入，输出，输入长度\n{\n    int i, j;\n    unsigned char current;\n\n    for (i = 0, j = 0; i < binlength; i += 3)\n    {\n        current = (bindata[i] >> 2);\n        current &= (unsigned char)0x3F;\n        base64[j++] = base64char[(int)current];\n\n        current = ((unsigned char)(bindata[i] << 4)) & ((unsigned char)0x30);\n        if (i + 1 >= binlength)\n        {\n            base64[j++] = base64char[(int)current];\n            base64[j++] = '=';\n            base64[j++] = '=';\n            break;\n        }\n        current |= ((unsigned char)(bindata[i + 1] >> 4)) & ((unsigned char)0x0F);\n        base64[j++] = base64char[(int)current];\n\n        current = ((unsigned char)(bindata[i + 1] << 2)) & ((unsigned char)0x3C);\n        if (i + 2 >= binlength)\n        {\n            base64[j++] = base64char[(int)current];\n            base64[j++] = '=';\n            break;\n        }\n        current |= ((unsigned char)(bindata[i + 2] >> 6)) & ((unsigned char)0x03);\n        base64[j++] = base64char[(int)current];\n\n        current = ((unsigned char)bindata[i + 2]) & ((unsigned char)0x3F);\n        base64[j++] = base64char[(int)current];\n    }\n    base64[j] = '\\0';\n    return base64;\n}\nint main() {\n    unsigned char Buffer[31];\n    char enc[41];\n    unsigned char key[] = \"BirkenwaldCTF{This_is_f4ke_f1ag}\";//RC5密钥\n    int keylen = (int)strlen((char*)key);\n    printf(\"Do you know flag?\\n\");\n    printf(\"Please tell me:\\n\");\n    scanf(\"%s\", Buffer);\n    int datelen = (int)strlen((char*)Buffer);\n    encrypt(Buffer, datelen, key, keylen);//RC4加密\n    encrypt2(Buffer, enc, 30);//base64加密\n    return 0;\n}\n\n```\n\n\n\n##  lea指令使用，防止遗忘\n\nlea，官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址；\n\n常见的几种用法：\n\n`1、lea eax，[addr]`\n\n就是将表达式addr的值放入eax寄存器，示例如下：\n\nlea eax,[401000h]; 将值401000h写入eax寄存器中\n\nlea指令右边的操作数表示一个精指针，上述指令和mov eax，401000h是等价的\n\n`2、lea eax，dword ptr [ebx]`;将ebx的值赋值给eax\n\n`3、lea eax，c`；其中c为一个int型的变量，该条语句的意思是把c的地址赋值给eax；\n\n\n\n## 内联汇编实现部分常用函数功能练习\n\n在全局内定义字符串后的print hello world，因为编译器会编译的时候会自动寻址，最简单的一种方法\n\n```c++\n#include<stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar format[] = \"%s %s\\n\";\nchar hello[] = \"hello\";\nchar world[] = \"world!\";\n//_declspec(naked)裸函数标识，没有基本函数框架的函数\nvoid _declspec(naked)print()//打印hello world\n{\n\t_asm\n\t{\n\t\tpush ebp\n\t\tmov ebp,esp\n\t\tsub esp,0x20\n\t\tmov eax,offset world\n\t\tpush eax\n\t\tmov eax,offset hello\n\t\tpush eax\n\t\tmov eax,offset format\n\t\tpush eax\n\t\tcall printf\n\t\tpop ebx\n\t\tpop ebx\n\t\tpop ebx\n\t\tmov esp,ebp\n\t\tpop ebp\n\t\tretn\n\t}\n}\n\nint main(void)\n{\n\t_asm\n\t{\n\t\tcall print\n\t}\n}\n```\n\n利用局部变量字符串，将字符串push进栈中，通过栈寻址，push传参来实现功能\n\n```c++\n#include<stdio.h>\n#include <string.h>\n//char format[] = \"%s %s\";//25,73,20,25,73\n//char hello[] = \"hello\";//68,65,6c,6c,6f\n//char world[] = \"world!\";//77,6f,72,6c,64,21\nvoid _declspec(naked)print()\n{\n\t_asm\n\t{\n\t\tpush ebp\n\t\tmov ebp,esp\n\t\tpush eax\n\t\tpush 0x2164//push 后高位自动补零结束字符串\n\t\tpush 0x6c726f77//注意push顺序和十六进制顺序\n\t\tpush 0x6f\n\t\tpush 0x6c6c6568\n\t\tpush 0x73\n\t\tpush 0x25207325\n\t\tlea eax,dword ptr ss:[esp+0x10]//ss堆栈段，ds数据段\n\t\tpush eax\n\t\tlea eax,dword ptr ss:[esp+0xc]//注意偏移量计算\n\t\tpush eax\n\t\tlea eax,dword ptr ss:[esp+0x08]//用lea将字符串地址传入寄存器\n\t\tpush eax\n\t\tcall printf\n\t\tadd esp,0x24\n\t\tpop eax\n\t\tmov esp,ebp\n\t\tpop ebp\n\t\tret\n\t}\n}\n\nint main(void)\n{\n\t//char format[] = \"%s %s\";//25,73,20,25,73,0a\n\t//char hello[] = \"hello\";//68,65,6c,6c,6f\n\t//char world[] = \"world!\";//77,6f,72,6c,64,21\n\t//printf(format, hello, world);\n\t_asm\n\t{\n\t\tcall print\n\t\tret\n\t}\n}\n```\n\n利用kernel32.dll或者kernelbase.dll模块寻找loadlibrary和getprocaddr函数地址，以此加载想要的模块和获得想要的函数地址，从而调用想要的函数\n```c++\n#include<stdio.h>\n#include <Windows.h>\nchar Load[] = \"LoadLibraryA\";//4c,6f,61,64,4c,69,62,72,61,72,79,41 00 len = 0xc\nchar Get[] = \"GetProcAddress\";//47,65,74,50,72,6f,63,41,64,64,72,65,73,73 00 len = 0xe\nchar hello[] = \"hello world!\";//68,65,6c,6c,6f,20,77,6f,72,6c,64,21 00 len = 0xc\nchar Msvc[] = \"msvcrt.dll\";//6d,73,76,63,72,74,2e,64,6c,6c 00 len = 0xa\nchar Print[] = \"printf\";//70,72,69,6e,74,66 00 len = 0x6\nvoid _declspec(naked)MyShell()\n{\n\t_asm\n\t{\n\t\tpushad\n\t\tmov ebp,esp\n\t\tpush 0\n\t\tpush 0x21646c72//\n\t\tpush 0x6f77206f//\n\t\tpush 0x6c6c6568//hello world\n\t\tpush 0x7373//\n\t\tpush 0x65726464//\n\t\tpush 0x41636f72//\n\t\tpush 0x50746547//GetProcAddress\n        push 0\n\t\tpush 0x41797261//\n\t\tpush 0x7262694c//\n\t\tpush 0x64616f4c//LoadLibraryA\n\t\tmov ecx,esp\n\t\tpush ecx//esp传参过去\n\t\tcall Func_print\n\t\tmov esp,ebp\n\t\tpopad\n               nop\n               nop\n               nop\n               nop\n               nop//填充五个字节留给jmp指令，因为call指令有一个相对地址\n            //可以在OD，xdbg中计算jmp的相对地址\n            \n    \n\t\tret\n\n\tFunc_GetModule:\n\tpush ebp\n\t\tmov ebp, esp\n\t\tsub esp, 0x20\n\t\tpush esi\n\t\tmov esi,dword ptr fs:[0x30]//PEB结构体地址\n\t\tmov esi,[esi+0xc]//LDR结构体地址\n\t\tmov esi,[esi+0x1c]//list\n\t\tmov esi,[esi]//list 第二项kernel32或者kernelbase\n\t\tmov esi,[esi+0x8]//dllbase\n\t\tmov eax,esi\n\t\tpop esi\n\t\tmov esp, ebp\n\t\tpop ebp\n\t\tret \n\n\t\tFunc_GetAddr:\n\t    push ebp\n\t\tmov ebp, esp\n\t\tsub esp, 0x20\n\t\tmov edx, [ebp + 0x8]//dllbase\n\t\tmov esi, [edx + 0x3c]//if_anew\n\t\tlea esi, [esi + edx]//NT header\n\t\tmov esi, [esi + 0x78]//导出表RVA\n\t\tlea esi, [edx + esi]//导出表VA\n\t\tmov edi, [esi + 0x1c]//EAT RVA\n\t\tlea edi, [edi + edx]//EAT VA\n\t\tmov [ebp - 0x4], edi//保存\n\t\tmov edi, [esi + 0x20]//ENT RVA\n\t\tlea edi, [edi + edx]//ENT VA\n\t\tmov [ebp - 0x8], edi//保存\n\t\tmov edi, [esi + 0x24]//EOT RVA\n\t\tlea edi, [edi+edx]//EOT VA\n\t\tmov [ebp-0xc],edi//保存\n\t\txor eax,eax\n\t\tjmp tag_cmpfirst\n\ttag_cmpLoop:\n\t    inc eax\n\ttag_cmpfirst:\n\t    mov esi,[ebp-0x8]//ENT\n\t\tmov esi,[esi+eax*4]//RVA\n\t\tlea esi,[esi+edx]//函数名称字符串地址\n\t\tmov edi,[ebp+0xc]//\n\t\tmov ecx,[ebp+0x10]//循环次数，ebp+0x10是传来的参数\n\t\trepe cmpsb\n\t\tmov esi,[ebp-0xc]\n\t\tjne tag_cmpLoop\n\t\tmov esi,[ebp-0xc]//EOT\n\t\txor edi,edi//为了不影响结果清空edi\n\t\tmov di,[esi+eax*2]//word类型,EAT表索引\n\t\tmov edx,[ebp-0x4]//EAT\n\t\tmov esi,[edx+edi*4]//函数地址RVA\n\t\tmov edx,[ebp+0x8]//dllbase\n\t\tlea eax,[esi+edx]//最终函数地址\n\t\tmov esp, ebp\n\t\tpop ebp\n\t\tretn 0xc//在栈中弹出三个参数\n\n\n\tFunc_print:\n\tpush ebp\n\t\tmov ebp,esp \n\t\tsub esp,0x10\n\t\tcall Func_GetModule//获取kernel模块基址\n\t\tmov [ebp-0x4],eax//[ebp-0x4]保存模块基址\n\t\tlea ecx,[ebp + 0xc]//load地址\n\t\tpush 0xc\n\t\tpush ecx\n\t\tpush eax\n\t\tcall Func_GetAddr//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya\n\t\tmov [ebp-0x8],eax//load地址\t\n\t\tpush 0xe\n\t\tlea ecx, [ebp + 0x1c]//Get字符串\n\t\tpush ecx\n\t\tpush [ebp-0x4]//模块基址\n\t\tcall Func_GetAddr//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress\n\t\tmov [ebp-0xc],eax//get地址\n\t\tpush 0x6c6c\n\t\tpush 0x642e7472\t\n\t\tpush 0x6376736d\n\t\tlea ecx,dword ptr ss:[ebp-0x1c]\n\t\tpush ecx\n\t\tcall [ebp-0x8]//调用load函数load Msvc.dll，一个参数，字符串地址\n\t\tpush 0x6674\n\t\tpush 0x6e697270\n\t\tlea ecx,[ebp-0x24]//printf字符串\n\t\tpush ecx\n\t\tpush eax//msvc.dll基址\n\t\tcall [ebp-0xc]//调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称\n\t\tlea ecx,[ebp+0x2c]//hello world地址\n\t\tpush ecx\n\t\tcall eax//printf地址\n\t\tmov esp,ebp\n\t\tpop ebp\n\t\tret\n\n\n\t}\n}\n\nint main(void)\n{\n\t/*GetProcAddress();\n    LoadLibraryA()*/\n\t\t//6d, 73, 76, 63, 72, 74, 2e, 64, 6c, 6c 00 len = 0xa\n\t\t// //70,72,69,6e,74,66\n\tMyShell();\n\tsystem(\"pause\");\n\t/*\tfor (int i = 0; i < strlen(Print); i++)\n\t\t{\n\t\t\tprintf(\"%x,\", Print[i]);\n\t\t}*/\n\t\n}\n/*AT&T写法\nasm(\n    \"pusha\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"push $0\\n\"\n    \"push $0x21646c72\\n\"\n    \"push $0x6f77206f\\n\"\n    \"push $0x6c6c6568\\n\" // hello world\n    \"push $0x7373\\n\"\n    \"push $0x65726464\\n\"\n    \"push $0x41636f72\\n\"\n    \"push $0x50746547\\n\" // GetProcAddress\n    \"push $0\\n\"\n    \"push $0x41797261\\n\"\n    \"push $0x7262694c\\n\"\n    \"push $0x64616f4c\\n\" // LoadLibraryA\n    \"mov %esp, %ecx\\n\"\n    \"push %ecx\\n\" // esp传参过去\n    \"call Func_print\\n\"\n    \"mov %ebp, %esp\\n\"\n    \"popa\\n\"\n    \"nop\\n\"\n    \"nop\\n\"\n    \"nop\\n\"\n    \"nop\\n\"\n    \"nop\\n\" // 填充五个字节留给jmp指令，因为call指令有一个相对地址\n    // 可以在OD，xdbg中计算jmp的相对地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetModule:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"push %esi\\n\"\n    \"mov %fs:0x30, %esi\\n\" // PEB结构体地址\n    \"mov 0xc(%esi), %esi\\n\" // LDR结构体地址\n    \"mov 0x1c(%esi), %esi\\n\" // list\n    \"mov (%esi), %esi\\n\" // list 第二项kernel32或者kernelbase\n    \"mov 0x8(%esi), %esi\\n\" // dllbase\n    \"mov %esi, %eax\\n\"\n    \"pop %esi\\n\"\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetAddr:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"mov 0x3c(%edx), %esi\\n\" // if_anew\n    \"lea (%edx, %esi), %esi\\n\"  // NT header\n    \"mov 0x78(%esi), %esi\\n\"  // 导出表RVA\n    \"lea (%edx, %esi), %esi\\n\"  // 导出表VA\n    \"mov 0x1c(%esi), %edi\\n\"  // EAT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EAT VA\n    \"mov %edi, -0x4(%ebp)\\n\"  // 保存\n    \"mov 0x20(%esi), %edi\\n\"  // ENT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // ENT VA\n    \"mov %edi, -0x8(%ebp)\\n\"  // 保存\n    \"mov 0x24(%esi), %edi\\n\"  // EOT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EOT VA\n    \"mov %edi, -0xc(%ebp)\\n\"  // 保存\n    \"xor %eax, %eax\\n\" \n    \"jmp tag_cmpfirst\\n\" \n\"tag_cmpLoop:\"\n    \"inc %eax\\n\" \n\"tag_cmpfirst:\"\n    \"mov -0x8(%ebp), %esi\\n\"  // ENT\n    \"mov (%esi, %eax, 4), %esi\\n\" // RVA\n    \"lea (%edx, %esi), %esi\\n\" // 函数名称字符串地址\n    \"mov 0xc(%ebp), %edi\\n\"\n    \"mov 0x10(%ebp), %ecx\\n\" // 循环次数，ebp+0x10是传来的参数\n    \"repe cmpsb\\n\"\n    \"mov -0xc(%ebp), %esi\\n\"\n    \"jne tag_cmpLoop\\n\"\n    \"mov -0xc(%ebp), %esi\\n\" // EOT\n    \"xor %edi, %edi\\n\" // 为了不影响结果清空edi\n    \"mov (%esi, %eax, 2), %di\\n\" // word类型,EAT表索引\n    \"mov -0x4(%ebp), %edx\\n\" // EAT\n    \"mov (%edx, %edi, 4), %esi\\n\" // 函数地址RVA\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"lea (%edx, %esi), %eax\\n\" // 最终函数地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret $0xc\\n\" // 在栈中弹出三个参数\n\n\"Func_print:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x10, %esp\\n\"\n    \"call Func_GetModule\\n\" // 获取kernel模块基址\n    \"mov %eax, -0x4(%ebp)\\n\" // 保存模块基址\n    \"lea 0xc(%ebp), %ecx\\n\" // load地址\n    \"push $0xc\\n\"\n    \"push %ecx\\n\"\n    \"push %eax\\n\"\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya\n    \"mov %eax, -0x8(%ebp)\\n\" // load地址\n    \"push $0xe\\n\"\n    \"lea 0x1c(%ebp), %ecx\\n\" // Get字符串\n    \"push %ecx\\n\"\n    \"push -0x4(%ebp)\\n\" // 模块基址\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress\n    \"mov %eax, -0xc(%ebp)\\n\" // get地址\n    \"push $0x6c6c\\n\"\n    \"push $0x642e7472\\n\"\n    \"push $0x6376736d\\n\"\n    \"lea -0x1c(%ebp), %ecx\\n\"\n    \"push %ecx\\n\"\n    \"call -0x8(%ebp)\\n\" // 调用load函数load Msvc.dll，一个参数，字符串地址\n    \"push $0x6674\\n\"\n    \"push $0x6e697270\\n\"\n    \"lea -0x24(%ebp), %ecx\\n\" // printf字符串\n    \"push %ecx\\n\"\n    \"push %eax\\n\" // msvc.dll基址\n    \"call -0xc(%ebp)\\n\" // 调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称\n    \"lea 0x2c(%ebp), %ecx\\n\" // hello world地址\n    \"push %ecx\\n\"\n    \"call %eax\\n\" // printf地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n    );\n*/\n```\n\n准备了一个表格存储栈信息,ebp2对应的是print函数的栈底，pushadd到ebp2是Myshell函数形成的栈帧\n\n|           | msvc     |\n| --------- | -------- |\n|           | printf   |\n| 28        | 6e       |\n| printf 24 | 66       |\n| 20        | msvc     |\n| 1c msvc   | 63       |\n| 18        | 64       |\n| 14        | 6c       |\n| esp 0x10  |          |\n| 0xc       | get_adr  |\n| 0x8       | load_adr |\n| 0x4       | kernel   |\n| ebp2      | ebp1     |\n| 4         | eip      |\n| 8         | ecx=esp1 |\n| load c    | 64       |\n| 10        | 72       |\n| 14        | 41       |\n| 18        | 0        |\n| get1c     | 50       |\n| 20        | 41       |\n| 24        | 65       |\n| 28        | 73       |\n| hello 2c  | 6c       |\n| 30        | 6f       |\n| 34        | 21       |\n| 38        | 0        |\n| pushadd   | ad       |\n\n\n\n## 重温栈结构\n\n> 今天在准备写一个壳的时候需要手写汇编，把汇编十六进制插入PE文件中，一时对栈结构有点遗忘，在xdbg中调了会温故了一下，在这里记一下，防止下一次遗忘\n\n比方说我们有一个main函数时，在函数开始时经常有如下汇编代码\n\n```c++\npush ebp\n\nmov esp,ebp\n\nsub esp,0x20\n```\n\n为什么会出现以上代码？在主函数调用的子函数中能不能不出现这些代码？\n\npush ebp 做的是一个保存ebp的操作，mov esp,ebp为下一个栈帧形成打下基础，在新栈帧中利用栈来保存数据，并且不会破坏原来栈帧中的数据\n\nsub esp,0x20则是开辟了一个新的栈空间，这段空间可被函数直接利用，比如说做一些局部变量的初始化操作，也可以省略这部操作，直接通过push提高栈顶（地址下降）然后再通过mov在栈中储存数据（初始化局部变量）\n\n主函数下的子函数结构和main函数类似，其实也可以说main函数时其他函数的子函数，没有什么较大的区别\n\n在call的时候其实把下一条要执行汇编代码地址push进了栈中，然后在函数内部在push ebp这些操作，使得每次函数调用结束时，会出现以下代码\n\n```\npop ebp\nret\n```\n\nret返回的正是下一条汇编代码执行处\n\n在函数调用时，有时通过push来传递参数，这个时候栈顶提高，但是参数传递之后对主函数没有任何作用，所以函数调用结束时主函数有时候会通过add esp来调整栈空间。\n\npush指令在x86架构下是推入四个字节数据或地址，推入常量高位用0填充，可以通过mov指令实现对栈中数据进行字节位的调整\n\n\n\n## ret 和 retn的区别\n\n> - ret和retn都是返回指令，用于从子程序中返回到调用处，同时从栈中弹出返回地址\n> - ret和retn的区别在于是否有操作数。ret没有操作数，只是从栈中弹出返回地址；retn有一个操作数，表示要从栈中弹出的字节数\n> - 例如add esp,0x4; ret;，等价于retn 0x4\n\n## repe cmpsb字符串比较汇编指令\n\n> 是一个汇编语言指令，它的意思是重复比较两个字符串的字节，直到不相等或者计数器为零为止。它涉及到三个寄存器：ECX，EDI和ESI。**ECX是计数器**，表示要比较的字节数；**EDI和ESI是两个字符串的起始地址**。每次比较后，EDI和ESI会根据方向标志DF的值自动增加或减少。如果DF为0，表示正向比较，EDI和ESI都加一；如果DF为1，表示反向比较，EDI和ESI都减一。比较的结果会影响标志寄存器中的零标志ZF。如果ZF为1，表示两个字节相等；如果ZF为0，表示两个字节不等。repe cmpsb通常用来检测两个字符串是否完全相同\n\n## jmp指令偏移地址计算\n\n在使用jmp汇编指令时，关于算偏移地址的时候机器码十六进制的计算\n\n往下运行时，0x2 = 0x44A04D-0x44A049-0x2，也就是jmp到的地址-原来jmp前的地址-jmp这条指令的字节数，本质就是算中间有多少字节\n\n往上运行时，0xFFF870F7 = 0x401140 - 0x44A044 - 5 最后一个五是jmp指令的字节数，0xFFF870F7转化成机器码就是F770FBFF\n\n## IDAPatch保存后动调\n\nKeypatcher进行patch，ctrl+w保存patch结果，但是动调有影响\n\nApply patches to后动调即可 ，在edit-patch program里\n\n\n## Ollvm控制流平坦化技术\nghidra自动化去混淆工具: https://github.com/PAGalaxyLab/ghidra_scripts\n\nIDA自动化去混淆工具d810: https://github.com/joydo/d810\n\n## Hook\n\n### Hook的多种方式\n\n![image-20240418163602878](https://s2.loli.net/2024/06/22/QkYWnuEXvbVM8Kp.png)\n\n### HOOK和Callback的区别\n\n钩子技术（Hook）和回调函数（Callback）在编程中都是用于实现程序的扩展和灵活性，但它们有着不同的作用和实现方式。\n\n#### 相同点\n\n- 事件响应： 钩子技术和回调函数都用于实现对特定事件的响应和处理。\n- 灵活性： 两者都可以增强程序的灵活性和扩展性，使得程序能够更好地处理不同的情况和需求。\n\n#### 差异性\n\n1. 作用：\n\n- 钩子技术主要用于拦截、监视和修改系统级别或应用程序级别的事件，比如键盘输入、鼠标操作、窗口消息等。\n- 回调函数主要用于在特定事件发生时被调用，通常用于异步编程或事件驱动编程中，比如网络请求完成后的回调函数、定时器触发后的回调函数等。\n\n1. 实现方式：\n\n- 钩子技术通常是通过操作系统提供的接口或库函数来实现的，可以在系统级别或应用程序级别进行钩子的安装和管理。\n- 回调函数是一种编程模式，通过将函数指针或函数引用传递给其他函数，以便在特定事件发生时被调用。\n\n1. 应用场景：\n\n- 钩子技术适用于需要拦截、监视和修改事件流的情况，比如实现键盘记录器、窗口管理工具等。\n- 回调函数适用于需要异步处理或事件驱动的情况，比如处理异步任务完成后的结果、处理定时器事件等。\n\n综上所述，钩子技术和回调函数虽然都与事件响应相关，但它们的作用、实现方式和应用场景有着明显的区别。**钩子技术更专注于事件的拦截和修改，而回调函数更专注于事件的响应和异步处理。**\n\n从代码实现角度来看,Hook主要分成两种,Inline Hook 和 非 Inline Hook\n\nInline Hook指的是: \n\n![image-20240416213218744](https://s2.loli.net/2024/06/22/8isNvxnrQpDVHFE.png)\n\n在call的调用的函数内里添加 jmp 想执行代码地址\n\n非Inline Hook指的是:\n\n![image-20240416213515874](https://s2.loli.net/2024/06/22/KBonGr7HZgWVIC4.png)\n\n事实上就是改变了Call操作的目标地址,实际上就是IAT Hook\n\n### C++虚表的Hook\n\n一个类的内存布局:\n\n![image-20240416214808838](https://s2.loli.net/2024/06/22/8aATK9XVMOtGpPn.png)\n\n通过对象的地址来获得虚表的首地址,从而获得所有虚函数的地址\n\nC++调用fish类的虚函数代码:\n\n```c++\nfish Myfish;\nMyfish.sleep();\n```\n\n汇编调用fish类的虚函数代码:\n\n```asm\nmov eax,ecx    //eca是MyFish对象的地址\nmov eax,[eax]  //获取MyFish对象的虚表地址\ncall [eax+0x04]//调用sleep()函数\n```\n\n### Detours Hook\n\n框架学习\n\n```c++\n     \t//1.保存detour的事务\n\t\tDetourRestoreAfterWith();\n\t\t//2.开始处理detour的事务\n\t\tDetourTransactionBegin();\n\t\t//3.更新线程信息-执行事务的线程\n\t\tDetourUpdateThread(GetCurrentThread());\n\t\t//4.设置需要拦截的代理函数\n\t\t//第一个参数二级函数指针-原函数地址\n\t\t//第二个参数函数地址-代理函数的地址\n\t\tDetourAttach((PVOID*)&RealMessageBox, MyMessageBox);//msg\n\t\t//5.提交事务\n\t\tDetourTransactionCommit();\n```\n\nHook MessageBox函数使得弹窗显示永远是 \"你已经被Hook了！\"\n\nmfc程序\n\nmfc.cpp\n\n```c++\n#include\"mfc.h\"\n\nMyapp app;//全局应用程序对象\n//MyFrame* m_pMainwnd = new MyFrame;\nBOOL Myapp::InitInstance()\n{\n\tMyFrame* frame = new MyFrame;\n\tframe->ShowWindow(SW_SHOWNORMAL);\n\tframe->UpdateWindow();\n\t//保存程序指针,否则窗口一闪而过,\n\tm_pMainWnd = frame;//m_pMainWnd线程类的一个成员\n\treturn 1;\n}\n\nBEGIN_MESSAGE_MAP(MyFrame, CFrameWnd)\n\tON_WM_LBUTTONDOWN()\nEND_MESSAGE_MAP()\n\nMyFrame::MyFrame()\n{\n\tCreate(NULL, TEXT(\"Crackk\"));\n}\n\nVOID MyFrame::OnLButtonDown(UINT, CPoint point)\n{\n\t//获取Dll1.dll文件路径\n    WCHAR WorkPath[MAX_PATH];                        //用于存放获取路径的信息    \n\tGetModuleFileName(NULL, WorkPath, MAX_PATH);\n\tCString DllPath = WorkPath;\n\tint pos = DllPath.ReverseFind('\\\\');               \n\tDllPath = DllPath.Left(pos + 1);\n\tDllPath += _T(\"Dll1.dll\");\n    //一般情况利用辅助程序实现dll注入,这里为了便捷直接loadlibrary\n\tHMODULE hmodule = LoadLibrary(DllPath);\n\tif (hmodule == NULL)\n\t{\n\t\tMessageBox(NULL, (LPCTSTR)\"加载dll失败\", NULL);\n\t}\n\telse\n\t{\n\t\tMessageBox(NULL, (LPCTSTR)\"弹窗\", NULL);\n\t}\n}\n\n```\n\ndll程序\n\nsolve.cpp\n\n```c++\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include \"windows.h\"\n#include <iostream>\n#include <fstream>\n#include \"solve.h\"\n\nusing namespace std;\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    {\n        Start_Hook();\n        break;\n    }\n    case DLL_THREAD_ATTACH:\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n    {\n        Exit_Hook();\n        break;\n    }\n    }\n    return TRUE;\n}\n\n```\n\nDll1main.cpp\n\n```c++\n#pragma once\n#include \"solve.h\"\n#include \"pch.h\"\n#include <detours.h>\n#pragma comment(lib,\"detours.lib\")\nint(WINAPI* RealMessageBox)(HWND, LPCTSTR, LPCTSTR, UINT) = MessageBox;\nint WINAPI MyMessageBox(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)\n{\n\treturn RealMessageBox(hWnd, L\"你已经被Hook了！\", L\"Hooked\", uType);\n}\nvoid Start_Hook()\n{\n\t\tDetourRestoreAfterWith();\n\t\tDetourTransactionBegin();\n\t\tDetourUpdateThread(GetCurrentThread());\n\t\tDetourAttach((PVOID*)&RealMessageBox, MyMessageBox);//msg\n\t\tDetourTransactionCommit();\n}\nvoid Exit_Hook()\n{\n\t//1.开始处理detour的事务\n\tDetourTransactionBegin();\n\t//2.更新线程信息-执行事务的线程\n\tDetourUpdateThread(GetCurrentThread());\n\t//3.撤销hook \n\t//第一个参数二级函数指针-原函数地址\n\t//第二个参数函数地址-代理函数的地址\n\tDetourDetach((PVOID*)&RealMessageBox, MyMessageBox);\n\t//4.提交事务\n\tDetourTransactionCommit();\n}\n```\n\n![image-20240416230935344](https://s2.loli.net/2024/06/22/VWTSJEYMnOjZIr4.png)\n\n### Windows的S.E.H\n\nS.E.H全称是Struct Exception Handler即结构化异常处理机制\n\nS.E.H是操作系统提供给线程来感知和处理异常的一种回调机制,S.E.H在线程栈上以**单链表**的形式存在\n\n![image-20240418155025834](https://s2.loli.net/2024/06/22/HUTfFSkE8Pwtm9R.png)\n\n在win32中由于FS寄存器总是指向当前的TIB(线程信息块),因此在FS:[0]处能找到最近的一个EXCEPTION_REGISTERATION结构\n\n当我们通过try/catch或__try/except等操作来注册S.E.H的时候,FS:[0]会指向新的S.E.H,且新的S.E.H的Prev字段会指向之前FS:[0]指向的S.E.H,整个操作类似于单链表的表头插入操作\n\n### Windows的V.E.H\n\nS.E.H是基于线程的异常处理,V.E.H是基于进程的异常处理\n\nV.E.H处理异常的优先级低于调试器,高于S.E.H,即KiUserExceptionDispatcher()函数首先检查进程是否处于被调试状态,然后检查V.E.H链表,最后才是检查S.E.H链表\n\nWindows提供了注册V.E.H的回调函数的API\n\n```c\nPVOID AddVectoredExceptionHandler//注册回调函数\n{\n\tULONG FirstHandler,//如果大于0则从头部插入,否则从尾部插入\n\tPVECTORED_EXCEPTION_HANDLE VectoredHandler//异常处理函数地址\n};\n```\n\n可以通过该函数进行虚假注册,通过函数返回值后去链表的头指针或者尾指针,从而遍历整个V.E.H链表\n\n### 硬件断点\n\n#### 调试器寄存器\n\nIA-32处理器定义了8个调试寄存器,DR0-DR7其中**DR0-DR3用来指定断点的内存地址或IO地址**;DR4和DR5是保留的,DR6的作用是当调试事件发生时向调试器报告事件的详细信息,以供调试器啊判断发生的是何种事件;DR7用来进一步定义中断条件\n\n#### 硬件断点的优势\n\n硬件断点HOOK是结合DR0-DR3调试寄存器和Windows S.E.H 或V.E.H机制所引入的一种HOOK机制.如果HOOK采用的方式是修改代码,那么很容易被检测到,然而硬件断点HOOK并不涉及修改代码,所以他的优点主要体现在隐蔽性上\n\n#### 线程上下文环境以及Windows下线程与CPU之间的关系\n\n线程执行环境CONTEXT的结构体:\n\n```c\ntypedef struct_CONTEXT\n{\n\tDwORD  contextFlags;\n\tDWORD\tDr0;\n    DWORD\tDr1;\n    DWORD\tDr2;\n    DWORD\tDr3;\n    DWORD\tDr6;\n    DWORD\tDr7;\n\tFLOATING_SAVE_AREA FloatSave;\n\tDWORD\tsegGs;\n\tDWORD\tsegFs;\n\tDWORD\tsegEs;\n\tDWORD\tSegDs;\n\tDWORD\tEdi;\n\tDWORD\tEsi;\n\tDWORD\tEbx;\n\tDWORD\tEdx;\n\tDWORD\tEcx;\n\tDWORD\tEax;\n\tDWORD\tEbp;\n\tDWORD\tEip;\n\tDWORD\tsegCs;\n\tDWORD\tEFlags;\n\tDWORD\tEsp;\n\tDWORD\tsegSs;\n} CONTEXT;\n```\n\nWindows是基于线程调用的多任务抢占式操作系统,如果CPU目前运行的线程1,这时优先级更高的线程2将抢占执行,那么操作系统会把线程1的执行环境取出放到线程1的CONTEXT结构中,接着把线程2的CONTEXT信息放入CPU中,继续运行线程2\n\n### S.E.H Hook\n\n未成功代码,显示有没经处理的异常\n\n应该是MyExceptionFilter函数没起作用\n\ndll中\n\n```C\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include \"SEHHook.h\"\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_ATTACH:\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n//SEH.cpp \n#include  \"pch.h\"\n#include \"SEHHook.h\"    \n#include <climits>\nDWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(\"USER32.dll\"),\"MessageBoxW\");\n\nLONG WINAPI MyExceptionFilter(PEXCEPTION_POINTERS ExceptionInfo)\n{\n\tif (ExceptionInfo->ExceptionRecord->ExceptionAddress == (LPVOID)HookAddr)\n\t{\t\n\t\t//获取当前线程上下文\n\t\tPCONTEXT pcontext = ExceptionInfo->ContextRecord;\n\t\tMessageBoxW(NULL,TEXT(\"你被hook了诶\"), TEXT(\"gogogo\"),0);\n\t\tpcontext->Eip += 5;\n\t\treturn EXCEPTION_CONTINUE_EXECUTION;\n\t}\n\treturn EXCEPTION_CONTINUE_SEARCH;\n}\n\nvoid SetHardBreakPoint()\n{\n\t//遍历线程 通过openthread获取到线程环境后设置硬件断点\n\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\tif (hTool32 != INVALID_HANDLE_VALUE)\n\t{\n\t\tTHREADENTRY32 threadEntry32;//线程环境结构体\n\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\tHANDLE hMainThread = NULL;\n\t\tFILETIME exit_time, kernel_time, user_time;\n\t\tFILETIME creation_time;\n\t\tFILETIME prev_creation_time;\n\t\tprev_creation_time.dwLowDateTime = 0xFFFFFFFF;\n\t\tprev_creation_time.dwHighDateTime = INT_MAX;\n\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + sizeof(threadEntry32.th32OwnerProcessID);\n\t\tif (Thread32First(hTool32, &threadEntry32))\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (threadEntry32.dwSize >= dwThreadEntryOffset &&threadEntry32.th32OwnerProcessID == GetCurrentProcessId())\n\t\t\t\t{\n\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, false, threadEntry32.th32ThreadID);\n\t\t\t\t\tGetThreadTimes(hHookThread, &creation_time, &exit_time, &kernel_time, &user_time);\n\t\t\t\t\tif (CompareFileTime(&creation_time, &prev_creation_time) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemcpy(&prev_creation_time, &creation_time, sizeof(FILETIME));\n\t\t\t\t\t\tif (hMainThread != NULL)\n\t\t\t\t\t\t\tCloseHandle(hMainThread);\n\t\t\t\t\t\thMainThread = hHookThread;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tCloseHandle(hHookThread);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\t\t} while (Thread32Next(hTool32,&threadEntry32));\n\t\t\tSetUnhandledExceptionFilter(MyExceptionFilter);\n\t\t\tCONTEXT thread_context = { CONTEXT_DEBUG_REGISTERS };\n\t\t\tthread_context.Dr0 = (DWORD)HookAddr;\n\t\t\tthread_context.Dr7 = 0x1;//设置断点类型(访问断点)\n\t\t\tSetThreadContext(hMainThread, &thread_context);\n\t\t\tCloseHandle(hMainThread);\n\t\t}\n\t}\n\tCloseHandle(hTool32);\n}\n```\n\n\n\n### V.E.H Hook\n\n试验成功\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include \"VEHHook.h\"\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        AddVectoredExceptionHandler(1, (PVECTORED_EXCEPTION_HANDLER)MyExceptionFilter);\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_ATTACH:\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n//VEHHOOK.cpp\n#include  \"pch.h\"\n#include \"VEHHook.h\"    \n#include <climits>\nDWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(\"USER32.dll\"),\"MessageBoxW\");\n\nLONG WINAPI MyExceptionFilter(PEXCEPTION_POINTERS ExceptionInfo)\n{\n\tif (ExceptionInfo->ExceptionRecord->ExceptionAddress == (LPVOID)HookAddr)\n\t{\t\n\t\t//获取当前线程上下文\n\t\tPCONTEXT pcontext = ExceptionInfo->ContextRecord;\n\t\tMessageBoxA(NULL,\"HOOK\", \"HOOK\",1);\n        //需要加一段调整eip的代码使得跳出死循环\n\t\treturn EXCEPTION_CONTINUE_EXECUTION;\n\t}\n\treturn EXCEPTION_CONTINUE_SEARCH;\n}\n\nBOOL SetHardBreakPoint()\n{\n\t//遍历线程 通过openthread获取到线程环境后设置硬件断点\n\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\tif (hTool32 != INVALID_HANDLE_VALUE)\n\t{\n\t\tTHREADENTRY32 threadEntry32;//线程环境结构体\n\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\tHANDLE hMainThread = NULL;\n\t\tFILETIME exit_time, kernel_time, user_time;\n\t\tFILETIME creation_time;\n\t\tFILETIME prev_creation_time;\n\t\tprev_creation_time.dwLowDateTime = 0xFFFFFFFF;\n\t\tprev_creation_time.dwHighDateTime = INT_MAX;\n\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + sizeof(threadEntry32.th32OwnerProcessID);\n\t\tif (Thread32First(hTool32, &threadEntry32))\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (threadEntry32.dwSize >= dwThreadEntryOffset &&threadEntry32.th32OwnerProcessID == GetCurrentProcessId())\n\t\t\t\t{\n\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, false, threadEntry32.th32ThreadID);\n\t\t\t\t\tGetThreadTimes(hHookThread, &creation_time, &exit_time, &kernel_time, &user_time);\n\t\t\t\t\tif (CompareFileTime(&creation_time, &prev_creation_time) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemcpy(&prev_creation_time, &creation_time, sizeof(FILETIME));\n\t\t\t\t\t\tif (hMainThread != NULL)\n\t\t\t\t\t\t\tCloseHandle(hMainThread);\n\t\t\t\t\t\thMainThread = hHookThread;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tCloseHandle(hHookThread);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\t\t} while (Thread32Next(hTool32,&threadEntry32));\n\t\t\tCONTEXT thread_context = { CONTEXT_DEBUG_REGISTERS };\n\t\t\tthread_context.Dr0 = (DWORD)HookAddr;\n\t\t\tthread_context.Dr7 = 0x1;//设置断点类型(访问断点)\n\t\t\tSetThreadContext(hMainThread, &thread_context);\n\t\t\tCloseHandle(hMainThread);\n\t\t}\n\t}\n\tCloseHandle(hTool32);\n\treturn true;\n}\n\n```\n\n![image-20240509220917719](https://s2.loli.net/2024/06/22/z1xhTRjQWKd3IDk.png)\n","source":"_posts/re.md","raw":"---\ntitle: 逆向笔记\ndate: 2023/4/9\ncategories: 笔记\ntags:\n  - 逆向\nsticky: 100\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n逆向的开始！从这开始记录我在做逆向题目时遇到的问题以及总结一些逆向的知识点<!-- more -->\n\n## BFS脚本：\n\n```c++\n#include<iostream>\n#include<queue>\nusing namespace std;\nchar map[15][13]={\n1,1,1,1,1,1,1,1,1,1,1,1,1,\n1,3,0,0,1,1,1,1,1,1,0,0,0,\n1,1,1,0,1,1,1,1,1,0,0,1,0,\n1,0,0,0,1,1,1,1,1,0,1,1,0,\n1,0,1,1,1,1,1,1,1,0,1,1,0,\n1,0,1,1,1,1,1,1,1,0,1,0,0,\n1,0,0,0,0,0,1,1,1,0,1,0,1,\n1,1,1,1,1,0,1,1,1,0,1,0,1,\n1,1,1,1,1,0,1,1,1,0,1,0,0,\n1,1,1,0,0,0,1,1,0,0,1,1,0,\n1,1,1,0,1,1,1,1,0,1,1,0,0,\n1,0,0,0,1,1,0,0,0,1,1,0,1,\n1,0,1,1,1,1,0,1,1,1,1,0,1,\n1,0,0,0,0,0,0,1,1,1,1,0,4,\n1,1,1,1,1,1,1,1,1,1,1,1,1};\n\nstruct  Point\n{\n    int x;\n    int y;\n    string path;\n    char mp[15][13]={0};//标记路线\n};\n\nchar w1[4] = {0,1,0,-1};\nchar w2[4] = {1,0,-1,0};\nchar pa[5] = \"sdwa\";\nqueue<Point>q;\n\nint main()\n{\n\n   Point first = {1,1,\"\"};\n   first.mp[first.y][first.x]=1;\n   q.push(first);\n   while(!q.empty())\n   {\n       Point now = q.front();\n       q.pop();\n       for(int i=0;i<4;i++)\n       {\n        Point temp = now;\n        temp.x+=w1[i];\n        temp.y+=w2[i];\n        temp.path+=pa[i];\n        if(map[temp.y][temp.x]==4)\n        {\n            cout<<temp.path<<endl;\n        }\n         if(map[temp.y][temp.x]==0&&temp.x>=0&&temp.x<13&&temp.y>=0&&temp.y<15&&temp.mp[temp.y][temp.x]==0)\n         {     \n            temp.mp[temp.y][temp.x]=1;\n            q.push(temp);\n         }\n       }\n   }   \n}\n```\n\n<!-- more -->\n\n## Frida环境搭建与测试：\n\n进入开发者模式，与手机进行连接`adb connect 127.0.0.1:62001`（PC端命令行）\n\n查看是否连接成功 `adb devices`\n\nfrida-server处理器类型与Android处理器对齐\n\n查询虚拟机处理器架构: `adb shell getprop ro.product.cpu.abi` \n\n进入frida移动端目录 `adb shell`\n\n `cd /data/local/tmp`\n\n运行 `./frida-server`\n\n执行 `frida -U -f MyApplication` 进行连接\\\n\n显示找不到MyApplication,查询app名称的id `frida-ps -U -a`\n\n结果:\n\n![image-20231022105344293](https://s2.loli.net/2024/06/22/URIjbw4sLCHTS8Q.png)\n\n再次执行 `frida -U -f com.example.myapplication`\n\n连接成功,脚本测试\n\n```python\nimport frida\nimport sys\n \ndef on_message(message, data):\n    if message['type'] == 'send':\n        print(\"*****[frida hook]***** : {0}\".format(message['payload']))\n    else:\n        print(\"*****[frida hook]***** : \" + str(message))\n \n#js脚本\njscode = \"\"\"\nJava.perform(function () {\n    var MainActivity = Java.use('com.example.myapplication.MainActivity');\n    MainActivity.print.implementation  = function(){\n        send(\"Hook Start\");\n    };\n });\n\"\"\"\n \nprocess = frida.get_usb_device().attach('MyApplication')#应用程序名称,和包名不一样\nscript = process.create_script(jscode)\nscript.on('message', on_message)\nprint('[*] Running CTF')\nscript.load()\nsys.stdin.read()\n```\n\n\n\n## RC4解密脚本：\n\n```python\nimport base64\nfrom Crypto.Util.number import long_to_bytes\n\ndef rc4_setup(key):\n    if isinstance(key, str):\n        key = key.encode()\n\n    S = list(range(256))\n    j = 0\n    for i in range(256):\n        j = (j + S[i] + key[i % len(key)]) % 256\n        S[i], S[j] = S[j], S[i]\n\n    return S\n\n\ndef rc4_crypt(data, key):#文本解密\n    if isinstance(data, str):\n        data = data.encode()\n\n    S = rc4_setup(key)\n    i, j = 0, 0\n    res = []\n    for byte in data:\n        i = (i + 1) % 256\n        j = (j + S[i]) % 256\n        S[i], S[j] = S[j], S[i]\n        res.append(byte ^ S[(S[i] + S[j]) % 256])\n\n    return bytes(res)\n\ndef rc4_decrypt(key_hex, data_hex):#十六进制解密\n    key = bytes.fromhex(key_hex)\n    data = bytes.fromhex(data_hex)\n    res = rc4_crypt(data, key)\n    return res.hex()\n\n\n    \nif __name__ == '__main__':\n    enc = b'FUZAza8WP5FERi17FvdHowYFSNs6cOk1h0tQLSqk'\n    key = b'BirkenwaldCTF{This_is_f4ke_f1ag}'\n    enc = base64.b64decode(enc)\n    enc = rc4_decrypt(key.hex(),enc.hex())\n    enc = long_to_bytes(int(enc,16)).decode()\n    print(enc)\n    \n\n\n```\n\n\n\n> &0xff在python中可以表示取无符号整数，0xff表示八个比特1，也就是数byte数进行无符号运算,&0x7f表示取有符号字节类型\n>\n\n\n\n## RC4的c语言加密脚本：\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#pragma warning(disable:4996)\n\nunsigned char data[26] = { 0x4e,0xd5,0xc,0xed,0x4d,0xbf,0x9e,0xe8,0x43,0x50,0x8,0xd0,0xa0,0xe2,0x4b,0x62,0xbe,0xab,0x0,0x22,0xb3,0xd8,0x68,0x3f,0x80,0xa4 };\n\n// 初始化 S 表，根据密钥打乱 S 表\nvoid init(unsigned char* S, const unsigned char* key, int keylen) {\n    for (int i = 0; i < 256; i++) {\n        S[i] = i;\n    }\n    int j = 0;\n    for (int i = 0; i < 256; i++) {\n        j = (j + S[i] + key[i % keylen]) % 256;\n        // 交换 S[i] 和 S[j]\n        unsigned char temp = S[i];\n        S[i] = S[j];\n        S[j] = temp;\n    }\n}\n\n// 生成一个字节的密钥流\nunsigned char generate(unsigned char* S, int* i, int* j) {\n    *i = (*i + 1) % 256;\n    *j = (*j + S[*i]) % 256;\n    // 交换 S[i] 和 S[j]\n    unsigned char temp = S[*i];\n    S[*i] = S[*j];\n    S[*j] = temp;\n    // 返回 S[S[i] + S[j]]\n    return S[(S[*i] + S[*j]) % 256];\n}\n\n// 对数据进行加密或解密\nvoid encrypt(unsigned char* data, int datalen, const unsigned char* key, int keylen) {\n    unsigned char S[256]; // 256 字节的数据表\n    int i = 0, j = 0; // 两个索引变量\n    // 初始化 S 表\n    init(S, key, keylen);\n    for (int k = 0; k < datalen; k++) {\n        // 数据和密钥流进行异或运算\n        data[k] ^= generate(S, &i, &j);\n    }\n}\n\n// 测试函数\nint main() {\n    // 假设这是要加密或解密的数据\n    unsigned char input[26];\n    printf(\"Do you know flag?\\n\");\n    printf(\"Please tell me:\\n\");\n    scanf(\"%s\", input);\n    //unsigned char data[] = \"CynopsCTF{RC4_1s_4w3s0m3!}\";\n    int datalen = 26;\n    // 假设这是加密或解密的密钥\n    unsigned char key[] = \"CynopsCTF{This_is_f4ke_f1ag}\";\n    int keylen = strlen((char*)key);\n    // 对数据进行加密\n    encrypt(input, datalen, key, keylen);\n    for (int i = 0; i < 26; i++)\n    {\n        if (input[i] != data[i])\n            goto label;\n    }\n    printf(\"You're so smart. This's what I want!!!\\n\");\n    system(\"pause\");\n    exit(0);\nlabel:\n    printf(\"Oh,You don't seem to know what I want\\n\");\n    printf(\"Please leave here\\n\");\n    system(\"pause\");\n    exit(0);\n\n    return 0;\n}\n\n```\n\n## AES加解密C脚本\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"aes.h\"\n\n/**\n * S盒\n */\nstatic const int S[16][16] = { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };\n\n/**\n * 逆S盒\n */\nstatic const int S2[16][16] = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,\n    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,\n    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,\n    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,\n    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,\n    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,\n    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,\n    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,\n    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,\n    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,\n    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };\n\n/**\n * 获取整形数据的低8位的左4个位\n */\nstatic int getLeft4Bit(int num) {\n    int left = num & 0x000000f0;\n    return left >> 4;\n}\n\n/**\n * 获取整形数据的低8位的右4个位\n */\nstatic int getRight4Bit(int num) {\n    return num & 0x0000000f;\n}\n/**\n * 根据索引，从S盒中获得元素\n */\nstatic int getNumFromSBox(int index) {\n    int row = getLeft4Bit(index);\n    int col = getRight4Bit(index);\n    return S[row][col];\n}\n\n/**\n * 把一个字符转变成整型\n */\nstatic int getIntFromChar(char c) {\n    int result = (int)c;\n    return result & 0x000000ff;\n}\n\n/**\n * 把16个字符转变成4X4的数组，\n * 该矩阵中字节的排列顺序为从上到下，\n * 从左到右依次排列。\n */\nstatic void convertToIntArray(char* str, int pa[4][4]) {\n    int k = 0, i = 0, j = 0;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++) {\n            pa[j][i] = getIntFromChar(str[k]);\n            k++;\n        }\n}\n\n/**\n * 打印4X4的数组\n */\nstatic void printArray(int a[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++) {\n        for (j = 0; j < 4; j++)\n            printf(\"a[%d][%d] = 0x%x \", i, j, a[i][j]);\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n\n/**\n * 打印字符串的ASSCI，\n * 以十六进制显示。\n */\nstatic void printASSCI(char* str, int len) {\n    int i;\n    for (i = 0; i < len; i++)\n        printf(\"0x%x \", getIntFromChar(str[i]));\n    printf(\"\\n\");\n}\n\n/**\n * 把连续的4个字符合并成一个4字节的整型\n */\nstatic int getWordFromStr(char* str)\n{\n    int one = getIntFromChar(str[0]);\n    one = one << 24;\n    int two = getIntFromChar(str[1]);\n    two = two << 16;\n    int three = getIntFromChar(str[2]);\n    three = three << 8;\n    int four = getIntFromChar(str[3]);\n    return one | two | three | four;\n}\n\n/**\n * 把一个4字节的数的第一、二、三、四个字节取出，\n * 入进一个4个元素的整型数组里面。\n */\nstatic void splitIntToArray(int num, int array[4]) {\n    int one = num >> 24;\n    array[0] = one & 0x000000ff;\n    int two = num >> 16;\n    array[1] = two & 0x000000ff;\n    int three = num >> 8;\n    array[2] = three & 0x000000ff;\n    array[3] = num & 0x000000ff;\n}\n\n/**\n * 将数组中的元素循环左移step位\n */\nstatic void leftLoop4int(int array[4], int step) {\n    int temp[4];\n    int i;\n    for (i = 0; i < 4; i++)\n        temp[i] = array[i];\n\n    int index = step % 4 == 0 ? 0 : step % 4;\n    for (i = 0; i < 4; i++) {\n        array[i] = temp[index];\n        index++;\n        index = index % 4;\n    }\n}\n\n/**\n * 把数组中的第一、二、三和四元素分别作为\n * 4字节整型的第一、二、三和四字节，合并成一个4字节整型\n */\nstatic int mergeArrayToInt(int array[4]) {\n    int one = array[0] << 24;\n    int two = array[1] << 16;\n    int three = array[2] << 8;\n    int four = array[3];\n    return one | two | three | four;\n}\n\n/**\n * 常量轮值表\n */\nstatic const int Rcon[10] = { 0x01000000, 0x02000000,\n    0x04000000, 0x08000000,\n    0x10000000, 0x20000000,\n    0x40000000, 0x80000000,\n    0x1b000000, 0x36000000 };\n/**\n * 密钥扩展中的T函数\n */\nstatic int T(int num, int round) {\n    int numArray[4];\n    splitIntToArray(num, numArray);\n    leftLoop4int(numArray, 1);//字循环\n    int i;\n\n    //字节代换\n    for (i = 0; i < 4; i++)\n        numArray[i] = getNumFromSBox(numArray[i]);\n\n    int result = mergeArrayToInt(numArray);\n    return result ^ Rcon[round];\n}\n\n//密钥对应的扩展数组\nstatic int w[44];\n\n/**\n * 扩展密钥，结果是把w[44]中的每个元素初始化\n */\nstatic void extendKey(char* key)\n{\n    int  i, j;\n    for (i = 0; i < 4; i++)\n        w[i] = getWordFromStr(key + i * 4);\n\n    for (i = 4, j = 0; i < 44; i++)\n    {\n        if (i % 4 == 0)\n        {\n            w[i] = w[i - 4] ^ T(w[i - 1], j);\n            j++;//下一轮\n        }\n        else\n            w[i] = w[i - 4] ^ w[i - 1];\n    }\n}\n\n/**\n * 轮密钥加\n */\nstatic void addRoundKey(int array[4][4], int round) {\n    int warray[4];\n    int i, j;\n    for (i = 0; i < 4; i++) {\n\n        splitIntToArray(w[round * 4 + i], warray);\n\n        for (j = 0; j < 4; j++) {\n            array[j][i] = array[j][i] ^ warray[j];\n        }\n    }\n}\n\n/**\n * 字节代换\n */\nstatic void subBytes(int array[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            array[i][j] = getNumFromSBox(array[i][j]);\n}\n\n/**\n * 行移位\n */\nstatic void shiftRows(int array[4][4]) {\n    int rowTwo[4], rowThree[4], rowFour[4];\n    //复制状态矩阵的第2,3,4行\n    int i;\n\n    for (i = 0; i < 4; i++) {\n        rowTwo[i] = array[1][i];\n        rowThree[i] = array[2][i];\n        rowFour[i] = array[3][i];\n    }\n    //循环左移相应的位数\n    leftLoop4int(rowTwo, 1);\n    leftLoop4int(rowThree, 2);\n    leftLoop4int(rowFour, 3);\n\n    //把左移后的行复制回状态矩阵中\n    for (i = 0; i < 4; i++) {\n        array[1][i] = rowTwo[i];\n        array[2][i] = rowThree[i];\n        array[3][i] = rowFour[i];\n    }\n}\n\n/**\n * 列混合要用到的矩阵\n */\nstatic const int colM[4][4] = { 2, 3, 1, 1,\n    1, 2, 3, 1,\n    1, 1, 2, 3,\n    3, 1, 1, 2 };\n\nstatic int GFMul2(int s) {\n    int result = s << 1;\n    int a7 = result & 0x00000100;\n\n    if (a7 != 0) {\n        result = result & 0x000000ff;\n        result = result ^ 0x1b;\n    }\n\n    return result;\n}\n\nstatic int GFMul3(int s) {\n    return GFMul2(s) ^ s;\n}\n\nstatic int GFMul4(int s) {\n    return GFMul2(GFMul2(s));\n}\n\nstatic int GFMul8(int s) {\n    return GFMul2(GFMul4(s));\n}\n\nstatic int GFMul9(int s) {\n    return GFMul8(s) ^ s;\n}\n\nstatic int GFMul11(int s) {\n    return GFMul9(s) ^ GFMul2(s);\n}\n\nstatic int GFMul12(int s) {\n    return GFMul8(s) ^ GFMul4(s);\n}\n\nstatic int GFMul13(int s) {\n    return GFMul12(s) ^ s;\n}\n\nstatic int GFMul14(int s) {\n    return GFMul12(s) ^ GFMul2(s);\n}\n\n/**\n * GF上的二元运算\n */\nstatic int GFMul(int n, int s) {\n    int result;\n\n    if (n == 1)\n        result = s;\n    else if (n == 2)\n        result = GFMul2(s);\n    else if (n == 3)\n        result = GFMul3(s);\n    else if (n == 0x9)\n        result = GFMul9(s);\n    else if (n == 0xb)//11\n        result = GFMul11(s);\n    else if (n == 0xd)//13\n        result = GFMul13(s);\n    else if (n == 0xe)//14\n        result = GFMul14(s);\n\n    return result;\n}\n/**\n * 列混合\n */\nstatic void mixColumns(int array[4][4]) {\n\n    int tempArray[4][4];\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            tempArray[i][j] = array[i][j];\n\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++) {\n            array[i][j] = GFMul(colM[i][0], tempArray[0][j]) ^ GFMul(colM[i][1], tempArray[1][j])\n                ^ GFMul(colM[i][2], tempArray[2][j]) ^ GFMul(colM[i][3], tempArray[3][j]);\n        }\n}\n/**\n * 把4X4数组转回字符串\n */\nstatic void convertArrayToStr(int array[4][4], char* str) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            *str++ = (char)array[j][i];\n}\n/**\n * 检查密钥长度\n */\nstatic int checkKeyLen(int len) {\n    if (len == 16)\n        return 1;\n    else\n        return 0;\n}\n\n/**\n * 参数 p: 明文的字符串数组。\n * 参数 plen: 明文的长度。\n * 参数 key: 密钥的字符串数组。\n */\nvoid aes(char* p, int plen, char* key) {\n\n    int keylen = strlen(key);\n\n    if (!checkKeyLen(keylen)) {\n        printf(\"keylen erro;keylen=%d\\n\", keylen);\n        exit(0);\n    }\n\n    extendKey(key);//扩展密钥\n    int pArray[4][4];\n    int i, k;\n    for (k = 0; k < plen; k += 16) {\n        convertToIntArray(p + k, pArray);\n\n        addRoundKey(pArray, 0);//一开始的轮密钥加\n\n        for (i = 1; i < 10; i++) {//前9轮\n\n            subBytes(pArray);//字节代换\n\n            shiftRows(pArray);//行移位\n\n            mixColumns(pArray);//列混合\n\n            addRoundKey(pArray, i);\n        }\n\n        //第10轮\n        subBytes(pArray);//字节代换\n\n        shiftRows(pArray);//行移位\n\n        addRoundKey(pArray, 10);\n\n        convertArrayToStr(pArray, p + k);\n    }\n}\n/**\n * 根据索引从逆S盒中获取值\n */\nstatic int getNumFromS1Box(int index) {\n    int row = getLeft4Bit(index);\n    int col = getRight4Bit(index);\n    return S2[row][col];\n}\n/**\n * 逆字节变换\n */\nstatic void deSubBytes(int array[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            array[i][j] = getNumFromS1Box(array[i][j]);\n}\n/**\n * 把4个元素的数组循环右移step位\n */\nstatic void rightLoop4int(int array[4], int step) {\n    int temp[4];\n    int i;\n    for (i = 0; i < 4; i++)\n        temp[i] = array[i];\n\n    int index = step % 4 == 0 ? 0 : step % 4;\n    index = 3 - index;\n    for (i = 3; i >= 0; i--) {\n        array[i] = temp[index];\n        index--;\n        index = index == -1 ? 3 : index;\n    }\n}\n\n/**\n * 逆行移位\n */\nstatic void deShiftRows(int array[4][4]) {\n    int rowTwo[4], rowThree[4], rowFour[4];\n    int i;\n    for (i = 0; i < 4; i++) {\n        rowTwo[i] = array[1][i];\n        rowThree[i] = array[2][i];\n        rowFour[i] = array[3][i];\n    }\n\n    rightLoop4int(rowTwo, 1);\n    rightLoop4int(rowThree, 2);\n    rightLoop4int(rowFour, 3);\n\n    for (i = 0; i < 4; i++) {\n        array[1][i] = rowTwo[i];\n        array[2][i] = rowThree[i];\n        array[3][i] = rowFour[i];\n    }\n}\n/**\n * 逆列混合用到的矩阵\n */\nstatic const int deColM[4][4] = { 0xe, 0xb, 0xd, 0x9,\n    0x9, 0xe, 0xb, 0xd,\n    0xd, 0x9, 0xe, 0xb,\n    0xb, 0xd, 0x9, 0xe };\n\n/**\n * 逆列混合\n */\nstatic void deMixColumns(int array[4][4]) {\n    int tempArray[4][4];\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            tempArray[i][j] = array[i][j];\n\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++) {\n            array[i][j] = GFMul(deColM[i][0], tempArray[0][j]) ^ GFMul(deColM[i][1], tempArray[1][j])\n                ^ GFMul(deColM[i][2], tempArray[2][j]) ^ GFMul(deColM[i][3], tempArray[3][j]);\n        }\n}\n/**\n * 把两个4X4数组进行异或\n */\nstatic void addRoundTowArray(int aArray[4][4], int bArray[4][4]) {\n    int i, j;\n    for (i = 0; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            aArray[i][j] = aArray[i][j] ^ bArray[i][j];\n}\n/**\n * 从4个32位的密钥字中获得4X4数组，\n * 用于进行逆列混合\n */\nstatic void getArrayFrom4W(int i, int array[4][4]) {\n    int index = i * 4;\n    int colOne[4], colTwo[4], colThree[4], colFour[4];\n    splitIntToArray(w[index], colOne);\n    splitIntToArray(w[index + 1], colTwo);\n    splitIntToArray(w[index + 2], colThree);\n    splitIntToArray(w[index + 3], colFour);\n\n    for (i = 0; i < 4; i++) {\n        array[i][0] = colOne[i];\n        array[i][1] = colTwo[i];\n        array[i][2] = colThree[i];\n        array[i][3] = colFour[i];\n    }\n}\n\n/**\n * 参数 c: 密文的字符串数组。\n * 参数 clen: 密文的长度。\n * 参数 key: 密钥的字符串数组。\n */\nvoid deAes(char* c, int clen, char* key) {\n\n    int keylen = strlen(key);\n    if (clen == 0 || clen % 16 != 0) {\n        printf(\"Ciphertext characters must be a multiple of 16! Now the length is zero:%d\\n\", clen);\n        exit(0);\n    }\n\n    if (!checkKeyLen(keylen)) {\n        printf(\"Key character length error! The lengths must be 16, 24, and 32. The current length is:%d\\n\", keylen);\n        exit(0);\n    }\n\n    extendKey(key);//扩展密钥\n    int cArray[4][4];\n    int i, k;\n    for (k = 0; k < clen; k += 16) {\n        convertToIntArray(c + k, cArray);\n\n\n        addRoundKey(cArray, 10);\n\n        int wArray[4][4];\n        for (i = 9; i >= 1; i--) {\n            deSubBytes(cArray);\n\n            deShiftRows(cArray);\n\n            deMixColumns(cArray);\n            getArrayFrom4W(i, wArray);\n            deMixColumns(wArray);\n\n            addRoundTowArray(cArray, wArray);\n        }\n\n        deSubBytes(cArray);\n\n        deShiftRows(cArray);\n\n        addRoundKey(cArray, 0);\n\n        convertArrayToStr(cArray, c + k);\n\n    }\n}\n```\n\n\n\n> .rodata段是用来存放只读数据的一块内存区域，例如常量数据。ro代表read only，即只读的意思。.rodata段也叫常量区，它属于静态内存分配。使用const修饰符，例如`const int a = 10;`，这样的变量会被放在.rodata段中\n\n\n\n## Ida Python脚本:\n\n```python\nstart = 0x00401500\nend  = start + 0xBA\nxor = 0x41\nfor i in range(start,end):\n   data = get_wide_byte(i)\n   patch_byte(i,data^xor)\n   print(\"{} patched\".format(i))\n```\n\n## attribute实现main函数之前执行相应函数：\n\n```c++\n#include <stdio.h>\n\nvoid before() __attribute__((constructor));\nvoid after() __attribute__((destructor));\n\nvoid before() {\n    printf(\"this is function %s\\n\",__func__);\n    return;\n}\n\nvoid after(){\n    printf(\"this is function %s\\n\",__func__);\n    return;\n}\n\nint main(){\n    printf(\"this is function %s\\n\",__func__);\n    return 0;\n}\n\n```\n\n\n\n## 函数调用默认传参的几种方式\n\n$$\ncdecl：这是C语言默认的调用约定，它要求参数从右向左依次压入栈中，由调用者负责清理栈空间。这种方式适用于可变数量的参数，如printf函数。在Windows和Linux系统中，cdecl通常用于32位x86架构的编译器。\n$$\n\n$$\nstdcall：这是Windows API默认的调用约定，它要求参数从右向左依次压入栈中，由被调用者负责清理栈空间。这种方式适用于固定数量的参数，如MessageBox函数。在Windows系统中，stdcall通常用于32位x86架构的编译器。\n$$\n\n$$\nfastcall：这是一种优化的调用约定，它要求将部分参数通过寄存器传递，而不是全部压入栈中，以提高函数调用的效率。不同的编译器可能会有不同的fastcall实现，例如Microsoft Visual C++和Borland C++ Builder分别使用ECX和EDX两个寄存器传递前两个参数，而GCC则使用EAX、EDX和ECX三个寄存器传递前三个参数。在Windows和Linux系统中，fastcall通常用于32位x86架构的编译器。\n$$\n\n$$\nthiscall：这是C++类成员函数默认的调用约定，它要求将对象指针（this指针）通过ECX寄存器传递给函数，而其他参数则从右向左依次压入栈中。由于thiscall只适用于类成员函数，因此它通常不需要显式指定。在Windows和Linux系统中，thiscall通常用于32位x86架构的编译器。\n$$\n\n$$\nsyscall：这是Linux内核默认的调用约定，它要求将系统调用号通过EAX寄存器传递给内核，而其他参数则通过EBX、ECX、EDX、ESI、EDI和EBP六个寄存器按顺序传递给内核。如果参数超过六个，则需要通过栈传递。在Linux系统中，syscall通常用于32位x86架构的编译器\n$$\n\n$$\n在64位x86架构（x86_64或AMD64）的编译器中，通常会有更多的寄存器可供使用，因此参数传递方式也会有所不同。例如，在Windows系统中，x64调用约定要求将前四个整数或指针类型的参数通过RCX、RDX、R8和R9四个寄存器传递，而前四个浮点类型的参数通过XMM0、XMM1、XMM2和XMM3四个寄存器传递；在Linux系统中，System V AMD64 ABI要求将前六个整数或指针类型的参数通过RDI、RSI、RDX、RCX、R8和R9六个寄存器传递，而前八个浮点类型的参数通过XMM0到XMM7八个寄存器传递。\n$$\n\n\n\n## gbk解码转中文，先ida64 convert to string，再用b修饰，解码即可\n\n```python\nstr = b\"\\xD7\\xA2\\xB2\\xE1\\xB3\\xC9\\xB9\\xA6\\xA3\\xA1\"\nprint(str.decode('gbk'))\n```\n\n\n\n## 异常处理和反调试\n\n反调试的几种方式记录\n\n```c++\n#include<iostream>\n#include<Windows.h>\nchar flag[5] = \"1234\";\nvoid change()\n{\n    strcpy_s(flag, size_t(5), \"9999\");\n}\n\n\nEXCEPTION_DISPOSITION WINAPI myExceptHandler(\n    struct _EXCEPTION_RECORD* ExceptionRecord,\n    PVOID EstablisherFrame,\n    PCONTEXT pcontext,\n    PVOID DisapatcherContext\n    )\n{\n   // 第五种方式，类似第四种方式\n    if (pcontext->Dr0 != 0 || pcontext->Dr1 != 0 || pcontext->Dr2 != 0 || pcontext->Dr3 != 0)\n    {\n        printf(\"myExceptHandler检测到硬件断点\\n\");\n    }\n    else\n    {\n        printf(\"myExceptHandlerm没有检测到硬件断点\\n\");\n    }\n    pcontext->Eip += 2;//跳过程序异常处，要不然程序一直在异常处不继续运行\n    change();\n    return ExceptionContinueExecution;\n}\n\n\nint main()\n{\n#if 1\n    //第一种，会被x32dbg,OD反反调试器杀掉\n    BOOL flag = IsDebuggerPresent();\n    if (flag)\n    {\n        printf(\"IsDebuggerPresent检测到调试器\\n\");\n    }\n    else\n    {\n        printf(\"IsDebuggerPresent没有检测到调试器\\n\");\n    }\n    //第二种，不会被x32,OD反反调试器杀掉\n    BOOL IsDebug = 0;\n    //第一个参数是进程句柄，可以检测远程进程是否被调试\n    CheckRemoteDebuggerPresent(GetCurrentProcess(), &IsDebug);\n    if (IsDebug)\n    {\n        printf(\"CheckRemoteDebuggerPresent检测到调试器\\n\");\n    }\n    else\n    {\n        printf(\"CheckRemoteDebuggerPresent没有检测到调试器\\n\");\n    }\n    //\n    //第三种，不会被x32,OD反反调试器杀掉\n    //CloseHandle函数会试图关闭指定句柄的进程，\n#if 1 \n    __try\n    {\n        CloseHandle((HANDLE)0x1234);//指定一个不存在的进程句柄\n        printf(\"CloseHandle没有检测到调试器\\n\");\n    }\n    __except(1)\n    {\n        printf(\"CloseHandle检测到调试器\\n\");\n    }\n#endif\n    //第四种,硬件断点反调试，只要在动调时设置硬件断点就会被发现\n    CONTEXT context{ 0 };\n    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;\n    GetThreadContext(GetCurrentThread(),&context);\n    //查找寄存器的值，如果有硬件断点，该寄存器的值会改变\n    if (context.Dr0 != 0 || context.Dr1 != 0 || context.Dr2 != 0 || context.Dr3 != 0)\n    {\n        printf(\"GetThreadContext检测到硬件断点\\n\");\n    }\n    else\n    {\n        printf(\"GetThreadContext没有检测到硬件断点\\n\");\n    }\n#endif\n    //第五种\n    DWORD sehHandler = (DWORD)myExceptHandler;\n    //上面可能是添加一个异常处理函数，然后下面让异常处理链表SEH增加一个节点，把这个异常处理函数插进去\n    _asm\n    {\n        push myExceptHandler//fs: [0] 指向的是TIB[Thread information Block]结构中的EXCEPTION_REGISTRATION 结构\n        mov eax,fs:[0]\n        push eax\n        mov fs:[0],esp//让fs:[0]指向一个新的EXCEPTION_REGISTRATION 结构(就像链表插入一个新节点)\n    }\n    //设置程序异常处\n    int a = 1;\n    a = a / 0;\n    std::cout << flag;\n    system(\"pause\");\n}\n```\n\n\n\n## dll的编译和使用\n\n先编译dll文件，新建生成dll项目，创建一个新的Mydll.cpp和Mydll.h\n\nMydll.cpp\n\n```c++\n#include \"pch.h\"\n#include \"Mydll.h\"\n\nint add(int a, int b)\n{\n\treturn a + b;\n}\n\nint sub(int a, int b)\n{\n\treturn a-b;\n}\n\nint multi(int a, int b)\n{\n\treturn a*b;\n}\n\nint Div(int a, int b)\n{\n\treturn a/b;\n}\n\nint XXOR(int a,int b)\n{\n\treturn a ^ b;\n}\n\n```\n\n导出的两种方式的其中第一种方式，头文件导出\n\n```c\n#pragma once\n\n#ifdef MYDLL_EXPORTS\n#define MYDLL_API __declspec(dllexport)\n#else\n#define MYDLL_API __declspec(dllimport)\n#endif\n\n//第一种导出方式\nextern \"C\" MYDLL_API int add(int a, int b);\n\n// Produce the next value in the sequence.\n// Returns true on success and updates current value and index;\n// false on overflow, leaves current value and index unchanged.\nextern \"C\" MYDLL_API int sub(int a,int b);\n\n// Get the current value in the sequence.\nextern \"C\" MYDLL_API int multi(int a,int b);\n\n// Get the position of the current value in the sequence.\nextern \"C\" MYDLL_API int Div(int a,int b);\n```\n\n导出的第二种方式，源文件新建一个export.def文件\n\n```c++\nLIBRARY \"Mydll\"\nEXPORTS\nXXOR @ 1\n```\n\n新建一个项目导入生成的dll文件\n\n导入的第一种方式，隐式链接的方式调用dll导出寒素\n\n`#pragma comment(lib,\"Mydll.lib\")//lib地址`\n\n头文件main.h\n\n```c++\n#pragma once\n#include<iostream>\n#include<Windows.h>\n#pragma comment(lib,\"Mydll.lib\")//lib地址\nextern \"C\" int add(int a, int b);\n\n```\n\n源文件main.cpp\n\n```c++\n#include\"main.h\"\nint main()\n{\n\tint sum = add(1, 2);\n\tprintf(\"%d\", sum);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n第二种显示链接方式调用导出函数\n\n不需要头文件和lib，源文件main.cpp如下\n\n```c++\n#include<iostream>\n#include<Windows.h>\ntypedef int (*XXOR)(int a, int b);\nint main()\n{\n\tHMODULE hModule = LoadLibraryW(L\"Mydll.dll\");\n\tXXOR Xorr = (XXOR)GetProcAddress(hModule, \"XXOR\");\n\tprintf(\"%d\", Xorr(100, 200));\n\tFreeLibrary(hModule);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n## c语言RC4，base64加解密代码\n\n```c++\nvoid init(unsigned char* S, const unsigned char* key, int keylen) {\n    for (int i = 0; i < 256; i++) {\n        S[i] = i;\n    }\n    int j = 0;\n    for (int i = 0; i < 256; i++) {\n        j = (j + S[i] + key[i % keylen]) % 256;\n        // 交换 S[i] 和 S[j]\n        unsigned char temp = S[i];\n        S[i] = S[j];\n        S[j] = temp;\n    }\n}\n\n// 生成一个字节的密钥流\nunsigned char generate(unsigned char* S, int* i, int* j) {\n    *i = (*i + 1) % 256;\n    *j = (*j + S[*i]) % 256;\n    // 交换 S[i] 和 S[j]\n    unsigned char temp = S[*i];\n    S[*i] = S[*j];\n    S[*j] = temp;\n    // 返回 S[S[i] + S[j]]\n    return S[(S[*i] + S[*j]) % 256];\n}\n\n// 对数据进行加密或解密\nvoid encrypt(unsigned char* data, int datalen, const unsigned char* key, int keylen) {\n    unsigned char S[256]; // 256 字节的数据表\n    int i = 0, j = 0; // 两个索引变量\n    // 初始化 S 表\n    init(S, key, keylen);\n    for (int k = 0; k < datalen; k++) {\n        // 数据和密钥流进行异或运算\n        data[k] ^= generate(S, &i, &j);\n    }\n}\n\nconst char* const base64char = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nint base64_decode(const char* base64, unsigned char* bindata)\n{\n    int i, j;\n    unsigned char k;\n    unsigned char temp[4];\n\n    for (i = 0, j = 0; base64[i] != '\\0'; i += 4)\n    {\n        memset(temp, 0xFF, sizeof(temp));\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i])\n                temp[0] = k;\n        }\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i + 1])\n                temp[1] = k;\n        }\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i + 2])\n                temp[2] = k;\n        }\n        for (k = 0; k < 64; k++)\n        {\n            if (base64char[k] == base64[i + 3])\n                temp[3] = k;\n        }\n\n        bindata[j++] = ((unsigned char)(((unsigned char)(temp[0] << 2)) & 0xFC)) |\n            ((unsigned char)((unsigned char)(temp[1] >> 4) & 0x03));\n        if (base64[i + 2] == '=')\n            break;\n\n        bindata[j++] = ((unsigned char)(((unsigned char)(temp[1] << 4)) & 0xF0)) |\n            ((unsigned char)((unsigned char)(temp[2] >> 2) & 0x0F));\n        if (base64[i + 3] == '=')\n            break;\n\n        bindata[j++] = ((unsigned char)(((unsigned char)(temp[2] << 6)) & 0xF0)) |\n            ((unsigned char)(temp[3] & 0x3F));\n    }\n    return j;\n}\nchar* base64_encode(const unsigned char* bindata, char* base64, int binlength)//输入，输出，输入长度\n{\n    int i, j;\n    unsigned char current;\n\n    for (i = 0, j = 0; i < binlength; i += 3)\n    {\n        current = (bindata[i] >> 2);\n        current &= (unsigned char)0x3F;\n        base64[j++] = base64char[(int)current];\n\n        current = ((unsigned char)(bindata[i] << 4)) & ((unsigned char)0x30);\n        if (i + 1 >= binlength)\n        {\n            base64[j++] = base64char[(int)current];\n            base64[j++] = '=';\n            base64[j++] = '=';\n            break;\n        }\n        current |= ((unsigned char)(bindata[i + 1] >> 4)) & ((unsigned char)0x0F);\n        base64[j++] = base64char[(int)current];\n\n        current = ((unsigned char)(bindata[i + 1] << 2)) & ((unsigned char)0x3C);\n        if (i + 2 >= binlength)\n        {\n            base64[j++] = base64char[(int)current];\n            base64[j++] = '=';\n            break;\n        }\n        current |= ((unsigned char)(bindata[i + 2] >> 6)) & ((unsigned char)0x03);\n        base64[j++] = base64char[(int)current];\n\n        current = ((unsigned char)bindata[i + 2]) & ((unsigned char)0x3F);\n        base64[j++] = base64char[(int)current];\n    }\n    base64[j] = '\\0';\n    return base64;\n}\nint main() {\n    unsigned char Buffer[31];\n    char enc[41];\n    unsigned char key[] = \"BirkenwaldCTF{This_is_f4ke_f1ag}\";//RC5密钥\n    int keylen = (int)strlen((char*)key);\n    printf(\"Do you know flag?\\n\");\n    printf(\"Please tell me:\\n\");\n    scanf(\"%s\", Buffer);\n    int datelen = (int)strlen((char*)Buffer);\n    encrypt(Buffer, datelen, key, keylen);//RC4加密\n    encrypt2(Buffer, enc, 30);//base64加密\n    return 0;\n}\n\n```\n\n\n\n##  lea指令使用，防止遗忘\n\nlea，官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址；\n\n常见的几种用法：\n\n`1、lea eax，[addr]`\n\n就是将表达式addr的值放入eax寄存器，示例如下：\n\nlea eax,[401000h]; 将值401000h写入eax寄存器中\n\nlea指令右边的操作数表示一个精指针，上述指令和mov eax，401000h是等价的\n\n`2、lea eax，dword ptr [ebx]`;将ebx的值赋值给eax\n\n`3、lea eax，c`；其中c为一个int型的变量，该条语句的意思是把c的地址赋值给eax；\n\n\n\n## 内联汇编实现部分常用函数功能练习\n\n在全局内定义字符串后的print hello world，因为编译器会编译的时候会自动寻址，最简单的一种方法\n\n```c++\n#include<stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar format[] = \"%s %s\\n\";\nchar hello[] = \"hello\";\nchar world[] = \"world!\";\n//_declspec(naked)裸函数标识，没有基本函数框架的函数\nvoid _declspec(naked)print()//打印hello world\n{\n\t_asm\n\t{\n\t\tpush ebp\n\t\tmov ebp,esp\n\t\tsub esp,0x20\n\t\tmov eax,offset world\n\t\tpush eax\n\t\tmov eax,offset hello\n\t\tpush eax\n\t\tmov eax,offset format\n\t\tpush eax\n\t\tcall printf\n\t\tpop ebx\n\t\tpop ebx\n\t\tpop ebx\n\t\tmov esp,ebp\n\t\tpop ebp\n\t\tretn\n\t}\n}\n\nint main(void)\n{\n\t_asm\n\t{\n\t\tcall print\n\t}\n}\n```\n\n利用局部变量字符串，将字符串push进栈中，通过栈寻址，push传参来实现功能\n\n```c++\n#include<stdio.h>\n#include <string.h>\n//char format[] = \"%s %s\";//25,73,20,25,73\n//char hello[] = \"hello\";//68,65,6c,6c,6f\n//char world[] = \"world!\";//77,6f,72,6c,64,21\nvoid _declspec(naked)print()\n{\n\t_asm\n\t{\n\t\tpush ebp\n\t\tmov ebp,esp\n\t\tpush eax\n\t\tpush 0x2164//push 后高位自动补零结束字符串\n\t\tpush 0x6c726f77//注意push顺序和十六进制顺序\n\t\tpush 0x6f\n\t\tpush 0x6c6c6568\n\t\tpush 0x73\n\t\tpush 0x25207325\n\t\tlea eax,dword ptr ss:[esp+0x10]//ss堆栈段，ds数据段\n\t\tpush eax\n\t\tlea eax,dword ptr ss:[esp+0xc]//注意偏移量计算\n\t\tpush eax\n\t\tlea eax,dword ptr ss:[esp+0x08]//用lea将字符串地址传入寄存器\n\t\tpush eax\n\t\tcall printf\n\t\tadd esp,0x24\n\t\tpop eax\n\t\tmov esp,ebp\n\t\tpop ebp\n\t\tret\n\t}\n}\n\nint main(void)\n{\n\t//char format[] = \"%s %s\";//25,73,20,25,73,0a\n\t//char hello[] = \"hello\";//68,65,6c,6c,6f\n\t//char world[] = \"world!\";//77,6f,72,6c,64,21\n\t//printf(format, hello, world);\n\t_asm\n\t{\n\t\tcall print\n\t\tret\n\t}\n}\n```\n\n利用kernel32.dll或者kernelbase.dll模块寻找loadlibrary和getprocaddr函数地址，以此加载想要的模块和获得想要的函数地址，从而调用想要的函数\n```c++\n#include<stdio.h>\n#include <Windows.h>\nchar Load[] = \"LoadLibraryA\";//4c,6f,61,64,4c,69,62,72,61,72,79,41 00 len = 0xc\nchar Get[] = \"GetProcAddress\";//47,65,74,50,72,6f,63,41,64,64,72,65,73,73 00 len = 0xe\nchar hello[] = \"hello world!\";//68,65,6c,6c,6f,20,77,6f,72,6c,64,21 00 len = 0xc\nchar Msvc[] = \"msvcrt.dll\";//6d,73,76,63,72,74,2e,64,6c,6c 00 len = 0xa\nchar Print[] = \"printf\";//70,72,69,6e,74,66 00 len = 0x6\nvoid _declspec(naked)MyShell()\n{\n\t_asm\n\t{\n\t\tpushad\n\t\tmov ebp,esp\n\t\tpush 0\n\t\tpush 0x21646c72//\n\t\tpush 0x6f77206f//\n\t\tpush 0x6c6c6568//hello world\n\t\tpush 0x7373//\n\t\tpush 0x65726464//\n\t\tpush 0x41636f72//\n\t\tpush 0x50746547//GetProcAddress\n        push 0\n\t\tpush 0x41797261//\n\t\tpush 0x7262694c//\n\t\tpush 0x64616f4c//LoadLibraryA\n\t\tmov ecx,esp\n\t\tpush ecx//esp传参过去\n\t\tcall Func_print\n\t\tmov esp,ebp\n\t\tpopad\n               nop\n               nop\n               nop\n               nop\n               nop//填充五个字节留给jmp指令，因为call指令有一个相对地址\n            //可以在OD，xdbg中计算jmp的相对地址\n            \n    \n\t\tret\n\n\tFunc_GetModule:\n\tpush ebp\n\t\tmov ebp, esp\n\t\tsub esp, 0x20\n\t\tpush esi\n\t\tmov esi,dword ptr fs:[0x30]//PEB结构体地址\n\t\tmov esi,[esi+0xc]//LDR结构体地址\n\t\tmov esi,[esi+0x1c]//list\n\t\tmov esi,[esi]//list 第二项kernel32或者kernelbase\n\t\tmov esi,[esi+0x8]//dllbase\n\t\tmov eax,esi\n\t\tpop esi\n\t\tmov esp, ebp\n\t\tpop ebp\n\t\tret \n\n\t\tFunc_GetAddr:\n\t    push ebp\n\t\tmov ebp, esp\n\t\tsub esp, 0x20\n\t\tmov edx, [ebp + 0x8]//dllbase\n\t\tmov esi, [edx + 0x3c]//if_anew\n\t\tlea esi, [esi + edx]//NT header\n\t\tmov esi, [esi + 0x78]//导出表RVA\n\t\tlea esi, [edx + esi]//导出表VA\n\t\tmov edi, [esi + 0x1c]//EAT RVA\n\t\tlea edi, [edi + edx]//EAT VA\n\t\tmov [ebp - 0x4], edi//保存\n\t\tmov edi, [esi + 0x20]//ENT RVA\n\t\tlea edi, [edi + edx]//ENT VA\n\t\tmov [ebp - 0x8], edi//保存\n\t\tmov edi, [esi + 0x24]//EOT RVA\n\t\tlea edi, [edi+edx]//EOT VA\n\t\tmov [ebp-0xc],edi//保存\n\t\txor eax,eax\n\t\tjmp tag_cmpfirst\n\ttag_cmpLoop:\n\t    inc eax\n\ttag_cmpfirst:\n\t    mov esi,[ebp-0x8]//ENT\n\t\tmov esi,[esi+eax*4]//RVA\n\t\tlea esi,[esi+edx]//函数名称字符串地址\n\t\tmov edi,[ebp+0xc]//\n\t\tmov ecx,[ebp+0x10]//循环次数，ebp+0x10是传来的参数\n\t\trepe cmpsb\n\t\tmov esi,[ebp-0xc]\n\t\tjne tag_cmpLoop\n\t\tmov esi,[ebp-0xc]//EOT\n\t\txor edi,edi//为了不影响结果清空edi\n\t\tmov di,[esi+eax*2]//word类型,EAT表索引\n\t\tmov edx,[ebp-0x4]//EAT\n\t\tmov esi,[edx+edi*4]//函数地址RVA\n\t\tmov edx,[ebp+0x8]//dllbase\n\t\tlea eax,[esi+edx]//最终函数地址\n\t\tmov esp, ebp\n\t\tpop ebp\n\t\tretn 0xc//在栈中弹出三个参数\n\n\n\tFunc_print:\n\tpush ebp\n\t\tmov ebp,esp \n\t\tsub esp,0x10\n\t\tcall Func_GetModule//获取kernel模块基址\n\t\tmov [ebp-0x4],eax//[ebp-0x4]保存模块基址\n\t\tlea ecx,[ebp + 0xc]//load地址\n\t\tpush 0xc\n\t\tpush ecx\n\t\tpush eax\n\t\tcall Func_GetAddr//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya\n\t\tmov [ebp-0x8],eax//load地址\t\n\t\tpush 0xe\n\t\tlea ecx, [ebp + 0x1c]//Get字符串\n\t\tpush ecx\n\t\tpush [ebp-0x4]//模块基址\n\t\tcall Func_GetAddr//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress\n\t\tmov [ebp-0xc],eax//get地址\n\t\tpush 0x6c6c\n\t\tpush 0x642e7472\t\n\t\tpush 0x6376736d\n\t\tlea ecx,dword ptr ss:[ebp-0x1c]\n\t\tpush ecx\n\t\tcall [ebp-0x8]//调用load函数load Msvc.dll，一个参数，字符串地址\n\t\tpush 0x6674\n\t\tpush 0x6e697270\n\t\tlea ecx,[ebp-0x24]//printf字符串\n\t\tpush ecx\n\t\tpush eax//msvc.dll基址\n\t\tcall [ebp-0xc]//调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称\n\t\tlea ecx,[ebp+0x2c]//hello world地址\n\t\tpush ecx\n\t\tcall eax//printf地址\n\t\tmov esp,ebp\n\t\tpop ebp\n\t\tret\n\n\n\t}\n}\n\nint main(void)\n{\n\t/*GetProcAddress();\n    LoadLibraryA()*/\n\t\t//6d, 73, 76, 63, 72, 74, 2e, 64, 6c, 6c 00 len = 0xa\n\t\t// //70,72,69,6e,74,66\n\tMyShell();\n\tsystem(\"pause\");\n\t/*\tfor (int i = 0; i < strlen(Print); i++)\n\t\t{\n\t\t\tprintf(\"%x,\", Print[i]);\n\t\t}*/\n\t\n}\n/*AT&T写法\nasm(\n    \"pusha\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"push $0\\n\"\n    \"push $0x21646c72\\n\"\n    \"push $0x6f77206f\\n\"\n    \"push $0x6c6c6568\\n\" // hello world\n    \"push $0x7373\\n\"\n    \"push $0x65726464\\n\"\n    \"push $0x41636f72\\n\"\n    \"push $0x50746547\\n\" // GetProcAddress\n    \"push $0\\n\"\n    \"push $0x41797261\\n\"\n    \"push $0x7262694c\\n\"\n    \"push $0x64616f4c\\n\" // LoadLibraryA\n    \"mov %esp, %ecx\\n\"\n    \"push %ecx\\n\" // esp传参过去\n    \"call Func_print\\n\"\n    \"mov %ebp, %esp\\n\"\n    \"popa\\n\"\n    \"nop\\n\"\n    \"nop\\n\"\n    \"nop\\n\"\n    \"nop\\n\"\n    \"nop\\n\" // 填充五个字节留给jmp指令，因为call指令有一个相对地址\n    // 可以在OD，xdbg中计算jmp的相对地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetModule:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"push %esi\\n\"\n    \"mov %fs:0x30, %esi\\n\" // PEB结构体地址\n    \"mov 0xc(%esi), %esi\\n\" // LDR结构体地址\n    \"mov 0x1c(%esi), %esi\\n\" // list\n    \"mov (%esi), %esi\\n\" // list 第二项kernel32或者kernelbase\n    \"mov 0x8(%esi), %esi\\n\" // dllbase\n    \"mov %esi, %eax\\n\"\n    \"pop %esi\\n\"\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n\n\"Func_GetAddr:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x20, %esp\\n\"\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"mov 0x3c(%edx), %esi\\n\" // if_anew\n    \"lea (%edx, %esi), %esi\\n\"  // NT header\n    \"mov 0x78(%esi), %esi\\n\"  // 导出表RVA\n    \"lea (%edx, %esi), %esi\\n\"  // 导出表VA\n    \"mov 0x1c(%esi), %edi\\n\"  // EAT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EAT VA\n    \"mov %edi, -0x4(%ebp)\\n\"  // 保存\n    \"mov 0x20(%esi), %edi\\n\"  // ENT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // ENT VA\n    \"mov %edi, -0x8(%ebp)\\n\"  // 保存\n    \"mov 0x24(%esi), %edi\\n\"  // EOT RVA\n    \"lea (%edx, %edi), %edi\\n\"  // EOT VA\n    \"mov %edi, -0xc(%ebp)\\n\"  // 保存\n    \"xor %eax, %eax\\n\" \n    \"jmp tag_cmpfirst\\n\" \n\"tag_cmpLoop:\"\n    \"inc %eax\\n\" \n\"tag_cmpfirst:\"\n    \"mov -0x8(%ebp), %esi\\n\"  // ENT\n    \"mov (%esi, %eax, 4), %esi\\n\" // RVA\n    \"lea (%edx, %esi), %esi\\n\" // 函数名称字符串地址\n    \"mov 0xc(%ebp), %edi\\n\"\n    \"mov 0x10(%ebp), %ecx\\n\" // 循环次数，ebp+0x10是传来的参数\n    \"repe cmpsb\\n\"\n    \"mov -0xc(%ebp), %esi\\n\"\n    \"jne tag_cmpLoop\\n\"\n    \"mov -0xc(%ebp), %esi\\n\" // EOT\n    \"xor %edi, %edi\\n\" // 为了不影响结果清空edi\n    \"mov (%esi, %eax, 2), %di\\n\" // word类型,EAT表索引\n    \"mov -0x4(%ebp), %edx\\n\" // EAT\n    \"mov (%edx, %edi, 4), %esi\\n\" // 函数地址RVA\n    \"mov 0x8(%ebp), %edx\\n\" // dllbase\n    \"lea (%edx, %esi), %eax\\n\" // 最终函数地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret $0xc\\n\" // 在栈中弹出三个参数\n\n\"Func_print:\"\n    \"push %ebp\\n\"\n    \"mov %esp, %ebp\\n\"\n    \"sub $0x10, %esp\\n\"\n    \"call Func_GetModule\\n\" // 获取kernel模块基址\n    \"mov %eax, -0x4(%ebp)\\n\" // 保存模块基址\n    \"lea 0xc(%ebp), %ecx\\n\" // load地址\n    \"push $0xc\\n\"\n    \"push %ecx\\n\"\n    \"push %eax\\n\"\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya\n    \"mov %eax, -0x8(%ebp)\\n\" // load地址\n    \"push $0xe\\n\"\n    \"lea 0x1c(%ebp), %ecx\\n\" // Get字符串\n    \"push %ecx\\n\"\n    \"push -0x4(%ebp)\\n\" // 模块基址\n    \"call Func_GetAddr\\n\" // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress\n    \"mov %eax, -0xc(%ebp)\\n\" // get地址\n    \"push $0x6c6c\\n\"\n    \"push $0x642e7472\\n\"\n    \"push $0x6376736d\\n\"\n    \"lea -0x1c(%ebp), %ecx\\n\"\n    \"push %ecx\\n\"\n    \"call -0x8(%ebp)\\n\" // 调用load函数load Msvc.dll，一个参数，字符串地址\n    \"push $0x6674\\n\"\n    \"push $0x6e697270\\n\"\n    \"lea -0x24(%ebp), %ecx\\n\" // printf字符串\n    \"push %ecx\\n\"\n    \"push %eax\\n\" // msvc.dll基址\n    \"call -0xc(%ebp)\\n\" // 调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称\n    \"lea 0x2c(%ebp), %ecx\\n\" // hello world地址\n    \"push %ecx\\n\"\n    \"call %eax\\n\" // printf地址\n    \"mov %ebp, %esp\\n\"\n    \"pop %ebp\\n\"\n    \"ret\\n\"\n    );\n*/\n```\n\n准备了一个表格存储栈信息,ebp2对应的是print函数的栈底，pushadd到ebp2是Myshell函数形成的栈帧\n\n|           | msvc     |\n| --------- | -------- |\n|           | printf   |\n| 28        | 6e       |\n| printf 24 | 66       |\n| 20        | msvc     |\n| 1c msvc   | 63       |\n| 18        | 64       |\n| 14        | 6c       |\n| esp 0x10  |          |\n| 0xc       | get_adr  |\n| 0x8       | load_adr |\n| 0x4       | kernel   |\n| ebp2      | ebp1     |\n| 4         | eip      |\n| 8         | ecx=esp1 |\n| load c    | 64       |\n| 10        | 72       |\n| 14        | 41       |\n| 18        | 0        |\n| get1c     | 50       |\n| 20        | 41       |\n| 24        | 65       |\n| 28        | 73       |\n| hello 2c  | 6c       |\n| 30        | 6f       |\n| 34        | 21       |\n| 38        | 0        |\n| pushadd   | ad       |\n\n\n\n## 重温栈结构\n\n> 今天在准备写一个壳的时候需要手写汇编，把汇编十六进制插入PE文件中，一时对栈结构有点遗忘，在xdbg中调了会温故了一下，在这里记一下，防止下一次遗忘\n\n比方说我们有一个main函数时，在函数开始时经常有如下汇编代码\n\n```c++\npush ebp\n\nmov esp,ebp\n\nsub esp,0x20\n```\n\n为什么会出现以上代码？在主函数调用的子函数中能不能不出现这些代码？\n\npush ebp 做的是一个保存ebp的操作，mov esp,ebp为下一个栈帧形成打下基础，在新栈帧中利用栈来保存数据，并且不会破坏原来栈帧中的数据\n\nsub esp,0x20则是开辟了一个新的栈空间，这段空间可被函数直接利用，比如说做一些局部变量的初始化操作，也可以省略这部操作，直接通过push提高栈顶（地址下降）然后再通过mov在栈中储存数据（初始化局部变量）\n\n主函数下的子函数结构和main函数类似，其实也可以说main函数时其他函数的子函数，没有什么较大的区别\n\n在call的时候其实把下一条要执行汇编代码地址push进了栈中，然后在函数内部在push ebp这些操作，使得每次函数调用结束时，会出现以下代码\n\n```\npop ebp\nret\n```\n\nret返回的正是下一条汇编代码执行处\n\n在函数调用时，有时通过push来传递参数，这个时候栈顶提高，但是参数传递之后对主函数没有任何作用，所以函数调用结束时主函数有时候会通过add esp来调整栈空间。\n\npush指令在x86架构下是推入四个字节数据或地址，推入常量高位用0填充，可以通过mov指令实现对栈中数据进行字节位的调整\n\n\n\n## ret 和 retn的区别\n\n> - ret和retn都是返回指令，用于从子程序中返回到调用处，同时从栈中弹出返回地址\n> - ret和retn的区别在于是否有操作数。ret没有操作数，只是从栈中弹出返回地址；retn有一个操作数，表示要从栈中弹出的字节数\n> - 例如add esp,0x4; ret;，等价于retn 0x4\n\n## repe cmpsb字符串比较汇编指令\n\n> 是一个汇编语言指令，它的意思是重复比较两个字符串的字节，直到不相等或者计数器为零为止。它涉及到三个寄存器：ECX，EDI和ESI。**ECX是计数器**，表示要比较的字节数；**EDI和ESI是两个字符串的起始地址**。每次比较后，EDI和ESI会根据方向标志DF的值自动增加或减少。如果DF为0，表示正向比较，EDI和ESI都加一；如果DF为1，表示反向比较，EDI和ESI都减一。比较的结果会影响标志寄存器中的零标志ZF。如果ZF为1，表示两个字节相等；如果ZF为0，表示两个字节不等。repe cmpsb通常用来检测两个字符串是否完全相同\n\n## jmp指令偏移地址计算\n\n在使用jmp汇编指令时，关于算偏移地址的时候机器码十六进制的计算\n\n往下运行时，0x2 = 0x44A04D-0x44A049-0x2，也就是jmp到的地址-原来jmp前的地址-jmp这条指令的字节数，本质就是算中间有多少字节\n\n往上运行时，0xFFF870F7 = 0x401140 - 0x44A044 - 5 最后一个五是jmp指令的字节数，0xFFF870F7转化成机器码就是F770FBFF\n\n## IDAPatch保存后动调\n\nKeypatcher进行patch，ctrl+w保存patch结果，但是动调有影响\n\nApply patches to后动调即可 ，在edit-patch program里\n\n\n## Ollvm控制流平坦化技术\nghidra自动化去混淆工具: https://github.com/PAGalaxyLab/ghidra_scripts\n\nIDA自动化去混淆工具d810: https://github.com/joydo/d810\n\n## Hook\n\n### Hook的多种方式\n\n![image-20240418163602878](https://s2.loli.net/2024/06/22/QkYWnuEXvbVM8Kp.png)\n\n### HOOK和Callback的区别\n\n钩子技术（Hook）和回调函数（Callback）在编程中都是用于实现程序的扩展和灵活性，但它们有着不同的作用和实现方式。\n\n#### 相同点\n\n- 事件响应： 钩子技术和回调函数都用于实现对特定事件的响应和处理。\n- 灵活性： 两者都可以增强程序的灵活性和扩展性，使得程序能够更好地处理不同的情况和需求。\n\n#### 差异性\n\n1. 作用：\n\n- 钩子技术主要用于拦截、监视和修改系统级别或应用程序级别的事件，比如键盘输入、鼠标操作、窗口消息等。\n- 回调函数主要用于在特定事件发生时被调用，通常用于异步编程或事件驱动编程中，比如网络请求完成后的回调函数、定时器触发后的回调函数等。\n\n1. 实现方式：\n\n- 钩子技术通常是通过操作系统提供的接口或库函数来实现的，可以在系统级别或应用程序级别进行钩子的安装和管理。\n- 回调函数是一种编程模式，通过将函数指针或函数引用传递给其他函数，以便在特定事件发生时被调用。\n\n1. 应用场景：\n\n- 钩子技术适用于需要拦截、监视和修改事件流的情况，比如实现键盘记录器、窗口管理工具等。\n- 回调函数适用于需要异步处理或事件驱动的情况，比如处理异步任务完成后的结果、处理定时器事件等。\n\n综上所述，钩子技术和回调函数虽然都与事件响应相关，但它们的作用、实现方式和应用场景有着明显的区别。**钩子技术更专注于事件的拦截和修改，而回调函数更专注于事件的响应和异步处理。**\n\n从代码实现角度来看,Hook主要分成两种,Inline Hook 和 非 Inline Hook\n\nInline Hook指的是: \n\n![image-20240416213218744](https://s2.loli.net/2024/06/22/8isNvxnrQpDVHFE.png)\n\n在call的调用的函数内里添加 jmp 想执行代码地址\n\n非Inline Hook指的是:\n\n![image-20240416213515874](https://s2.loli.net/2024/06/22/KBonGr7HZgWVIC4.png)\n\n事实上就是改变了Call操作的目标地址,实际上就是IAT Hook\n\n### C++虚表的Hook\n\n一个类的内存布局:\n\n![image-20240416214808838](https://s2.loli.net/2024/06/22/8aATK9XVMOtGpPn.png)\n\n通过对象的地址来获得虚表的首地址,从而获得所有虚函数的地址\n\nC++调用fish类的虚函数代码:\n\n```c++\nfish Myfish;\nMyfish.sleep();\n```\n\n汇编调用fish类的虚函数代码:\n\n```asm\nmov eax,ecx    //eca是MyFish对象的地址\nmov eax,[eax]  //获取MyFish对象的虚表地址\ncall [eax+0x04]//调用sleep()函数\n```\n\n### Detours Hook\n\n框架学习\n\n```c++\n     \t//1.保存detour的事务\n\t\tDetourRestoreAfterWith();\n\t\t//2.开始处理detour的事务\n\t\tDetourTransactionBegin();\n\t\t//3.更新线程信息-执行事务的线程\n\t\tDetourUpdateThread(GetCurrentThread());\n\t\t//4.设置需要拦截的代理函数\n\t\t//第一个参数二级函数指针-原函数地址\n\t\t//第二个参数函数地址-代理函数的地址\n\t\tDetourAttach((PVOID*)&RealMessageBox, MyMessageBox);//msg\n\t\t//5.提交事务\n\t\tDetourTransactionCommit();\n```\n\nHook MessageBox函数使得弹窗显示永远是 \"你已经被Hook了！\"\n\nmfc程序\n\nmfc.cpp\n\n```c++\n#include\"mfc.h\"\n\nMyapp app;//全局应用程序对象\n//MyFrame* m_pMainwnd = new MyFrame;\nBOOL Myapp::InitInstance()\n{\n\tMyFrame* frame = new MyFrame;\n\tframe->ShowWindow(SW_SHOWNORMAL);\n\tframe->UpdateWindow();\n\t//保存程序指针,否则窗口一闪而过,\n\tm_pMainWnd = frame;//m_pMainWnd线程类的一个成员\n\treturn 1;\n}\n\nBEGIN_MESSAGE_MAP(MyFrame, CFrameWnd)\n\tON_WM_LBUTTONDOWN()\nEND_MESSAGE_MAP()\n\nMyFrame::MyFrame()\n{\n\tCreate(NULL, TEXT(\"Crackk\"));\n}\n\nVOID MyFrame::OnLButtonDown(UINT, CPoint point)\n{\n\t//获取Dll1.dll文件路径\n    WCHAR WorkPath[MAX_PATH];                        //用于存放获取路径的信息    \n\tGetModuleFileName(NULL, WorkPath, MAX_PATH);\n\tCString DllPath = WorkPath;\n\tint pos = DllPath.ReverseFind('\\\\');               \n\tDllPath = DllPath.Left(pos + 1);\n\tDllPath += _T(\"Dll1.dll\");\n    //一般情况利用辅助程序实现dll注入,这里为了便捷直接loadlibrary\n\tHMODULE hmodule = LoadLibrary(DllPath);\n\tif (hmodule == NULL)\n\t{\n\t\tMessageBox(NULL, (LPCTSTR)\"加载dll失败\", NULL);\n\t}\n\telse\n\t{\n\t\tMessageBox(NULL, (LPCTSTR)\"弹窗\", NULL);\n\t}\n}\n\n```\n\ndll程序\n\nsolve.cpp\n\n```c++\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include \"windows.h\"\n#include <iostream>\n#include <fstream>\n#include \"solve.h\"\n\nusing namespace std;\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    {\n        Start_Hook();\n        break;\n    }\n    case DLL_THREAD_ATTACH:\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n    {\n        Exit_Hook();\n        break;\n    }\n    }\n    return TRUE;\n}\n\n```\n\nDll1main.cpp\n\n```c++\n#pragma once\n#include \"solve.h\"\n#include \"pch.h\"\n#include <detours.h>\n#pragma comment(lib,\"detours.lib\")\nint(WINAPI* RealMessageBox)(HWND, LPCTSTR, LPCTSTR, UINT) = MessageBox;\nint WINAPI MyMessageBox(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)\n{\n\treturn RealMessageBox(hWnd, L\"你已经被Hook了！\", L\"Hooked\", uType);\n}\nvoid Start_Hook()\n{\n\t\tDetourRestoreAfterWith();\n\t\tDetourTransactionBegin();\n\t\tDetourUpdateThread(GetCurrentThread());\n\t\tDetourAttach((PVOID*)&RealMessageBox, MyMessageBox);//msg\n\t\tDetourTransactionCommit();\n}\nvoid Exit_Hook()\n{\n\t//1.开始处理detour的事务\n\tDetourTransactionBegin();\n\t//2.更新线程信息-执行事务的线程\n\tDetourUpdateThread(GetCurrentThread());\n\t//3.撤销hook \n\t//第一个参数二级函数指针-原函数地址\n\t//第二个参数函数地址-代理函数的地址\n\tDetourDetach((PVOID*)&RealMessageBox, MyMessageBox);\n\t//4.提交事务\n\tDetourTransactionCommit();\n}\n```\n\n![image-20240416230935344](https://s2.loli.net/2024/06/22/VWTSJEYMnOjZIr4.png)\n\n### Windows的S.E.H\n\nS.E.H全称是Struct Exception Handler即结构化异常处理机制\n\nS.E.H是操作系统提供给线程来感知和处理异常的一种回调机制,S.E.H在线程栈上以**单链表**的形式存在\n\n![image-20240418155025834](https://s2.loli.net/2024/06/22/HUTfFSkE8Pwtm9R.png)\n\n在win32中由于FS寄存器总是指向当前的TIB(线程信息块),因此在FS:[0]处能找到最近的一个EXCEPTION_REGISTERATION结构\n\n当我们通过try/catch或__try/except等操作来注册S.E.H的时候,FS:[0]会指向新的S.E.H,且新的S.E.H的Prev字段会指向之前FS:[0]指向的S.E.H,整个操作类似于单链表的表头插入操作\n\n### Windows的V.E.H\n\nS.E.H是基于线程的异常处理,V.E.H是基于进程的异常处理\n\nV.E.H处理异常的优先级低于调试器,高于S.E.H,即KiUserExceptionDispatcher()函数首先检查进程是否处于被调试状态,然后检查V.E.H链表,最后才是检查S.E.H链表\n\nWindows提供了注册V.E.H的回调函数的API\n\n```c\nPVOID AddVectoredExceptionHandler//注册回调函数\n{\n\tULONG FirstHandler,//如果大于0则从头部插入,否则从尾部插入\n\tPVECTORED_EXCEPTION_HANDLE VectoredHandler//异常处理函数地址\n};\n```\n\n可以通过该函数进行虚假注册,通过函数返回值后去链表的头指针或者尾指针,从而遍历整个V.E.H链表\n\n### 硬件断点\n\n#### 调试器寄存器\n\nIA-32处理器定义了8个调试寄存器,DR0-DR7其中**DR0-DR3用来指定断点的内存地址或IO地址**;DR4和DR5是保留的,DR6的作用是当调试事件发生时向调试器报告事件的详细信息,以供调试器啊判断发生的是何种事件;DR7用来进一步定义中断条件\n\n#### 硬件断点的优势\n\n硬件断点HOOK是结合DR0-DR3调试寄存器和Windows S.E.H 或V.E.H机制所引入的一种HOOK机制.如果HOOK采用的方式是修改代码,那么很容易被检测到,然而硬件断点HOOK并不涉及修改代码,所以他的优点主要体现在隐蔽性上\n\n#### 线程上下文环境以及Windows下线程与CPU之间的关系\n\n线程执行环境CONTEXT的结构体:\n\n```c\ntypedef struct_CONTEXT\n{\n\tDwORD  contextFlags;\n\tDWORD\tDr0;\n    DWORD\tDr1;\n    DWORD\tDr2;\n    DWORD\tDr3;\n    DWORD\tDr6;\n    DWORD\tDr7;\n\tFLOATING_SAVE_AREA FloatSave;\n\tDWORD\tsegGs;\n\tDWORD\tsegFs;\n\tDWORD\tsegEs;\n\tDWORD\tSegDs;\n\tDWORD\tEdi;\n\tDWORD\tEsi;\n\tDWORD\tEbx;\n\tDWORD\tEdx;\n\tDWORD\tEcx;\n\tDWORD\tEax;\n\tDWORD\tEbp;\n\tDWORD\tEip;\n\tDWORD\tsegCs;\n\tDWORD\tEFlags;\n\tDWORD\tEsp;\n\tDWORD\tsegSs;\n} CONTEXT;\n```\n\nWindows是基于线程调用的多任务抢占式操作系统,如果CPU目前运行的线程1,这时优先级更高的线程2将抢占执行,那么操作系统会把线程1的执行环境取出放到线程1的CONTEXT结构中,接着把线程2的CONTEXT信息放入CPU中,继续运行线程2\n\n### S.E.H Hook\n\n未成功代码,显示有没经处理的异常\n\n应该是MyExceptionFilter函数没起作用\n\ndll中\n\n```C\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include \"SEHHook.h\"\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_ATTACH:\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n//SEH.cpp \n#include  \"pch.h\"\n#include \"SEHHook.h\"    \n#include <climits>\nDWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(\"USER32.dll\"),\"MessageBoxW\");\n\nLONG WINAPI MyExceptionFilter(PEXCEPTION_POINTERS ExceptionInfo)\n{\n\tif (ExceptionInfo->ExceptionRecord->ExceptionAddress == (LPVOID)HookAddr)\n\t{\t\n\t\t//获取当前线程上下文\n\t\tPCONTEXT pcontext = ExceptionInfo->ContextRecord;\n\t\tMessageBoxW(NULL,TEXT(\"你被hook了诶\"), TEXT(\"gogogo\"),0);\n\t\tpcontext->Eip += 5;\n\t\treturn EXCEPTION_CONTINUE_EXECUTION;\n\t}\n\treturn EXCEPTION_CONTINUE_SEARCH;\n}\n\nvoid SetHardBreakPoint()\n{\n\t//遍历线程 通过openthread获取到线程环境后设置硬件断点\n\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\tif (hTool32 != INVALID_HANDLE_VALUE)\n\t{\n\t\tTHREADENTRY32 threadEntry32;//线程环境结构体\n\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\tHANDLE hMainThread = NULL;\n\t\tFILETIME exit_time, kernel_time, user_time;\n\t\tFILETIME creation_time;\n\t\tFILETIME prev_creation_time;\n\t\tprev_creation_time.dwLowDateTime = 0xFFFFFFFF;\n\t\tprev_creation_time.dwHighDateTime = INT_MAX;\n\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + sizeof(threadEntry32.th32OwnerProcessID);\n\t\tif (Thread32First(hTool32, &threadEntry32))\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (threadEntry32.dwSize >= dwThreadEntryOffset &&threadEntry32.th32OwnerProcessID == GetCurrentProcessId())\n\t\t\t\t{\n\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, false, threadEntry32.th32ThreadID);\n\t\t\t\t\tGetThreadTimes(hHookThread, &creation_time, &exit_time, &kernel_time, &user_time);\n\t\t\t\t\tif (CompareFileTime(&creation_time, &prev_creation_time) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemcpy(&prev_creation_time, &creation_time, sizeof(FILETIME));\n\t\t\t\t\t\tif (hMainThread != NULL)\n\t\t\t\t\t\t\tCloseHandle(hMainThread);\n\t\t\t\t\t\thMainThread = hHookThread;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tCloseHandle(hHookThread);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\t\t} while (Thread32Next(hTool32,&threadEntry32));\n\t\t\tSetUnhandledExceptionFilter(MyExceptionFilter);\n\t\t\tCONTEXT thread_context = { CONTEXT_DEBUG_REGISTERS };\n\t\t\tthread_context.Dr0 = (DWORD)HookAddr;\n\t\t\tthread_context.Dr7 = 0x1;//设置断点类型(访问断点)\n\t\t\tSetThreadContext(hMainThread, &thread_context);\n\t\t\tCloseHandle(hMainThread);\n\t\t}\n\t}\n\tCloseHandle(hTool32);\n}\n```\n\n\n\n### V.E.H Hook\n\n试验成功\n\n```c\n//dllmain.cpp\n#include \"pch.h\"\n#include \"VEHHook.h\"\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n        AddVectoredExceptionHandler(1, (PVECTORED_EXCEPTION_HANDLER)MyExceptionFilter);\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_ATTACH:\n        SetHardBreakPoint();\n        break;\n    case DLL_THREAD_DETACH:\n        break;\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n//VEHHOOK.cpp\n#include  \"pch.h\"\n#include \"VEHHook.h\"    \n#include <climits>\nDWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(\"USER32.dll\"),\"MessageBoxW\");\n\nLONG WINAPI MyExceptionFilter(PEXCEPTION_POINTERS ExceptionInfo)\n{\n\tif (ExceptionInfo->ExceptionRecord->ExceptionAddress == (LPVOID)HookAddr)\n\t{\t\n\t\t//获取当前线程上下文\n\t\tPCONTEXT pcontext = ExceptionInfo->ContextRecord;\n\t\tMessageBoxA(NULL,\"HOOK\", \"HOOK\",1);\n        //需要加一段调整eip的代码使得跳出死循环\n\t\treturn EXCEPTION_CONTINUE_EXECUTION;\n\t}\n\treturn EXCEPTION_CONTINUE_SEARCH;\n}\n\nBOOL SetHardBreakPoint()\n{\n\t//遍历线程 通过openthread获取到线程环境后设置硬件断点\n\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);\n\tif (hTool32 != INVALID_HANDLE_VALUE)\n\t{\n\t\tTHREADENTRY32 threadEntry32;//线程环境结构体\n\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\tHANDLE hMainThread = NULL;\n\t\tFILETIME exit_time, kernel_time, user_time;\n\t\tFILETIME creation_time;\n\t\tFILETIME prev_creation_time;\n\t\tprev_creation_time.dwLowDateTime = 0xFFFFFFFF;\n\t\tprev_creation_time.dwHighDateTime = INT_MAX;\n\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + sizeof(threadEntry32.th32OwnerProcessID);\n\t\tif (Thread32First(hTool32, &threadEntry32))\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (threadEntry32.dwSize >= dwThreadEntryOffset &&threadEntry32.th32OwnerProcessID == GetCurrentProcessId())\n\t\t\t\t{\n\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, false, threadEntry32.th32ThreadID);\n\t\t\t\t\tGetThreadTimes(hHookThread, &creation_time, &exit_time, &kernel_time, &user_time);\n\t\t\t\t\tif (CompareFileTime(&creation_time, &prev_creation_time) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemcpy(&prev_creation_time, &creation_time, sizeof(FILETIME));\n\t\t\t\t\t\tif (hMainThread != NULL)\n\t\t\t\t\t\t\tCloseHandle(hMainThread);\n\t\t\t\t\t\thMainThread = hHookThread;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tCloseHandle(hHookThread);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthreadEntry32.dwSize = sizeof(THREADENTRY32);\n\t\t\t} while (Thread32Next(hTool32,&threadEntry32));\n\t\t\tCONTEXT thread_context = { CONTEXT_DEBUG_REGISTERS };\n\t\t\tthread_context.Dr0 = (DWORD)HookAddr;\n\t\t\tthread_context.Dr7 = 0x1;//设置断点类型(访问断点)\n\t\t\tSetThreadContext(hMainThread, &thread_context);\n\t\t\tCloseHandle(hMainThread);\n\t\t}\n\t}\n\tCloseHandle(hTool32);\n\treturn true;\n}\n\n```\n\n![image-20240509220917719](https://s2.loli.net/2024/06/22/z1xhTRjQWKd3IDk.png)\n","slug":"re","published":1,"updated":"2024-09-27T13:52:52.080Z","layout":"post","photos":[],"link":"","_id":"cm1roa13m000wugie2yo56pog","content":"<p>逆向的开始！从这开始记录我在做逆向题目时遇到的问题以及总结一些逆向的知识点<span id=\"more\"></span></p>\n<h2 id=\"BFS脚本：\"><a href=\"#BFS脚本：\" class=\"headerlink\" title=\"BFS脚本：\"></a>BFS脚本：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">char</span> map[<span class=\"number\">15</span>][<span class=\"number\">13</span>]=&#123;</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span>  <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">int</span> y;</span><br><span class=\"line\">    string path;</span><br><span class=\"line\">    <span class=\"type\">char</span> mp[<span class=\"number\">15</span>][<span class=\"number\">13</span>]=&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//标记路线</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> w1[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">char</span> w2[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">char</span> pa[<span class=\"number\">5</span>] = <span class=\"string\">&quot;sdwa&quot;</span>;</span><br><span class=\"line\">queue&lt;Point&gt;q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   Point first = &#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">&quot;&quot;</span>&#125;;</span><br><span class=\"line\">   first.mp[first.y][first.x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">   q.<span class=\"built_in\">push</span>(first);</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       Point now = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">       q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        Point temp = now;</span><br><span class=\"line\">        temp.x+=w1[i];</span><br><span class=\"line\">        temp.y+=w2[i];</span><br><span class=\"line\">        temp.path+=pa[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map[temp.y][temp.x]==<span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;temp.path&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(map[temp.y][temp.x]==<span class=\"number\">0</span>&amp;&amp;temp.x&gt;=<span class=\"number\">0</span>&amp;&amp;temp.x&lt;<span class=\"number\">13</span>&amp;&amp;temp.y&gt;=<span class=\"number\">0</span>&amp;&amp;temp.y&lt;<span class=\"number\">15</span>&amp;&amp;temp.mp[temp.y][temp.x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">         &#123;     </span><br><span class=\"line\">            temp.mp[temp.y][temp.x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(temp);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<h2 id=\"Frida环境搭建与测试：\"><a href=\"#Frida环境搭建与测试：\" class=\"headerlink\" title=\"Frida环境搭建与测试：\"></a>Frida环境搭建与测试：</h2><p>进入开发者模式，与手机进行连接<code>adb connect 127.0.0.1:62001</code>（PC端命令行）</p>\n<p>查看是否连接成功 <code>adb devices</code></p>\n<p>frida-server处理器类型与Android处理器对齐</p>\n<p>查询虚拟机处理器架构: <code>adb shell getprop ro.product.cpu.abi</code> </p>\n<p>进入frida移动端目录 <code>adb shell</code></p>\n<p> <code>cd /data/local/tmp</code></p>\n<p>运行 <code>./frida-server</code></p>\n<p>执行 <code>frida -U -f MyApplication</code> 进行连接\\</p>\n<p>显示找不到MyApplication,查询app名称的id <code>frida-ps -U -a</code></p>\n<p>结果:</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/URIjbw4sLCHTS8Q.png\" alt=\"image-20231022105344293\"></p>\n<p>再次执行 <code>frida -U -f com.example.myapplication</code></p>\n<p>连接成功,脚本测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">on_message</span>(<span class=\"params\">message, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;send&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;*****[frida hook]***** : &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(message[<span class=\"string\">&#x27;payload&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;*****[frida hook]***** : &quot;</span> + <span class=\"built_in\">str</span>(message))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#js脚本</span></span><br><span class=\"line\">jscode = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Java.perform(function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">    var MainActivity = Java.use(&#x27;com.example.myapplication.MainActivity&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">    MainActivity.print.implementation  = function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        send(&quot;Hook Start&quot;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">process = frida.get_usb_device().attach(<span class=\"string\">&#x27;MyApplication&#x27;</span>)<span class=\"comment\">#应用程序名称,和包名不一样</span></span><br><span class=\"line\">script = process.create_script(jscode)</span><br><span class=\"line\">script.on(<span class=\"string\">&#x27;message&#x27;</span>, on_message)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[*] Running CTF&#x27;</span>)</span><br><span class=\"line\">script.load()</span><br><span class=\"line\">sys.stdin.read()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"RC4解密脚本：\"><a href=\"#RC4解密脚本：\" class=\"headerlink\" title=\"RC4解密脚本：\"></a>RC4解密脚本：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rc4_setup</span>(<span class=\"params\">key</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(key, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        key = key.encode()</span><br><span class=\"line\"></span><br><span class=\"line\">    S = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">256</span>))</span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">        j = (j + S[i] + key[i % <span class=\"built_in\">len</span>(key)]) % <span class=\"number\">256</span></span><br><span class=\"line\">        S[i], S[j] = S[j], S[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> S</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rc4_crypt</span>(<span class=\"params\">data, key</span>):<span class=\"comment\">#文本解密</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(data, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        data = data.encode()</span><br><span class=\"line\"></span><br><span class=\"line\">    S = rc4_setup(key)</span><br><span class=\"line\">    i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> byte <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        i = (i + <span class=\"number\">1</span>) % <span class=\"number\">256</span></span><br><span class=\"line\">        j = (j + S[i]) % <span class=\"number\">256</span></span><br><span class=\"line\">        S[i], S[j] = S[j], S[i]</span><br><span class=\"line\">        res.append(byte ^ S[(S[i] + S[j]) % <span class=\"number\">256</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rc4_decrypt</span>(<span class=\"params\">key_hex, data_hex</span>):<span class=\"comment\">#十六进制解密</span></span><br><span class=\"line\">    key = <span class=\"built_in\">bytes</span>.fromhex(key_hex)</span><br><span class=\"line\">    data = <span class=\"built_in\">bytes</span>.fromhex(data_hex)</span><br><span class=\"line\">    res = rc4_crypt(data, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"built_in\">hex</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    enc = <span class=\"string\">b&#x27;FUZAza8WP5FERi17FvdHowYFSNs6cOk1h0tQLSqk&#x27;</span></span><br><span class=\"line\">    key = <span class=\"string\">b&#x27;BirkenwaldCTF&#123;This_is_f4ke_f1ag&#125;&#x27;</span></span><br><span class=\"line\">    enc = base64.b64decode(enc)</span><br><span class=\"line\">    enc = rc4_decrypt(key.<span class=\"built_in\">hex</span>(),enc.<span class=\"built_in\">hex</span>())</span><br><span class=\"line\">    enc = long_to_bytes(<span class=\"built_in\">int</span>(enc,<span class=\"number\">16</span>)).decode()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(enc)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>&amp;0xff在python中可以表示取无符号整数，0xff表示八个比特1，也就是数byte数进行无符号运算,&amp;0x7f表示取有符号字节类型</p>\n</blockquote>\n<h2 id=\"RC4的c语言加密脚本：\"><a href=\"#RC4的c语言加密脚本：\" class=\"headerlink\" title=\"RC4的c语言加密脚本：\"></a>RC4的c语言加密脚本：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> data[<span class=\"number\">26</span>] = &#123; <span class=\"number\">0x4e</span>,<span class=\"number\">0xd5</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0xed</span>,<span class=\"number\">0x4d</span>,<span class=\"number\">0xbf</span>,<span class=\"number\">0x9e</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0x43</span>,<span class=\"number\">0x50</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0xa0</span>,<span class=\"number\">0xe2</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0x62</span>,<span class=\"number\">0xbe</span>,<span class=\"number\">0xab</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x22</span>,<span class=\"number\">0xb3</span>,<span class=\"number\">0xd8</span>,<span class=\"number\">0x68</span>,<span class=\"number\">0x3f</span>,<span class=\"number\">0x80</span>,<span class=\"number\">0xa4</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 S 表，根据密钥打乱 S 表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        S[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        j = (j + S[i] + key[i % keylen]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[i];</span><br><span class=\"line\">        S[i] = S[j];</span><br><span class=\"line\">        S[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个字节的密钥流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> <span class=\"title\">generate</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">int</span>* i, <span class=\"type\">int</span>* j)</span> </span>&#123;</span><br><span class=\"line\">    *i = (*i + <span class=\"number\">1</span>) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    *j = (*j + S[*i]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[*i];</span><br><span class=\"line\">    S[*i] = S[*j];</span><br><span class=\"line\">    S[*j] = temp;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 S[S[i] + S[j]]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> S[(S[*i] + S[*j]) % <span class=\"number\">256</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对数据进行加密或解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, <span class=\"type\">int</span> datalen, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> S[<span class=\"number\">256</span>]; <span class=\"comment\">// 256 字节的数据表</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; <span class=\"comment\">// 两个索引变量</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 S 表</span></span><br><span class=\"line\">    <span class=\"built_in\">init</span>(S, key, keylen);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; datalen; k++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据和密钥流进行异或运算</span></span><br><span class=\"line\">        data[k] ^= <span class=\"built_in\">generate</span>(S, &amp;i, &amp;j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 假设这是要加密或解密的数据</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> input[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Do you know flag?\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please tell me:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">    <span class=\"comment\">//unsigned char data[] = &quot;CynopsCTF&#123;RC4_1s_4w3s0m3!&#125;&quot;;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> datalen = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 假设这是加密或解密的密钥</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;CynopsCTF&#123;This_is_f4ke_f1ag&#125;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span>*)key);</span><br><span class=\"line\">    <span class=\"comment\">// 对数据进行加密</span></span><br><span class=\"line\">    <span class=\"built_in\">encrypt</span>(input, datalen, key, keylen);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (input[i] != data[i])</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> label;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;You&#x27;re so smart. This&#x27;s what I want!!!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">label:</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Oh,You don&#x27;t seem to know what I want\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please leave here\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AES加解密C脚本\"><a href=\"#AES加解密C脚本\" class=\"headerlink\" title=\"AES加解密C脚本\"></a>AES加解密C脚本</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;aes.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * S盒</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> S[<span class=\"number\">16</span>][<span class=\"number\">16</span>] = &#123; <span class=\"number\">0x63</span>, <span class=\"number\">0x7c</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x7b</span>, <span class=\"number\">0xf2</span>, <span class=\"number\">0x6b</span>, <span class=\"number\">0x6f</span>, <span class=\"number\">0xc5</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x67</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0xfe</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xab</span>, <span class=\"number\">0x76</span>,</span><br><span class=\"line\">    <span class=\"number\">0xca</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x7d</span>, <span class=\"number\">0xfa</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0xf0</span>, <span class=\"number\">0xad</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xaf</span>, <span class=\"number\">0x9c</span>, <span class=\"number\">0xa4</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xc0</span>,</span><br><span class=\"line\">    <span class=\"number\">0xb7</span>, <span class=\"number\">0xfd</span>, <span class=\"number\">0x93</span>, <span class=\"number\">0x26</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x3f</span>, <span class=\"number\">0xf7</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xa5</span>, <span class=\"number\">0xe5</span>, <span class=\"number\">0xf1</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0xd8</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x15</span>,</span><br><span class=\"line\">    <span class=\"number\">0x04</span>, <span class=\"number\">0xc7</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0xc3</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x96</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0x9a</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xeb</span>, <span class=\"number\">0x27</span>, <span class=\"number\">0xb2</span>, <span class=\"number\">0x75</span>,</span><br><span class=\"line\">    <span class=\"number\">0x09</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x1a</span>, <span class=\"number\">0x1b</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x5a</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x3b</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xb3</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0xe3</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">    <span class=\"number\">0x53</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xed</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0xfc</span>, <span class=\"number\">0xb1</span>, <span class=\"number\">0x5b</span>, <span class=\"number\">0x6a</span>, <span class=\"number\">0xcb</span>, <span class=\"number\">0xbe</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x4a</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0xcf</span>,</span><br><span class=\"line\">    <span class=\"number\">0xd0</span>, <span class=\"number\">0xef</span>, <span class=\"number\">0xaa</span>, <span class=\"number\">0xfb</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xf9</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0x7f</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x9f</span>, <span class=\"number\">0xa8</span>,</span><br><span class=\"line\">    <span class=\"number\">0x51</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8f</span>, <span class=\"number\">0x92</span>, <span class=\"number\">0x9d</span>, <span class=\"number\">0x38</span>, <span class=\"number\">0xf5</span>, <span class=\"number\">0xbc</span>, <span class=\"number\">0xb6</span>, <span class=\"number\">0xda</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xf3</span>, <span class=\"number\">0xd2</span>,</span><br><span class=\"line\">    <span class=\"number\">0xcd</span>, <span class=\"number\">0x0c</span>, <span class=\"number\">0x13</span>, <span class=\"number\">0xec</span>, <span class=\"number\">0x5f</span>, <span class=\"number\">0x97</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0xc4</span>, <span class=\"number\">0xa7</span>, <span class=\"number\">0x7e</span>, <span class=\"number\">0x3d</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x5d</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">    <span class=\"number\">0x60</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0xdc</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0xee</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0xde</span>, <span class=\"number\">0x5e</span>, <span class=\"number\">0x0b</span>, <span class=\"number\">0xdb</span>,</span><br><span class=\"line\">    <span class=\"number\">0xe0</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x3a</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x5c</span>, <span class=\"number\">0xc2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xac</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x91</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0xe4</span>, <span class=\"number\">0x79</span>,</span><br><span class=\"line\">    <span class=\"number\">0xe7</span>, <span class=\"number\">0xc8</span>, <span class=\"number\">0x37</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0x4e</span>, <span class=\"number\">0xa9</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0xf4</span>, <span class=\"number\">0xea</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x7a</span>, <span class=\"number\">0xae</span>, <span class=\"number\">0x08</span>,</span><br><span class=\"line\">    <span class=\"number\">0xba</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x2e</span>, <span class=\"number\">0x1c</span>, <span class=\"number\">0xa6</span>, <span class=\"number\">0xb4</span>, <span class=\"number\">0xc6</span>, <span class=\"number\">0xe8</span>, <span class=\"number\">0xdd</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x1f</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0xbd</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x8a</span>,</span><br><span class=\"line\">    <span class=\"number\">0x70</span>, <span class=\"number\">0x3e</span>, <span class=\"number\">0xb5</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xf6</span>, <span class=\"number\">0x0e</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0xc1</span>, <span class=\"number\">0x1d</span>, <span class=\"number\">0x9e</span>,</span><br><span class=\"line\">    <span class=\"number\">0xe1</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x11</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x94</span>, <span class=\"number\">0x9b</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0xce</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xdf</span>,</span><br><span class=\"line\">    <span class=\"number\">0x8c</span>, <span class=\"number\">0xa1</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0xbf</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x99</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0x0f</span>, <span class=\"number\">0xb0</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0xbb</span>, <span class=\"number\">0x16</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆S盒</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> S2[<span class=\"number\">16</span>][<span class=\"number\">16</span>] = &#123; <span class=\"number\">0x52</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x6a</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0xa5</span>, <span class=\"number\">0x38</span>, <span class=\"number\">0xbf</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0x9e</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0xf3</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xfb</span>,</span><br><span class=\"line\">    <span class=\"number\">0x7c</span>, <span class=\"number\">0xe3</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0x9b</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0xc4</span>, <span class=\"number\">0xde</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0xcb</span>,</span><br><span class=\"line\">    <span class=\"number\">0x54</span>, <span class=\"number\">0x7b</span>, <span class=\"number\">0x94</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0xa6</span>, <span class=\"number\">0xc2</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0x3d</span>, <span class=\"number\">0xee</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0x0b</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0xfa</span>, <span class=\"number\">0xc3</span>, <span class=\"number\">0x4e</span>,</span><br><span class=\"line\">    <span class=\"number\">0x08</span>, <span class=\"number\">0x2e</span>, <span class=\"number\">0xa1</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xb2</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x5b</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x25</span>,</span><br><span class=\"line\">    <span class=\"number\">0x72</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0xf6</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xa4</span>, <span class=\"number\">0x5c</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x5d</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0xb6</span>, <span class=\"number\">0x92</span>,</span><br><span class=\"line\">    <span class=\"number\">0x6c</span>, <span class=\"number\">0x70</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0xfd</span>, <span class=\"number\">0xed</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0xda</span>, <span class=\"number\">0x5e</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0xa7</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0x9d</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">    <span class=\"number\">0x90</span>, <span class=\"number\">0xd8</span>, <span class=\"number\">0xab</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x8c</span>, <span class=\"number\">0xbc</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0xf7</span>, <span class=\"number\">0xe4</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0xb3</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x06</span>,</span><br><span class=\"line\">    <span class=\"number\">0xd0</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x8f</span>, <span class=\"number\">0xca</span>, <span class=\"number\">0x3f</span>, <span class=\"number\">0x0f</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0xc1</span>, <span class=\"number\">0xaf</span>, <span class=\"number\">0xbd</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x13</span>, <span class=\"number\">0x8a</span>, <span class=\"number\">0x6b</span>,</span><br><span class=\"line\">    <span class=\"number\">0x3a</span>, <span class=\"number\">0x91</span>, <span class=\"number\">0x11</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0x67</span>, <span class=\"number\">0xdc</span>, <span class=\"number\">0xea</span>, <span class=\"number\">0x97</span>, <span class=\"number\">0xf2</span>, <span class=\"number\">0xcf</span>, <span class=\"number\">0xce</span>, <span class=\"number\">0xf0</span>, <span class=\"number\">0xb4</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">    <span class=\"number\">0x96</span>, <span class=\"number\">0xac</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0xe7</span>, <span class=\"number\">0xad</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xf9</span>, <span class=\"number\">0x37</span>, <span class=\"number\">0xe8</span>, <span class=\"number\">0x1c</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xdf</span>, <span class=\"number\">0x6e</span>,</span><br><span class=\"line\">    <span class=\"number\">0x47</span>, <span class=\"number\">0xf1</span>, <span class=\"number\">0x1a</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0x1d</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0xc5</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x6f</span>, <span class=\"number\">0xb7</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x0e</span>, <span class=\"number\">0xaa</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0xbe</span>, <span class=\"number\">0x1b</span>,</span><br><span class=\"line\">    <span class=\"number\">0xfc</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x3e</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0xc6</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x9a</span>, <span class=\"number\">0xdb</span>, <span class=\"number\">0xc0</span>, <span class=\"number\">0xfe</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0x5a</span>, <span class=\"number\">0xf4</span>,</span><br><span class=\"line\">    <span class=\"number\">0x1f</span>, <span class=\"number\">0xdd</span>, <span class=\"number\">0xa8</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0xc7</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0xb1</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x27</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xec</span>, <span class=\"number\">0x5f</span>,</span><br><span class=\"line\">    <span class=\"number\">0x60</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x7f</span>, <span class=\"number\">0xa9</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0xb5</span>, <span class=\"number\">0x4a</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0xe5</span>, <span class=\"number\">0x7a</span>, <span class=\"number\">0x9f</span>, <span class=\"number\">0x93</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x9c</span>, <span class=\"number\">0xef</span>,</span><br><span class=\"line\">    <span class=\"number\">0xa0</span>, <span class=\"number\">0xe0</span>, <span class=\"number\">0x3b</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0xae</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0xf5</span>, <span class=\"number\">0xb0</span>, <span class=\"number\">0xc8</span>, <span class=\"number\">0xeb</span>, <span class=\"number\">0xbb</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x99</span>, <span class=\"number\">0x61</span>,</span><br><span class=\"line\">    <span class=\"number\">0x17</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x7e</span>, <span class=\"number\">0xba</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0x26</span>, <span class=\"number\">0xe1</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0x0c</span>, <span class=\"number\">0x7d</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取整形数据的低8位的左4个位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getLeft4Bit</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = num &amp; <span class=\"number\">0x000000f0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取整形数据的低8位的右4个位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getRight4Bit</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &amp; <span class=\"number\">0x0000000f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据索引，从S盒中获得元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getNumFromSBox</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> row = <span class=\"built_in\">getLeft4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"type\">int</span> col = <span class=\"built_in\">getRight4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S[row][col];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把一个字符转变成整型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getIntFromChar</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result = (<span class=\"type\">int</span>)c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把16个字符转变成4X4的数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 该矩阵中字节的排列顺序为从上到下，</span></span><br><span class=\"line\"><span class=\"comment\"> * 从左到右依次排列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">convertToIntArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span> pa[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            pa[j][i] = <span class=\"built_in\">getIntFromChar</span>(str[k]);</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打印4X4的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"type\">int</span> a[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a[%d][%d] = 0x%x &quot;</span>, i, j, a[i][j]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打印字符串的ASSCI，</span></span><br><span class=\"line\"><span class=\"comment\"> * 以十六进制显示。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">printASSCI</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%x &quot;</span>, <span class=\"built_in\">getIntFromChar</span>(str[i]));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把连续的4个字符合并成一个4字节的整型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getWordFromStr</span><span class=\"params\">(<span class=\"type\">char</span>* str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> one = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    one = one &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> two = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    two = two &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> three = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    three = three &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> four = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> one | two | three | four;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把一个4字节的数的第一、二、三、四个字节取出，</span></span><br><span class=\"line\"><span class=\"comment\"> * 入进一个4个元素的整型数组里面。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">splitIntToArray</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">int</span> array[<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> one = num &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    array[<span class=\"number\">0</span>] = one &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> two = num &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    array[<span class=\"number\">1</span>] = two &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> three = num &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    array[<span class=\"number\">2</span>] = three &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">    array[<span class=\"number\">3</span>] = num &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将数组中的元素循环左移step位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">leftLoop4int</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>], <span class=\"type\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        temp[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> index = step % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : step % <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[i] = temp[index];</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        index = index % <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把数组中的第一、二、三和四元素分别作为</span></span><br><span class=\"line\"><span class=\"comment\"> * 4字节整型的第一、二、三和四字节，合并成一个4字节整型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">mergeArrayToInt</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> one = array[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> two = array[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> three = array[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> four = array[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> one | two | three | four;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 常量轮值表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> Rcon[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0x01000000</span>, <span class=\"number\">0x02000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x04000000</span>, <span class=\"number\">0x08000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x10000000</span>, <span class=\"number\">0x20000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x40000000</span>, <span class=\"number\">0x80000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x1b000000</span>, <span class=\"number\">0x36000000</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 密钥扩展中的T函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">T</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">int</span> round)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> numArray[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(num, numArray);</span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(numArray, <span class=\"number\">1</span>);<span class=\"comment\">//字循环</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//字节代换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        numArray[i] = <span class=\"built_in\">getNumFromSBox</span>(numArray[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> result = <span class=\"built_in\">mergeArrayToInt</span>(numArray);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result ^ Rcon[round];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//密钥对应的扩展数组</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> w[<span class=\"number\">44</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展密钥，结果是把w[44]中的每个元素初始化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">extendKey</span><span class=\"params\">(<span class=\"type\">char</span>* key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>  i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        w[i] = <span class=\"built_in\">getWordFromStr</span>(key + i * <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">4</span>, j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">44</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            w[i] = w[i - <span class=\"number\">4</span>] ^ <span class=\"built_in\">T</span>(w[i - <span class=\"number\">1</span>], j);</span><br><span class=\"line\">            j++;<span class=\"comment\">//下一轮</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            w[i] = w[i - <span class=\"number\">4</span>] ^ w[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 轮密钥加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">addRoundKey</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"type\">int</span> round)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> warray[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">splitIntToArray</span>(w[round * <span class=\"number\">4</span> + i], warray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            array[j][i] = array[j][i] ^ warray[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 字节代换</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">subBytes</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">getNumFromSBox</span>(array[i][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 行移位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">shiftRows</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rowTwo[<span class=\"number\">4</span>], rowThree[<span class=\"number\">4</span>], rowFour[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//复制状态矩阵的第2,3,4行</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        rowTwo[i] = array[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        rowThree[i] = array[<span class=\"number\">2</span>][i];</span><br><span class=\"line\">        rowFour[i] = array[<span class=\"number\">3</span>][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环左移相应的位数</span></span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(rowTwo, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(rowThree, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(rowFour, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//把左移后的行复制回状态矩阵中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[<span class=\"number\">1</span>][i] = rowTwo[i];</span><br><span class=\"line\">        array[<span class=\"number\">2</span>][i] = rowThree[i];</span><br><span class=\"line\">        array[<span class=\"number\">3</span>][i] = rowFour[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 列混合要用到的矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> colM[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul2</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result = s &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a7 = result &amp; <span class=\"number\">0x00000100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a7 != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result = result &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">        result = result ^ <span class=\"number\">0x1b</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul3</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul2</span>(s) ^ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul4</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul2</span>(<span class=\"built_in\">GFMul2</span>(s));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul8</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul2</span>(<span class=\"built_in\">GFMul4</span>(s));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul9</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul8</span>(s) ^ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul11</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul9</span>(s) ^ <span class=\"built_in\">GFMul2</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul12</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul8</span>(s) ^ <span class=\"built_in\">GFMul4</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul13</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul12</span>(s) ^ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul14</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul12</span>(s) ^ <span class=\"built_in\">GFMul2</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * GF上的二元运算</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        result = s;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>)</span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul2</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">3</span>)</span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul3</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0x9</span>)</span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul9</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0xb</span>)<span class=\"comment\">//11</span></span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul11</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0xd</span>)<span class=\"comment\">//13</span></span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul13</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0xe</span>)<span class=\"comment\">//14</span></span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul14</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 列混合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">mixColumns</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> tempArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            tempArray[i][j] = array[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">0</span>], tempArray[<span class=\"number\">0</span>][j]) ^ <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">1</span>], tempArray[<span class=\"number\">1</span>][j])</span><br><span class=\"line\">                ^ <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">2</span>], tempArray[<span class=\"number\">2</span>][j]) ^ <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">3</span>], tempArray[<span class=\"number\">3</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把4X4数组转回字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">convertArrayToStr</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"type\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            *str++ = (<span class=\"type\">char</span>)array[j][i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查密钥长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">checkKeyLen</span><span class=\"params\">(<span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">16</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 p: 明文的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 plen: 明文的长度。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 key: 密钥的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">aes</span><span class=\"params\">(<span class=\"type\">char</span>* p, <span class=\"type\">int</span> plen, <span class=\"type\">char</span>* key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = <span class=\"built_in\">strlen</span>(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">checkKeyLen</span>(keylen)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;keylen erro;keylen=%d\\n&quot;</span>, keylen);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">extendKey</span>(key);<span class=\"comment\">//扩展密钥</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; plen; k += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">convertToIntArray</span>(p + k, pArray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(pArray, <span class=\"number\">0</span>);<span class=\"comment\">//一开始的轮密钥加</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;<span class=\"comment\">//前9轮</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">subBytes</span>(pArray);<span class=\"comment\">//字节代换</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">shiftRows</span>(pArray);<span class=\"comment\">//行移位</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">mixColumns</span>(pArray);<span class=\"comment\">//列混合</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">addRoundKey</span>(pArray, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第10轮</span></span><br><span class=\"line\">        <span class=\"built_in\">subBytes</span>(pArray);<span class=\"comment\">//字节代换</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">shiftRows</span>(pArray);<span class=\"comment\">//行移位</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(pArray, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">convertArrayToStr</span>(pArray, p + k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据索引从逆S盒中获取值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getNumFromS1Box</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> row = <span class=\"built_in\">getLeft4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"type\">int</span> col = <span class=\"built_in\">getRight4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S2[row][col];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆字节变换</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">deSubBytes</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">getNumFromS1Box</span>(array[i][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把4个元素的数组循环右移step位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">rightLoop4int</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>], <span class=\"type\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        temp[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> index = step % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : step % <span class=\"number\">4</span>;</span><br><span class=\"line\">    index = <span class=\"number\">3</span> - index;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        array[i] = temp[index];</span><br><span class=\"line\">        index--;</span><br><span class=\"line\">        index = index == <span class=\"number\">-1</span> ? <span class=\"number\">3</span> : index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆行移位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">deShiftRows</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rowTwo[<span class=\"number\">4</span>], rowThree[<span class=\"number\">4</span>], rowFour[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        rowTwo[i] = array[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        rowThree[i] = array[<span class=\"number\">2</span>][i];</span><br><span class=\"line\">        rowFour[i] = array[<span class=\"number\">3</span>][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rightLoop4int</span>(rowTwo, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rightLoop4int</span>(rowThree, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rightLoop4int</span>(rowFour, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[<span class=\"number\">1</span>][i] = rowTwo[i];</span><br><span class=\"line\">        array[<span class=\"number\">2</span>][i] = rowThree[i];</span><br><span class=\"line\">        array[<span class=\"number\">3</span>][i] = rowFour[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆列混合用到的矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> deColM[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123; <span class=\"number\">0xe</span>, <span class=\"number\">0xb</span>, <span class=\"number\">0xd</span>, <span class=\"number\">0x9</span>,</span><br><span class=\"line\">    <span class=\"number\">0x9</span>, <span class=\"number\">0xe</span>, <span class=\"number\">0xb</span>, <span class=\"number\">0xd</span>,</span><br><span class=\"line\">    <span class=\"number\">0xd</span>, <span class=\"number\">0x9</span>, <span class=\"number\">0xe</span>, <span class=\"number\">0xb</span>,</span><br><span class=\"line\">    <span class=\"number\">0xb</span>, <span class=\"number\">0xd</span>, <span class=\"number\">0x9</span>, <span class=\"number\">0xe</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆列混合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">deMixColumns</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tempArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            tempArray[i][j] = array[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">0</span>], tempArray[<span class=\"number\">0</span>][j]) ^ <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">1</span>], tempArray[<span class=\"number\">1</span>][j])</span><br><span class=\"line\">                ^ <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">2</span>], tempArray[<span class=\"number\">2</span>][j]) ^ <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">3</span>], tempArray[<span class=\"number\">3</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把两个4X4数组进行异或</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">addRoundTowArray</span><span class=\"params\">(<span class=\"type\">int</span> aArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"type\">int</span> bArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            aArray[i][j] = aArray[i][j] ^ bArray[i][j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从4个32位的密钥字中获得4X4数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于进行逆列混合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">getArrayFrom4W</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index = i * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> colOne[<span class=\"number\">4</span>], colTwo[<span class=\"number\">4</span>], colThree[<span class=\"number\">4</span>], colFour[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index], colOne);</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index + <span class=\"number\">1</span>], colTwo);</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index + <span class=\"number\">2</span>], colThree);</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index + <span class=\"number\">3</span>], colFour);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[i][<span class=\"number\">0</span>] = colOne[i];</span><br><span class=\"line\">        array[i][<span class=\"number\">1</span>] = colTwo[i];</span><br><span class=\"line\">        array[i][<span class=\"number\">2</span>] = colThree[i];</span><br><span class=\"line\">        array[i][<span class=\"number\">3</span>] = colFour[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 c: 密文的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 clen: 密文的长度。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 key: 密钥的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deAes</span><span class=\"params\">(<span class=\"type\">char</span>* c, <span class=\"type\">int</span> clen, <span class=\"type\">char</span>* key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = <span class=\"built_in\">strlen</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clen == <span class=\"number\">0</span> || clen % <span class=\"number\">16</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Ciphertext characters must be a multiple of 16! Now the length is zero:%d\\n&quot;</span>, clen);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">checkKeyLen</span>(keylen)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Key character length error! The lengths must be 16, 24, and 32. The current length is:%d\\n&quot;</span>, keylen);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">extendKey</span>(key);<span class=\"comment\">//扩展密钥</span></span><br><span class=\"line\">    <span class=\"type\">int</span> cArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; clen; k += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">convertToIntArray</span>(c + k, cArray);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(cArray, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> wArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">9</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">deSubBytes</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">deShiftRows</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">deMixColumns</span>(cArray);</span><br><span class=\"line\">            <span class=\"built_in\">getArrayFrom4W</span>(i, wArray);</span><br><span class=\"line\">            <span class=\"built_in\">deMixColumns</span>(wArray);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">addRoundTowArray</span>(cArray, wArray);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">deSubBytes</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">deShiftRows</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(cArray, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">convertArrayToStr</span>(cArray, c + k);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>.rodata段是用来存放只读数据的一块内存区域，例如常量数据。ro代表read only，即只读的意思。.rodata段也叫常量区，它属于静态内存分配。使用const修饰符，例如<code>const int a = 10;</code>，这样的变量会被放在.rodata段中</p>\n</blockquote>\n<h2 id=\"Ida-Python脚本\"><a href=\"#Ida-Python脚本\" class=\"headerlink\" title=\"Ida Python脚本:\"></a>Ida Python脚本:</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start = <span class=\"number\">0x00401500</span></span><br><span class=\"line\">end  = start + <span class=\"number\">0xBA</span></span><br><span class=\"line\">xor = <span class=\"number\">0x41</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start,end):</span><br><span class=\"line\">   data = get_wide_byte(i)</span><br><span class=\"line\">   patch_byte(i,data^xor)</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; patched&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"attribute实现main函数之前执行相应函数：\"><a href=\"#attribute实现main函数之前执行相应函数：\" class=\"headerlink\" title=\"attribute实现main函数之前执行相应函数：\"></a>attribute实现main函数之前执行相应函数：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> __<span class=\"title\">attribute__</span><span class=\"params\">((constructor))</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> __<span class=\"title\">attribute__</span><span class=\"params\">((destructor))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is function %s\\n&quot;</span>,__func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is function %s\\n&quot;</span>,__func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is function %s\\n&quot;</span>,__func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"函数调用默认传参的几种方式\"><a href=\"#函数调用默认传参的几种方式\" class=\"headerlink\" title=\"函数调用默认传参的几种方式\"></a>函数调用默认传参的几种方式</h2><p>$$<br>cdecl：这是C语言默认的调用约定，它要求参数从右向左依次压入栈中，由调用者负责清理栈空间。这种方式适用于可变数量的参数，如printf函数。在Windows和Linux系统中，cdecl通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>stdcall：这是Windows API默认的调用约定，它要求参数从右向左依次压入栈中，由被调用者负责清理栈空间。这种方式适用于固定数量的参数，如MessageBox函数。在Windows系统中，stdcall通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>fastcall：这是一种优化的调用约定，它要求将部分参数通过寄存器传递，而不是全部压入栈中，以提高函数调用的效率。不同的编译器可能会有不同的fastcall实现，例如Microsoft Visual C++和Borland C++ Builder分别使用ECX和EDX两个寄存器传递前两个参数，而GCC则使用EAX、EDX和ECX三个寄存器传递前三个参数。在Windows和Linux系统中，fastcall通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>thiscall：这是C++类成员函数默认的调用约定，它要求将对象指针（this指针）通过ECX寄存器传递给函数，而其他参数则从右向左依次压入栈中。由于thiscall只适用于类成员函数，因此它通常不需要显式指定。在Windows和Linux系统中，thiscall通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>syscall：这是Linux内核默认的调用约定，它要求将系统调用号通过EAX寄存器传递给内核，而其他参数则通过EBX、ECX、EDX、ESI、EDI和EBP六个寄存器按顺序传递给内核。如果参数超过六个，则需要通过栈传递。在Linux系统中，syscall通常用于32位x86架构的编译器<br>$$</p>\n<p>$$<br>在64位x86架构（x86_64或AMD64）的编译器中，通常会有更多的寄存器可供使用，因此参数传递方式也会有所不同。例如，在Windows系统中，x64调用约定要求将前四个整数或指针类型的参数通过RCX、RDX、R8和R9四个寄存器传递，而前四个浮点类型的参数通过XMM0、XMM1、XMM2和XMM3四个寄存器传递；在Linux系统中，System V AMD64 ABI要求将前六个整数或指针类型的参数通过RDI、RSI、RDX、RCX、R8和R9六个寄存器传递，而前八个浮点类型的参数通过XMM0到XMM7八个寄存器传递。<br>$$</p>\n<h2 id=\"gbk解码转中文，先ida64-convert-to-string，再用b修饰，解码即可\"><a href=\"#gbk解码转中文，先ida64-convert-to-string，再用b修饰，解码即可\" class=\"headerlink\" title=\"gbk解码转中文，先ida64 convert to string，再用b修饰，解码即可\"></a>gbk解码转中文，先ida64 convert to string，再用b修饰，解码即可</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">b&quot;\\xD7\\xA2\\xB2\\xE1\\xB3\\xC9\\xB9\\xA6\\xA3\\xA1&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.decode(<span class=\"string\">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"异常处理和反调试\"><a href=\"#异常处理和反调试\" class=\"headerlink\" title=\"异常处理和反调试\"></a>异常处理和反调试</h2><p>反调试的几种方式记录</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> flag[<span class=\"number\">5</span>] = <span class=\"string\">&quot;1234&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy_s</span>(flag, <span class=\"built_in\">size_t</span>(<span class=\"number\">5</span>), <span class=\"string\">&quot;9999&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EXCEPTION_DISPOSITION WINAPI <span class=\"title\">myExceptHandler</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">struct</span> _EXCEPTION_RECORD* ExceptionRecord,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    PVOID EstablisherFrame,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    PCONTEXT pcontext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    PVOID DisapatcherContext</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 第五种方式，类似第四种方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pcontext-&gt;Dr0 != <span class=\"number\">0</span> || pcontext-&gt;Dr1 != <span class=\"number\">0</span> || pcontext-&gt;Dr2 != <span class=\"number\">0</span> || pcontext-&gt;Dr3 != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;myExceptHandler检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;myExceptHandlerm没有检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pcontext-&gt;Eip += <span class=\"number\">2</span>;<span class=\"comment\">//跳过程序异常处，要不然程序一直在异常处不继续运行</span></span><br><span class=\"line\">    <span class=\"built_in\">change</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExceptionContinueExecution;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1</span></span><br><span class=\"line\">    <span class=\"comment\">//第一种，会被x32dbg,OD反反调试器杀掉</span></span><br><span class=\"line\">    BOOL flag = <span class=\"built_in\">IsDebuggerPresent</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;IsDebuggerPresent检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;IsDebuggerPresent没有检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第二种，不会被x32,OD反反调试器杀掉</span></span><br><span class=\"line\">    BOOL IsDebug = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//第一个参数是进程句柄，可以检测远程进程是否被调试</span></span><br><span class=\"line\">    <span class=\"built_in\">CheckRemoteDebuggerPresent</span>(<span class=\"built_in\">GetCurrentProcess</span>(), &amp;IsDebug);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsDebug)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CheckRemoteDebuggerPresent检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CheckRemoteDebuggerPresent没有检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//第三种，不会被x32,OD反反调试器杀掉</span></span><br><span class=\"line\">    <span class=\"comment\">//CloseHandle函数会试图关闭指定句柄的进程，</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1 </span></span><br><span class=\"line\">    __try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>((HANDLE)<span class=\"number\">0x1234</span>);<span class=\"comment\">//指定一个不存在的进程句柄</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CloseHandle没有检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __except(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CloseHandle检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">//第四种,硬件断点反调试，只要在动调时设置硬件断点就会被发现</span></span><br><span class=\"line\">    CONTEXT context&#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;</span><br><span class=\"line\">    <span class=\"built_in\">GetThreadContext</span>(<span class=\"built_in\">GetCurrentThread</span>(),&amp;context);</span><br><span class=\"line\">    <span class=\"comment\">//查找寄存器的值，如果有硬件断点，该寄存器的值会改变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Dr0 != <span class=\"number\">0</span> || context.Dr1 != <span class=\"number\">0</span> || context.Dr2 != <span class=\"number\">0</span> || context.Dr3 != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;GetThreadContext检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;GetThreadContext没有检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">//第五种</span></span><br><span class=\"line\">    DWORD sehHandler = (DWORD)myExceptHandler;</span><br><span class=\"line\">    <span class=\"comment\">//上面可能是添加一个异常处理函数，然后下面让异常处理链表SEH增加一个节点，把这个异常处理函数插进去</span></span><br><span class=\"line\">    _asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        push myExceptHandler<span class=\"comment\">//fs: [0] 指向的是TIB[Thread information Block]结构中的EXCEPTION_REGISTRATION 结构</span></span><br><span class=\"line\">        mov eax,fs:[<span class=\"number\">0</span>]</span><br><span class=\"line\">        push eax</span><br><span class=\"line\">        mov fs:[<span class=\"number\">0</span>],esp<span class=\"comment\">//让fs:[0]指向一个新的EXCEPTION_REGISTRATION 结构(就像链表插入一个新节点)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置程序异常处</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    a = a / <span class=\"number\">0</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; flag;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"dll的编译和使用\"><a href=\"#dll的编译和使用\" class=\"headerlink\" title=\"dll的编译和使用\"></a>dll的编译和使用</h2><p>先编译dll文件，新建生成dll项目，创建一个新的Mydll.cpp和Mydll.h</p>\n<p>Mydll.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Mydll.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sub</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a*b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Div</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a/b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">XXOR</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a ^ b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>导出的两种方式的其中第一种方式，头文件导出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> MYDLL_EXPORTS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MYDLL_API __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MYDLL_API __declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一种导出方式</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Produce the next value in the sequence.</span></span><br><span class=\"line\"><span class=\"comment\">// Returns true on success and updates current value and index;</span></span><br><span class=\"line\"><span class=\"comment\">// false on overflow, leaves current value and index unchanged.</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the current value in the sequence.</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">multi</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the position of the current value in the sequence.</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">Div</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>导出的第二种方式，源文件新建一个export.def文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIBRARY <span class=\"string\">&quot;Mydll&quot;</span></span><br><span class=\"line\">EXPORTS</span><br><span class=\"line\">XXOR @ <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>新建一个项目导入生成的dll文件</p>\n<p>导入的第一种方式，隐式链接的方式调用dll导出寒素</p>\n<p><code>#pragma comment(lib,&quot;Mydll.lib&quot;)//lib地址</code></p>\n<p>头文件main.h</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;Mydll.lib&quot;</span>)<span class=\"comment\">//lib地址</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>源文件main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, sum);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种显示链接方式调用导出函数</p>\n<p>不需要头文件和lib，源文件main.cpp如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*XXOR)</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMODULE hModule = <span class=\"built_in\">LoadLibraryW</span>(<span class=\"string\">L&quot;Mydll.dll&quot;</span>);</span><br><span class=\"line\">\tXXOR Xorr = (XXOR)<span class=\"built_in\">GetProcAddress</span>(hModule, <span class=\"string\">&quot;XXOR&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, <span class=\"built_in\">Xorr</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">FreeLibrary</span>(hModule);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"c语言RC4，base64加解密代码\"><a href=\"#c语言RC4，base64加解密代码\" class=\"headerlink\" title=\"c语言RC4，base64加解密代码\"></a>c语言RC4，base64加解密代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        S[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        j = (j + S[i] + key[i % keylen]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[i];</span><br><span class=\"line\">        S[i] = S[j];</span><br><span class=\"line\">        S[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个字节的密钥流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> <span class=\"title\">generate</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">int</span>* i, <span class=\"type\">int</span>* j)</span> </span>&#123;</span><br><span class=\"line\">    *i = (*i + <span class=\"number\">1</span>) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    *j = (*j + S[*i]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[*i];</span><br><span class=\"line\">    S[*i] = S[*j];</span><br><span class=\"line\">    S[*j] = temp;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 S[S[i] + S[j]]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> S[(S[*i] + S[*j]) % <span class=\"number\">256</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对数据进行加密或解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, <span class=\"type\">int</span> datalen, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> S[<span class=\"number\">256</span>]; <span class=\"comment\">// 256 字节的数据表</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; <span class=\"comment\">// 两个索引变量</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 S 表</span></span><br><span class=\"line\">    <span class=\"built_in\">init</span>(S, key, keylen);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; datalen; k++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据和密钥流进行异或运算</span></span><br><span class=\"line\">        data[k] ^= <span class=\"built_in\">generate</span>(S, &amp;i, &amp;j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"type\">const</span> base64char = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">base64_decode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* base64, <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* bindata)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> k;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp[<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; base64[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i += <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(temp, <span class=\"number\">0xFF</span>, <span class=\"built_in\">sizeof</span>(temp));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i])</span><br><span class=\"line\">                temp[<span class=\"number\">0</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">                temp[<span class=\"number\">1</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i + <span class=\"number\">2</span>])</span><br><span class=\"line\">                temp[<span class=\"number\">2</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i + <span class=\"number\">3</span>])</span><br><span class=\"line\">                temp[<span class=\"number\">3</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        bindata[j++] = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">2</span>)) &amp; <span class=\"number\">0xFC</span>)) |</span><br><span class=\"line\">            ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x03</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64[i + <span class=\"number\">2</span>] == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        bindata[j++] = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">4</span>)) &amp; <span class=\"number\">0xF0</span>)) |</span><br><span class=\"line\">            ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x0F</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64[i + <span class=\"number\">3</span>] == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        bindata[j++] = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">6</span>)) &amp; <span class=\"number\">0xF0</span>)) |</span><br><span class=\"line\">            ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">3</span>] &amp; <span class=\"number\">0x3F</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">base64_encode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* bindata, <span class=\"type\">char</span>* base64, <span class=\"type\">int</span> binlength)</span><span class=\"comment\">//输入，输出，输入长度</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> current;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; binlength; i += <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        current = (bindata[i] &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">        current &amp;= (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x3F</span>;</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\"></span><br><span class=\"line\">        current = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i] &lt;&lt; <span class=\"number\">4</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &gt;= binlength)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\">            base64[j++] = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            base64[j++] = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current |= ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i + <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x0F</span>);</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\"></span><br><span class=\"line\">        current = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i + <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x3C</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + <span class=\"number\">2</span> &gt;= binlength)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\">            base64[j++] = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current |= ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i + <span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x03</span>);</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\"></span><br><span class=\"line\">        current = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)bindata[i + <span class=\"number\">2</span>]) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x3F</span>);</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    base64[j] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base64;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> Buffer[<span class=\"number\">31</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> enc[<span class=\"number\">41</span>];</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;BirkenwaldCTF&#123;This_is_f4ke_f1ag&#125;&quot;</span>;<span class=\"comment\">//RC5密钥</span></span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>((<span class=\"type\">char</span>*)key);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Do you know flag?\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please tell me:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, Buffer);</span><br><span class=\"line\">    <span class=\"type\">int</span> datelen = (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>((<span class=\"type\">char</span>*)Buffer);</span><br><span class=\"line\">    <span class=\"built_in\">encrypt</span>(Buffer, datelen, key, keylen);<span class=\"comment\">//RC4加密</span></span><br><span class=\"line\">    <span class=\"built_in\">encrypt2</span>(Buffer, enc, <span class=\"number\">30</span>);<span class=\"comment\">//base64加密</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"lea指令使用，防止遗忘\"><a href=\"#lea指令使用，防止遗忘\" class=\"headerlink\" title=\"lea指令使用，防止遗忘\"></a>lea指令使用，防止遗忘</h2><p>lea，官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址；</p>\n<p>常见的几种用法：</p>\n<p><code>1、lea eax，[addr]</code></p>\n<p>就是将表达式addr的值放入eax寄存器，示例如下：</p>\n<p>lea eax,[401000h]; 将值401000h写入eax寄存器中</p>\n<p>lea指令右边的操作数表示一个精指针，上述指令和mov eax，401000h是等价的</p>\n<p><code>2、lea eax，dword ptr [ebx]</code>;将ebx的值赋值给eax</p>\n<p><code>3、lea eax，c</code>；其中c为一个int型的变量，该条语句的意思是把c的地址赋值给eax；</p>\n<h2 id=\"内联汇编实现部分常用函数功能练习\"><a href=\"#内联汇编实现部分常用函数功能练习\" class=\"headerlink\" title=\"内联汇编实现部分常用函数功能练习\"></a>内联汇编实现部分常用函数功能练习</h2><p>在全局内定义字符串后的print hello world，因为编译器会编译的时候会自动寻址，最简单的一种方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> format[] = <span class=\"string\">&quot;%s %s\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> hello[] = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> world[] = <span class=\"string\">&quot;world!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//_declspec(naked)裸函数标识，没有基本函数框架的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked)<span class=\"built_in\">print</span>()<span class=\"comment\">//打印hello world</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp,esp</span><br><span class=\"line\">\t\tsub esp,<span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tmov eax,offset world</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tmov eax,offset hello</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tmov eax,offset format</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall printf</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tretn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall print</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用局部变量字符串，将字符串push进栈中，通过栈寻址，push传参来实现功能</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//char format[] = &quot;%s %s&quot;;//25,73,20,25,73</span></span><br><span class=\"line\"><span class=\"comment\">//char hello[] = &quot;hello&quot;;//68,65,6c,6c,6f</span></span><br><span class=\"line\"><span class=\"comment\">//char world[] = &quot;world!&quot;;//77,6f,72,6c,64,21</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked)<span class=\"built_in\">print</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp,esp</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tpush <span class=\"number\">0x2164</span><span class=\"comment\">//push 后高位自动补零结束字符串</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c726f77</span><span class=\"comment\">//注意push顺序和十六进制顺序</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6f</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c6c6568</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x73</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x25207325</span></span><br><span class=\"line\">\t\tlea eax,dword ptr ss:[esp<span class=\"number\">+0x10</span>]<span class=\"comment\">//ss堆栈段，ds数据段</span></span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tlea eax,dword ptr ss:[esp<span class=\"number\">+0xc</span>]<span class=\"comment\">//注意偏移量计算</span></span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tlea eax,dword ptr ss:[esp<span class=\"number\">+0x08</span>]<span class=\"comment\">//用lea将字符串地址传入寄存器</span></span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall printf</span><br><span class=\"line\">\t\tadd esp,<span class=\"number\">0x24</span></span><br><span class=\"line\">\t\tpop eax</span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//char format[] = &quot;%s %s&quot;;//25,73,20,25,73,0a</span></span><br><span class=\"line\">\t<span class=\"comment\">//char hello[] = &quot;hello&quot;;//68,65,6c,6c,6f</span></span><br><span class=\"line\">\t<span class=\"comment\">//char world[] = &quot;world!&quot;;//77,6f,72,6c,64,21</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(format, hello, world);</span></span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall print</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用kernel32.dll或者kernelbase.dll模块寻找loadlibrary和getprocaddr函数地址，以此加载想要的模块和获得想要的函数地址，从而调用想要的函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> Load[] = <span class=\"string\">&quot;LoadLibraryA&quot;</span>;<span class=\"comment\">//4c,6f,61,64,4c,69,62,72,61,72,79,41 00 len = 0xc</span></span><br><span class=\"line\"><span class=\"type\">char</span> Get[] = <span class=\"string\">&quot;GetProcAddress&quot;</span>;<span class=\"comment\">//47,65,74,50,72,6f,63,41,64,64,72,65,73,73 00 len = 0xe</span></span><br><span class=\"line\"><span class=\"type\">char</span> hello[] = <span class=\"string\">&quot;hello world!&quot;</span>;<span class=\"comment\">//68,65,6c,6c,6f,20,77,6f,72,6c,64,21 00 len = 0xc</span></span><br><span class=\"line\"><span class=\"type\">char</span> Msvc[] = <span class=\"string\">&quot;msvcrt.dll&quot;</span>;<span class=\"comment\">//6d,73,76,63,72,74,2e,64,6c,6c 00 len = 0xa</span></span><br><span class=\"line\"><span class=\"type\">char</span> Print[] = <span class=\"string\">&quot;printf&quot;</span>;<span class=\"comment\">//70,72,69,6e,74,66 00 len = 0x6</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked)<span class=\"built_in\">MyShell</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tmov ebp,esp</span><br><span class=\"line\">\t\tpush <span class=\"number\">0</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x21646c72</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6f77206f</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c6c6568</span><span class=\"comment\">//hello world</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x7373</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x65726464</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x41636f72</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x50746547</span><span class=\"comment\">//GetProcAddress</span></span><br><span class=\"line\">        push <span class=\"number\">0</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x41797261</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x7262694c</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x64616f4c</span><span class=\"comment\">//LoadLibraryA</span></span><br><span class=\"line\">\t\tmov ecx,esp</span><br><span class=\"line\">\t\tpush ecx<span class=\"comment\">//esp传参过去</span></span><br><span class=\"line\">\t\tcall Func_print</span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop<span class=\"comment\">//填充五个字节留给jmp指令，因为call指令有一个相对地址</span></span><br><span class=\"line\">            <span class=\"comment\">//可以在OD，xdbg中计算jmp的相对地址</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tret</span><br><span class=\"line\"></span><br><span class=\"line\">\tFunc_GetModule:</span><br><span class=\"line\">\tpush ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tpush esi</span><br><span class=\"line\">\t\tmov esi,dword ptr fs:[<span class=\"number\">0x30</span>]<span class=\"comment\">//PEB结构体地址</span></span><br><span class=\"line\">\t\tmov esi,[esi<span class=\"number\">+0xc</span>]<span class=\"comment\">//LDR结构体地址</span></span><br><span class=\"line\">\t\tmov esi,[esi<span class=\"number\">+0x1c</span>]<span class=\"comment\">//list</span></span><br><span class=\"line\">\t\tmov esi,[esi]<span class=\"comment\">//list 第二项kernel32或者kernelbase</span></span><br><span class=\"line\">\t\tmov esi,[esi<span class=\"number\">+0x8</span>]<span class=\"comment\">//dllbase</span></span><br><span class=\"line\">\t\tmov eax,esi</span><br><span class=\"line\">\t\tpop esi</span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tret </span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunc_GetAddr:</span><br><span class=\"line\">\t    push ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tmov edx, [ebp + <span class=\"number\">0x8</span>]<span class=\"comment\">//dllbase</span></span><br><span class=\"line\">\t\tmov esi, [edx + <span class=\"number\">0x3c</span>]<span class=\"comment\">//if_anew</span></span><br><span class=\"line\">\t\tlea esi, [esi + edx]<span class=\"comment\">//NT header</span></span><br><span class=\"line\">\t\tmov esi, [esi + <span class=\"number\">0x78</span>]<span class=\"comment\">//导出表RVA</span></span><br><span class=\"line\">\t\tlea esi, [edx + esi]<span class=\"comment\">//导出表VA</span></span><br><span class=\"line\">\t\tmov edi, [esi + <span class=\"number\">0x1c</span>]<span class=\"comment\">//EAT RVA</span></span><br><span class=\"line\">\t\tlea edi, [edi + edx]<span class=\"comment\">//EAT VA</span></span><br><span class=\"line\">\t\tmov [ebp - <span class=\"number\">0x4</span>], edi<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\tmov edi, [esi + <span class=\"number\">0x20</span>]<span class=\"comment\">//ENT RVA</span></span><br><span class=\"line\">\t\tlea edi, [edi + edx]<span class=\"comment\">//ENT VA</span></span><br><span class=\"line\">\t\tmov [ebp - <span class=\"number\">0x8</span>], edi<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\tmov edi, [esi + <span class=\"number\">0x24</span>]<span class=\"comment\">//EOT RVA</span></span><br><span class=\"line\">\t\tlea edi, [edi+edx]<span class=\"comment\">//EOT VA</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0xc</span>],edi<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">xor</span> eax,eax</span><br><span class=\"line\">\t\tjmp tag_cmpfirst</span><br><span class=\"line\">\ttag_cmpLoop:</span><br><span class=\"line\">\t    inc eax</span><br><span class=\"line\">\ttag_cmpfirst:</span><br><span class=\"line\">\t    mov esi,[ebp<span class=\"number\">-0x8</span>]<span class=\"comment\">//ENT</span></span><br><span class=\"line\">\t\tmov esi,[esi+eax*<span class=\"number\">4</span>]<span class=\"comment\">//RVA</span></span><br><span class=\"line\">\t\tlea esi,[esi+edx]<span class=\"comment\">//函数名称字符串地址</span></span><br><span class=\"line\">\t\tmov edi,[ebp<span class=\"number\">+0xc</span>]<span class=\"comment\">//</span></span><br><span class=\"line\">\t\tmov ecx,[ebp<span class=\"number\">+0x10</span>]<span class=\"comment\">//循环次数，ebp+0x10是传来的参数</span></span><br><span class=\"line\">\t\trepe cmpsb</span><br><span class=\"line\">\t\tmov esi,[ebp<span class=\"number\">-0xc</span>]</span><br><span class=\"line\">\t\tjne tag_cmpLoop</span><br><span class=\"line\">\t\tmov esi,[ebp<span class=\"number\">-0xc</span>]<span class=\"comment\">//EOT</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">xor</span> edi,edi<span class=\"comment\">//为了不影响结果清空edi</span></span><br><span class=\"line\">\t\tmov di,[esi+eax*<span class=\"number\">2</span>]<span class=\"comment\">//word类型,EAT表索引</span></span><br><span class=\"line\">\t\tmov edx,[ebp<span class=\"number\">-0x4</span>]<span class=\"comment\">//EAT</span></span><br><span class=\"line\">\t\tmov esi,[edx+edi*<span class=\"number\">4</span>]<span class=\"comment\">//函数地址RVA</span></span><br><span class=\"line\">\t\tmov edx,[ebp<span class=\"number\">+0x8</span>]<span class=\"comment\">//dllbase</span></span><br><span class=\"line\">\t\tlea eax,[esi+edx]<span class=\"comment\">//最终函数地址</span></span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tretn <span class=\"number\">0xc</span><span class=\"comment\">//在栈中弹出三个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tFunc_print:</span><br><span class=\"line\">\tpush ebp</span><br><span class=\"line\">\t\tmov ebp,esp </span><br><span class=\"line\">\t\tsub esp,<span class=\"number\">0x10</span></span><br><span class=\"line\">\t\tcall Func_GetModule<span class=\"comment\">//获取kernel模块基址</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0x4</span>],eax<span class=\"comment\">//[ebp-0x4]保存模块基址</span></span><br><span class=\"line\">\t\tlea ecx,[ebp + <span class=\"number\">0xc</span>]<span class=\"comment\">//load地址</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0xc</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall Func_GetAddr<span class=\"comment\">//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0x8</span>],eax<span class=\"comment\">//load地址\t</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0xe</span></span><br><span class=\"line\">\t\tlea ecx, [ebp + <span class=\"number\">0x1c</span>]<span class=\"comment\">//Get字符串</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tpush [ebp<span class=\"number\">-0x4</span>]<span class=\"comment\">//模块基址</span></span><br><span class=\"line\">\t\tcall Func_GetAddr<span class=\"comment\">//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0xc</span>],eax<span class=\"comment\">//get地址</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c6c</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x642e7472</span>\t</span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6376736d</span></span><br><span class=\"line\">\t\tlea ecx,dword ptr ss:[ebp<span class=\"number\">-0x1c</span>]</span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tcall [ebp<span class=\"number\">-0x8</span>]<span class=\"comment\">//调用load函数load Msvc.dll，一个参数，字符串地址</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6674</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6e697270</span></span><br><span class=\"line\">\t\tlea ecx,[ebp<span class=\"number\">-0x24</span>]<span class=\"comment\">//printf字符串</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tpush eax<span class=\"comment\">//msvc.dll基址</span></span><br><span class=\"line\">\t\tcall [ebp<span class=\"number\">-0xc</span>]<span class=\"comment\">//调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称</span></span><br><span class=\"line\">\t\tlea ecx,[ebp<span class=\"number\">+0x2c</span>]<span class=\"comment\">//hello world地址</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tcall eax<span class=\"comment\">//printf地址</span></span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*GetProcAddress();</span></span><br><span class=\"line\"><span class=\"comment\">    LoadLibraryA()*/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//6d, 73, 76, 63, 72, 74, 2e, 64, 6c, 6c 00 len = 0xa</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// //70,72,69,6e,74,66</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyShell</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/*\tfor (int i = 0; i &lt; strlen(Print); i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tprintf(&quot;%x,&quot;, Print[i]);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;*/</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*AT&amp;T写法</span></span><br><span class=\"line\"><span class=\"comment\">asm(</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pusha\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x21646c72\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6f77206f\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6c6c6568\\n&quot; // hello world</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x7373\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x65726464\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x41636f72\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x50746547\\n&quot; // GetProcAddress</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x41797261\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x7262694c\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x64616f4c\\n&quot; // LoadLibraryA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot; // esp传参过去</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_print\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;popa\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot; // 填充五个字节留给jmp指令，因为call指令有一个相对地址</span></span><br><span class=\"line\"><span class=\"comment\">    // 可以在OD，xdbg中计算jmp的相对地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&quot;Func_GetModule:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %esi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %fs:0x30, %esi\\n&quot; // PEB结构体地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0xc(%esi), %esi\\n&quot; // LDR结构体地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x1c(%esi), %esi\\n&quot; // list</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%esi), %esi\\n&quot; // list 第二项kernel32或者kernelbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x8(%esi), %esi\\n&quot; // dllbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esi, %eax\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %esi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&quot;Func_GetAddr:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x8(%ebp), %edx\\n&quot; // dllbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x3c(%edx), %esi\\n&quot; // if_anew</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %esi\\n&quot;  // NT header</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x78(%esi), %esi\\n&quot;  // 导出表RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %esi\\n&quot;  // 导出表VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x1c(%esi), %edi\\n&quot;  // EAT RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %edi), %edi\\n&quot;  // EAT VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %edi, -0x4(%ebp)\\n&quot;  // 保存</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x20(%esi), %edi\\n&quot;  // ENT RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %edi), %edi\\n&quot;  // ENT VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %edi, -0x8(%ebp)\\n&quot;  // 保存</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x24(%esi), %edi\\n&quot;  // EOT RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %edi), %edi\\n&quot;  // EOT VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %edi, -0xc(%ebp)\\n&quot;  // 保存</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;xor %eax, %eax\\n&quot; </span></span><br><span class=\"line\"><span class=\"comment\">    &quot;jmp tag_cmpfirst\\n&quot; </span></span><br><span class=\"line\"><span class=\"comment\">&quot;tag_cmpLoop:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;inc %eax\\n&quot; </span></span><br><span class=\"line\"><span class=\"comment\">&quot;tag_cmpfirst:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0x8(%ebp), %esi\\n&quot;  // ENT</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%esi, %eax, 4), %esi\\n&quot; // RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %esi\\n&quot; // 函数名称字符串地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0xc(%ebp), %edi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x10(%ebp), %ecx\\n&quot; // 循环次数，ebp+0x10是传来的参数</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;repe cmpsb\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0xc(%ebp), %esi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;jne tag_cmpLoop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0xc(%ebp), %esi\\n&quot; // EOT</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;xor %edi, %edi\\n&quot; // 为了不影响结果清空edi</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%esi, %eax, 2), %di\\n&quot; // word类型,EAT表索引</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0x4(%ebp), %edx\\n&quot; // EAT</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%edx, %edi, 4), %esi\\n&quot; // 函数地址RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x8(%ebp), %edx\\n&quot; // dllbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %eax\\n&quot; // 最终函数地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret $0xc\\n&quot; // 在栈中弹出三个参数</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&quot;Func_print:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;sub $0x10, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_GetModule\\n&quot; // 获取kernel模块基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %eax, -0x4(%ebp)\\n&quot; // 保存模块基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea 0xc(%ebp), %ecx\\n&quot; // load地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0xc\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %eax\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_GetAddr\\n&quot; // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %eax, -0x8(%ebp)\\n&quot; // load地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0xe\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea 0x1c(%ebp), %ecx\\n&quot; // Get字符串</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push -0x4(%ebp)\\n&quot; // 模块基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_GetAddr\\n&quot; // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %eax, -0xc(%ebp)\\n&quot; // get地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6c6c\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x642e7472\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6376736d\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea -0x1c(%ebp), %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call -0x8(%ebp)\\n&quot; // 调用load函数load Msvc.dll，一个参数，字符串地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6674\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6e697270\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea -0x24(%ebp), %ecx\\n&quot; // printf字符串</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %eax\\n&quot; // msvc.dll基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call -0xc(%ebp)\\n&quot; // 调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea 0x2c(%ebp), %ecx\\n&quot; // hello world地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call %eax\\n&quot; // printf地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    );</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>准备了一个表格存储栈信息,ebp2对应的是print函数的栈底，pushadd到ebp2是Myshell函数形成的栈帧</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>msvc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>printf</td>\n</tr>\n<tr>\n<td>28</td>\n<td>6e</td>\n</tr>\n<tr>\n<td>printf 24</td>\n<td>66</td>\n</tr>\n<tr>\n<td>20</td>\n<td>msvc</td>\n</tr>\n<tr>\n<td>1c msvc</td>\n<td>63</td>\n</tr>\n<tr>\n<td>18</td>\n<td>64</td>\n</tr>\n<tr>\n<td>14</td>\n<td>6c</td>\n</tr>\n<tr>\n<td>esp 0x10</td>\n<td></td>\n</tr>\n<tr>\n<td>0xc</td>\n<td>get_adr</td>\n</tr>\n<tr>\n<td>0x8</td>\n<td>load_adr</td>\n</tr>\n<tr>\n<td>0x4</td>\n<td>kernel</td>\n</tr>\n<tr>\n<td>ebp2</td>\n<td>ebp1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>eip</td>\n</tr>\n<tr>\n<td>8</td>\n<td>ecx&#x3D;esp1</td>\n</tr>\n<tr>\n<td>load c</td>\n<td>64</td>\n</tr>\n<tr>\n<td>10</td>\n<td>72</td>\n</tr>\n<tr>\n<td>14</td>\n<td>41</td>\n</tr>\n<tr>\n<td>18</td>\n<td>0</td>\n</tr>\n<tr>\n<td>get1c</td>\n<td>50</td>\n</tr>\n<tr>\n<td>20</td>\n<td>41</td>\n</tr>\n<tr>\n<td>24</td>\n<td>65</td>\n</tr>\n<tr>\n<td>28</td>\n<td>73</td>\n</tr>\n<tr>\n<td>hello 2c</td>\n<td>6c</td>\n</tr>\n<tr>\n<td>30</td>\n<td>6f</td>\n</tr>\n<tr>\n<td>34</td>\n<td>21</td>\n</tr>\n<tr>\n<td>38</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pushadd</td>\n<td>ad</td>\n</tr>\n</tbody></table>\n<h2 id=\"重温栈结构\"><a href=\"#重温栈结构\" class=\"headerlink\" title=\"重温栈结构\"></a>重温栈结构</h2><blockquote>\n<p>今天在准备写一个壳的时候需要手写汇编，把汇编十六进制插入PE文件中，一时对栈结构有点遗忘，在xdbg中调了会温故了一下，在这里记一下，防止下一次遗忘</p>\n</blockquote>\n<p>比方说我们有一个main函数时，在函数开始时经常有如下汇编代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push ebp</span><br><span class=\"line\"></span><br><span class=\"line\">mov esp,ebp</span><br><span class=\"line\"></span><br><span class=\"line\">sub esp,<span class=\"number\">0x20</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么会出现以上代码？在主函数调用的子函数中能不能不出现这些代码？</p>\n<p>push ebp 做的是一个保存ebp的操作，mov esp,ebp为下一个栈帧形成打下基础，在新栈帧中利用栈来保存数据，并且不会破坏原来栈帧中的数据</p>\n<p>sub esp,0x20则是开辟了一个新的栈空间，这段空间可被函数直接利用，比如说做一些局部变量的初始化操作，也可以省略这部操作，直接通过push提高栈顶（地址下降）然后再通过mov在栈中储存数据（初始化局部变量）</p>\n<p>主函数下的子函数结构和main函数类似，其实也可以说main函数时其他函数的子函数，没有什么较大的区别</p>\n<p>在call的时候其实把下一条要执行汇编代码地址push进了栈中，然后在函数内部在push ebp这些操作，使得每次函数调用结束时，会出现以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pop ebp</span><br><span class=\"line\">ret</span><br></pre></td></tr></table></figure>\n\n<p>ret返回的正是下一条汇编代码执行处</p>\n<p>在函数调用时，有时通过push来传递参数，这个时候栈顶提高，但是参数传递之后对主函数没有任何作用，所以函数调用结束时主函数有时候会通过add esp来调整栈空间。</p>\n<p>push指令在x86架构下是推入四个字节数据或地址，推入常量高位用0填充，可以通过mov指令实现对栈中数据进行字节位的调整</p>\n<h2 id=\"ret-和-retn的区别\"><a href=\"#ret-和-retn的区别\" class=\"headerlink\" title=\"ret 和 retn的区别\"></a>ret 和 retn的区别</h2><blockquote>\n<ul>\n<li>ret和retn都是返回指令，用于从子程序中返回到调用处，同时从栈中弹出返回地址</li>\n<li>ret和retn的区别在于是否有操作数。ret没有操作数，只是从栈中弹出返回地址；retn有一个操作数，表示要从栈中弹出的字节数</li>\n<li>例如add esp,0x4; ret;，等价于retn 0x4</li>\n</ul>\n</blockquote>\n<h2 id=\"repe-cmpsb字符串比较汇编指令\"><a href=\"#repe-cmpsb字符串比较汇编指令\" class=\"headerlink\" title=\"repe cmpsb字符串比较汇编指令\"></a>repe cmpsb字符串比较汇编指令</h2><blockquote>\n<p>是一个汇编语言指令，它的意思是重复比较两个字符串的字节，直到不相等或者计数器为零为止。它涉及到三个寄存器：ECX，EDI和ESI。<strong>ECX是计数器</strong>，表示要比较的字节数；<strong>EDI和ESI是两个字符串的起始地址</strong>。每次比较后，EDI和ESI会根据方向标志DF的值自动增加或减少。如果DF为0，表示正向比较，EDI和ESI都加一；如果DF为1，表示反向比较，EDI和ESI都减一。比较的结果会影响标志寄存器中的零标志ZF。如果ZF为1，表示两个字节相等；如果ZF为0，表示两个字节不等。repe cmpsb通常用来检测两个字符串是否完全相同</p>\n</blockquote>\n<h2 id=\"jmp指令偏移地址计算\"><a href=\"#jmp指令偏移地址计算\" class=\"headerlink\" title=\"jmp指令偏移地址计算\"></a>jmp指令偏移地址计算</h2><p>在使用jmp汇编指令时，关于算偏移地址的时候机器码十六进制的计算</p>\n<p>往下运行时，0x2 &#x3D; 0x44A04D-0x44A049-0x2，也就是jmp到的地址-原来jmp前的地址-jmp这条指令的字节数，本质就是算中间有多少字节</p>\n<p>往上运行时，0xFFF870F7 &#x3D; 0x401140 - 0x44A044 - 5 最后一个五是jmp指令的字节数，0xFFF870F7转化成机器码就是F770FBFF</p>\n<h2 id=\"IDAPatch保存后动调\"><a href=\"#IDAPatch保存后动调\" class=\"headerlink\" title=\"IDAPatch保存后动调\"></a>IDAPatch保存后动调</h2><p>Keypatcher进行patch，ctrl+w保存patch结果，但是动调有影响</p>\n<p>Apply patches to后动调即可 ，在edit-patch program里</p>\n<h2 id=\"Ollvm控制流平坦化技术\"><a href=\"#Ollvm控制流平坦化技术\" class=\"headerlink\" title=\"Ollvm控制流平坦化技术\"></a>Ollvm控制流平坦化技术</h2><p>ghidra自动化去混淆工具: <a href=\"https://github.com/PAGalaxyLab/ghidra_scripts\">https://github.com/PAGalaxyLab/ghidra_scripts</a></p>\n<p>IDA自动化去混淆工具d810: <a href=\"https://github.com/joydo/d810\">https://github.com/joydo/d810</a></p>\n<h2 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h2><h3 id=\"Hook的多种方式\"><a href=\"#Hook的多种方式\" class=\"headerlink\" title=\"Hook的多种方式\"></a>Hook的多种方式</h3><p><img src=\"https://s2.loli.net/2024/06/22/QkYWnuEXvbVM8Kp.png\" alt=\"image-20240418163602878\"></p>\n<h3 id=\"HOOK和Callback的区别\"><a href=\"#HOOK和Callback的区别\" class=\"headerlink\" title=\"HOOK和Callback的区别\"></a>HOOK和Callback的区别</h3><p>钩子技术（Hook）和回调函数（Callback）在编程中都是用于实现程序的扩展和灵活性，但它们有着不同的作用和实现方式。</p>\n<h4 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h4><ul>\n<li>事件响应： 钩子技术和回调函数都用于实现对特定事件的响应和处理。</li>\n<li>灵活性： 两者都可以增强程序的灵活性和扩展性，使得程序能够更好地处理不同的情况和需求。</li>\n</ul>\n<h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><ol>\n<li>作用：</li>\n</ol>\n<ul>\n<li>钩子技术主要用于拦截、监视和修改系统级别或应用程序级别的事件，比如键盘输入、鼠标操作、窗口消息等。</li>\n<li>回调函数主要用于在特定事件发生时被调用，通常用于异步编程或事件驱动编程中，比如网络请求完成后的回调函数、定时器触发后的回调函数等。</li>\n</ul>\n<ol>\n<li>实现方式：</li>\n</ol>\n<ul>\n<li>钩子技术通常是通过操作系统提供的接口或库函数来实现的，可以在系统级别或应用程序级别进行钩子的安装和管理。</li>\n<li>回调函数是一种编程模式，通过将函数指针或函数引用传递给其他函数，以便在特定事件发生时被调用。</li>\n</ul>\n<ol>\n<li>应用场景：</li>\n</ol>\n<ul>\n<li>钩子技术适用于需要拦截、监视和修改事件流的情况，比如实现键盘记录器、窗口管理工具等。</li>\n<li>回调函数适用于需要异步处理或事件驱动的情况，比如处理异步任务完成后的结果、处理定时器事件等。</li>\n</ul>\n<p>综上所述，钩子技术和回调函数虽然都与事件响应相关，但它们的作用、实现方式和应用场景有着明显的区别。<strong>钩子技术更专注于事件的拦截和修改，而回调函数更专注于事件的响应和异步处理。</strong></p>\n<p>从代码实现角度来看,Hook主要分成两种,Inline Hook 和 非 Inline Hook</p>\n<p>Inline Hook指的是: </p>\n<p><img src=\"https://s2.loli.net/2024/06/22/8isNvxnrQpDVHFE.png\" alt=\"image-20240416213218744\"></p>\n<p>在call的调用的函数内里添加 jmp 想执行代码地址</p>\n<p>非Inline Hook指的是:</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/KBonGr7HZgWVIC4.png\" alt=\"image-20240416213515874\"></p>\n<p>事实上就是改变了Call操作的目标地址,实际上就是IAT Hook</p>\n<h3 id=\"C-虚表的Hook\"><a href=\"#C-虚表的Hook\" class=\"headerlink\" title=\"C++虚表的Hook\"></a>C++虚表的Hook</h3><p>一个类的内存布局:</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/8aATK9XVMOtGpPn.png\" alt=\"image-20240416214808838\"></p>\n<p>通过对象的地址来获得虚表的首地址,从而获得所有虚函数的地址</p>\n<p>C++调用fish类的虚函数代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fish Myfish;</span><br><span class=\"line\">Myfish.<span class=\"built_in\">sleep</span>();</span><br></pre></td></tr></table></figure>\n\n<p>汇编调用fish类的虚函数代码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov eax,ecx    //eca是MyFish对象的地址</span><br><span class=\"line\">mov eax,[eax]  //获取MyFish对象的虚表地址</span><br><span class=\"line\">call [eax+0x04]//调用sleep()函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Detours-Hook\"><a href=\"#Detours-Hook\" class=\"headerlink\" title=\"Detours Hook\"></a>Detours Hook</h3><p>框架学习</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   \t<span class=\"comment\">//1.保存detour的事务</span></span><br><span class=\"line\"><span class=\"built_in\">DetourRestoreAfterWith</span>();</span><br><span class=\"line\"><span class=\"comment\">//2.开始处理detour的事务</span></span><br><span class=\"line\"><span class=\"built_in\">DetourTransactionBegin</span>();</span><br><span class=\"line\"><span class=\"comment\">//3.更新线程信息-执行事务的线程</span></span><br><span class=\"line\"><span class=\"built_in\">DetourUpdateThread</span>(<span class=\"built_in\">GetCurrentThread</span>());</span><br><span class=\"line\"><span class=\"comment\">//4.设置需要拦截的代理函数</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数二级函数指针-原函数地址</span></span><br><span class=\"line\"><span class=\"comment\">//第二个参数函数地址-代理函数的地址</span></span><br><span class=\"line\"><span class=\"built_in\">DetourAttach</span>((PVOID*)&amp;RealMessageBox, MyMessageBox);<span class=\"comment\">//msg</span></span><br><span class=\"line\"><span class=\"comment\">//5.提交事务</span></span><br><span class=\"line\"><span class=\"built_in\">DetourTransactionCommit</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Hook MessageBox函数使得弹窗显示永远是 “你已经被Hook了！”</p>\n<p>mfc程序</p>\n<p>mfc.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&quot;mfc.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Myapp app;<span class=\"comment\">//全局应用程序对象</span></span><br><span class=\"line\"><span class=\"comment\">//MyFrame* m_pMainwnd = new MyFrame;</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">Myapp::InitInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyFrame* frame = <span class=\"keyword\">new</span> MyFrame;</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOWNORMAL);</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//保存程序指针,否则窗口一闪而过,</span></span><br><span class=\"line\">\tm_pMainWnd = frame;<span class=\"comment\">//m_pMainWnd线程类的一个成员</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(MyFrame, CFrameWnd)</span><br><span class=\"line\">\t<span class=\"built_in\">ON_WM_LBUTTONDOWN</span>()</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">MyFrame::<span class=\"built_in\">MyFrame</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Create</span>(<span class=\"literal\">NULL</span>, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;Crackk&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">MyFrame::OnLButtonDown</span><span class=\"params\">(UINT, CPoint point)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取Dll1.dll文件路径</span></span><br><span class=\"line\">    WCHAR WorkPath[MAX_PATH];                        <span class=\"comment\">//用于存放获取路径的信息    </span></span><br><span class=\"line\">\t<span class=\"built_in\">GetModuleFileName</span>(<span class=\"literal\">NULL</span>, WorkPath, MAX_PATH);</span><br><span class=\"line\">\tCString DllPath = WorkPath;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pos = DllPath.<span class=\"built_in\">ReverseFind</span>(<span class=\"string\">&#x27;\\\\&#x27;</span>);               </span><br><span class=\"line\">\tDllPath = DllPath.<span class=\"built_in\">Left</span>(pos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tDllPath += _T(<span class=\"string\">&quot;Dll1.dll&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//一般情况利用辅助程序实现dll注入,这里为了便捷直接loadlibrary</span></span><br><span class=\"line\">\tHMODULE hmodule = <span class=\"built_in\">LoadLibrary</span>(DllPath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hmodule == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">MessageBox</span>(<span class=\"literal\">NULL</span>, (LPCTSTR)<span class=\"string\">&quot;加载dll失败&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">MessageBox</span>(<span class=\"literal\">NULL</span>, (LPCTSTR)<span class=\"string\">&quot;弹窗&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dll程序</p>\n<p>solve.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL APIENTRY <span class=\"title\">DllMain</span><span class=\"params\">(HMODULE hModule,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DWORD  ul_reason_for_call,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    LPVOID lpReserved</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Start_Hook</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Exit_Hook</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Dll1main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(WINAPI* RealMessageBox)(HWND, LPCTSTR, LPCTSTR, UINT) = MessageBox;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> WINAPI <span class=\"title\">MyMessageBox</span><span class=\"params\">(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">RealMessageBox</span>(hWnd, <span class=\"string\">L&quot;你已经被Hook了！&quot;</span>, <span class=\"string\">L&quot;Hooked&quot;</span>, uType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Start_Hook</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourRestoreAfterWith</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourTransactionBegin</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourUpdateThread</span>(<span class=\"built_in\">GetCurrentThread</span>());</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourAttach</span>((PVOID*)&amp;RealMessageBox, MyMessageBox);<span class=\"comment\">//msg</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourTransactionCommit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Exit_Hook</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.开始处理detour的事务</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourTransactionBegin</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//2.更新线程信息-执行事务的线程</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourUpdateThread</span>(<span class=\"built_in\">GetCurrentThread</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//3.撤销hook </span></span><br><span class=\"line\">\t<span class=\"comment\">//第一个参数二级函数指针-原函数地址</span></span><br><span class=\"line\">\t<span class=\"comment\">//第二个参数函数地址-代理函数的地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourDetach</span>((PVOID*)&amp;RealMessageBox, MyMessageBox);</span><br><span class=\"line\">\t<span class=\"comment\">//4.提交事务</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourTransactionCommit</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/06/22/VWTSJEYMnOjZIr4.png\" alt=\"image-20240416230935344\"></p>\n<h3 id=\"Windows的S-E-H\"><a href=\"#Windows的S-E-H\" class=\"headerlink\" title=\"Windows的S.E.H\"></a>Windows的S.E.H</h3><p>S.E.H全称是Struct Exception Handler即结构化异常处理机制</p>\n<p>S.E.H是操作系统提供给线程来感知和处理异常的一种回调机制,S.E.H在线程栈上以<strong>单链表</strong>的形式存在</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/HUTfFSkE8Pwtm9R.png\" alt=\"image-20240418155025834\"></p>\n<p>在win32中由于FS寄存器总是指向当前的TIB(线程信息块),因此在FS:[0]处能找到最近的一个EXCEPTION_REGISTERATION结构</p>\n<p>当我们通过try&#x2F;catch或__try&#x2F;except等操作来注册S.E.H的时候,FS:[0]会指向新的S.E.H,且新的S.E.H的Prev字段会指向之前FS:[0]指向的S.E.H,整个操作类似于单链表的表头插入操作</p>\n<h3 id=\"Windows的V-E-H\"><a href=\"#Windows的V-E-H\" class=\"headerlink\" title=\"Windows的V.E.H\"></a>Windows的V.E.H</h3><p>S.E.H是基于线程的异常处理,V.E.H是基于进程的异常处理</p>\n<p>V.E.H处理异常的优先级低于调试器,高于S.E.H,即KiUserExceptionDispatcher()函数首先检查进程是否处于被调试状态,然后检查V.E.H链表,最后才是检查S.E.H链表</p>\n<p>Windows提供了注册V.E.H的回调函数的API</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PVOID AddVectoredExceptionHandler<span class=\"comment\">//注册回调函数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tULONG FirstHandler,<span class=\"comment\">//如果大于0则从头部插入,否则从尾部插入</span></span><br><span class=\"line\">\tPVECTORED_EXCEPTION_HANDLE VectoredHandler<span class=\"comment\">//异常处理函数地址</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过该函数进行虚假注册,通过函数返回值后去链表的头指针或者尾指针,从而遍历整个V.E.H链表</p>\n<h3 id=\"硬件断点\"><a href=\"#硬件断点\" class=\"headerlink\" title=\"硬件断点\"></a>硬件断点</h3><h4 id=\"调试器寄存器\"><a href=\"#调试器寄存器\" class=\"headerlink\" title=\"调试器寄存器\"></a>调试器寄存器</h4><p>IA-32处理器定义了8个调试寄存器,DR0-DR7其中<strong>DR0-DR3用来指定断点的内存地址或IO地址</strong>;DR4和DR5是保留的,DR6的作用是当调试事件发生时向调试器报告事件的详细信息,以供调试器啊判断发生的是何种事件;DR7用来进一步定义中断条件</p>\n<h4 id=\"硬件断点的优势\"><a href=\"#硬件断点的优势\" class=\"headerlink\" title=\"硬件断点的优势\"></a>硬件断点的优势</h4><p>硬件断点HOOK是结合DR0-DR3调试寄存器和Windows S.E.H 或V.E.H机制所引入的一种HOOK机制.如果HOOK采用的方式是修改代码,那么很容易被检测到,然而硬件断点HOOK并不涉及修改代码,所以他的优点主要体现在隐蔽性上</p>\n<h4 id=\"线程上下文环境以及Windows下线程与CPU之间的关系\"><a href=\"#线程上下文环境以及Windows下线程与CPU之间的关系\" class=\"headerlink\" title=\"线程上下文环境以及Windows下线程与CPU之间的关系\"></a>线程上下文环境以及Windows下线程与CPU之间的关系</h4><p>线程执行环境CONTEXT的结构体:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> struct_CONTEXT</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDwORD  contextFlags;</span><br><span class=\"line\">\tDWORD\tDr0;</span><br><span class=\"line\">    DWORD\tDr1;</span><br><span class=\"line\">    DWORD\tDr2;</span><br><span class=\"line\">    DWORD\tDr3;</span><br><span class=\"line\">    DWORD\tDr6;</span><br><span class=\"line\">    DWORD\tDr7;</span><br><span class=\"line\">\tFLOATING_SAVE_AREA FloatSave;</span><br><span class=\"line\">\tDWORD\tsegGs;</span><br><span class=\"line\">\tDWORD\tsegFs;</span><br><span class=\"line\">\tDWORD\tsegEs;</span><br><span class=\"line\">\tDWORD\tSegDs;</span><br><span class=\"line\">\tDWORD\tEdi;</span><br><span class=\"line\">\tDWORD\tEsi;</span><br><span class=\"line\">\tDWORD\tEbx;</span><br><span class=\"line\">\tDWORD\tEdx;</span><br><span class=\"line\">\tDWORD\tEcx;</span><br><span class=\"line\">\tDWORD\tEax;</span><br><span class=\"line\">\tDWORD\tEbp;</span><br><span class=\"line\">\tDWORD\tEip;</span><br><span class=\"line\">\tDWORD\tsegCs;</span><br><span class=\"line\">\tDWORD\tEFlags;</span><br><span class=\"line\">\tDWORD\tEsp;</span><br><span class=\"line\">\tDWORD\tsegSs;</span><br><span class=\"line\">&#125; CONTEXT;</span><br></pre></td></tr></table></figure>\n\n<p>Windows是基于线程调用的多任务抢占式操作系统,如果CPU目前运行的线程1,这时优先级更高的线程2将抢占执行,那么操作系统会把线程1的执行环境取出放到线程1的CONTEXT结构中,接着把线程2的CONTEXT信息放入CPU中,继续运行线程2</p>\n<h3 id=\"S-E-H-Hook\"><a href=\"#S-E-H-Hook\" class=\"headerlink\" title=\"S.E.H Hook\"></a>S.E.H Hook</h3><p>未成功代码,显示有没经处理的异常</p>\n<p>应该是MyExceptionFilter函数没起作用</p>\n<p>dll中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SEHHook.h&quot;</span></span></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SEH.cpp </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SEHHook.h&quot;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\">DWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(<span class=\"string\">&quot;USER32.dll&quot;</span>),<span class=\"string\">&quot;MessageBoxW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">LONG WINAPI <span class=\"title function_\">MyExceptionFilter</span><span class=\"params\">(PEXCEPTION_POINTERS ExceptionInfo)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == (LPVOID)HookAddr)</span><br><span class=\"line\">\t&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取当前线程上下文</span></span><br><span class=\"line\">\t\tPCONTEXT pcontext = ExceptionInfo-&gt;ContextRecord;</span><br><span class=\"line\">\t\tMessageBoxW(<span class=\"literal\">NULL</span>,TEXT(<span class=\"string\">&quot;你被hook了诶&quot;</span>), TEXT(<span class=\"string\">&quot;gogogo&quot;</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tpcontext-&gt;Eip += <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetHardBreakPoint</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历线程 通过openthread获取到线程环境后设置硬件断点</span></span><br><span class=\"line\">\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hTool32 != INVALID_HANDLE_VALUE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTHREADENTRY32 threadEntry32;<span class=\"comment\">//线程环境结构体</span></span><br><span class=\"line\">\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\tHANDLE hMainThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tFILETIME exit_time, kernel_time, user_time;</span><br><span class=\"line\">\t\tFILETIME creation_time;</span><br><span class=\"line\">\t\tFILETIME prev_creation_time;</span><br><span class=\"line\">\t\tprev_creation_time.dwLowDateTime = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">\t\tprev_creation_time.dwHighDateTime = INT_MAX;</span><br><span class=\"line\">\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + <span class=\"keyword\">sizeof</span>(threadEntry32.th32OwnerProcessID);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread32First(hTool32, &amp;threadEntry32))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (threadEntry32.dwSize &gt;= dwThreadEntryOffset &amp;&amp;threadEntry32.th32OwnerProcessID == GetCurrentProcessId())</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, <span class=\"literal\">false</span>, threadEntry32.th32ThreadID);</span><br><span class=\"line\">\t\t\t\t\tGetThreadTimes(hHookThread, &amp;creation_time, &amp;exit_time, &amp;kernel_time, &amp;user_time);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (CompareFileTime(&amp;creation_time, &amp;prev_creation_time) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(&amp;prev_creation_time, &amp;creation_time, <span class=\"keyword\">sizeof</span>(FILETIME));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (hMainThread != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t\t\t\t\thMainThread = hHookThread;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tCloseHandle(hHookThread);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">while</span> (Thread32Next(hTool32,&amp;threadEntry32));</span><br><span class=\"line\">\t\t\tSetUnhandledExceptionFilter(MyExceptionFilter);</span><br><span class=\"line\">\t\t\tCONTEXT thread_context = &#123; CONTEXT_DEBUG_REGISTERS &#125;;</span><br><span class=\"line\">\t\t\tthread_context.Dr0 = (DWORD)HookAddr;</span><br><span class=\"line\">\t\t\tthread_context.Dr7 = <span class=\"number\">0x1</span>;<span class=\"comment\">//设置断点类型(访问断点)</span></span><br><span class=\"line\">\t\t\tSetThreadContext(hMainThread, &amp;thread_context);</span><br><span class=\"line\">\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCloseHandle(hTool32);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"V-E-H-Hook\"><a href=\"#V-E-H-Hook\" class=\"headerlink\" title=\"V.E.H Hook\"></a>V.E.H Hook</h3><p>试验成功</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;VEHHook.h&quot;</span></span></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        AddVectoredExceptionHandler(<span class=\"number\">1</span>, (PVECTORED_EXCEPTION_HANDLER)MyExceptionFilter);</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//VEHHOOK.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;VEHHook.h&quot;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\">DWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(<span class=\"string\">&quot;USER32.dll&quot;</span>),<span class=\"string\">&quot;MessageBoxW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">LONG WINAPI <span class=\"title function_\">MyExceptionFilter</span><span class=\"params\">(PEXCEPTION_POINTERS ExceptionInfo)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == (LPVOID)HookAddr)</span><br><span class=\"line\">\t&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取当前线程上下文</span></span><br><span class=\"line\">\t\tPCONTEXT pcontext = ExceptionInfo-&gt;ContextRecord;</span><br><span class=\"line\">\t\tMessageBoxA(<span class=\"literal\">NULL</span>,<span class=\"string\">&quot;HOOK&quot;</span>, <span class=\"string\">&quot;HOOK&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//需要加一段调整eip的代码使得跳出死循环</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">SetHardBreakPoint</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历线程 通过openthread获取到线程环境后设置硬件断点</span></span><br><span class=\"line\">\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hTool32 != INVALID_HANDLE_VALUE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTHREADENTRY32 threadEntry32;<span class=\"comment\">//线程环境结构体</span></span><br><span class=\"line\">\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\tHANDLE hMainThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tFILETIME exit_time, kernel_time, user_time;</span><br><span class=\"line\">\t\tFILETIME creation_time;</span><br><span class=\"line\">\t\tFILETIME prev_creation_time;</span><br><span class=\"line\">\t\tprev_creation_time.dwLowDateTime = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">\t\tprev_creation_time.dwHighDateTime = INT_MAX;</span><br><span class=\"line\">\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + <span class=\"keyword\">sizeof</span>(threadEntry32.th32OwnerProcessID);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread32First(hTool32, &amp;threadEntry32))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (threadEntry32.dwSize &gt;= dwThreadEntryOffset &amp;&amp;threadEntry32.th32OwnerProcessID == GetCurrentProcessId())</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, <span class=\"literal\">false</span>, threadEntry32.th32ThreadID);</span><br><span class=\"line\">\t\t\t\t\tGetThreadTimes(hHookThread, &amp;creation_time, &amp;exit_time, &amp;kernel_time, &amp;user_time);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (CompareFileTime(&amp;creation_time, &amp;prev_creation_time) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(&amp;prev_creation_time, &amp;creation_time, <span class=\"keyword\">sizeof</span>(FILETIME));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (hMainThread != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t\t\t\t\thMainThread = hHookThread;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tCloseHandle(hHookThread);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">while</span> (Thread32Next(hTool32,&amp;threadEntry32));</span><br><span class=\"line\">\t\t\tCONTEXT thread_context = &#123; CONTEXT_DEBUG_REGISTERS &#125;;</span><br><span class=\"line\">\t\t\tthread_context.Dr0 = (DWORD)HookAddr;</span><br><span class=\"line\">\t\t\tthread_context.Dr7 = <span class=\"number\">0x1</span>;<span class=\"comment\">//设置断点类型(访问断点)</span></span><br><span class=\"line\">\t\t\tSetThreadContext(hMainThread, &amp;thread_context);</span><br><span class=\"line\">\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCloseHandle(hTool32);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/06/22/z1xhTRjQWKd3IDk.png\" alt=\"image-20240509220917719\"></p>\n","site":{"data":{}},"excerpt":"<p>逆向的开始！从这开始记录我在做逆向题目时遇到的问题以及总结一些逆向的知识点","more":"</p>\n<h2 id=\"BFS脚本：\"><a href=\"#BFS脚本：\" class=\"headerlink\" title=\"BFS脚本：\"></a>BFS脚本：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">char</span> map[<span class=\"number\">15</span>][<span class=\"number\">13</span>]=&#123;</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span>  <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">int</span> y;</span><br><span class=\"line\">    string path;</span><br><span class=\"line\">    <span class=\"type\">char</span> mp[<span class=\"number\">15</span>][<span class=\"number\">13</span>]=&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//标记路线</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> w1[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">char</span> w2[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">char</span> pa[<span class=\"number\">5</span>] = <span class=\"string\">&quot;sdwa&quot;</span>;</span><br><span class=\"line\">queue&lt;Point&gt;q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   Point first = &#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">&quot;&quot;</span>&#125;;</span><br><span class=\"line\">   first.mp[first.y][first.x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">   q.<span class=\"built_in\">push</span>(first);</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       Point now = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">       q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        Point temp = now;</span><br><span class=\"line\">        temp.x+=w1[i];</span><br><span class=\"line\">        temp.y+=w2[i];</span><br><span class=\"line\">        temp.path+=pa[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map[temp.y][temp.x]==<span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;temp.path&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(map[temp.y][temp.x]==<span class=\"number\">0</span>&amp;&amp;temp.x&gt;=<span class=\"number\">0</span>&amp;&amp;temp.x&lt;<span class=\"number\">13</span>&amp;&amp;temp.y&gt;=<span class=\"number\">0</span>&amp;&amp;temp.y&lt;<span class=\"number\">15</span>&amp;&amp;temp.mp[temp.y][temp.x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">         &#123;     </span><br><span class=\"line\">            temp.mp[temp.y][temp.x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(temp);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<h2 id=\"Frida环境搭建与测试：\"><a href=\"#Frida环境搭建与测试：\" class=\"headerlink\" title=\"Frida环境搭建与测试：\"></a>Frida环境搭建与测试：</h2><p>进入开发者模式，与手机进行连接<code>adb connect 127.0.0.1:62001</code>（PC端命令行）</p>\n<p>查看是否连接成功 <code>adb devices</code></p>\n<p>frida-server处理器类型与Android处理器对齐</p>\n<p>查询虚拟机处理器架构: <code>adb shell getprop ro.product.cpu.abi</code> </p>\n<p>进入frida移动端目录 <code>adb shell</code></p>\n<p> <code>cd /data/local/tmp</code></p>\n<p>运行 <code>./frida-server</code></p>\n<p>执行 <code>frida -U -f MyApplication</code> 进行连接\\</p>\n<p>显示找不到MyApplication,查询app名称的id <code>frida-ps -U -a</code></p>\n<p>结果:</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/URIjbw4sLCHTS8Q.png\" alt=\"image-20231022105344293\"></p>\n<p>再次执行 <code>frida -U -f com.example.myapplication</code></p>\n<p>连接成功,脚本测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">on_message</span>(<span class=\"params\">message, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;send&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;*****[frida hook]***** : &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(message[<span class=\"string\">&#x27;payload&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;*****[frida hook]***** : &quot;</span> + <span class=\"built_in\">str</span>(message))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#js脚本</span></span><br><span class=\"line\">jscode = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Java.perform(function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">    var MainActivity = Java.use(&#x27;com.example.myapplication.MainActivity&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">    MainActivity.print.implementation  = function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        send(&quot;Hook Start&quot;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">process = frida.get_usb_device().attach(<span class=\"string\">&#x27;MyApplication&#x27;</span>)<span class=\"comment\">#应用程序名称,和包名不一样</span></span><br><span class=\"line\">script = process.create_script(jscode)</span><br><span class=\"line\">script.on(<span class=\"string\">&#x27;message&#x27;</span>, on_message)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[*] Running CTF&#x27;</span>)</span><br><span class=\"line\">script.load()</span><br><span class=\"line\">sys.stdin.read()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"RC4解密脚本：\"><a href=\"#RC4解密脚本：\" class=\"headerlink\" title=\"RC4解密脚本：\"></a>RC4解密脚本：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rc4_setup</span>(<span class=\"params\">key</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(key, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        key = key.encode()</span><br><span class=\"line\"></span><br><span class=\"line\">    S = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">256</span>))</span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">        j = (j + S[i] + key[i % <span class=\"built_in\">len</span>(key)]) % <span class=\"number\">256</span></span><br><span class=\"line\">        S[i], S[j] = S[j], S[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> S</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rc4_crypt</span>(<span class=\"params\">data, key</span>):<span class=\"comment\">#文本解密</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(data, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">        data = data.encode()</span><br><span class=\"line\"></span><br><span class=\"line\">    S = rc4_setup(key)</span><br><span class=\"line\">    i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> byte <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        i = (i + <span class=\"number\">1</span>) % <span class=\"number\">256</span></span><br><span class=\"line\">        j = (j + S[i]) % <span class=\"number\">256</span></span><br><span class=\"line\">        S[i], S[j] = S[j], S[i]</span><br><span class=\"line\">        res.append(byte ^ S[(S[i] + S[j]) % <span class=\"number\">256</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rc4_decrypt</span>(<span class=\"params\">key_hex, data_hex</span>):<span class=\"comment\">#十六进制解密</span></span><br><span class=\"line\">    key = <span class=\"built_in\">bytes</span>.fromhex(key_hex)</span><br><span class=\"line\">    data = <span class=\"built_in\">bytes</span>.fromhex(data_hex)</span><br><span class=\"line\">    res = rc4_crypt(data, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"built_in\">hex</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    enc = <span class=\"string\">b&#x27;FUZAza8WP5FERi17FvdHowYFSNs6cOk1h0tQLSqk&#x27;</span></span><br><span class=\"line\">    key = <span class=\"string\">b&#x27;BirkenwaldCTF&#123;This_is_f4ke_f1ag&#125;&#x27;</span></span><br><span class=\"line\">    enc = base64.b64decode(enc)</span><br><span class=\"line\">    enc = rc4_decrypt(key.<span class=\"built_in\">hex</span>(),enc.<span class=\"built_in\">hex</span>())</span><br><span class=\"line\">    enc = long_to_bytes(<span class=\"built_in\">int</span>(enc,<span class=\"number\">16</span>)).decode()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(enc)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>&amp;0xff在python中可以表示取无符号整数，0xff表示八个比特1，也就是数byte数进行无符号运算,&amp;0x7f表示取有符号字节类型</p>\n</blockquote>\n<h2 id=\"RC4的c语言加密脚本：\"><a href=\"#RC4的c语言加密脚本：\" class=\"headerlink\" title=\"RC4的c语言加密脚本：\"></a>RC4的c语言加密脚本：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> data[<span class=\"number\">26</span>] = &#123; <span class=\"number\">0x4e</span>,<span class=\"number\">0xd5</span>,<span class=\"number\">0xc</span>,<span class=\"number\">0xed</span>,<span class=\"number\">0x4d</span>,<span class=\"number\">0xbf</span>,<span class=\"number\">0x9e</span>,<span class=\"number\">0xe8</span>,<span class=\"number\">0x43</span>,<span class=\"number\">0x50</span>,<span class=\"number\">0x8</span>,<span class=\"number\">0xd0</span>,<span class=\"number\">0xa0</span>,<span class=\"number\">0xe2</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0x62</span>,<span class=\"number\">0xbe</span>,<span class=\"number\">0xab</span>,<span class=\"number\">0x0</span>,<span class=\"number\">0x22</span>,<span class=\"number\">0xb3</span>,<span class=\"number\">0xd8</span>,<span class=\"number\">0x68</span>,<span class=\"number\">0x3f</span>,<span class=\"number\">0x80</span>,<span class=\"number\">0xa4</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 S 表，根据密钥打乱 S 表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        S[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        j = (j + S[i] + key[i % keylen]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[i];</span><br><span class=\"line\">        S[i] = S[j];</span><br><span class=\"line\">        S[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个字节的密钥流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> <span class=\"title\">generate</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">int</span>* i, <span class=\"type\">int</span>* j)</span> </span>&#123;</span><br><span class=\"line\">    *i = (*i + <span class=\"number\">1</span>) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    *j = (*j + S[*i]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[*i];</span><br><span class=\"line\">    S[*i] = S[*j];</span><br><span class=\"line\">    S[*j] = temp;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 S[S[i] + S[j]]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> S[(S[*i] + S[*j]) % <span class=\"number\">256</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对数据进行加密或解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, <span class=\"type\">int</span> datalen, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> S[<span class=\"number\">256</span>]; <span class=\"comment\">// 256 字节的数据表</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; <span class=\"comment\">// 两个索引变量</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 S 表</span></span><br><span class=\"line\">    <span class=\"built_in\">init</span>(S, key, keylen);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; datalen; k++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据和密钥流进行异或运算</span></span><br><span class=\"line\">        data[k] ^= <span class=\"built_in\">generate</span>(S, &amp;i, &amp;j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 假设这是要加密或解密的数据</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> input[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Do you know flag?\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please tell me:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">    <span class=\"comment\">//unsigned char data[] = &quot;CynopsCTF&#123;RC4_1s_4w3s0m3!&#125;&quot;;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> datalen = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 假设这是加密或解密的密钥</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;CynopsCTF&#123;This_is_f4ke_f1ag&#125;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span>*)key);</span><br><span class=\"line\">    <span class=\"comment\">// 对数据进行加密</span></span><br><span class=\"line\">    <span class=\"built_in\">encrypt</span>(input, datalen, key, keylen);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (input[i] != data[i])</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> label;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;You&#x27;re so smart. This&#x27;s what I want!!!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">label:</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Oh,You don&#x27;t seem to know what I want\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please leave here\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AES加解密C脚本\"><a href=\"#AES加解密C脚本\" class=\"headerlink\" title=\"AES加解密C脚本\"></a>AES加解密C脚本</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;aes.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * S盒</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> S[<span class=\"number\">16</span>][<span class=\"number\">16</span>] = &#123; <span class=\"number\">0x63</span>, <span class=\"number\">0x7c</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x7b</span>, <span class=\"number\">0xf2</span>, <span class=\"number\">0x6b</span>, <span class=\"number\">0x6f</span>, <span class=\"number\">0xc5</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x67</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0xfe</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xab</span>, <span class=\"number\">0x76</span>,</span><br><span class=\"line\">    <span class=\"number\">0xca</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x7d</span>, <span class=\"number\">0xfa</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x47</span>, <span class=\"number\">0xf0</span>, <span class=\"number\">0xad</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0xaf</span>, <span class=\"number\">0x9c</span>, <span class=\"number\">0xa4</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xc0</span>,</span><br><span class=\"line\">    <span class=\"number\">0xb7</span>, <span class=\"number\">0xfd</span>, <span class=\"number\">0x93</span>, <span class=\"number\">0x26</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0x3f</span>, <span class=\"number\">0xf7</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xa5</span>, <span class=\"number\">0xe5</span>, <span class=\"number\">0xf1</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0xd8</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x15</span>,</span><br><span class=\"line\">    <span class=\"number\">0x04</span>, <span class=\"number\">0xc7</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0xc3</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x96</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0x9a</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xeb</span>, <span class=\"number\">0x27</span>, <span class=\"number\">0xb2</span>, <span class=\"number\">0x75</span>,</span><br><span class=\"line\">    <span class=\"number\">0x09</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x1a</span>, <span class=\"number\">0x1b</span>, <span class=\"number\">0x6e</span>, <span class=\"number\">0x5a</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x3b</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0xb3</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0xe3</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">    <span class=\"number\">0x53</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xed</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0xfc</span>, <span class=\"number\">0xb1</span>, <span class=\"number\">0x5b</span>, <span class=\"number\">0x6a</span>, <span class=\"number\">0xcb</span>, <span class=\"number\">0xbe</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x4a</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0xcf</span>,</span><br><span class=\"line\">    <span class=\"number\">0xd0</span>, <span class=\"number\">0xef</span>, <span class=\"number\">0xaa</span>, <span class=\"number\">0xfb</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xf9</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0x7f</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x9f</span>, <span class=\"number\">0xa8</span>,</span><br><span class=\"line\">    <span class=\"number\">0x51</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8f</span>, <span class=\"number\">0x92</span>, <span class=\"number\">0x9d</span>, <span class=\"number\">0x38</span>, <span class=\"number\">0xf5</span>, <span class=\"number\">0xbc</span>, <span class=\"number\">0xb6</span>, <span class=\"number\">0xda</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xf3</span>, <span class=\"number\">0xd2</span>,</span><br><span class=\"line\">    <span class=\"number\">0xcd</span>, <span class=\"number\">0x0c</span>, <span class=\"number\">0x13</span>, <span class=\"number\">0xec</span>, <span class=\"number\">0x5f</span>, <span class=\"number\">0x97</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x17</span>, <span class=\"number\">0xc4</span>, <span class=\"number\">0xa7</span>, <span class=\"number\">0x7e</span>, <span class=\"number\">0x3d</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x5d</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">    <span class=\"number\">0x60</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0xdc</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0xee</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0xde</span>, <span class=\"number\">0x5e</span>, <span class=\"number\">0x0b</span>, <span class=\"number\">0xdb</span>,</span><br><span class=\"line\">    <span class=\"number\">0xe0</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x3a</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x5c</span>, <span class=\"number\">0xc2</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0xac</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x91</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0xe4</span>, <span class=\"number\">0x79</span>,</span><br><span class=\"line\">    <span class=\"number\">0xe7</span>, <span class=\"number\">0xc8</span>, <span class=\"number\">0x37</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0x4e</span>, <span class=\"number\">0xa9</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0xf4</span>, <span class=\"number\">0xea</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x7a</span>, <span class=\"number\">0xae</span>, <span class=\"number\">0x08</span>,</span><br><span class=\"line\">    <span class=\"number\">0xba</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x2e</span>, <span class=\"number\">0x1c</span>, <span class=\"number\">0xa6</span>, <span class=\"number\">0xb4</span>, <span class=\"number\">0xc6</span>, <span class=\"number\">0xe8</span>, <span class=\"number\">0xdd</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x1f</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0xbd</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0x8a</span>,</span><br><span class=\"line\">    <span class=\"number\">0x70</span>, <span class=\"number\">0x3e</span>, <span class=\"number\">0xb5</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xf6</span>, <span class=\"number\">0x0e</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0xc1</span>, <span class=\"number\">0x1d</span>, <span class=\"number\">0x9e</span>,</span><br><span class=\"line\">    <span class=\"number\">0xe1</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x11</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x94</span>, <span class=\"number\">0x9b</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0xce</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xdf</span>,</span><br><span class=\"line\">    <span class=\"number\">0x8c</span>, <span class=\"number\">0xa1</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0xbf</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x99</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0x0f</span>, <span class=\"number\">0xb0</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0xbb</span>, <span class=\"number\">0x16</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆S盒</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> S2[<span class=\"number\">16</span>][<span class=\"number\">16</span>] = &#123; <span class=\"number\">0x52</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x6a</span>, <span class=\"number\">0xd5</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x36</span>, <span class=\"number\">0xa5</span>, <span class=\"number\">0x38</span>, <span class=\"number\">0xbf</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0xa3</span>, <span class=\"number\">0x9e</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0xf3</span>, <span class=\"number\">0xd7</span>, <span class=\"number\">0xfb</span>,</span><br><span class=\"line\">    <span class=\"number\">0x7c</span>, <span class=\"number\">0xe3</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x82</span>, <span class=\"number\">0x9b</span>, <span class=\"number\">0x2f</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0x87</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x8e</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0xc4</span>, <span class=\"number\">0xde</span>, <span class=\"number\">0xe9</span>, <span class=\"number\">0xcb</span>,</span><br><span class=\"line\">    <span class=\"number\">0x54</span>, <span class=\"number\">0x7b</span>, <span class=\"number\">0x94</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0xa6</span>, <span class=\"number\">0xc2</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0x3d</span>, <span class=\"number\">0xee</span>, <span class=\"number\">0x4c</span>, <span class=\"number\">0x95</span>, <span class=\"number\">0x0b</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0xfa</span>, <span class=\"number\">0xc3</span>, <span class=\"number\">0x4e</span>,</span><br><span class=\"line\">    <span class=\"number\">0x08</span>, <span class=\"number\">0x2e</span>, <span class=\"number\">0xa1</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0xd9</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0xb2</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x5b</span>, <span class=\"number\">0xa2</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x8b</span>, <span class=\"number\">0xd1</span>, <span class=\"number\">0x25</span>,</span><br><span class=\"line\">    <span class=\"number\">0x72</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0xf6</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x98</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xd4</span>, <span class=\"number\">0xa4</span>, <span class=\"number\">0x5c</span>, <span class=\"number\">0xcc</span>, <span class=\"number\">0x5d</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0xb6</span>, <span class=\"number\">0x92</span>,</span><br><span class=\"line\">    <span class=\"number\">0x6c</span>, <span class=\"number\">0x70</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0xfd</span>, <span class=\"number\">0xed</span>, <span class=\"number\">0xb9</span>, <span class=\"number\">0xda</span>, <span class=\"number\">0x5e</span>, <span class=\"number\">0x15</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0xa7</span>, <span class=\"number\">0x8d</span>, <span class=\"number\">0x9d</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">    <span class=\"number\">0x90</span>, <span class=\"number\">0xd8</span>, <span class=\"number\">0xab</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x8c</span>, <span class=\"number\">0xbc</span>, <span class=\"number\">0xd3</span>, <span class=\"number\">0x0a</span>, <span class=\"number\">0xf7</span>, <span class=\"number\">0xe4</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0xb8</span>, <span class=\"number\">0xb3</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x06</span>,</span><br><span class=\"line\">    <span class=\"number\">0xd0</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">0x1e</span>, <span class=\"number\">0x8f</span>, <span class=\"number\">0xca</span>, <span class=\"number\">0x3f</span>, <span class=\"number\">0x0f</span>, <span class=\"number\">0x02</span>, <span class=\"number\">0xc1</span>, <span class=\"number\">0xaf</span>, <span class=\"number\">0xbd</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x13</span>, <span class=\"number\">0x8a</span>, <span class=\"number\">0x6b</span>,</span><br><span class=\"line\">    <span class=\"number\">0x3a</span>, <span class=\"number\">0x91</span>, <span class=\"number\">0x11</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x4f</span>, <span class=\"number\">0x67</span>, <span class=\"number\">0xdc</span>, <span class=\"number\">0xea</span>, <span class=\"number\">0x97</span>, <span class=\"number\">0xf2</span>, <span class=\"number\">0xcf</span>, <span class=\"number\">0xce</span>, <span class=\"number\">0xf0</span>, <span class=\"number\">0xb4</span>, <span class=\"number\">0xe6</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">    <span class=\"number\">0x96</span>, <span class=\"number\">0xac</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x22</span>, <span class=\"number\">0xe7</span>, <span class=\"number\">0xad</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xe2</span>, <span class=\"number\">0xf9</span>, <span class=\"number\">0x37</span>, <span class=\"number\">0xe8</span>, <span class=\"number\">0x1c</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xdf</span>, <span class=\"number\">0x6e</span>,</span><br><span class=\"line\">    <span class=\"number\">0x47</span>, <span class=\"number\">0xf1</span>, <span class=\"number\">0x1a</span>, <span class=\"number\">0x71</span>, <span class=\"number\">0x1d</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0xc5</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x6f</span>, <span class=\"number\">0xb7</span>, <span class=\"number\">0x62</span>, <span class=\"number\">0x0e</span>, <span class=\"number\">0xaa</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0xbe</span>, <span class=\"number\">0x1b</span>,</span><br><span class=\"line\">    <span class=\"number\">0xfc</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x3e</span>, <span class=\"number\">0x4b</span>, <span class=\"number\">0xc6</span>, <span class=\"number\">0xd2</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x9a</span>, <span class=\"number\">0xdb</span>, <span class=\"number\">0xc0</span>, <span class=\"number\">0xfe</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0x5a</span>, <span class=\"number\">0xf4</span>,</span><br><span class=\"line\">    <span class=\"number\">0x1f</span>, <span class=\"number\">0xdd</span>, <span class=\"number\">0xa8</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x07</span>, <span class=\"number\">0xc7</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0xb1</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x27</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xec</span>, <span class=\"number\">0x5f</span>,</span><br><span class=\"line\">    <span class=\"number\">0x60</span>, <span class=\"number\">0x51</span>, <span class=\"number\">0x7f</span>, <span class=\"number\">0xa9</span>, <span class=\"number\">0x19</span>, <span class=\"number\">0xb5</span>, <span class=\"number\">0x4a</span>, <span class=\"number\">0x0d</span>, <span class=\"number\">0x2d</span>, <span class=\"number\">0xe5</span>, <span class=\"number\">0x7a</span>, <span class=\"number\">0x9f</span>, <span class=\"number\">0x93</span>, <span class=\"number\">0xc9</span>, <span class=\"number\">0x9c</span>, <span class=\"number\">0xef</span>,</span><br><span class=\"line\">    <span class=\"number\">0xa0</span>, <span class=\"number\">0xe0</span>, <span class=\"number\">0x3b</span>, <span class=\"number\">0x4d</span>, <span class=\"number\">0xae</span>, <span class=\"number\">0x2a</span>, <span class=\"number\">0xf5</span>, <span class=\"number\">0xb0</span>, <span class=\"number\">0xc8</span>, <span class=\"number\">0xeb</span>, <span class=\"number\">0xbb</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x99</span>, <span class=\"number\">0x61</span>,</span><br><span class=\"line\">    <span class=\"number\">0x17</span>, <span class=\"number\">0x2b</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x7e</span>, <span class=\"number\">0xba</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0xd6</span>, <span class=\"number\">0x26</span>, <span class=\"number\">0xe1</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0x0c</span>, <span class=\"number\">0x7d</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取整形数据的低8位的左4个位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getLeft4Bit</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = num &amp; <span class=\"number\">0x000000f0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取整形数据的低8位的右4个位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getRight4Bit</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &amp; <span class=\"number\">0x0000000f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据索引，从S盒中获得元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getNumFromSBox</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> row = <span class=\"built_in\">getLeft4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"type\">int</span> col = <span class=\"built_in\">getRight4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S[row][col];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把一个字符转变成整型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getIntFromChar</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result = (<span class=\"type\">int</span>)c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把16个字符转变成4X4的数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 该矩阵中字节的排列顺序为从上到下，</span></span><br><span class=\"line\"><span class=\"comment\"> * 从左到右依次排列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">convertToIntArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span> pa[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            pa[j][i] = <span class=\"built_in\">getIntFromChar</span>(str[k]);</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打印4X4的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"type\">int</span> a[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a[%d][%d] = 0x%x &quot;</span>, i, j, a[i][j]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打印字符串的ASSCI，</span></span><br><span class=\"line\"><span class=\"comment\"> * 以十六进制显示。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">printASSCI</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%x &quot;</span>, <span class=\"built_in\">getIntFromChar</span>(str[i]));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把连续的4个字符合并成一个4字节的整型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getWordFromStr</span><span class=\"params\">(<span class=\"type\">char</span>* str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> one = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    one = one &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> two = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    two = two &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> three = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    three = three &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> four = <span class=\"built_in\">getIntFromChar</span>(str[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> one | two | three | four;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把一个4字节的数的第一、二、三、四个字节取出，</span></span><br><span class=\"line\"><span class=\"comment\"> * 入进一个4个元素的整型数组里面。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">splitIntToArray</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">int</span> array[<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> one = num &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    array[<span class=\"number\">0</span>] = one &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> two = num &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    array[<span class=\"number\">1</span>] = two &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> three = num &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    array[<span class=\"number\">2</span>] = three &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">    array[<span class=\"number\">3</span>] = num &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将数组中的元素循环左移step位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">leftLoop4int</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>], <span class=\"type\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        temp[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> index = step % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : step % <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[i] = temp[index];</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        index = index % <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把数组中的第一、二、三和四元素分别作为</span></span><br><span class=\"line\"><span class=\"comment\"> * 4字节整型的第一、二、三和四字节，合并成一个4字节整型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">mergeArrayToInt</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> one = array[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> two = array[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> three = array[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> four = array[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> one | two | three | four;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 常量轮值表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> Rcon[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0x01000000</span>, <span class=\"number\">0x02000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x04000000</span>, <span class=\"number\">0x08000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x10000000</span>, <span class=\"number\">0x20000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x40000000</span>, <span class=\"number\">0x80000000</span>,</span><br><span class=\"line\">    <span class=\"number\">0x1b000000</span>, <span class=\"number\">0x36000000</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 密钥扩展中的T函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">T</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"type\">int</span> round)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> numArray[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(num, numArray);</span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(numArray, <span class=\"number\">1</span>);<span class=\"comment\">//字循环</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//字节代换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        numArray[i] = <span class=\"built_in\">getNumFromSBox</span>(numArray[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> result = <span class=\"built_in\">mergeArrayToInt</span>(numArray);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result ^ Rcon[round];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//密钥对应的扩展数组</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> w[<span class=\"number\">44</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展密钥，结果是把w[44]中的每个元素初始化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">extendKey</span><span class=\"params\">(<span class=\"type\">char</span>* key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>  i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        w[i] = <span class=\"built_in\">getWordFromStr</span>(key + i * <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">4</span>, j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">44</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            w[i] = w[i - <span class=\"number\">4</span>] ^ <span class=\"built_in\">T</span>(w[i - <span class=\"number\">1</span>], j);</span><br><span class=\"line\">            j++;<span class=\"comment\">//下一轮</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            w[i] = w[i - <span class=\"number\">4</span>] ^ w[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 轮密钥加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">addRoundKey</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"type\">int</span> round)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> warray[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">splitIntToArray</span>(w[round * <span class=\"number\">4</span> + i], warray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            array[j][i] = array[j][i] ^ warray[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 字节代换</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">subBytes</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">getNumFromSBox</span>(array[i][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 行移位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">shiftRows</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rowTwo[<span class=\"number\">4</span>], rowThree[<span class=\"number\">4</span>], rowFour[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//复制状态矩阵的第2,3,4行</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        rowTwo[i] = array[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        rowThree[i] = array[<span class=\"number\">2</span>][i];</span><br><span class=\"line\">        rowFour[i] = array[<span class=\"number\">3</span>][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//循环左移相应的位数</span></span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(rowTwo, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(rowThree, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">leftLoop4int</span>(rowFour, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//把左移后的行复制回状态矩阵中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[<span class=\"number\">1</span>][i] = rowTwo[i];</span><br><span class=\"line\">        array[<span class=\"number\">2</span>][i] = rowThree[i];</span><br><span class=\"line\">        array[<span class=\"number\">3</span>][i] = rowFour[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 列混合要用到的矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> colM[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul2</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result = s &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a7 = result &amp; <span class=\"number\">0x00000100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a7 != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result = result &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">        result = result ^ <span class=\"number\">0x1b</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul3</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul2</span>(s) ^ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul4</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul2</span>(<span class=\"built_in\">GFMul2</span>(s));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul8</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul2</span>(<span class=\"built_in\">GFMul4</span>(s));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul9</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul8</span>(s) ^ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul11</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul9</span>(s) ^ <span class=\"built_in\">GFMul2</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul12</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul8</span>(s) ^ <span class=\"built_in\">GFMul4</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul13</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul12</span>(s) ^ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul14</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GFMul12</span>(s) ^ <span class=\"built_in\">GFMul2</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * GF上的二元运算</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">GFMul</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        result = s;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>)</span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul2</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">3</span>)</span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul3</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0x9</span>)</span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul9</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0xb</span>)<span class=\"comment\">//11</span></span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul11</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0xd</span>)<span class=\"comment\">//13</span></span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul13</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0xe</span>)<span class=\"comment\">//14</span></span><br><span class=\"line\">        result = <span class=\"built_in\">GFMul14</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 列混合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">mixColumns</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> tempArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            tempArray[i][j] = array[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">0</span>], tempArray[<span class=\"number\">0</span>][j]) ^ <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">1</span>], tempArray[<span class=\"number\">1</span>][j])</span><br><span class=\"line\">                ^ <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">2</span>], tempArray[<span class=\"number\">2</span>][j]) ^ <span class=\"built_in\">GFMul</span>(colM[i][<span class=\"number\">3</span>], tempArray[<span class=\"number\">3</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把4X4数组转回字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">convertArrayToStr</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"type\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            *str++ = (<span class=\"type\">char</span>)array[j][i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查密钥长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">checkKeyLen</span><span class=\"params\">(<span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">16</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 p: 明文的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 plen: 明文的长度。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 key: 密钥的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">aes</span><span class=\"params\">(<span class=\"type\">char</span>* p, <span class=\"type\">int</span> plen, <span class=\"type\">char</span>* key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = <span class=\"built_in\">strlen</span>(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">checkKeyLen</span>(keylen)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;keylen erro;keylen=%d\\n&quot;</span>, keylen);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">extendKey</span>(key);<span class=\"comment\">//扩展密钥</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; plen; k += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">convertToIntArray</span>(p + k, pArray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(pArray, <span class=\"number\">0</span>);<span class=\"comment\">//一开始的轮密钥加</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;<span class=\"comment\">//前9轮</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">subBytes</span>(pArray);<span class=\"comment\">//字节代换</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">shiftRows</span>(pArray);<span class=\"comment\">//行移位</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">mixColumns</span>(pArray);<span class=\"comment\">//列混合</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">addRoundKey</span>(pArray, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第10轮</span></span><br><span class=\"line\">        <span class=\"built_in\">subBytes</span>(pArray);<span class=\"comment\">//字节代换</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">shiftRows</span>(pArray);<span class=\"comment\">//行移位</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(pArray, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">convertArrayToStr</span>(pArray, p + k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据索引从逆S盒中获取值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getNumFromS1Box</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> row = <span class=\"built_in\">getLeft4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"type\">int</span> col = <span class=\"built_in\">getRight4Bit</span>(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S2[row][col];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆字节变换</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">deSubBytes</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">getNumFromS1Box</span>(array[i][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把4个元素的数组循环右移step位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">rightLoop4int</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>], <span class=\"type\">int</span> step)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        temp[i] = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> index = step % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : step % <span class=\"number\">4</span>;</span><br><span class=\"line\">    index = <span class=\"number\">3</span> - index;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        array[i] = temp[index];</span><br><span class=\"line\">        index--;</span><br><span class=\"line\">        index = index == <span class=\"number\">-1</span> ? <span class=\"number\">3</span> : index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆行移位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">deShiftRows</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rowTwo[<span class=\"number\">4</span>], rowThree[<span class=\"number\">4</span>], rowFour[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        rowTwo[i] = array[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        rowThree[i] = array[<span class=\"number\">2</span>][i];</span><br><span class=\"line\">        rowFour[i] = array[<span class=\"number\">3</span>][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rightLoop4int</span>(rowTwo, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rightLoop4int</span>(rowThree, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rightLoop4int</span>(rowFour, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[<span class=\"number\">1</span>][i] = rowTwo[i];</span><br><span class=\"line\">        array[<span class=\"number\">2</span>][i] = rowThree[i];</span><br><span class=\"line\">        array[<span class=\"number\">3</span>][i] = rowFour[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆列混合用到的矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> deColM[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123; <span class=\"number\">0xe</span>, <span class=\"number\">0xb</span>, <span class=\"number\">0xd</span>, <span class=\"number\">0x9</span>,</span><br><span class=\"line\">    <span class=\"number\">0x9</span>, <span class=\"number\">0xe</span>, <span class=\"number\">0xb</span>, <span class=\"number\">0xd</span>,</span><br><span class=\"line\">    <span class=\"number\">0xd</span>, <span class=\"number\">0x9</span>, <span class=\"number\">0xe</span>, <span class=\"number\">0xb</span>,</span><br><span class=\"line\">    <span class=\"number\">0xb</span>, <span class=\"number\">0xd</span>, <span class=\"number\">0x9</span>, <span class=\"number\">0xe</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆列混合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">deMixColumns</span><span class=\"params\">(<span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tempArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            tempArray[i][j] = array[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</span><br><span class=\"line\">            array[i][j] = <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">0</span>], tempArray[<span class=\"number\">0</span>][j]) ^ <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">1</span>], tempArray[<span class=\"number\">1</span>][j])</span><br><span class=\"line\">                ^ <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">2</span>], tempArray[<span class=\"number\">2</span>][j]) ^ <span class=\"built_in\">GFMul</span>(deColM[i][<span class=\"number\">3</span>], tempArray[<span class=\"number\">3</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把两个4X4数组进行异或</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">addRoundTowArray</span><span class=\"params\">(<span class=\"type\">int</span> aArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>], <span class=\"type\">int</span> bArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)</span><br><span class=\"line\">            aArray[i][j] = aArray[i][j] ^ bArray[i][j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从4个32位的密钥字中获得4X4数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于进行逆列混合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">getArrayFrom4W</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> array[<span class=\"number\">4</span>][<span class=\"number\">4</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index = i * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> colOne[<span class=\"number\">4</span>], colTwo[<span class=\"number\">4</span>], colThree[<span class=\"number\">4</span>], colFour[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index], colOne);</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index + <span class=\"number\">1</span>], colTwo);</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index + <span class=\"number\">2</span>], colThree);</span><br><span class=\"line\">    <span class=\"built_in\">splitIntToArray</span>(w[index + <span class=\"number\">3</span>], colFour);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        array[i][<span class=\"number\">0</span>] = colOne[i];</span><br><span class=\"line\">        array[i][<span class=\"number\">1</span>] = colTwo[i];</span><br><span class=\"line\">        array[i][<span class=\"number\">2</span>] = colThree[i];</span><br><span class=\"line\">        array[i][<span class=\"number\">3</span>] = colFour[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 c: 密文的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 clen: 密文的长度。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 key: 密钥的字符串数组。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deAes</span><span class=\"params\">(<span class=\"type\">char</span>* c, <span class=\"type\">int</span> clen, <span class=\"type\">char</span>* key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = <span class=\"built_in\">strlen</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clen == <span class=\"number\">0</span> || clen % <span class=\"number\">16</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Ciphertext characters must be a multiple of 16! Now the length is zero:%d\\n&quot;</span>, clen);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">checkKeyLen</span>(keylen)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Key character length error! The lengths must be 16, 24, and 32. The current length is:%d\\n&quot;</span>, keylen);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">extendKey</span>(key);<span class=\"comment\">//扩展密钥</span></span><br><span class=\"line\">    <span class=\"type\">int</span> cArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> i, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; clen; k += <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">convertToIntArray</span>(c + k, cArray);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(cArray, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> wArray[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">9</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">deSubBytes</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">deShiftRows</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">deMixColumns</span>(cArray);</span><br><span class=\"line\">            <span class=\"built_in\">getArrayFrom4W</span>(i, wArray);</span><br><span class=\"line\">            <span class=\"built_in\">deMixColumns</span>(wArray);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">addRoundTowArray</span>(cArray, wArray);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">deSubBytes</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">deShiftRows</span>(cArray);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">addRoundKey</span>(cArray, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">convertArrayToStr</span>(cArray, c + k);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>.rodata段是用来存放只读数据的一块内存区域，例如常量数据。ro代表read only，即只读的意思。.rodata段也叫常量区，它属于静态内存分配。使用const修饰符，例如<code>const int a = 10;</code>，这样的变量会被放在.rodata段中</p>\n</blockquote>\n<h2 id=\"Ida-Python脚本\"><a href=\"#Ida-Python脚本\" class=\"headerlink\" title=\"Ida Python脚本:\"></a>Ida Python脚本:</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start = <span class=\"number\">0x00401500</span></span><br><span class=\"line\">end  = start + <span class=\"number\">0xBA</span></span><br><span class=\"line\">xor = <span class=\"number\">0x41</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start,end):</span><br><span class=\"line\">   data = get_wide_byte(i)</span><br><span class=\"line\">   patch_byte(i,data^xor)</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; patched&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"attribute实现main函数之前执行相应函数：\"><a href=\"#attribute实现main函数之前执行相应函数：\" class=\"headerlink\" title=\"attribute实现main函数之前执行相应函数：\"></a>attribute实现main函数之前执行相应函数：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> __<span class=\"title\">attribute__</span><span class=\"params\">((constructor))</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> __<span class=\"title\">attribute__</span><span class=\"params\">((destructor))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is function %s\\n&quot;</span>,__func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is function %s\\n&quot;</span>,__func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is function %s\\n&quot;</span>,__func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"函数调用默认传参的几种方式\"><a href=\"#函数调用默认传参的几种方式\" class=\"headerlink\" title=\"函数调用默认传参的几种方式\"></a>函数调用默认传参的几种方式</h2><p>$$<br>cdecl：这是C语言默认的调用约定，它要求参数从右向左依次压入栈中，由调用者负责清理栈空间。这种方式适用于可变数量的参数，如printf函数。在Windows和Linux系统中，cdecl通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>stdcall：这是Windows API默认的调用约定，它要求参数从右向左依次压入栈中，由被调用者负责清理栈空间。这种方式适用于固定数量的参数，如MessageBox函数。在Windows系统中，stdcall通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>fastcall：这是一种优化的调用约定，它要求将部分参数通过寄存器传递，而不是全部压入栈中，以提高函数调用的效率。不同的编译器可能会有不同的fastcall实现，例如Microsoft Visual C++和Borland C++ Builder分别使用ECX和EDX两个寄存器传递前两个参数，而GCC则使用EAX、EDX和ECX三个寄存器传递前三个参数。在Windows和Linux系统中，fastcall通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>thiscall：这是C++类成员函数默认的调用约定，它要求将对象指针（this指针）通过ECX寄存器传递给函数，而其他参数则从右向左依次压入栈中。由于thiscall只适用于类成员函数，因此它通常不需要显式指定。在Windows和Linux系统中，thiscall通常用于32位x86架构的编译器。<br>$$</p>\n<p>$$<br>syscall：这是Linux内核默认的调用约定，它要求将系统调用号通过EAX寄存器传递给内核，而其他参数则通过EBX、ECX、EDX、ESI、EDI和EBP六个寄存器按顺序传递给内核。如果参数超过六个，则需要通过栈传递。在Linux系统中，syscall通常用于32位x86架构的编译器<br>$$</p>\n<p>$$<br>在64位x86架构（x86_64或AMD64）的编译器中，通常会有更多的寄存器可供使用，因此参数传递方式也会有所不同。例如，在Windows系统中，x64调用约定要求将前四个整数或指针类型的参数通过RCX、RDX、R8和R9四个寄存器传递，而前四个浮点类型的参数通过XMM0、XMM1、XMM2和XMM3四个寄存器传递；在Linux系统中，System V AMD64 ABI要求将前六个整数或指针类型的参数通过RDI、RSI、RDX、RCX、R8和R9六个寄存器传递，而前八个浮点类型的参数通过XMM0到XMM7八个寄存器传递。<br>$$</p>\n<h2 id=\"gbk解码转中文，先ida64-convert-to-string，再用b修饰，解码即可\"><a href=\"#gbk解码转中文，先ida64-convert-to-string，再用b修饰，解码即可\" class=\"headerlink\" title=\"gbk解码转中文，先ida64 convert to string，再用b修饰，解码即可\"></a>gbk解码转中文，先ida64 convert to string，再用b修饰，解码即可</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">b&quot;\\xD7\\xA2\\xB2\\xE1\\xB3\\xC9\\xB9\\xA6\\xA3\\xA1&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.decode(<span class=\"string\">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"异常处理和反调试\"><a href=\"#异常处理和反调试\" class=\"headerlink\" title=\"异常处理和反调试\"></a>异常处理和反调试</h2><p>反调试的几种方式记录</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> flag[<span class=\"number\">5</span>] = <span class=\"string\">&quot;1234&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy_s</span>(flag, <span class=\"built_in\">size_t</span>(<span class=\"number\">5</span>), <span class=\"string\">&quot;9999&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EXCEPTION_DISPOSITION WINAPI <span class=\"title\">myExceptHandler</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">struct</span> _EXCEPTION_RECORD* ExceptionRecord,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    PVOID EstablisherFrame,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    PCONTEXT pcontext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    PVOID DisapatcherContext</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 第五种方式，类似第四种方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pcontext-&gt;Dr0 != <span class=\"number\">0</span> || pcontext-&gt;Dr1 != <span class=\"number\">0</span> || pcontext-&gt;Dr2 != <span class=\"number\">0</span> || pcontext-&gt;Dr3 != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;myExceptHandler检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;myExceptHandlerm没有检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pcontext-&gt;Eip += <span class=\"number\">2</span>;<span class=\"comment\">//跳过程序异常处，要不然程序一直在异常处不继续运行</span></span><br><span class=\"line\">    <span class=\"built_in\">change</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExceptionContinueExecution;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1</span></span><br><span class=\"line\">    <span class=\"comment\">//第一种，会被x32dbg,OD反反调试器杀掉</span></span><br><span class=\"line\">    BOOL flag = <span class=\"built_in\">IsDebuggerPresent</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;IsDebuggerPresent检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;IsDebuggerPresent没有检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第二种，不会被x32,OD反反调试器杀掉</span></span><br><span class=\"line\">    BOOL IsDebug = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//第一个参数是进程句柄，可以检测远程进程是否被调试</span></span><br><span class=\"line\">    <span class=\"built_in\">CheckRemoteDebuggerPresent</span>(<span class=\"built_in\">GetCurrentProcess</span>(), &amp;IsDebug);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsDebug)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CheckRemoteDebuggerPresent检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CheckRemoteDebuggerPresent没有检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//第三种，不会被x32,OD反反调试器杀掉</span></span><br><span class=\"line\">    <span class=\"comment\">//CloseHandle函数会试图关闭指定句柄的进程，</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1 </span></span><br><span class=\"line\">    __try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>((HANDLE)<span class=\"number\">0x1234</span>);<span class=\"comment\">//指定一个不存在的进程句柄</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CloseHandle没有检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __except(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CloseHandle检测到调试器\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">//第四种,硬件断点反调试，只要在动调时设置硬件断点就会被发现</span></span><br><span class=\"line\">    CONTEXT context&#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;</span><br><span class=\"line\">    <span class=\"built_in\">GetThreadContext</span>(<span class=\"built_in\">GetCurrentThread</span>(),&amp;context);</span><br><span class=\"line\">    <span class=\"comment\">//查找寄存器的值，如果有硬件断点，该寄存器的值会改变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Dr0 != <span class=\"number\">0</span> || context.Dr1 != <span class=\"number\">0</span> || context.Dr2 != <span class=\"number\">0</span> || context.Dr3 != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;GetThreadContext检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;GetThreadContext没有检测到硬件断点\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">//第五种</span></span><br><span class=\"line\">    DWORD sehHandler = (DWORD)myExceptHandler;</span><br><span class=\"line\">    <span class=\"comment\">//上面可能是添加一个异常处理函数，然后下面让异常处理链表SEH增加一个节点，把这个异常处理函数插进去</span></span><br><span class=\"line\">    _asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        push myExceptHandler<span class=\"comment\">//fs: [0] 指向的是TIB[Thread information Block]结构中的EXCEPTION_REGISTRATION 结构</span></span><br><span class=\"line\">        mov eax,fs:[<span class=\"number\">0</span>]</span><br><span class=\"line\">        push eax</span><br><span class=\"line\">        mov fs:[<span class=\"number\">0</span>],esp<span class=\"comment\">//让fs:[0]指向一个新的EXCEPTION_REGISTRATION 结构(就像链表插入一个新节点)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置程序异常处</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    a = a / <span class=\"number\">0</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; flag;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"dll的编译和使用\"><a href=\"#dll的编译和使用\" class=\"headerlink\" title=\"dll的编译和使用\"></a>dll的编译和使用</h2><p>先编译dll文件，新建生成dll项目，创建一个新的Mydll.cpp和Mydll.h</p>\n<p>Mydll.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Mydll.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sub</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">multi</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a*b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Div</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a/b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">XXOR</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a ^ b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>导出的两种方式的其中第一种方式，头文件导出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> MYDLL_EXPORTS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MYDLL_API __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MYDLL_API __declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一种导出方式</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Produce the next value in the sequence.</span></span><br><span class=\"line\"><span class=\"comment\">// Returns true on success and updates current value and index;</span></span><br><span class=\"line\"><span class=\"comment\">// false on overflow, leaves current value and index unchanged.</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the current value in the sequence.</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">multi</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the position of the current value in the sequence.</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> MYDLL_API <span class=\"type\">int</span> <span class=\"title function_\">Div</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>导出的第二种方式，源文件新建一个export.def文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIBRARY <span class=\"string\">&quot;Mydll&quot;</span></span><br><span class=\"line\">EXPORTS</span><br><span class=\"line\">XXOR @ <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>新建一个项目导入生成的dll文件</p>\n<p>导入的第一种方式，隐式链接的方式调用dll导出寒素</p>\n<p><code>#pragma comment(lib,&quot;Mydll.lib&quot;)//lib地址</code></p>\n<p>头文件main.h</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;Mydll.lib&quot;</span>)<span class=\"comment\">//lib地址</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>源文件main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&quot;main.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, sum);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种显示链接方式调用导出函数</p>\n<p>不需要头文件和lib，源文件main.cpp如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*XXOR)</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMODULE hModule = <span class=\"built_in\">LoadLibraryW</span>(<span class=\"string\">L&quot;Mydll.dll&quot;</span>);</span><br><span class=\"line\">\tXXOR Xorr = (XXOR)<span class=\"built_in\">GetProcAddress</span>(hModule, <span class=\"string\">&quot;XXOR&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, <span class=\"built_in\">Xorr</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">FreeLibrary</span>(hModule);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"c语言RC4，base64加解密代码\"><a href=\"#c语言RC4，base64加解密代码\" class=\"headerlink\" title=\"c语言RC4，base64加解密代码\"></a>c语言RC4，base64加解密代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        S[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++) &#123;</span><br><span class=\"line\">        j = (j + S[i] + key[i % keylen]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[i];</span><br><span class=\"line\">        S[i] = S[j];</span><br><span class=\"line\">        S[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个字节的密钥流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> <span class=\"title\">generate</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* S, <span class=\"type\">int</span>* i, <span class=\"type\">int</span>* j)</span> </span>&#123;</span><br><span class=\"line\">    *i = (*i + <span class=\"number\">1</span>) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    *j = (*j + S[*i]) % <span class=\"number\">256</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 交换 S[i] 和 S[j]</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp = S[*i];</span><br><span class=\"line\">    S[*i] = S[*j];</span><br><span class=\"line\">    S[*j] = temp;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 S[S[i] + S[j]]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> S[(S[*i] + S[*j]) % <span class=\"number\">256</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对数据进行加密或解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, <span class=\"type\">int</span> datalen, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> keylen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> S[<span class=\"number\">256</span>]; <span class=\"comment\">// 256 字节的数据表</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; <span class=\"comment\">// 两个索引变量</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 S 表</span></span><br><span class=\"line\">    <span class=\"built_in\">init</span>(S, key, keylen);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; datalen; k++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据和密钥流进行异或运算</span></span><br><span class=\"line\">        data[k] ^= <span class=\"built_in\">generate</span>(S, &amp;i, &amp;j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"type\">const</span> base64char = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">base64_decode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* base64, <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* bindata)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> k;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> temp[<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; base64[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i += <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(temp, <span class=\"number\">0xFF</span>, <span class=\"built_in\">sizeof</span>(temp));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i])</span><br><span class=\"line\">                temp[<span class=\"number\">0</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">                temp[<span class=\"number\">1</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i + <span class=\"number\">2</span>])</span><br><span class=\"line\">                temp[<span class=\"number\">2</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">64</span>; k++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base64char[k] == base64[i + <span class=\"number\">3</span>])</span><br><span class=\"line\">                temp[<span class=\"number\">3</span>] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        bindata[j++] = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">2</span>)) &amp; <span class=\"number\">0xFC</span>)) |</span><br><span class=\"line\">            ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x03</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64[i + <span class=\"number\">2</span>] == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        bindata[j++] = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">4</span>)) &amp; <span class=\"number\">0xF0</span>)) |</span><br><span class=\"line\">            ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x0F</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64[i + <span class=\"number\">3</span>] == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        bindata[j++] = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">6</span>)) &amp; <span class=\"number\">0xF0</span>)) |</span><br><span class=\"line\">            ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(temp[<span class=\"number\">3</span>] &amp; <span class=\"number\">0x3F</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">base64_encode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* bindata, <span class=\"type\">char</span>* base64, <span class=\"type\">int</span> binlength)</span><span class=\"comment\">//输入，输出，输入长度</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> current;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; binlength; i += <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        current = (bindata[i] &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">        current &amp;= (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x3F</span>;</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\"></span><br><span class=\"line\">        current = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i] &lt;&lt; <span class=\"number\">4</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &gt;= binlength)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\">            base64[j++] = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            base64[j++] = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current |= ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i + <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x0F</span>);</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\"></span><br><span class=\"line\">        current = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i + <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x3C</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + <span class=\"number\">2</span> &gt;= binlength)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\">            base64[j++] = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current |= ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(bindata[i + <span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x03</span>);</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\"></span><br><span class=\"line\">        current = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)bindata[i + <span class=\"number\">2</span>]) &amp; ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)<span class=\"number\">0x3F</span>);</span><br><span class=\"line\">        base64[j++] = base64char[(<span class=\"type\">int</span>)current];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    base64[j] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base64;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> Buffer[<span class=\"number\">31</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> enc[<span class=\"number\">41</span>];</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;BirkenwaldCTF&#123;This_is_f4ke_f1ag&#125;&quot;</span>;<span class=\"comment\">//RC5密钥</span></span><br><span class=\"line\">    <span class=\"type\">int</span> keylen = (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>((<span class=\"type\">char</span>*)key);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Do you know flag?\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please tell me:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, Buffer);</span><br><span class=\"line\">    <span class=\"type\">int</span> datelen = (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>((<span class=\"type\">char</span>*)Buffer);</span><br><span class=\"line\">    <span class=\"built_in\">encrypt</span>(Buffer, datelen, key, keylen);<span class=\"comment\">//RC4加密</span></span><br><span class=\"line\">    <span class=\"built_in\">encrypt2</span>(Buffer, enc, <span class=\"number\">30</span>);<span class=\"comment\">//base64加密</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"lea指令使用，防止遗忘\"><a href=\"#lea指令使用，防止遗忘\" class=\"headerlink\" title=\"lea指令使用，防止遗忘\"></a>lea指令使用，防止遗忘</h2><p>lea，官方解释Load Effective Address，即装入有效地址的意思，它的操作数就是地址；</p>\n<p>常见的几种用法：</p>\n<p><code>1、lea eax，[addr]</code></p>\n<p>就是将表达式addr的值放入eax寄存器，示例如下：</p>\n<p>lea eax,[401000h]; 将值401000h写入eax寄存器中</p>\n<p>lea指令右边的操作数表示一个精指针，上述指令和mov eax，401000h是等价的</p>\n<p><code>2、lea eax，dword ptr [ebx]</code>;将ebx的值赋值给eax</p>\n<p><code>3、lea eax，c</code>；其中c为一个int型的变量，该条语句的意思是把c的地址赋值给eax；</p>\n<h2 id=\"内联汇编实现部分常用函数功能练习\"><a href=\"#内联汇编实现部分常用函数功能练习\" class=\"headerlink\" title=\"内联汇编实现部分常用函数功能练习\"></a>内联汇编实现部分常用函数功能练习</h2><p>在全局内定义字符串后的print hello world，因为编译器会编译的时候会自动寻址，最简单的一种方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> format[] = <span class=\"string\">&quot;%s %s\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> hello[] = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> world[] = <span class=\"string\">&quot;world!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//_declspec(naked)裸函数标识，没有基本函数框架的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked)<span class=\"built_in\">print</span>()<span class=\"comment\">//打印hello world</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp,esp</span><br><span class=\"line\">\t\tsub esp,<span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tmov eax,offset world</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tmov eax,offset hello</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tmov eax,offset format</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall printf</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tretn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall print</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用局部变量字符串，将字符串push进栈中，通过栈寻址，push传参来实现功能</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//char format[] = &quot;%s %s&quot;;//25,73,20,25,73</span></span><br><span class=\"line\"><span class=\"comment\">//char hello[] = &quot;hello&quot;;//68,65,6c,6c,6f</span></span><br><span class=\"line\"><span class=\"comment\">//char world[] = &quot;world!&quot;;//77,6f,72,6c,64,21</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked)<span class=\"built_in\">print</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp,esp</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tpush <span class=\"number\">0x2164</span><span class=\"comment\">//push 后高位自动补零结束字符串</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c726f77</span><span class=\"comment\">//注意push顺序和十六进制顺序</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6f</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c6c6568</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x73</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x25207325</span></span><br><span class=\"line\">\t\tlea eax,dword ptr ss:[esp<span class=\"number\">+0x10</span>]<span class=\"comment\">//ss堆栈段，ds数据段</span></span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tlea eax,dword ptr ss:[esp<span class=\"number\">+0xc</span>]<span class=\"comment\">//注意偏移量计算</span></span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tlea eax,dword ptr ss:[esp<span class=\"number\">+0x08</span>]<span class=\"comment\">//用lea将字符串地址传入寄存器</span></span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall printf</span><br><span class=\"line\">\t\tadd esp,<span class=\"number\">0x24</span></span><br><span class=\"line\">\t\tpop eax</span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//char format[] = &quot;%s %s&quot;;//25,73,20,25,73,0a</span></span><br><span class=\"line\">\t<span class=\"comment\">//char hello[] = &quot;hello&quot;;//68,65,6c,6c,6f</span></span><br><span class=\"line\">\t<span class=\"comment\">//char world[] = &quot;world!&quot;;//77,6f,72,6c,64,21</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(format, hello, world);</span></span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall print</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用kernel32.dll或者kernelbase.dll模块寻找loadlibrary和getprocaddr函数地址，以此加载想要的模块和获得想要的函数地址，从而调用想要的函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> Load[] = <span class=\"string\">&quot;LoadLibraryA&quot;</span>;<span class=\"comment\">//4c,6f,61,64,4c,69,62,72,61,72,79,41 00 len = 0xc</span></span><br><span class=\"line\"><span class=\"type\">char</span> Get[] = <span class=\"string\">&quot;GetProcAddress&quot;</span>;<span class=\"comment\">//47,65,74,50,72,6f,63,41,64,64,72,65,73,73 00 len = 0xe</span></span><br><span class=\"line\"><span class=\"type\">char</span> hello[] = <span class=\"string\">&quot;hello world!&quot;</span>;<span class=\"comment\">//68,65,6c,6c,6f,20,77,6f,72,6c,64,21 00 len = 0xc</span></span><br><span class=\"line\"><span class=\"type\">char</span> Msvc[] = <span class=\"string\">&quot;msvcrt.dll&quot;</span>;<span class=\"comment\">//6d,73,76,63,72,74,2e,64,6c,6c 00 len = 0xa</span></span><br><span class=\"line\"><span class=\"type\">char</span> Print[] = <span class=\"string\">&quot;printf&quot;</span>;<span class=\"comment\">//70,72,69,6e,74,66 00 len = 0x6</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked)<span class=\"built_in\">MyShell</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tmov ebp,esp</span><br><span class=\"line\">\t\tpush <span class=\"number\">0</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x21646c72</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6f77206f</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c6c6568</span><span class=\"comment\">//hello world</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x7373</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x65726464</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x41636f72</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x50746547</span><span class=\"comment\">//GetProcAddress</span></span><br><span class=\"line\">        push <span class=\"number\">0</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x41797261</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x7262694c</span><span class=\"comment\">//</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x64616f4c</span><span class=\"comment\">//LoadLibraryA</span></span><br><span class=\"line\">\t\tmov ecx,esp</span><br><span class=\"line\">\t\tpush ecx<span class=\"comment\">//esp传参过去</span></span><br><span class=\"line\">\t\tcall Func_print</span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop</span><br><span class=\"line\">               nop<span class=\"comment\">//填充五个字节留给jmp指令，因为call指令有一个相对地址</span></span><br><span class=\"line\">            <span class=\"comment\">//可以在OD，xdbg中计算jmp的相对地址</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tret</span><br><span class=\"line\"></span><br><span class=\"line\">\tFunc_GetModule:</span><br><span class=\"line\">\tpush ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tpush esi</span><br><span class=\"line\">\t\tmov esi,dword ptr fs:[<span class=\"number\">0x30</span>]<span class=\"comment\">//PEB结构体地址</span></span><br><span class=\"line\">\t\tmov esi,[esi<span class=\"number\">+0xc</span>]<span class=\"comment\">//LDR结构体地址</span></span><br><span class=\"line\">\t\tmov esi,[esi<span class=\"number\">+0x1c</span>]<span class=\"comment\">//list</span></span><br><span class=\"line\">\t\tmov esi,[esi]<span class=\"comment\">//list 第二项kernel32或者kernelbase</span></span><br><span class=\"line\">\t\tmov esi,[esi<span class=\"number\">+0x8</span>]<span class=\"comment\">//dllbase</span></span><br><span class=\"line\">\t\tmov eax,esi</span><br><span class=\"line\">\t\tpop esi</span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tret </span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunc_GetAddr:</span><br><span class=\"line\">\t    push ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tmov edx, [ebp + <span class=\"number\">0x8</span>]<span class=\"comment\">//dllbase</span></span><br><span class=\"line\">\t\tmov esi, [edx + <span class=\"number\">0x3c</span>]<span class=\"comment\">//if_anew</span></span><br><span class=\"line\">\t\tlea esi, [esi + edx]<span class=\"comment\">//NT header</span></span><br><span class=\"line\">\t\tmov esi, [esi + <span class=\"number\">0x78</span>]<span class=\"comment\">//导出表RVA</span></span><br><span class=\"line\">\t\tlea esi, [edx + esi]<span class=\"comment\">//导出表VA</span></span><br><span class=\"line\">\t\tmov edi, [esi + <span class=\"number\">0x1c</span>]<span class=\"comment\">//EAT RVA</span></span><br><span class=\"line\">\t\tlea edi, [edi + edx]<span class=\"comment\">//EAT VA</span></span><br><span class=\"line\">\t\tmov [ebp - <span class=\"number\">0x4</span>], edi<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\tmov edi, [esi + <span class=\"number\">0x20</span>]<span class=\"comment\">//ENT RVA</span></span><br><span class=\"line\">\t\tlea edi, [edi + edx]<span class=\"comment\">//ENT VA</span></span><br><span class=\"line\">\t\tmov [ebp - <span class=\"number\">0x8</span>], edi<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\tmov edi, [esi + <span class=\"number\">0x24</span>]<span class=\"comment\">//EOT RVA</span></span><br><span class=\"line\">\t\tlea edi, [edi+edx]<span class=\"comment\">//EOT VA</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0xc</span>],edi<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">xor</span> eax,eax</span><br><span class=\"line\">\t\tjmp tag_cmpfirst</span><br><span class=\"line\">\ttag_cmpLoop:</span><br><span class=\"line\">\t    inc eax</span><br><span class=\"line\">\ttag_cmpfirst:</span><br><span class=\"line\">\t    mov esi,[ebp<span class=\"number\">-0x8</span>]<span class=\"comment\">//ENT</span></span><br><span class=\"line\">\t\tmov esi,[esi+eax*<span class=\"number\">4</span>]<span class=\"comment\">//RVA</span></span><br><span class=\"line\">\t\tlea esi,[esi+edx]<span class=\"comment\">//函数名称字符串地址</span></span><br><span class=\"line\">\t\tmov edi,[ebp<span class=\"number\">+0xc</span>]<span class=\"comment\">//</span></span><br><span class=\"line\">\t\tmov ecx,[ebp<span class=\"number\">+0x10</span>]<span class=\"comment\">//循环次数，ebp+0x10是传来的参数</span></span><br><span class=\"line\">\t\trepe cmpsb</span><br><span class=\"line\">\t\tmov esi,[ebp<span class=\"number\">-0xc</span>]</span><br><span class=\"line\">\t\tjne tag_cmpLoop</span><br><span class=\"line\">\t\tmov esi,[ebp<span class=\"number\">-0xc</span>]<span class=\"comment\">//EOT</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">xor</span> edi,edi<span class=\"comment\">//为了不影响结果清空edi</span></span><br><span class=\"line\">\t\tmov di,[esi+eax*<span class=\"number\">2</span>]<span class=\"comment\">//word类型,EAT表索引</span></span><br><span class=\"line\">\t\tmov edx,[ebp<span class=\"number\">-0x4</span>]<span class=\"comment\">//EAT</span></span><br><span class=\"line\">\t\tmov esi,[edx+edi*<span class=\"number\">4</span>]<span class=\"comment\">//函数地址RVA</span></span><br><span class=\"line\">\t\tmov edx,[ebp<span class=\"number\">+0x8</span>]<span class=\"comment\">//dllbase</span></span><br><span class=\"line\">\t\tlea eax,[esi+edx]<span class=\"comment\">//最终函数地址</span></span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tretn <span class=\"number\">0xc</span><span class=\"comment\">//在栈中弹出三个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tFunc_print:</span><br><span class=\"line\">\tpush ebp</span><br><span class=\"line\">\t\tmov ebp,esp </span><br><span class=\"line\">\t\tsub esp,<span class=\"number\">0x10</span></span><br><span class=\"line\">\t\tcall Func_GetModule<span class=\"comment\">//获取kernel模块基址</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0x4</span>],eax<span class=\"comment\">//[ebp-0x4]保存模块基址</span></span><br><span class=\"line\">\t\tlea ecx,[ebp + <span class=\"number\">0xc</span>]<span class=\"comment\">//load地址</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0xc</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall Func_GetAddr<span class=\"comment\">//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0x8</span>],eax<span class=\"comment\">//load地址\t</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0xe</span></span><br><span class=\"line\">\t\tlea ecx, [ebp + <span class=\"number\">0x1c</span>]<span class=\"comment\">//Get字符串</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tpush [ebp<span class=\"number\">-0x4</span>]<span class=\"comment\">//模块基址</span></span><br><span class=\"line\">\t\tcall Func_GetAddr<span class=\"comment\">//三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress</span></span><br><span class=\"line\">\t\tmov [ebp<span class=\"number\">-0xc</span>],eax<span class=\"comment\">//get地址</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6c6c</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x642e7472</span>\t</span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6376736d</span></span><br><span class=\"line\">\t\tlea ecx,dword ptr ss:[ebp<span class=\"number\">-0x1c</span>]</span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tcall [ebp<span class=\"number\">-0x8</span>]<span class=\"comment\">//调用load函数load Msvc.dll，一个参数，字符串地址</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6674</span></span><br><span class=\"line\">\t\tpush <span class=\"number\">0x6e697270</span></span><br><span class=\"line\">\t\tlea ecx,[ebp<span class=\"number\">-0x24</span>]<span class=\"comment\">//printf字符串</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tpush eax<span class=\"comment\">//msvc.dll基址</span></span><br><span class=\"line\">\t\tcall [ebp<span class=\"number\">-0xc</span>]<span class=\"comment\">//调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称</span></span><br><span class=\"line\">\t\tlea ecx,[ebp<span class=\"number\">+0x2c</span>]<span class=\"comment\">//hello world地址</span></span><br><span class=\"line\">\t\tpush ecx</span><br><span class=\"line\">\t\tcall eax<span class=\"comment\">//printf地址</span></span><br><span class=\"line\">\t\tmov esp,ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*GetProcAddress();</span></span><br><span class=\"line\"><span class=\"comment\">    LoadLibraryA()*/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//6d, 73, 76, 63, 72, 74, 2e, 64, 6c, 6c 00 len = 0xa</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// //70,72,69,6e,74,66</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyShell</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/*\tfor (int i = 0; i &lt; strlen(Print); i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tprintf(&quot;%x,&quot;, Print[i]);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;*/</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*AT&amp;T写法</span></span><br><span class=\"line\"><span class=\"comment\">asm(</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pusha\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x21646c72\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6f77206f\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6c6c6568\\n&quot; // hello world</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x7373\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x65726464\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x41636f72\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x50746547\\n&quot; // GetProcAddress</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x41797261\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x7262694c\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x64616f4c\\n&quot; // LoadLibraryA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot; // esp传参过去</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_print\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;popa\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;nop\\n&quot; // 填充五个字节留给jmp指令，因为call指令有一个相对地址</span></span><br><span class=\"line\"><span class=\"comment\">    // 可以在OD，xdbg中计算jmp的相对地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&quot;Func_GetModule:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %esi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %fs:0x30, %esi\\n&quot; // PEB结构体地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0xc(%esi), %esi\\n&quot; // LDR结构体地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x1c(%esi), %esi\\n&quot; // list</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%esi), %esi\\n&quot; // list 第二项kernel32或者kernelbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x8(%esi), %esi\\n&quot; // dllbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esi, %eax\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %esi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&quot;Func_GetAddr:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;sub $0x20, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x8(%ebp), %edx\\n&quot; // dllbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x3c(%edx), %esi\\n&quot; // if_anew</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %esi\\n&quot;  // NT header</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x78(%esi), %esi\\n&quot;  // 导出表RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %esi\\n&quot;  // 导出表VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x1c(%esi), %edi\\n&quot;  // EAT RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %edi), %edi\\n&quot;  // EAT VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %edi, -0x4(%ebp)\\n&quot;  // 保存</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x20(%esi), %edi\\n&quot;  // ENT RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %edi), %edi\\n&quot;  // ENT VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %edi, -0x8(%ebp)\\n&quot;  // 保存</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x24(%esi), %edi\\n&quot;  // EOT RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %edi), %edi\\n&quot;  // EOT VA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %edi, -0xc(%ebp)\\n&quot;  // 保存</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;xor %eax, %eax\\n&quot; </span></span><br><span class=\"line\"><span class=\"comment\">    &quot;jmp tag_cmpfirst\\n&quot; </span></span><br><span class=\"line\"><span class=\"comment\">&quot;tag_cmpLoop:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;inc %eax\\n&quot; </span></span><br><span class=\"line\"><span class=\"comment\">&quot;tag_cmpfirst:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0x8(%ebp), %esi\\n&quot;  // ENT</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%esi, %eax, 4), %esi\\n&quot; // RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %esi\\n&quot; // 函数名称字符串地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0xc(%ebp), %edi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x10(%ebp), %ecx\\n&quot; // 循环次数，ebp+0x10是传来的参数</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;repe cmpsb\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0xc(%ebp), %esi\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;jne tag_cmpLoop\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0xc(%ebp), %esi\\n&quot; // EOT</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;xor %edi, %edi\\n&quot; // 为了不影响结果清空edi</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%esi, %eax, 2), %di\\n&quot; // word类型,EAT表索引</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov -0x4(%ebp), %edx\\n&quot; // EAT</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov (%edx, %edi, 4), %esi\\n&quot; // 函数地址RVA</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov 0x8(%ebp), %edx\\n&quot; // dllbase</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea (%edx, %esi), %eax\\n&quot; // 最终函数地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret $0xc\\n&quot; // 在栈中弹出三个参数</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&quot;Func_print:&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %esp, %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;sub $0x10, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_GetModule\\n&quot; // 获取kernel模块基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %eax, -0x4(%ebp)\\n&quot; // 保存模块基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea 0xc(%ebp), %ecx\\n&quot; // load地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0xc\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %eax\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_GetAddr\\n&quot; // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 loadlibrarya</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %eax, -0x8(%ebp)\\n&quot; // load地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0xe\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea 0x1c(%ebp), %ecx\\n&quot; // Get字符串</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push -0x4(%ebp)\\n&quot; // 模块基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call Func_GetAddr\\n&quot; // 三个参数，第一个模块基址，第二个字符串地址，第三个字符串长度 GetProcAddress</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %eax, -0xc(%ebp)\\n&quot; // get地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6c6c\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x642e7472\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6376736d\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea -0x1c(%ebp), %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call -0x8(%ebp)\\n&quot; // 调用load函数load Msvc.dll，一个参数，字符串地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6674\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push $0x6e697270\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea -0x24(%ebp), %ecx\\n&quot; // printf字符串</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %eax\\n&quot; // msvc.dll基址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call -0xc(%ebp)\\n&quot; // 调用GetProcAddress函数，两个参数，一个msvc.dll基址，一个字符串名称</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;lea 0x2c(%ebp), %ecx\\n&quot; // hello world地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;push %ecx\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;call %eax\\n&quot; // printf地址</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;mov %ebp, %esp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;pop %ebp\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;ret\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    );</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>准备了一个表格存储栈信息,ebp2对应的是print函数的栈底，pushadd到ebp2是Myshell函数形成的栈帧</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>msvc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>printf</td>\n</tr>\n<tr>\n<td>28</td>\n<td>6e</td>\n</tr>\n<tr>\n<td>printf 24</td>\n<td>66</td>\n</tr>\n<tr>\n<td>20</td>\n<td>msvc</td>\n</tr>\n<tr>\n<td>1c msvc</td>\n<td>63</td>\n</tr>\n<tr>\n<td>18</td>\n<td>64</td>\n</tr>\n<tr>\n<td>14</td>\n<td>6c</td>\n</tr>\n<tr>\n<td>esp 0x10</td>\n<td></td>\n</tr>\n<tr>\n<td>0xc</td>\n<td>get_adr</td>\n</tr>\n<tr>\n<td>0x8</td>\n<td>load_adr</td>\n</tr>\n<tr>\n<td>0x4</td>\n<td>kernel</td>\n</tr>\n<tr>\n<td>ebp2</td>\n<td>ebp1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>eip</td>\n</tr>\n<tr>\n<td>8</td>\n<td>ecx&#x3D;esp1</td>\n</tr>\n<tr>\n<td>load c</td>\n<td>64</td>\n</tr>\n<tr>\n<td>10</td>\n<td>72</td>\n</tr>\n<tr>\n<td>14</td>\n<td>41</td>\n</tr>\n<tr>\n<td>18</td>\n<td>0</td>\n</tr>\n<tr>\n<td>get1c</td>\n<td>50</td>\n</tr>\n<tr>\n<td>20</td>\n<td>41</td>\n</tr>\n<tr>\n<td>24</td>\n<td>65</td>\n</tr>\n<tr>\n<td>28</td>\n<td>73</td>\n</tr>\n<tr>\n<td>hello 2c</td>\n<td>6c</td>\n</tr>\n<tr>\n<td>30</td>\n<td>6f</td>\n</tr>\n<tr>\n<td>34</td>\n<td>21</td>\n</tr>\n<tr>\n<td>38</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pushadd</td>\n<td>ad</td>\n</tr>\n</tbody></table>\n<h2 id=\"重温栈结构\"><a href=\"#重温栈结构\" class=\"headerlink\" title=\"重温栈结构\"></a>重温栈结构</h2><blockquote>\n<p>今天在准备写一个壳的时候需要手写汇编，把汇编十六进制插入PE文件中，一时对栈结构有点遗忘，在xdbg中调了会温故了一下，在这里记一下，防止下一次遗忘</p>\n</blockquote>\n<p>比方说我们有一个main函数时，在函数开始时经常有如下汇编代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push ebp</span><br><span class=\"line\"></span><br><span class=\"line\">mov esp,ebp</span><br><span class=\"line\"></span><br><span class=\"line\">sub esp,<span class=\"number\">0x20</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么会出现以上代码？在主函数调用的子函数中能不能不出现这些代码？</p>\n<p>push ebp 做的是一个保存ebp的操作，mov esp,ebp为下一个栈帧形成打下基础，在新栈帧中利用栈来保存数据，并且不会破坏原来栈帧中的数据</p>\n<p>sub esp,0x20则是开辟了一个新的栈空间，这段空间可被函数直接利用，比如说做一些局部变量的初始化操作，也可以省略这部操作，直接通过push提高栈顶（地址下降）然后再通过mov在栈中储存数据（初始化局部变量）</p>\n<p>主函数下的子函数结构和main函数类似，其实也可以说main函数时其他函数的子函数，没有什么较大的区别</p>\n<p>在call的时候其实把下一条要执行汇编代码地址push进了栈中，然后在函数内部在push ebp这些操作，使得每次函数调用结束时，会出现以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pop ebp</span><br><span class=\"line\">ret</span><br></pre></td></tr></table></figure>\n\n<p>ret返回的正是下一条汇编代码执行处</p>\n<p>在函数调用时，有时通过push来传递参数，这个时候栈顶提高，但是参数传递之后对主函数没有任何作用，所以函数调用结束时主函数有时候会通过add esp来调整栈空间。</p>\n<p>push指令在x86架构下是推入四个字节数据或地址，推入常量高位用0填充，可以通过mov指令实现对栈中数据进行字节位的调整</p>\n<h2 id=\"ret-和-retn的区别\"><a href=\"#ret-和-retn的区别\" class=\"headerlink\" title=\"ret 和 retn的区别\"></a>ret 和 retn的区别</h2><blockquote>\n<ul>\n<li>ret和retn都是返回指令，用于从子程序中返回到调用处，同时从栈中弹出返回地址</li>\n<li>ret和retn的区别在于是否有操作数。ret没有操作数，只是从栈中弹出返回地址；retn有一个操作数，表示要从栈中弹出的字节数</li>\n<li>例如add esp,0x4; ret;，等价于retn 0x4</li>\n</ul>\n</blockquote>\n<h2 id=\"repe-cmpsb字符串比较汇编指令\"><a href=\"#repe-cmpsb字符串比较汇编指令\" class=\"headerlink\" title=\"repe cmpsb字符串比较汇编指令\"></a>repe cmpsb字符串比较汇编指令</h2><blockquote>\n<p>是一个汇编语言指令，它的意思是重复比较两个字符串的字节，直到不相等或者计数器为零为止。它涉及到三个寄存器：ECX，EDI和ESI。<strong>ECX是计数器</strong>，表示要比较的字节数；<strong>EDI和ESI是两个字符串的起始地址</strong>。每次比较后，EDI和ESI会根据方向标志DF的值自动增加或减少。如果DF为0，表示正向比较，EDI和ESI都加一；如果DF为1，表示反向比较，EDI和ESI都减一。比较的结果会影响标志寄存器中的零标志ZF。如果ZF为1，表示两个字节相等；如果ZF为0，表示两个字节不等。repe cmpsb通常用来检测两个字符串是否完全相同</p>\n</blockquote>\n<h2 id=\"jmp指令偏移地址计算\"><a href=\"#jmp指令偏移地址计算\" class=\"headerlink\" title=\"jmp指令偏移地址计算\"></a>jmp指令偏移地址计算</h2><p>在使用jmp汇编指令时，关于算偏移地址的时候机器码十六进制的计算</p>\n<p>往下运行时，0x2 &#x3D; 0x44A04D-0x44A049-0x2，也就是jmp到的地址-原来jmp前的地址-jmp这条指令的字节数，本质就是算中间有多少字节</p>\n<p>往上运行时，0xFFF870F7 &#x3D; 0x401140 - 0x44A044 - 5 最后一个五是jmp指令的字节数，0xFFF870F7转化成机器码就是F770FBFF</p>\n<h2 id=\"IDAPatch保存后动调\"><a href=\"#IDAPatch保存后动调\" class=\"headerlink\" title=\"IDAPatch保存后动调\"></a>IDAPatch保存后动调</h2><p>Keypatcher进行patch，ctrl+w保存patch结果，但是动调有影响</p>\n<p>Apply patches to后动调即可 ，在edit-patch program里</p>\n<h2 id=\"Ollvm控制流平坦化技术\"><a href=\"#Ollvm控制流平坦化技术\" class=\"headerlink\" title=\"Ollvm控制流平坦化技术\"></a>Ollvm控制流平坦化技术</h2><p>ghidra自动化去混淆工具: <a href=\"https://github.com/PAGalaxyLab/ghidra_scripts\">https://github.com/PAGalaxyLab/ghidra_scripts</a></p>\n<p>IDA自动化去混淆工具d810: <a href=\"https://github.com/joydo/d810\">https://github.com/joydo/d810</a></p>\n<h2 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h2><h3 id=\"Hook的多种方式\"><a href=\"#Hook的多种方式\" class=\"headerlink\" title=\"Hook的多种方式\"></a>Hook的多种方式</h3><p><img src=\"https://s2.loli.net/2024/06/22/QkYWnuEXvbVM8Kp.png\" alt=\"image-20240418163602878\"></p>\n<h3 id=\"HOOK和Callback的区别\"><a href=\"#HOOK和Callback的区别\" class=\"headerlink\" title=\"HOOK和Callback的区别\"></a>HOOK和Callback的区别</h3><p>钩子技术（Hook）和回调函数（Callback）在编程中都是用于实现程序的扩展和灵活性，但它们有着不同的作用和实现方式。</p>\n<h4 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h4><ul>\n<li>事件响应： 钩子技术和回调函数都用于实现对特定事件的响应和处理。</li>\n<li>灵活性： 两者都可以增强程序的灵活性和扩展性，使得程序能够更好地处理不同的情况和需求。</li>\n</ul>\n<h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><ol>\n<li>作用：</li>\n</ol>\n<ul>\n<li>钩子技术主要用于拦截、监视和修改系统级别或应用程序级别的事件，比如键盘输入、鼠标操作、窗口消息等。</li>\n<li>回调函数主要用于在特定事件发生时被调用，通常用于异步编程或事件驱动编程中，比如网络请求完成后的回调函数、定时器触发后的回调函数等。</li>\n</ul>\n<ol>\n<li>实现方式：</li>\n</ol>\n<ul>\n<li>钩子技术通常是通过操作系统提供的接口或库函数来实现的，可以在系统级别或应用程序级别进行钩子的安装和管理。</li>\n<li>回调函数是一种编程模式，通过将函数指针或函数引用传递给其他函数，以便在特定事件发生时被调用。</li>\n</ul>\n<ol>\n<li>应用场景：</li>\n</ol>\n<ul>\n<li>钩子技术适用于需要拦截、监视和修改事件流的情况，比如实现键盘记录器、窗口管理工具等。</li>\n<li>回调函数适用于需要异步处理或事件驱动的情况，比如处理异步任务完成后的结果、处理定时器事件等。</li>\n</ul>\n<p>综上所述，钩子技术和回调函数虽然都与事件响应相关，但它们的作用、实现方式和应用场景有着明显的区别。<strong>钩子技术更专注于事件的拦截和修改，而回调函数更专注于事件的响应和异步处理。</strong></p>\n<p>从代码实现角度来看,Hook主要分成两种,Inline Hook 和 非 Inline Hook</p>\n<p>Inline Hook指的是: </p>\n<p><img src=\"https://s2.loli.net/2024/06/22/8isNvxnrQpDVHFE.png\" alt=\"image-20240416213218744\"></p>\n<p>在call的调用的函数内里添加 jmp 想执行代码地址</p>\n<p>非Inline Hook指的是:</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/KBonGr7HZgWVIC4.png\" alt=\"image-20240416213515874\"></p>\n<p>事实上就是改变了Call操作的目标地址,实际上就是IAT Hook</p>\n<h3 id=\"C-虚表的Hook\"><a href=\"#C-虚表的Hook\" class=\"headerlink\" title=\"C++虚表的Hook\"></a>C++虚表的Hook</h3><p>一个类的内存布局:</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/8aATK9XVMOtGpPn.png\" alt=\"image-20240416214808838\"></p>\n<p>通过对象的地址来获得虚表的首地址,从而获得所有虚函数的地址</p>\n<p>C++调用fish类的虚函数代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fish Myfish;</span><br><span class=\"line\">Myfish.<span class=\"built_in\">sleep</span>();</span><br></pre></td></tr></table></figure>\n\n<p>汇编调用fish类的虚函数代码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov eax,ecx    //eca是MyFish对象的地址</span><br><span class=\"line\">mov eax,[eax]  //获取MyFish对象的虚表地址</span><br><span class=\"line\">call [eax+0x04]//调用sleep()函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Detours-Hook\"><a href=\"#Detours-Hook\" class=\"headerlink\" title=\"Detours Hook\"></a>Detours Hook</h3><p>框架学习</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   \t<span class=\"comment\">//1.保存detour的事务</span></span><br><span class=\"line\"><span class=\"built_in\">DetourRestoreAfterWith</span>();</span><br><span class=\"line\"><span class=\"comment\">//2.开始处理detour的事务</span></span><br><span class=\"line\"><span class=\"built_in\">DetourTransactionBegin</span>();</span><br><span class=\"line\"><span class=\"comment\">//3.更新线程信息-执行事务的线程</span></span><br><span class=\"line\"><span class=\"built_in\">DetourUpdateThread</span>(<span class=\"built_in\">GetCurrentThread</span>());</span><br><span class=\"line\"><span class=\"comment\">//4.设置需要拦截的代理函数</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数二级函数指针-原函数地址</span></span><br><span class=\"line\"><span class=\"comment\">//第二个参数函数地址-代理函数的地址</span></span><br><span class=\"line\"><span class=\"built_in\">DetourAttach</span>((PVOID*)&amp;RealMessageBox, MyMessageBox);<span class=\"comment\">//msg</span></span><br><span class=\"line\"><span class=\"comment\">//5.提交事务</span></span><br><span class=\"line\"><span class=\"built_in\">DetourTransactionCommit</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Hook MessageBox函数使得弹窗显示永远是 “你已经被Hook了！”</p>\n<p>mfc程序</p>\n<p>mfc.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&quot;mfc.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Myapp app;<span class=\"comment\">//全局应用程序对象</span></span><br><span class=\"line\"><span class=\"comment\">//MyFrame* m_pMainwnd = new MyFrame;</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">Myapp::InitInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyFrame* frame = <span class=\"keyword\">new</span> MyFrame;</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOWNORMAL);</span><br><span class=\"line\">\tframe-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//保存程序指针,否则窗口一闪而过,</span></span><br><span class=\"line\">\tm_pMainWnd = frame;<span class=\"comment\">//m_pMainWnd线程类的一个成员</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(MyFrame, CFrameWnd)</span><br><span class=\"line\">\t<span class=\"built_in\">ON_WM_LBUTTONDOWN</span>()</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">MyFrame::<span class=\"built_in\">MyFrame</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Create</span>(<span class=\"literal\">NULL</span>, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;Crackk&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">MyFrame::OnLButtonDown</span><span class=\"params\">(UINT, CPoint point)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取Dll1.dll文件路径</span></span><br><span class=\"line\">    WCHAR WorkPath[MAX_PATH];                        <span class=\"comment\">//用于存放获取路径的信息    </span></span><br><span class=\"line\">\t<span class=\"built_in\">GetModuleFileName</span>(<span class=\"literal\">NULL</span>, WorkPath, MAX_PATH);</span><br><span class=\"line\">\tCString DllPath = WorkPath;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pos = DllPath.<span class=\"built_in\">ReverseFind</span>(<span class=\"string\">&#x27;\\\\&#x27;</span>);               </span><br><span class=\"line\">\tDllPath = DllPath.<span class=\"built_in\">Left</span>(pos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tDllPath += _T(<span class=\"string\">&quot;Dll1.dll&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//一般情况利用辅助程序实现dll注入,这里为了便捷直接loadlibrary</span></span><br><span class=\"line\">\tHMODULE hmodule = <span class=\"built_in\">LoadLibrary</span>(DllPath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hmodule == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">MessageBox</span>(<span class=\"literal\">NULL</span>, (LPCTSTR)<span class=\"string\">&quot;加载dll失败&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">MessageBox</span>(<span class=\"literal\">NULL</span>, (LPCTSTR)<span class=\"string\">&quot;弹窗&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dll程序</p>\n<p>solve.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL APIENTRY <span class=\"title\">DllMain</span><span class=\"params\">(HMODULE hModule,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DWORD  ul_reason_for_call,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    LPVOID lpReserved</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Start_Hook</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Exit_Hook</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Dll1main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;detours.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;detours.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(WINAPI* RealMessageBox)(HWND, LPCTSTR, LPCTSTR, UINT) = MessageBox;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> WINAPI <span class=\"title\">MyMessageBox</span><span class=\"params\">(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">RealMessageBox</span>(hWnd, <span class=\"string\">L&quot;你已经被Hook了！&quot;</span>, <span class=\"string\">L&quot;Hooked&quot;</span>, uType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Start_Hook</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourRestoreAfterWith</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourTransactionBegin</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourUpdateThread</span>(<span class=\"built_in\">GetCurrentThread</span>());</span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourAttach</span>((PVOID*)&amp;RealMessageBox, MyMessageBox);<span class=\"comment\">//msg</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">DetourTransactionCommit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Exit_Hook</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.开始处理detour的事务</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourTransactionBegin</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//2.更新线程信息-执行事务的线程</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourUpdateThread</span>(<span class=\"built_in\">GetCurrentThread</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//3.撤销hook </span></span><br><span class=\"line\">\t<span class=\"comment\">//第一个参数二级函数指针-原函数地址</span></span><br><span class=\"line\">\t<span class=\"comment\">//第二个参数函数地址-代理函数的地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourDetach</span>((PVOID*)&amp;RealMessageBox, MyMessageBox);</span><br><span class=\"line\">\t<span class=\"comment\">//4.提交事务</span></span><br><span class=\"line\">\t<span class=\"built_in\">DetourTransactionCommit</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/06/22/VWTSJEYMnOjZIr4.png\" alt=\"image-20240416230935344\"></p>\n<h3 id=\"Windows的S-E-H\"><a href=\"#Windows的S-E-H\" class=\"headerlink\" title=\"Windows的S.E.H\"></a>Windows的S.E.H</h3><p>S.E.H全称是Struct Exception Handler即结构化异常处理机制</p>\n<p>S.E.H是操作系统提供给线程来感知和处理异常的一种回调机制,S.E.H在线程栈上以<strong>单链表</strong>的形式存在</p>\n<p><img src=\"https://s2.loli.net/2024/06/22/HUTfFSkE8Pwtm9R.png\" alt=\"image-20240418155025834\"></p>\n<p>在win32中由于FS寄存器总是指向当前的TIB(线程信息块),因此在FS:[0]处能找到最近的一个EXCEPTION_REGISTERATION结构</p>\n<p>当我们通过try&#x2F;catch或__try&#x2F;except等操作来注册S.E.H的时候,FS:[0]会指向新的S.E.H,且新的S.E.H的Prev字段会指向之前FS:[0]指向的S.E.H,整个操作类似于单链表的表头插入操作</p>\n<h3 id=\"Windows的V-E-H\"><a href=\"#Windows的V-E-H\" class=\"headerlink\" title=\"Windows的V.E.H\"></a>Windows的V.E.H</h3><p>S.E.H是基于线程的异常处理,V.E.H是基于进程的异常处理</p>\n<p>V.E.H处理异常的优先级低于调试器,高于S.E.H,即KiUserExceptionDispatcher()函数首先检查进程是否处于被调试状态,然后检查V.E.H链表,最后才是检查S.E.H链表</p>\n<p>Windows提供了注册V.E.H的回调函数的API</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PVOID AddVectoredExceptionHandler<span class=\"comment\">//注册回调函数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tULONG FirstHandler,<span class=\"comment\">//如果大于0则从头部插入,否则从尾部插入</span></span><br><span class=\"line\">\tPVECTORED_EXCEPTION_HANDLE VectoredHandler<span class=\"comment\">//异常处理函数地址</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过该函数进行虚假注册,通过函数返回值后去链表的头指针或者尾指针,从而遍历整个V.E.H链表</p>\n<h3 id=\"硬件断点\"><a href=\"#硬件断点\" class=\"headerlink\" title=\"硬件断点\"></a>硬件断点</h3><h4 id=\"调试器寄存器\"><a href=\"#调试器寄存器\" class=\"headerlink\" title=\"调试器寄存器\"></a>调试器寄存器</h4><p>IA-32处理器定义了8个调试寄存器,DR0-DR7其中<strong>DR0-DR3用来指定断点的内存地址或IO地址</strong>;DR4和DR5是保留的,DR6的作用是当调试事件发生时向调试器报告事件的详细信息,以供调试器啊判断发生的是何种事件;DR7用来进一步定义中断条件</p>\n<h4 id=\"硬件断点的优势\"><a href=\"#硬件断点的优势\" class=\"headerlink\" title=\"硬件断点的优势\"></a>硬件断点的优势</h4><p>硬件断点HOOK是结合DR0-DR3调试寄存器和Windows S.E.H 或V.E.H机制所引入的一种HOOK机制.如果HOOK采用的方式是修改代码,那么很容易被检测到,然而硬件断点HOOK并不涉及修改代码,所以他的优点主要体现在隐蔽性上</p>\n<h4 id=\"线程上下文环境以及Windows下线程与CPU之间的关系\"><a href=\"#线程上下文环境以及Windows下线程与CPU之间的关系\" class=\"headerlink\" title=\"线程上下文环境以及Windows下线程与CPU之间的关系\"></a>线程上下文环境以及Windows下线程与CPU之间的关系</h4><p>线程执行环境CONTEXT的结构体:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> struct_CONTEXT</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDwORD  contextFlags;</span><br><span class=\"line\">\tDWORD\tDr0;</span><br><span class=\"line\">    DWORD\tDr1;</span><br><span class=\"line\">    DWORD\tDr2;</span><br><span class=\"line\">    DWORD\tDr3;</span><br><span class=\"line\">    DWORD\tDr6;</span><br><span class=\"line\">    DWORD\tDr7;</span><br><span class=\"line\">\tFLOATING_SAVE_AREA FloatSave;</span><br><span class=\"line\">\tDWORD\tsegGs;</span><br><span class=\"line\">\tDWORD\tsegFs;</span><br><span class=\"line\">\tDWORD\tsegEs;</span><br><span class=\"line\">\tDWORD\tSegDs;</span><br><span class=\"line\">\tDWORD\tEdi;</span><br><span class=\"line\">\tDWORD\tEsi;</span><br><span class=\"line\">\tDWORD\tEbx;</span><br><span class=\"line\">\tDWORD\tEdx;</span><br><span class=\"line\">\tDWORD\tEcx;</span><br><span class=\"line\">\tDWORD\tEax;</span><br><span class=\"line\">\tDWORD\tEbp;</span><br><span class=\"line\">\tDWORD\tEip;</span><br><span class=\"line\">\tDWORD\tsegCs;</span><br><span class=\"line\">\tDWORD\tEFlags;</span><br><span class=\"line\">\tDWORD\tEsp;</span><br><span class=\"line\">\tDWORD\tsegSs;</span><br><span class=\"line\">&#125; CONTEXT;</span><br></pre></td></tr></table></figure>\n\n<p>Windows是基于线程调用的多任务抢占式操作系统,如果CPU目前运行的线程1,这时优先级更高的线程2将抢占执行,那么操作系统会把线程1的执行环境取出放到线程1的CONTEXT结构中,接着把线程2的CONTEXT信息放入CPU中,继续运行线程2</p>\n<h3 id=\"S-E-H-Hook\"><a href=\"#S-E-H-Hook\" class=\"headerlink\" title=\"S.E.H Hook\"></a>S.E.H Hook</h3><p>未成功代码,显示有没经处理的异常</p>\n<p>应该是MyExceptionFilter函数没起作用</p>\n<p>dll中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SEHHook.h&quot;</span></span></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SEH.cpp </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SEHHook.h&quot;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\">DWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(<span class=\"string\">&quot;USER32.dll&quot;</span>),<span class=\"string\">&quot;MessageBoxW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">LONG WINAPI <span class=\"title function_\">MyExceptionFilter</span><span class=\"params\">(PEXCEPTION_POINTERS ExceptionInfo)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == (LPVOID)HookAddr)</span><br><span class=\"line\">\t&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取当前线程上下文</span></span><br><span class=\"line\">\t\tPCONTEXT pcontext = ExceptionInfo-&gt;ContextRecord;</span><br><span class=\"line\">\t\tMessageBoxW(<span class=\"literal\">NULL</span>,TEXT(<span class=\"string\">&quot;你被hook了诶&quot;</span>), TEXT(<span class=\"string\">&quot;gogogo&quot;</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tpcontext-&gt;Eip += <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetHardBreakPoint</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历线程 通过openthread获取到线程环境后设置硬件断点</span></span><br><span class=\"line\">\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hTool32 != INVALID_HANDLE_VALUE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTHREADENTRY32 threadEntry32;<span class=\"comment\">//线程环境结构体</span></span><br><span class=\"line\">\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\tHANDLE hMainThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tFILETIME exit_time, kernel_time, user_time;</span><br><span class=\"line\">\t\tFILETIME creation_time;</span><br><span class=\"line\">\t\tFILETIME prev_creation_time;</span><br><span class=\"line\">\t\tprev_creation_time.dwLowDateTime = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">\t\tprev_creation_time.dwHighDateTime = INT_MAX;</span><br><span class=\"line\">\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + <span class=\"keyword\">sizeof</span>(threadEntry32.th32OwnerProcessID);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread32First(hTool32, &amp;threadEntry32))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (threadEntry32.dwSize &gt;= dwThreadEntryOffset &amp;&amp;threadEntry32.th32OwnerProcessID == GetCurrentProcessId())</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, <span class=\"literal\">false</span>, threadEntry32.th32ThreadID);</span><br><span class=\"line\">\t\t\t\t\tGetThreadTimes(hHookThread, &amp;creation_time, &amp;exit_time, &amp;kernel_time, &amp;user_time);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (CompareFileTime(&amp;creation_time, &amp;prev_creation_time) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(&amp;prev_creation_time, &amp;creation_time, <span class=\"keyword\">sizeof</span>(FILETIME));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (hMainThread != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t\t\t\t\thMainThread = hHookThread;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tCloseHandle(hHookThread);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">while</span> (Thread32Next(hTool32,&amp;threadEntry32));</span><br><span class=\"line\">\t\t\tSetUnhandledExceptionFilter(MyExceptionFilter);</span><br><span class=\"line\">\t\t\tCONTEXT thread_context = &#123; CONTEXT_DEBUG_REGISTERS &#125;;</span><br><span class=\"line\">\t\t\tthread_context.Dr0 = (DWORD)HookAddr;</span><br><span class=\"line\">\t\t\tthread_context.Dr7 = <span class=\"number\">0x1</span>;<span class=\"comment\">//设置断点类型(访问断点)</span></span><br><span class=\"line\">\t\t\tSetThreadContext(hMainThread, &amp;thread_context);</span><br><span class=\"line\">\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCloseHandle(hTool32);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"V-E-H-Hook\"><a href=\"#V-E-H-Hook\" class=\"headerlink\" title=\"V.E.H Hook\"></a>V.E.H Hook</h3><p>试验成功</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;VEHHook.h&quot;</span></span></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">                       LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">                     )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        AddVectoredExceptionHandler(<span class=\"number\">1</span>, (PVECTORED_EXCEPTION_HANDLER)MyExceptionFilter);</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">        SetHardBreakPoint();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//VEHHOOK.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;VEHHook.h&quot;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\">DWORD HookAddr = (DWORD)GetProcAddress(GetModuleHandleA(<span class=\"string\">&quot;USER32.dll&quot;</span>),<span class=\"string\">&quot;MessageBoxW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">LONG WINAPI <span class=\"title function_\">MyExceptionFilter</span><span class=\"params\">(PEXCEPTION_POINTERS ExceptionInfo)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == (LPVOID)HookAddr)</span><br><span class=\"line\">\t&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取当前线程上下文</span></span><br><span class=\"line\">\t\tPCONTEXT pcontext = ExceptionInfo-&gt;ContextRecord;</span><br><span class=\"line\">\t\tMessageBoxA(<span class=\"literal\">NULL</span>,<span class=\"string\">&quot;HOOK&quot;</span>, <span class=\"string\">&quot;HOOK&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//需要加一段调整eip的代码使得跳出死循环</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">SetHardBreakPoint</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历线程 通过openthread获取到线程环境后设置硬件断点</span></span><br><span class=\"line\">\tHANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hTool32 != INVALID_HANDLE_VALUE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTHREADENTRY32 threadEntry32;<span class=\"comment\">//线程环境结构体</span></span><br><span class=\"line\">\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\tHANDLE hMainThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tFILETIME exit_time, kernel_time, user_time;</span><br><span class=\"line\">\t\tFILETIME creation_time;</span><br><span class=\"line\">\t\tFILETIME prev_creation_time;</span><br><span class=\"line\">\t\tprev_creation_time.dwLowDateTime = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">\t\tprev_creation_time.dwHighDateTime = INT_MAX;</span><br><span class=\"line\">\t\tDWORD dwThreadEntryOffset = FIELD_OFFSET(THREADENTRY32, th32OwnerProcessID) + <span class=\"keyword\">sizeof</span>(threadEntry32.th32OwnerProcessID);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread32First(hTool32, &amp;threadEntry32))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (threadEntry32.dwSize &gt;= dwThreadEntryOffset &amp;&amp;threadEntry32.th32OwnerProcessID == GetCurrentProcessId())</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tHANDLE hHookThread = OpenThread(THREAD_ALL_ACCESS, <span class=\"literal\">false</span>, threadEntry32.th32ThreadID);</span><br><span class=\"line\">\t\t\t\t\tGetThreadTimes(hHookThread, &amp;creation_time, &amp;exit_time, &amp;kernel_time, &amp;user_time);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (CompareFileTime(&amp;creation_time, &amp;prev_creation_time) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(&amp;prev_creation_time, &amp;creation_time, <span class=\"keyword\">sizeof</span>(FILETIME));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (hMainThread != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t\t\t\t\thMainThread = hHookThread;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tCloseHandle(hHookThread);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tthreadEntry32.dwSize = <span class=\"keyword\">sizeof</span>(THREADENTRY32);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">while</span> (Thread32Next(hTool32,&amp;threadEntry32));</span><br><span class=\"line\">\t\t\tCONTEXT thread_context = &#123; CONTEXT_DEBUG_REGISTERS &#125;;</span><br><span class=\"line\">\t\t\tthread_context.Dr0 = (DWORD)HookAddr;</span><br><span class=\"line\">\t\t\tthread_context.Dr7 = <span class=\"number\">0x1</span>;<span class=\"comment\">//设置断点类型(访问断点)</span></span><br><span class=\"line\">\t\t\tSetThreadContext(hMainThread, &amp;thread_context);</span><br><span class=\"line\">\t\t\tCloseHandle(hMainThread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCloseHandle(hTool32);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/06/22/z1xhTRjQWKd3IDk.png\" alt=\"image-20240509220917719\"></p>"},{"title":"Windows内核逆向学习记录","date":"2024-04-30T16:00:00.000Z","sticky":100,"pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"_content":"\n记载一些驱动开发过程中学习到的东西<!-- more -->\n\n## 环境搭建\n\nwin10虚拟机安装debugView和DriverMonitor,\n\n本机VS安装WDK,\n\n测试代码\n\n```c\nNTSTATUS\nDriverEntry(\n\t_In_ PDRIVER_OBJECT DriverObject,\n\t_In_ PUNICODE_STRING RegistryPath\n)\n{\n\tDbgPrint(\"hello driver\");\n\t//regCallBack();\n\treturn STATUS_SUCCESS;\n}\n```\n\n<!-- more -->\n\n在DebugView先connect local连接虚拟机,然后capture kernel\n\n在DriverMonitor加载启动驱动,如果遇到签名验证失败问题,按住shift并点击重启按钮,进入疑难解答->高级选项->启动设置->禁用驱动签名\n\n\n\n## 基本概念\n\nMDL是内存描述符列表（Memory Descriptor List）的缩写，它主要用于关联虚拟地址和物理地址，类似于页表，但比页表简单。MDL在内存中的作用很大，它用于驱动的数据传输和缓冲管理，以及页错误等场景。此外，MDL还用于跨进程访问用户空间。\n\nCR3寄存器是一种控制寄存器，用于存储页目录表的物理地址。在x86架构的操作系统中，分页机制被用来将虚拟地址映射到物理地址。为了实现这种映射，需要使用页表和页目录表来管理地址转换。CR3寄存器存储了页目录表的物理地址，通过改变CR3寄存器的值，可以实现不同的虚拟地址空间之间的切换。当处理器执行访问内存的指令时，它会将虚拟地址发送给内存管理单元（MMU）。MMU会根据当前CR3寄存器中存储的页目录表地址进行地址转换，将虚拟地址转换为物理地址，并完成内存的访问\n\n## IO通信\n\n```c\n//DriverMain.cpp\n#include <ntifs.h>\n#define _DEVICE_NAME L\"\\\\device\\\\pzk\"\n#define _SYM_NAME L\"\\\\??\\\\pzk\"\n//设备\nNTSTATUS DefCreate(\n\t_In_ struct _DEVICE_OBJECT* DeviceObject,\n\t_Inout_ struct _IRP* Irp\n)\n{\n\tDbgPrintEx(77, 0, \"DefCreate\\r\\n\");\n\tIoCompleteRequest(Irp, 0);\n\treturn STATUS_SUCCESS;\n}\n\nNTSTATUS DefDelete(\n\t_In_ struct _DEVICE_OBJECT* DeviceObject,\n\t_Inout_ struct _IRP* Irp\n)\n{\n\tDbgPrintEx(77, 0, \"DefDelete\\r\\n\");\n\tIoCompleteRequest(Irp, 0);\n\treturn STATUS_SUCCESS;\n}\n\nNTSTATUS DefControl(\n\t_In_ struct _DEVICE_OBJECT* DeviceObject,\n\t_Inout_ struct _IRP* Irp\n)\n{\n\tDbgPrintEx(77, 0, \"DefControl\\r\\n\");\n\tIoCompleteRequest(Irp, 0);\n\treturn STATUS_SUCCESS;\n}\n\nVOID DriverUnload(PDRIVER_OBJECT pDriver)\n{\n\tif (pDriver->DeviceObject)\n\t{\n\t\tUNICODE_STRING UnSymeName = { 0 };\n\t\tRtlInitUnicodeString(&UnSymeName, _SYM_NAME);\n\t\tIoDeleteSymbolicLink(&UnSymeName);\n\t\tIoDeleteDevice(pDriver->DeviceObject);\n\t}\n}\n\nNTSTATUS DriverEntry(PDRIVER_OBJECT pDriver, PUNICODE_STRING pReg)\n{\n\tpDriver->DriverUnload = DriverUnload;\n\tDbgPrint(\"hello driver\");\n\tUNICODE_STRING UnDeviceName = { 0 };\n\tRtlInitUnicodeString(&UnDeviceName, _DEVICE_NAME);\n\tUNICODE_STRING UnSymeName = { 0 };\n\tRtlInitUnicodeString(&UnSymeName, _SYM_NAME);\n\tPDEVICE_OBJECT pDevice = NULL;\n\t//创建设备\n\tNTSTATUS st = IoCreateDevice(pDriver, 0, &UnDeviceName, FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN, FALSE, &pDevice);\n\tif(!NT_SUCCESS(st))\n\t{\n\t\treturn STATUS_UNSUCCESSFUL;\n\t}\n\t//创建符号链接\n\tst = IoCreateSymbolicLink(&UnSymeName, &UnDeviceName);\n\tif (!NT_SUCCESS(st))\n\t{\n\t\tIoDeleteDevice(pDevice);\n\t\treturn STATUS_UNSUCCESSFUL;\n\t}\n\t//设置设备标志,去除初始化表\n\tpDevice->Flags &= ~DO_DEVICE_INITIALIZING;\n\t//使用什么内存\n\tpDevice->Flags |= DO_BUFFERED_IO;\n\n\tpDriver->MajorFunction[IRP_MJ_CREATE] = DefCreate;\n\tpDriver->MajorFunction[IRP_MJ_CLOSE] = DefDelete;\n\tpDriver->MajorFunction[IRP_MJ_DEVICE_CONTROL] = DefControl;\n\n\treturn STATUS_SUCCESS;\n}\n//io通信R3.cpp\n#include <Windows.h>\n#include <iostream>\n#define _SYM_NAME \"\\\\\\\\.\\\\pzk\"\n\nint main()\n{\n    HANDLE hDevice = CreateFileA(_SYM_NAME,GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,NULL);\n    if (!hDevice)\n    {\n        printf(\"打开设备失败%d\\r\\n\", GetLastError());\n        system(\"pause\");\n    }\n    else\n    {\n        printf(\"打开设备成功\\r\\n\");\n        ULONG retLen = 0;\n        BOOL isSuccess = DeviceIoControl(hDevice, 0, NULL, 4, NULL, 4, &retLen, 0);\n        if (isSuccess)\n        {\n            printf(\"success\\r\\n\");\n        }\n    }\n    system(\"pause\");\n}\n\n\n```\n\n\n\n","source":"_posts/驱动开发.md","raw":"---\ntitle: Windows内核逆向学习记录\ndate: 2024/5/1\ncategories: 笔记\ntags:\n  - 逆向\n  - 驱动\nsticky: 100\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\n---\n\n记载一些驱动开发过程中学习到的东西<!-- more -->\n\n## 环境搭建\n\nwin10虚拟机安装debugView和DriverMonitor,\n\n本机VS安装WDK,\n\n测试代码\n\n```c\nNTSTATUS\nDriverEntry(\n\t_In_ PDRIVER_OBJECT DriverObject,\n\t_In_ PUNICODE_STRING RegistryPath\n)\n{\n\tDbgPrint(\"hello driver\");\n\t//regCallBack();\n\treturn STATUS_SUCCESS;\n}\n```\n\n<!-- more -->\n\n在DebugView先connect local连接虚拟机,然后capture kernel\n\n在DriverMonitor加载启动驱动,如果遇到签名验证失败问题,按住shift并点击重启按钮,进入疑难解答->高级选项->启动设置->禁用驱动签名\n\n\n\n## 基本概念\n\nMDL是内存描述符列表（Memory Descriptor List）的缩写，它主要用于关联虚拟地址和物理地址，类似于页表，但比页表简单。MDL在内存中的作用很大，它用于驱动的数据传输和缓冲管理，以及页错误等场景。此外，MDL还用于跨进程访问用户空间。\n\nCR3寄存器是一种控制寄存器，用于存储页目录表的物理地址。在x86架构的操作系统中，分页机制被用来将虚拟地址映射到物理地址。为了实现这种映射，需要使用页表和页目录表来管理地址转换。CR3寄存器存储了页目录表的物理地址，通过改变CR3寄存器的值，可以实现不同的虚拟地址空间之间的切换。当处理器执行访问内存的指令时，它会将虚拟地址发送给内存管理单元（MMU）。MMU会根据当前CR3寄存器中存储的页目录表地址进行地址转换，将虚拟地址转换为物理地址，并完成内存的访问\n\n## IO通信\n\n```c\n//DriverMain.cpp\n#include <ntifs.h>\n#define _DEVICE_NAME L\"\\\\device\\\\pzk\"\n#define _SYM_NAME L\"\\\\??\\\\pzk\"\n//设备\nNTSTATUS DefCreate(\n\t_In_ struct _DEVICE_OBJECT* DeviceObject,\n\t_Inout_ struct _IRP* Irp\n)\n{\n\tDbgPrintEx(77, 0, \"DefCreate\\r\\n\");\n\tIoCompleteRequest(Irp, 0);\n\treturn STATUS_SUCCESS;\n}\n\nNTSTATUS DefDelete(\n\t_In_ struct _DEVICE_OBJECT* DeviceObject,\n\t_Inout_ struct _IRP* Irp\n)\n{\n\tDbgPrintEx(77, 0, \"DefDelete\\r\\n\");\n\tIoCompleteRequest(Irp, 0);\n\treturn STATUS_SUCCESS;\n}\n\nNTSTATUS DefControl(\n\t_In_ struct _DEVICE_OBJECT* DeviceObject,\n\t_Inout_ struct _IRP* Irp\n)\n{\n\tDbgPrintEx(77, 0, \"DefControl\\r\\n\");\n\tIoCompleteRequest(Irp, 0);\n\treturn STATUS_SUCCESS;\n}\n\nVOID DriverUnload(PDRIVER_OBJECT pDriver)\n{\n\tif (pDriver->DeviceObject)\n\t{\n\t\tUNICODE_STRING UnSymeName = { 0 };\n\t\tRtlInitUnicodeString(&UnSymeName, _SYM_NAME);\n\t\tIoDeleteSymbolicLink(&UnSymeName);\n\t\tIoDeleteDevice(pDriver->DeviceObject);\n\t}\n}\n\nNTSTATUS DriverEntry(PDRIVER_OBJECT pDriver, PUNICODE_STRING pReg)\n{\n\tpDriver->DriverUnload = DriverUnload;\n\tDbgPrint(\"hello driver\");\n\tUNICODE_STRING UnDeviceName = { 0 };\n\tRtlInitUnicodeString(&UnDeviceName, _DEVICE_NAME);\n\tUNICODE_STRING UnSymeName = { 0 };\n\tRtlInitUnicodeString(&UnSymeName, _SYM_NAME);\n\tPDEVICE_OBJECT pDevice = NULL;\n\t//创建设备\n\tNTSTATUS st = IoCreateDevice(pDriver, 0, &UnDeviceName, FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN, FALSE, &pDevice);\n\tif(!NT_SUCCESS(st))\n\t{\n\t\treturn STATUS_UNSUCCESSFUL;\n\t}\n\t//创建符号链接\n\tst = IoCreateSymbolicLink(&UnSymeName, &UnDeviceName);\n\tif (!NT_SUCCESS(st))\n\t{\n\t\tIoDeleteDevice(pDevice);\n\t\treturn STATUS_UNSUCCESSFUL;\n\t}\n\t//设置设备标志,去除初始化表\n\tpDevice->Flags &= ~DO_DEVICE_INITIALIZING;\n\t//使用什么内存\n\tpDevice->Flags |= DO_BUFFERED_IO;\n\n\tpDriver->MajorFunction[IRP_MJ_CREATE] = DefCreate;\n\tpDriver->MajorFunction[IRP_MJ_CLOSE] = DefDelete;\n\tpDriver->MajorFunction[IRP_MJ_DEVICE_CONTROL] = DefControl;\n\n\treturn STATUS_SUCCESS;\n}\n//io通信R3.cpp\n#include <Windows.h>\n#include <iostream>\n#define _SYM_NAME \"\\\\\\\\.\\\\pzk\"\n\nint main()\n{\n    HANDLE hDevice = CreateFileA(_SYM_NAME,GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,NULL);\n    if (!hDevice)\n    {\n        printf(\"打开设备失败%d\\r\\n\", GetLastError());\n        system(\"pause\");\n    }\n    else\n    {\n        printf(\"打开设备成功\\r\\n\");\n        ULONG retLen = 0;\n        BOOL isSuccess = DeviceIoControl(hDevice, 0, NULL, 4, NULL, 4, &retLen, 0);\n        if (isSuccess)\n        {\n            printf(\"success\\r\\n\");\n        }\n    }\n    system(\"pause\");\n}\n\n\n```\n\n\n\n","slug":"驱动开发","published":1,"updated":"2024-10-02T07:17:14.277Z","layout":"post","photos":[],"link":"","_id":"cm1roa13r001mugie3llxd7bt","content":"<p>记载一些驱动开发过程中学习到的东西<span id=\"more\"></span></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>win10虚拟机安装debugView和DriverMonitor,</p>\n<p>本机VS安装WDK,</p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS</span><br><span class=\"line\"><span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ PDRIVER_OBJECT DriverObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;hello driver&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//regCallBack();</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<p>在DebugView先connect local连接虚拟机,然后capture kernel</p>\n<p>在DriverMonitor加载启动驱动,如果遇到签名验证失败问题,按住shift并点击重启按钮,进入疑难解答-&gt;高级选项-&gt;启动设置-&gt;禁用驱动签名</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>MDL是内存描述符列表（Memory Descriptor List）的缩写，它主要用于关联虚拟地址和物理地址，类似于页表，但比页表简单。MDL在内存中的作用很大，它用于驱动的数据传输和缓冲管理，以及页错误等场景。此外，MDL还用于跨进程访问用户空间。</p>\n<p>CR3寄存器是一种控制寄存器，用于存储页目录表的物理地址。在x86架构的操作系统中，分页机制被用来将虚拟地址映射到物理地址。为了实现这种映射，需要使用页表和页目录表来管理地址转换。CR3寄存器存储了页目录表的物理地址，通过改变CR3寄存器的值，可以实现不同的虚拟地址空间之间的切换。当处理器执行访问内存的指令时，它会将虚拟地址发送给内存管理单元（MMU）。MMU会根据当前CR3寄存器中存储的页目录表地址进行地址转换，将虚拟地址转换为物理地址，并完成内存的访问</p>\n<h2 id=\"IO通信\"><a href=\"#IO通信\" class=\"headerlink\" title=\"IO通信\"></a>IO通信</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DriverMain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _DEVICE_NAME <span class=\"string\">L&quot;\\\\device\\\\pzk&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SYM_NAME <span class=\"string\">L&quot;\\\\??\\\\pzk&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//设备</span></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DefCreate</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ <span class=\"keyword\">struct</span> _DEVICE_OBJECT* DeviceObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_Inout_ <span class=\"keyword\">struct</span> _IRP* Irp</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrintEx(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;DefCreate\\r\\n&quot;</span>);</span><br><span class=\"line\">\tIoCompleteRequest(Irp, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DefDelete</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ <span class=\"keyword\">struct</span> _DEVICE_OBJECT* DeviceObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_Inout_ <span class=\"keyword\">struct</span> _IRP* Irp</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrintEx(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;DefDelete\\r\\n&quot;</span>);</span><br><span class=\"line\">\tIoCompleteRequest(Irp, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DefControl</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ <span class=\"keyword\">struct</span> _DEVICE_OBJECT* DeviceObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_Inout_ <span class=\"keyword\">struct</span> _IRP* Irp</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrintEx(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;DefControl\\r\\n&quot;</span>);</span><br><span class=\"line\">\tIoCompleteRequest(Irp, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pDriver-&gt;DeviceObject)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tUNICODE_STRING UnSymeName = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tRtlInitUnicodeString(&amp;UnSymeName, _SYM_NAME);</span><br><span class=\"line\">\t\tIoDeleteSymbolicLink(&amp;UnSymeName);</span><br><span class=\"line\">\t\tIoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pReg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpDriver-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;hello driver&quot;</span>);</span><br><span class=\"line\">\tUNICODE_STRING UnDeviceName = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;UnDeviceName, _DEVICE_NAME);</span><br><span class=\"line\">\tUNICODE_STRING UnSymeName = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;UnSymeName, _SYM_NAME);</span><br><span class=\"line\">\tPDEVICE_OBJECT pDevice = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//创建设备</span></span><br><span class=\"line\">\tNTSTATUS st = IoCreateDevice(pDriver, <span class=\"number\">0</span>, &amp;UnDeviceName, FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN, FALSE, &amp;pDevice);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!NT_SUCCESS(st))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> STATUS_UNSUCCESSFUL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建符号链接</span></span><br><span class=\"line\">\tst = IoCreateSymbolicLink(&amp;UnSymeName, &amp;UnDeviceName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!NT_SUCCESS(st))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tIoDeleteDevice(pDevice);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> STATUS_UNSUCCESSFUL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置设备标志,去除初始化表</span></span><br><span class=\"line\">\tpDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;</span><br><span class=\"line\">\t<span class=\"comment\">//使用什么内存</span></span><br><span class=\"line\">\tpDevice-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpDriver-&gt;MajorFunction[IRP_MJ_CREATE] = DefCreate;</span><br><span class=\"line\">\tpDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = DefDelete;</span><br><span class=\"line\">\tpDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = DefControl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//io通信R3.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SYM_NAME <span class=\"string\">&quot;\\\\\\\\.\\\\pzk&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hDevice = CreateFileA(_SYM_NAME,GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class=\"literal\">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hDevice)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;打开设备失败%d\\r\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;打开设备成功\\r\\n&quot;</span>);</span><br><span class=\"line\">        ULONG retLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">        BOOL isSuccess = DeviceIoControl(hDevice, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">4</span>, &amp;retLen, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSuccess)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>记载一些驱动开发过程中学习到的东西","more":"</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>win10虚拟机安装debugView和DriverMonitor,</p>\n<p>本机VS安装WDK,</p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS</span><br><span class=\"line\"><span class=\"title function_\">DriverEntry</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ PDRIVER_OBJECT DriverObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ PUNICODE_STRING RegistryPath</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;hello driver&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//regCallBack();</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<p>在DebugView先connect local连接虚拟机,然后capture kernel</p>\n<p>在DriverMonitor加载启动驱动,如果遇到签名验证失败问题,按住shift并点击重启按钮,进入疑难解答-&gt;高级选项-&gt;启动设置-&gt;禁用驱动签名</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>MDL是内存描述符列表（Memory Descriptor List）的缩写，它主要用于关联虚拟地址和物理地址，类似于页表，但比页表简单。MDL在内存中的作用很大，它用于驱动的数据传输和缓冲管理，以及页错误等场景。此外，MDL还用于跨进程访问用户空间。</p>\n<p>CR3寄存器是一种控制寄存器，用于存储页目录表的物理地址。在x86架构的操作系统中，分页机制被用来将虚拟地址映射到物理地址。为了实现这种映射，需要使用页表和页目录表来管理地址转换。CR3寄存器存储了页目录表的物理地址，通过改变CR3寄存器的值，可以实现不同的虚拟地址空间之间的切换。当处理器执行访问内存的指令时，它会将虚拟地址发送给内存管理单元（MMU）。MMU会根据当前CR3寄存器中存储的页目录表地址进行地址转换，将虚拟地址转换为物理地址，并完成内存的访问</p>\n<h2 id=\"IO通信\"><a href=\"#IO通信\" class=\"headerlink\" title=\"IO通信\"></a>IO通信</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DriverMain.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _DEVICE_NAME <span class=\"string\">L&quot;\\\\device\\\\pzk&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SYM_NAME <span class=\"string\">L&quot;\\\\??\\\\pzk&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//设备</span></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DefCreate</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ <span class=\"keyword\">struct</span> _DEVICE_OBJECT* DeviceObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_Inout_ <span class=\"keyword\">struct</span> _IRP* Irp</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrintEx(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;DefCreate\\r\\n&quot;</span>);</span><br><span class=\"line\">\tIoCompleteRequest(Irp, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DefDelete</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ <span class=\"keyword\">struct</span> _DEVICE_OBJECT* DeviceObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_Inout_ <span class=\"keyword\">struct</span> _IRP* Irp</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrintEx(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;DefDelete\\r\\n&quot;</span>);</span><br><span class=\"line\">\tIoCompleteRequest(Irp, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DefControl</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t_In_ <span class=\"keyword\">struct</span> _DEVICE_OBJECT* DeviceObject,</span></span><br><span class=\"line\"><span class=\"params\">\t_Inout_ <span class=\"keyword\">struct</span> _IRP* Irp</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDbgPrintEx(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;DefControl\\r\\n&quot;</span>);</span><br><span class=\"line\">\tIoCompleteRequest(Irp, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">DriverUnload</span><span class=\"params\">(PDRIVER_OBJECT pDriver)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pDriver-&gt;DeviceObject)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tUNICODE_STRING UnSymeName = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tRtlInitUnicodeString(&amp;UnSymeName, _SYM_NAME);</span><br><span class=\"line\">\t\tIoDeleteSymbolicLink(&amp;UnSymeName);</span><br><span class=\"line\">\t\tIoDeleteDevice(pDriver-&gt;DeviceObject);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDriver, PUNICODE_STRING pReg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpDriver-&gt;DriverUnload = DriverUnload;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;hello driver&quot;</span>);</span><br><span class=\"line\">\tUNICODE_STRING UnDeviceName = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;UnDeviceName, _DEVICE_NAME);</span><br><span class=\"line\">\tUNICODE_STRING UnSymeName = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;UnSymeName, _SYM_NAME);</span><br><span class=\"line\">\tPDEVICE_OBJECT pDevice = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//创建设备</span></span><br><span class=\"line\">\tNTSTATUS st = IoCreateDevice(pDriver, <span class=\"number\">0</span>, &amp;UnDeviceName, FILE_DEVICE_UNKNOWN,FILE_DEVICE_SECURE_OPEN, FALSE, &amp;pDevice);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!NT_SUCCESS(st))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> STATUS_UNSUCCESSFUL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建符号链接</span></span><br><span class=\"line\">\tst = IoCreateSymbolicLink(&amp;UnSymeName, &amp;UnDeviceName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!NT_SUCCESS(st))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tIoDeleteDevice(pDevice);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> STATUS_UNSUCCESSFUL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置设备标志,去除初始化表</span></span><br><span class=\"line\">\tpDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;</span><br><span class=\"line\">\t<span class=\"comment\">//使用什么内存</span></span><br><span class=\"line\">\tpDevice-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpDriver-&gt;MajorFunction[IRP_MJ_CREATE] = DefCreate;</span><br><span class=\"line\">\tpDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = DefDelete;</span><br><span class=\"line\">\tpDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = DefControl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//io通信R3.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SYM_NAME <span class=\"string\">&quot;\\\\\\\\.\\\\pzk&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hDevice = CreateFileA(_SYM_NAME,GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class=\"literal\">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hDevice)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;打开设备失败%d\\r\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;打开设备成功\\r\\n&quot;</span>);</span><br><span class=\"line\">        ULONG retLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">        BOOL isSuccess = DeviceIoControl(hDevice, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">4</span>, &amp;retLen, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSuccess)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"扫雷辅助制作","date":"2024-01-26T16:00:00.000Z","sticky":100,"cover":"https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png","thumbnail":"https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png","pic":null,"comments":0,"toc":true,"expire":true,"only":["home","category","tag"],"typora-copy-images-to":"upload","_content":"\n最近对游戏安全比较感兴趣,想往这方面深造,于是便开始看战队里在腾讯游戏安全工作的大佬的博客,以便熟悉一下大佬的学习思路,发现他会从扫雷这种简单的游戏外挂开始着手学习<!-- more -->,我也感兴趣的进行了一次扫雷辅助的实现\n\n## 寻找地图首地址\n\n容易想到的是,扫雷游戏在代码中肯定是要有对雷和非雷的数字型描述,所以用CE不断翻开雷块应该可以轻松找到地图地址,但是为了脱离对CE的依赖并且提高自己的游戏代码的审计能力,还是决定麻烦点用IDA找到地图首地址\n\n打开IDA,发现iDa没有识别出winmain入口\n\n![image-20240322192117779](https://s2.loli.net/2024/03/25/ejyPnhRvYXc1wEO.png)\n\n于是开始从导入表中找是否有关键函数调用,找到了一个rand(),联想到rand函数可以随机化雷的x,y坐标,应该有点用,两轮交叉引用找到关键播种函数\n\n![image-20240322192432870](https://s2.loli.net/2024/03/25/tQs7c51CjGyLrPX.png)\n\n这里看到利用byte_1005340数组和宽高进行寻址赋值,貌似是地图首地址,下断点IDA动调一手,找到0x1005340处内存地址\n\n![image-20240322192721725](https://s2.loli.net/2024/03/25/74juUgMqSYxkaK5.png)\n\n点两个雷块确认这个是地图首地址,并且确认了整型数对应的雷块类型\n\n```\n0xF:  没有雷\n0x8F: 雷\n0x8a: 是地雷且格子被翻开\n0x40: 格子被翻开且周围都没有雷\n0x4X: 格子被翻开且周围有X个地雷\n```\n\n既然确认了雷块地址和整型数含义,我们就可以画出对应的地图实现透视\n\n## 扫雷透视辅助代码实现\n\n这里用MFC写了一个窗口,利用按钮的槽函数实现透视\n\n具体实现过程描述:spy++ 查看窗口类名,标题->GetWindowHandle获取窗口句柄->GetWindowThreadProcessId获取进程id->OpenProcess打开进程->ReadProcessMemory访问并读取内存->SetWindowText对edit control控件进行地图描绘\n\n```c++\nvoid CwinMine2Dlg::OnBnClickedgetmap()\n{\n\t\t//spy++ 查看窗口类名,标题\n\t\tHWND hwnd = GetWindowHandle(\"扫雷\", \"扫雷\");\n\t\tif (hwnd)\n\t\t{\n\t\t\tDWORD pid;\n\t\t\tGetWindowThreadProcessId(hwnd, &pid);\n\t\t\tHANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, false, pid);\n\t\t\tLPCVOID mapBaseAddr = (LPCVOID)0x1005340;\n\t\t\tLPCVOID xAddr = (LPCVOID)0x1005334;\n\t\t\tLPCVOID yAddr = (LPCVOID)0x1005338;\n\t\t\tReadProcessMemory(handle, mapBaseAddr, (LPVOID)mapBuffer, sizeof(mapBuffer), NULL);\n\t\t\tReadProcessMemory(handle, xAddr, &X, sizeof(X), NULL);\n\t\t\tReadProcessMemory(handle, yAddr, &Y, sizeof(Y), NULL);\n\t\t\tm_data.Empty();\n\t\t\tPrintMap(mapBuffer, X, Y, m_data);\n\t\t\tmmap.SetWindowText(m_data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMessageBox(TEXT(\"can't find window\"));\n\n\t\t}\n}\n//这里对FindWindowA进行了简单的封装\nHWND GetWindowHandle(std::string className, std::string windowName)\n{\n\tHWND hwnd = FindWindowA(className.c_str(), windowName.c_str());\n\treturn hwnd;\n}\nvoid PrintMap(byte* mapBuffer, int X, int Y,CString& m_data)\n{\n\tCString tmp = TEXT(\"\");\n\tfor (int i = 1; i <= Y; i++)\n\t{\n\t\tfor (int j = 1; j <= X; j++)\n\t\t{\n\t\t\tif ((*(mapBuffer + i * 32 + j) & 0x80) != 0)\n\t\t\t{\n\t\t\t\ttmp.Format(TEXT(\"1\"));//1代表雷\n\t\t\t}\n\t\t\telse\n\t\t\t\ttmp.Format(TEXT(\"0\"));//0代表非雷\n\t\t\tm_data += tmp;\n\t\t}\n\t\tm_data += TEXT(\"\\r\\n\");//一定要/r/n才能换行\n\t\tprintf(\"\\n\");\n\t}\n}\n```\n\n实现效果图:\n\n![image-20240322194907271](https://s2.loli.net/2024/03/25/Oth8mNQcSlrwko6.png)\n\n光有透视可不行,进一步通过模拟鼠标点击实现一键扫雷才是关键\n\n##  一键扫雷辅助代码实现\n\n具体实现过程描述:spy++ 查看窗口类名,标题->GetWindowHandle获取窗口句柄->MAKELPARAM对鼠标坐标x,y进行封装->PostMessage向窗口传入WM_LBUTTONDOWN和WM_LBUTTONUP的消息\n\n坐标x,y可以用spy++来过滤日志消息对WM_LBUTTONDOWN和WM_LBUTTONUP落点进行粗略观察也可以进行ida代码分析得出\n\n![image-20240322203634988](https://s2.loli.net/2024/03/25/gGR4y3FImcMvEnq.png)\n\n这里应该是通过地图的宽高确定窗口的右边缘坐标和下边缘坐标,所以16应该是雷块间的间隔,24,67应该是第一个雷块的右边缘坐标和下边缘坐标\n\n这里对PostMessage以及MAKELPARAM函数做个简单的记录\n\n`PostMessage` 是 MFC 中的一个函数，用于向指定的窗口发送消息。让我详细介绍一下这个函数：\n\n1. **功能**：\n\n\t- `PostMessage` 函数将一个消息放入与创建窗口的线程相关联的消息队列中，并立即返回，不会阻塞当前线程。这使得它适用于异步消息传递。\n\n2. **参数**：\n\n\t- `hwnd`: 目标窗口的句柄。这是要接收消息的窗口。\n\t- `msg`: 要发送的消息类型，例如 `WM_USER` 或自定义消息。\n\t- `wParam` 和 `lParam`: 32 位的参数，用于传递额外的消息数据。这些参数的具体含义取决于消息类型。\n\n\t\n\n第四个参数是 `lParam`，它是一个 32 位的整数值，用于传递额外的消息参数。在 `PostMessage` 函数中，我们通常使用它来传递鼠标点击的坐标。\n\n具体来说，对于鼠标消息，`lParam` 的高 16 位表示鼠标的 Y 坐标，低 16 位表示鼠标的 X 坐标。这样，我们可以将 X 和 Y 坐标合并到一个 32 位整数中，以便在消息处理函数中解析。\n\n```c\nvoid CwinMine2Dlg::OnBnClickedsaolei()\n{\n\tHWND hwnd = GetWindowHandle(\"扫雷\", \"扫雷\");\n\tif (hwnd)\n\t{\n\t\tfor (int i = 1; i <= Y; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= X; j++)\n\t\t\t{\n\t\t\t\tint x = Firstx + Xgap * (j - 1);\n\t\t\t\tint y = Firsty + Ygap * (i - 1);\n\t\t\t\tLPARAM lparam = MAKELPARAM(x, y);\n\t\t\t\tif ((*(mapBuffer + i * 32 + j) & 0x80) == 0)\n\t\t\t\t{\n\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONDOWN, 0 , lparam);\n\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONUP, 0, lparam);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tMessageBox(TEXT(\"can't find window\"));\n\t}\n}\n\n```\n\n实现效果图:\n\n![image-20240322195002615](https://s2.loli.net/2024/03/25/ZlPVMbyE7OWsQoh.png)\n\n## dll注入调用call实现一键扫雷\n\n通过简单的猜想可以知道,代码里肯定是会有一个函数去处理鼠标点击坐标进行判断结果的,所以可以去追溯查找一下鼠标点击坐标的引用,之前通过rand函数交叉引用到的函数继续溯源找到主要程序入口点位置\n\n继续通过交叉引用直出现到MFC程序轮廓代码,如下图\n\n![image-20240322210905951](https://s2.loli.net/2024/03/25/LBTk3RxvFI8NXSf.png)\n\n通过lpfnWndProc名字我们大概可以分析出sub_1001BC9函数应该是处理while(1)循环的函数,进去一探究竟\n\n![image-20240322211222112](https://s2.loli.net/2024/03/25/Nc5e6FQqpCmDhLS.png)\n\n在这块区域我们可以看到v4的高16位和低16位进行一些处理得到v12,v13,并且if循环里dword_1005334和dword_1005338我们之前分析得到这是宽和高,所以v12,v13应该就是处理过的x,y坐标,v4是原来鼠标点击的xy坐标\n\n通过调试验证猜想成功\n\n![image-20240322211828927](https://s2.loli.net/2024/03/25/jCYL4rF17wBWhgl.png)\n\n对这两个变量下读写断点,动调找到可能的call指令\n\n![image-20240325152954080](https://s2.loli.net/2024/03/25/neGv6WISF5qOrkg.png)\n\n![image-20240325191620005](https://s2.loli.net/2024/03/25/PuU5i6ZeWO8LJgQ.png)\n\n动调发现分别是在sub_1002646和sub_1003512处发生雷块按下和抬起的动画,交叉引用找到调用他们的母函数,分别是在0x10031D4,0x10037E1处,利用汇编注入工具测试验证猜测\n\n![image-20240325191951679](https://s2.loli.net/2024/03/25/Iv9del4NSYu5V2P.png)\n\n验证猜测成功后开始写注入代码\n\nMFC辅助程序中添加控件和槽函数以及注入函数模版\n\n```c\n//槽函数\n\nvoid CwinMine2Dlg::OnBnClickedZhuru()\n{\n\tDWORD ProcessID = ProcessFind(_T(\"saolei.exe\"));\n\tWCHAR WorkPath[MAX_PATH];                        //用于存放获取路径的信息    \n\n\tGetModuleFileName(NULL, WorkPath, MAX_PATH);\n\tCString DllPath = WorkPath;\n\tint pos = DllPath.ReverseFind('\\\\');               // 查找倒数最后一个‘\\\\’符号\n\tDllPath = DllPath.Left(pos + 1);\n\tDllPath += _T(\"first.dll\");\n\tbool IsInjected = InjectDll(ProcessID, DllPath);\n\tif (IsInjected)\n\t{\n\t\tMessageBox(_T(\"注入成功!\"));\n\t}\n\telse\n\t{\n\t\tMessageBox(_T(\"注入失败!\"));\n\t}\n\t// TODO: 在此添加控件通知处理程序代码\n}\n\n//solve.h\n\nBOOL InjectDll(DWORD dwPID, LPCTSTR szDllPath)\n{\n\tHANDLE hProcess = NULL, hThread = NULL;\n\tHMODULE hMod = NULL;\n\tLPVOID pRemoteBuf = NULL;\n\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);\n\tLPTHREAD_START_ROUTINE pThreadProc;\n\n\t// #1. 使用dwPID获取目标进程（notepad.exe）的HANDLE\n\tif (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))\n\t{\n\t\t_tprintf(L\"OpenProcess(%d) failed!!! [%d]\\n\", dwPID, GetLastError());\n\t\treturn FALSE;\n\t}\n\n\t// #2. 将szDllName大小的内存分配给目标进程（notepad.exe）内存。\n\tpRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);\n\n\t// #3. 在分配的内存中写入myhack.dll路径（\"c:\\\\myhack.dll\"）。\n\tWriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);\n\n\t// #4. 获取LoadLibraryA() API地址。\n\thMod = GetModuleHandle(L\"kernel32.dll\");\n\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, \"LoadLibraryW\");\n\n\t// #5. 在notepad.exe进程中运行线程\n\thThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);\n\tWaitForSingleObject(hThread, INFINITE);\n\n\tCloseHandle(hThread);\n\tCloseHandle(hProcess);\n\n\treturn TRUE;\n}\nDWORD ProcessFind(LPCTSTR Exename)\n{\n\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n\tif (!hProcess)\n\t{\n\t\treturn FALSE;\n\t}\n\tPROCESSENTRY32 info;\n\tinfo.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hProcess, &info))\n\t{\n\t\treturn FALSE;\n\t}\n\twhile (true) \n\t{\n\t\tif (_tcscmp(info.szExeFile, Exename) == 0)\n\t\t{\n\t\t\treturn info.th32ProcessID;\n\t\t}\n\t\tif (!Process32Next(hProcess, &info))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}\n\n```\n\ndll代码\n\n```c\n//dllmain.cpp\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include \"windows.h\"\n#include <iostream>\n#include <fstream>\n#include \"solve.h\"\nusing namespace std;\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH: {\n        Saolei();\n    }\n    }\n    return TRUE;\n}\n\n//Saolei.cpp\n\n#include \"solve.h\"\n#include \"pch.h\"\nvoid Saolei()\n{\n\tLPCVOID mapBaseAddr = (LPCVOID)0x1005340;\n\tLPCVOID xAddr = (LPCVOID)0x1005334;\n\tLPCVOID yAddr = (LPCVOID)0x1005338;\n\tint tempx = 0, tempy = 0;\n\tint x = *(int*)xAddr;\n\tint y = *(int*)yAddr;\n\tfor (int i = 1; i <= y; i++)\n\t{\n\t\tfor (int j = 1; j <= x; j++)\n\t\t{\n\t\t\tif ((*((BYTE*)mapBaseAddr + i * 32 + j) & 0x80) == 0)\n\t\t\t{\n\t\t\t\ttempx = i;\n\t\t\t\ttempy = j;\n\t\t\t\t__asm\n\t\t\t\t{\n\t\t\t\t\tpush tempx\n\t\t\t\t\tpush tempy\n\t\t\t\t\tmov eax, 0x10031D4\n\t\t\t\t\tcall eax\n\t\t\t\t\tmov eax, 0x10037E1\n\t\t\t\t\tcall eax\n\t\t\t\t}\n\t\t\t\tif (3 == *(int*)0x1005160) {    // 判断当前游戏状态  0为正在游戏  2为扫雷失败  3为扫雷成功\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n效果图:\n\n![image-20240325195025840](https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png)","source":"_posts/扫雷辅助.md","raw":"---\ntitle: 扫雷辅助制作\ndate: 2024/1/27\ncategories: 实践\ntags:\n  - 逆向\n  - 破解\nsticky: 100\ncover: https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png\nthumbnail: https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png\npic:\ncomments: false\ntoc: true\nexpire: true\nonly:\n  - home\n  - category\n  - tag\ntypora-copy-images-to: upload\n---\n\n最近对游戏安全比较感兴趣,想往这方面深造,于是便开始看战队里在腾讯游戏安全工作的大佬的博客,以便熟悉一下大佬的学习思路,发现他会从扫雷这种简单的游戏外挂开始着手学习<!-- more -->,我也感兴趣的进行了一次扫雷辅助的实现\n\n## 寻找地图首地址\n\n容易想到的是,扫雷游戏在代码中肯定是要有对雷和非雷的数字型描述,所以用CE不断翻开雷块应该可以轻松找到地图地址,但是为了脱离对CE的依赖并且提高自己的游戏代码的审计能力,还是决定麻烦点用IDA找到地图首地址\n\n打开IDA,发现iDa没有识别出winmain入口\n\n![image-20240322192117779](https://s2.loli.net/2024/03/25/ejyPnhRvYXc1wEO.png)\n\n于是开始从导入表中找是否有关键函数调用,找到了一个rand(),联想到rand函数可以随机化雷的x,y坐标,应该有点用,两轮交叉引用找到关键播种函数\n\n![image-20240322192432870](https://s2.loli.net/2024/03/25/tQs7c51CjGyLrPX.png)\n\n这里看到利用byte_1005340数组和宽高进行寻址赋值,貌似是地图首地址,下断点IDA动调一手,找到0x1005340处内存地址\n\n![image-20240322192721725](https://s2.loli.net/2024/03/25/74juUgMqSYxkaK5.png)\n\n点两个雷块确认这个是地图首地址,并且确认了整型数对应的雷块类型\n\n```\n0xF:  没有雷\n0x8F: 雷\n0x8a: 是地雷且格子被翻开\n0x40: 格子被翻开且周围都没有雷\n0x4X: 格子被翻开且周围有X个地雷\n```\n\n既然确认了雷块地址和整型数含义,我们就可以画出对应的地图实现透视\n\n## 扫雷透视辅助代码实现\n\n这里用MFC写了一个窗口,利用按钮的槽函数实现透视\n\n具体实现过程描述:spy++ 查看窗口类名,标题->GetWindowHandle获取窗口句柄->GetWindowThreadProcessId获取进程id->OpenProcess打开进程->ReadProcessMemory访问并读取内存->SetWindowText对edit control控件进行地图描绘\n\n```c++\nvoid CwinMine2Dlg::OnBnClickedgetmap()\n{\n\t\t//spy++ 查看窗口类名,标题\n\t\tHWND hwnd = GetWindowHandle(\"扫雷\", \"扫雷\");\n\t\tif (hwnd)\n\t\t{\n\t\t\tDWORD pid;\n\t\t\tGetWindowThreadProcessId(hwnd, &pid);\n\t\t\tHANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, false, pid);\n\t\t\tLPCVOID mapBaseAddr = (LPCVOID)0x1005340;\n\t\t\tLPCVOID xAddr = (LPCVOID)0x1005334;\n\t\t\tLPCVOID yAddr = (LPCVOID)0x1005338;\n\t\t\tReadProcessMemory(handle, mapBaseAddr, (LPVOID)mapBuffer, sizeof(mapBuffer), NULL);\n\t\t\tReadProcessMemory(handle, xAddr, &X, sizeof(X), NULL);\n\t\t\tReadProcessMemory(handle, yAddr, &Y, sizeof(Y), NULL);\n\t\t\tm_data.Empty();\n\t\t\tPrintMap(mapBuffer, X, Y, m_data);\n\t\t\tmmap.SetWindowText(m_data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMessageBox(TEXT(\"can't find window\"));\n\n\t\t}\n}\n//这里对FindWindowA进行了简单的封装\nHWND GetWindowHandle(std::string className, std::string windowName)\n{\n\tHWND hwnd = FindWindowA(className.c_str(), windowName.c_str());\n\treturn hwnd;\n}\nvoid PrintMap(byte* mapBuffer, int X, int Y,CString& m_data)\n{\n\tCString tmp = TEXT(\"\");\n\tfor (int i = 1; i <= Y; i++)\n\t{\n\t\tfor (int j = 1; j <= X; j++)\n\t\t{\n\t\t\tif ((*(mapBuffer + i * 32 + j) & 0x80) != 0)\n\t\t\t{\n\t\t\t\ttmp.Format(TEXT(\"1\"));//1代表雷\n\t\t\t}\n\t\t\telse\n\t\t\t\ttmp.Format(TEXT(\"0\"));//0代表非雷\n\t\t\tm_data += tmp;\n\t\t}\n\t\tm_data += TEXT(\"\\r\\n\");//一定要/r/n才能换行\n\t\tprintf(\"\\n\");\n\t}\n}\n```\n\n实现效果图:\n\n![image-20240322194907271](https://s2.loli.net/2024/03/25/Oth8mNQcSlrwko6.png)\n\n光有透视可不行,进一步通过模拟鼠标点击实现一键扫雷才是关键\n\n##  一键扫雷辅助代码实现\n\n具体实现过程描述:spy++ 查看窗口类名,标题->GetWindowHandle获取窗口句柄->MAKELPARAM对鼠标坐标x,y进行封装->PostMessage向窗口传入WM_LBUTTONDOWN和WM_LBUTTONUP的消息\n\n坐标x,y可以用spy++来过滤日志消息对WM_LBUTTONDOWN和WM_LBUTTONUP落点进行粗略观察也可以进行ida代码分析得出\n\n![image-20240322203634988](https://s2.loli.net/2024/03/25/gGR4y3FImcMvEnq.png)\n\n这里应该是通过地图的宽高确定窗口的右边缘坐标和下边缘坐标,所以16应该是雷块间的间隔,24,67应该是第一个雷块的右边缘坐标和下边缘坐标\n\n这里对PostMessage以及MAKELPARAM函数做个简单的记录\n\n`PostMessage` 是 MFC 中的一个函数，用于向指定的窗口发送消息。让我详细介绍一下这个函数：\n\n1. **功能**：\n\n\t- `PostMessage` 函数将一个消息放入与创建窗口的线程相关联的消息队列中，并立即返回，不会阻塞当前线程。这使得它适用于异步消息传递。\n\n2. **参数**：\n\n\t- `hwnd`: 目标窗口的句柄。这是要接收消息的窗口。\n\t- `msg`: 要发送的消息类型，例如 `WM_USER` 或自定义消息。\n\t- `wParam` 和 `lParam`: 32 位的参数，用于传递额外的消息数据。这些参数的具体含义取决于消息类型。\n\n\t\n\n第四个参数是 `lParam`，它是一个 32 位的整数值，用于传递额外的消息参数。在 `PostMessage` 函数中，我们通常使用它来传递鼠标点击的坐标。\n\n具体来说，对于鼠标消息，`lParam` 的高 16 位表示鼠标的 Y 坐标，低 16 位表示鼠标的 X 坐标。这样，我们可以将 X 和 Y 坐标合并到一个 32 位整数中，以便在消息处理函数中解析。\n\n```c\nvoid CwinMine2Dlg::OnBnClickedsaolei()\n{\n\tHWND hwnd = GetWindowHandle(\"扫雷\", \"扫雷\");\n\tif (hwnd)\n\t{\n\t\tfor (int i = 1; i <= Y; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= X; j++)\n\t\t\t{\n\t\t\t\tint x = Firstx + Xgap * (j - 1);\n\t\t\t\tint y = Firsty + Ygap * (i - 1);\n\t\t\t\tLPARAM lparam = MAKELPARAM(x, y);\n\t\t\t\tif ((*(mapBuffer + i * 32 + j) & 0x80) == 0)\n\t\t\t\t{\n\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONDOWN, 0 , lparam);\n\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONUP, 0, lparam);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tMessageBox(TEXT(\"can't find window\"));\n\t}\n}\n\n```\n\n实现效果图:\n\n![image-20240322195002615](https://s2.loli.net/2024/03/25/ZlPVMbyE7OWsQoh.png)\n\n## dll注入调用call实现一键扫雷\n\n通过简单的猜想可以知道,代码里肯定是会有一个函数去处理鼠标点击坐标进行判断结果的,所以可以去追溯查找一下鼠标点击坐标的引用,之前通过rand函数交叉引用到的函数继续溯源找到主要程序入口点位置\n\n继续通过交叉引用直出现到MFC程序轮廓代码,如下图\n\n![image-20240322210905951](https://s2.loli.net/2024/03/25/LBTk3RxvFI8NXSf.png)\n\n通过lpfnWndProc名字我们大概可以分析出sub_1001BC9函数应该是处理while(1)循环的函数,进去一探究竟\n\n![image-20240322211222112](https://s2.loli.net/2024/03/25/Nc5e6FQqpCmDhLS.png)\n\n在这块区域我们可以看到v4的高16位和低16位进行一些处理得到v12,v13,并且if循环里dword_1005334和dword_1005338我们之前分析得到这是宽和高,所以v12,v13应该就是处理过的x,y坐标,v4是原来鼠标点击的xy坐标\n\n通过调试验证猜想成功\n\n![image-20240322211828927](https://s2.loli.net/2024/03/25/jCYL4rF17wBWhgl.png)\n\n对这两个变量下读写断点,动调找到可能的call指令\n\n![image-20240325152954080](https://s2.loli.net/2024/03/25/neGv6WISF5qOrkg.png)\n\n![image-20240325191620005](https://s2.loli.net/2024/03/25/PuU5i6ZeWO8LJgQ.png)\n\n动调发现分别是在sub_1002646和sub_1003512处发生雷块按下和抬起的动画,交叉引用找到调用他们的母函数,分别是在0x10031D4,0x10037E1处,利用汇编注入工具测试验证猜测\n\n![image-20240325191951679](https://s2.loli.net/2024/03/25/Iv9del4NSYu5V2P.png)\n\n验证猜测成功后开始写注入代码\n\nMFC辅助程序中添加控件和槽函数以及注入函数模版\n\n```c\n//槽函数\n\nvoid CwinMine2Dlg::OnBnClickedZhuru()\n{\n\tDWORD ProcessID = ProcessFind(_T(\"saolei.exe\"));\n\tWCHAR WorkPath[MAX_PATH];                        //用于存放获取路径的信息    \n\n\tGetModuleFileName(NULL, WorkPath, MAX_PATH);\n\tCString DllPath = WorkPath;\n\tint pos = DllPath.ReverseFind('\\\\');               // 查找倒数最后一个‘\\\\’符号\n\tDllPath = DllPath.Left(pos + 1);\n\tDllPath += _T(\"first.dll\");\n\tbool IsInjected = InjectDll(ProcessID, DllPath);\n\tif (IsInjected)\n\t{\n\t\tMessageBox(_T(\"注入成功!\"));\n\t}\n\telse\n\t{\n\t\tMessageBox(_T(\"注入失败!\"));\n\t}\n\t// TODO: 在此添加控件通知处理程序代码\n}\n\n//solve.h\n\nBOOL InjectDll(DWORD dwPID, LPCTSTR szDllPath)\n{\n\tHANDLE hProcess = NULL, hThread = NULL;\n\tHMODULE hMod = NULL;\n\tLPVOID pRemoteBuf = NULL;\n\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);\n\tLPTHREAD_START_ROUTINE pThreadProc;\n\n\t// #1. 使用dwPID获取目标进程（notepad.exe）的HANDLE\n\tif (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))\n\t{\n\t\t_tprintf(L\"OpenProcess(%d) failed!!! [%d]\\n\", dwPID, GetLastError());\n\t\treturn FALSE;\n\t}\n\n\t// #2. 将szDllName大小的内存分配给目标进程（notepad.exe）内存。\n\tpRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);\n\n\t// #3. 在分配的内存中写入myhack.dll路径（\"c:\\\\myhack.dll\"）。\n\tWriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);\n\n\t// #4. 获取LoadLibraryA() API地址。\n\thMod = GetModuleHandle(L\"kernel32.dll\");\n\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, \"LoadLibraryW\");\n\n\t// #5. 在notepad.exe进程中运行线程\n\thThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);\n\tWaitForSingleObject(hThread, INFINITE);\n\n\tCloseHandle(hThread);\n\tCloseHandle(hProcess);\n\n\treturn TRUE;\n}\nDWORD ProcessFind(LPCTSTR Exename)\n{\n\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n\tif (!hProcess)\n\t{\n\t\treturn FALSE;\n\t}\n\tPROCESSENTRY32 info;\n\tinfo.dwSize = sizeof(PROCESSENTRY32);\n\tif (!Process32First(hProcess, &info))\n\t{\n\t\treturn FALSE;\n\t}\n\twhile (true) \n\t{\n\t\tif (_tcscmp(info.szExeFile, Exename) == 0)\n\t\t{\n\t\t\treturn info.th32ProcessID;\n\t\t}\n\t\tif (!Process32Next(hProcess, &info))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}\n\n```\n\ndll代码\n\n```c\n//dllmain.cpp\n// dllmain.cpp : 定义 DLL 应用程序的入口点。\n#include \"pch.h\"\n#include \"windows.h\"\n#include <iostream>\n#include <fstream>\n#include \"solve.h\"\nusing namespace std;\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH: {\n        Saolei();\n    }\n    }\n    return TRUE;\n}\n\n//Saolei.cpp\n\n#include \"solve.h\"\n#include \"pch.h\"\nvoid Saolei()\n{\n\tLPCVOID mapBaseAddr = (LPCVOID)0x1005340;\n\tLPCVOID xAddr = (LPCVOID)0x1005334;\n\tLPCVOID yAddr = (LPCVOID)0x1005338;\n\tint tempx = 0, tempy = 0;\n\tint x = *(int*)xAddr;\n\tint y = *(int*)yAddr;\n\tfor (int i = 1; i <= y; i++)\n\t{\n\t\tfor (int j = 1; j <= x; j++)\n\t\t{\n\t\t\tif ((*((BYTE*)mapBaseAddr + i * 32 + j) & 0x80) == 0)\n\t\t\t{\n\t\t\t\ttempx = i;\n\t\t\t\ttempy = j;\n\t\t\t\t__asm\n\t\t\t\t{\n\t\t\t\t\tpush tempx\n\t\t\t\t\tpush tempy\n\t\t\t\t\tmov eax, 0x10031D4\n\t\t\t\t\tcall eax\n\t\t\t\t\tmov eax, 0x10037E1\n\t\t\t\t\tcall eax\n\t\t\t\t}\n\t\t\t\tif (3 == *(int*)0x1005160) {    // 判断当前游戏状态  0为正在游戏  2为扫雷失败  3为扫雷成功\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n效果图:\n\n![image-20240325195025840](https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png)","slug":"扫雷辅助","published":1,"updated":"2024-10-02T09:35:43.153Z","layout":"post","photos":[],"link":"","_id":"cm1roa13r001nugieaeeh7wks","content":"<p>最近对游戏安全比较感兴趣,想往这方面深造,于是便开始看战队里在腾讯游戏安全工作的大佬的博客,以便熟悉一下大佬的学习思路,发现他会从扫雷这种简单的游戏外挂开始着手学习<span id=\"more\"></span>,我也感兴趣的进行了一次扫雷辅助的实现</p>\n<h2 id=\"寻找地图首地址\"><a href=\"#寻找地图首地址\" class=\"headerlink\" title=\"寻找地图首地址\"></a>寻找地图首地址</h2><p>容易想到的是,扫雷游戏在代码中肯定是要有对雷和非雷的数字型描述,所以用CE不断翻开雷块应该可以轻松找到地图地址,但是为了脱离对CE的依赖并且提高自己的游戏代码的审计能力,还是决定麻烦点用IDA找到地图首地址</p>\n<p>打开IDA,发现iDa没有识别出winmain入口</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/ejyPnhRvYXc1wEO.png\" alt=\"image-20240322192117779\"></p>\n<p>于是开始从导入表中找是否有关键函数调用,找到了一个rand(),联想到rand函数可以随机化雷的x,y坐标,应该有点用,两轮交叉引用找到关键播种函数</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/tQs7c51CjGyLrPX.png\" alt=\"image-20240322192432870\"></p>\n<p>这里看到利用byte_1005340数组和宽高进行寻址赋值,貌似是地图首地址,下断点IDA动调一手,找到0x1005340处内存地址</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/74juUgMqSYxkaK5.png\" alt=\"image-20240322192721725\"></p>\n<p>点两个雷块确认这个是地图首地址,并且确认了整型数对应的雷块类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xF:  没有雷</span><br><span class=\"line\">0x8F: 雷</span><br><span class=\"line\">0x8a: 是地雷且格子被翻开</span><br><span class=\"line\">0x40: 格子被翻开且周围都没有雷</span><br><span class=\"line\">0x4X: 格子被翻开且周围有X个地雷</span><br></pre></td></tr></table></figure>\n\n<p>既然确认了雷块地址和整型数含义,我们就可以画出对应的地图实现透视</p>\n<h2 id=\"扫雷透视辅助代码实现\"><a href=\"#扫雷透视辅助代码实现\" class=\"headerlink\" title=\"扫雷透视辅助代码实现\"></a>扫雷透视辅助代码实现</h2><p>这里用MFC写了一个窗口,利用按钮的槽函数实现透视</p>\n<p>具体实现过程描述:spy++ 查看窗口类名,标题-&gt;GetWindowHandle获取窗口句柄-&gt;GetWindowThreadProcessId获取进程id-&gt;OpenProcess打开进程-&gt;ReadProcessMemory访问并读取内存-&gt;SetWindowText对edit control控件进行地图描绘</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CwinMine2Dlg::OnBnClickedgetmap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//spy++ 查看窗口类名,标题</span></span><br><span class=\"line\">\t\tHWND hwnd = <span class=\"built_in\">GetWindowHandle</span>(<span class=\"string\">&quot;扫雷&quot;</span>, <span class=\"string\">&quot;扫雷&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hwnd)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDWORD pid;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">GetWindowThreadProcessId</span>(hwnd, &amp;pid);</span><br><span class=\"line\">\t\t\tHANDLE handle = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class=\"literal\">false</span>, pid);</span><br><span class=\"line\">\t\t\tLPCVOID mapBaseAddr = (LPCVOID)<span class=\"number\">0x1005340</span>;</span><br><span class=\"line\">\t\t\tLPCVOID xAddr = (LPCVOID)<span class=\"number\">0x1005334</span>;</span><br><span class=\"line\">\t\t\tLPCVOID yAddr = (LPCVOID)<span class=\"number\">0x1005338</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ReadProcessMemory</span>(handle, mapBaseAddr, (LPVOID)mapBuffer, <span class=\"built_in\">sizeof</span>(mapBuffer), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ReadProcessMemory</span>(handle, xAddr, &amp;X, <span class=\"built_in\">sizeof</span>(X), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ReadProcessMemory</span>(handle, yAddr, &amp;Y, <span class=\"built_in\">sizeof</span>(Y), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\tm_data.<span class=\"built_in\">Empty</span>();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">PrintMap</span>(mapBuffer, X, Y, m_data);</span><br><span class=\"line\">\t\t\tmmap.<span class=\"built_in\">SetWindowText</span>(m_data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MessageBox</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;can&#x27;t find window&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里对FindWindowA进行了简单的封装</span></span><br><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">GetWindowHandle</span><span class=\"params\">(std::string className, std::string windowName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHWND hwnd = <span class=\"built_in\">FindWindowA</span>(className.<span class=\"built_in\">c_str</span>(), windowName.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hwnd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintMap</span><span class=\"params\">(byte* mapBuffer, <span class=\"type\">int</span> X, <span class=\"type\">int</span> Y,CString&amp; m_data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCString tmp = <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= Y; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= X; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((*(mapBuffer + i * <span class=\"number\">32</span> + j) &amp; <span class=\"number\">0x80</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttmp.<span class=\"built_in\">Format</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;1&quot;</span>));<span class=\"comment\">//1代表雷</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\ttmp.<span class=\"built_in\">Format</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;0&quot;</span>));<span class=\"comment\">//0代表非雷</span></span><br><span class=\"line\">\t\t\tm_data += tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm_data += <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;\\r\\n&quot;</span>);<span class=\"comment\">//一定要/r/n才能换行</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现效果图:</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/Oth8mNQcSlrwko6.png\" alt=\"image-20240322194907271\"></p>\n<p>光有透视可不行,进一步通过模拟鼠标点击实现一键扫雷才是关键</p>\n<h2 id=\"一键扫雷辅助代码实现\"><a href=\"#一键扫雷辅助代码实现\" class=\"headerlink\" title=\"一键扫雷辅助代码实现\"></a>一键扫雷辅助代码实现</h2><p>具体实现过程描述:spy++ 查看窗口类名,标题-&gt;GetWindowHandle获取窗口句柄-&gt;MAKELPARAM对鼠标坐标x,y进行封装-&gt;PostMessage向窗口传入WM_LBUTTONDOWN和WM_LBUTTONUP的消息</p>\n<p>坐标x,y可以用spy++来过滤日志消息对WM_LBUTTONDOWN和WM_LBUTTONUP落点进行粗略观察也可以进行ida代码分析得出</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/gGR4y3FImcMvEnq.png\" alt=\"image-20240322203634988\"></p>\n<p>这里应该是通过地图的宽高确定窗口的右边缘坐标和下边缘坐标,所以16应该是雷块间的间隔,24,67应该是第一个雷块的右边缘坐标和下边缘坐标</p>\n<p>这里对PostMessage以及MAKELPARAM函数做个简单的记录</p>\n<p><code>PostMessage</code> 是 MFC 中的一个函数，用于向指定的窗口发送消息。让我详细介绍一下这个函数：</p>\n<ol>\n<li><p><strong>功能</strong>：</p>\n<ul>\n<li><code>PostMessage</code> 函数将一个消息放入与创建窗口的线程相关联的消息队列中，并立即返回，不会阻塞当前线程。这使得它适用于异步消息传递。</li>\n</ul>\n</li>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><code>hwnd</code>: 目标窗口的句柄。这是要接收消息的窗口。</li>\n<li><code>msg</code>: 要发送的消息类型，例如 <code>WM_USER</code> 或自定义消息。</li>\n<li><code>wParam</code> 和 <code>lParam</code>: 32 位的参数，用于传递额外的消息数据。这些参数的具体含义取决于消息类型。</li>\n</ul>\n</li>\n</ol>\n<p>第四个参数是 <code>lParam</code>，它是一个 32 位的整数值，用于传递额外的消息参数。在 <code>PostMessage</code> 函数中，我们通常使用它来传递鼠标点击的坐标。</p>\n<p>具体来说，对于鼠标消息，<code>lParam</code> 的高 16 位表示鼠标的 Y 坐标，低 16 位表示鼠标的 X 坐标。这样，我们可以将 X 和 Y 坐标合并到一个 32 位整数中，以便在消息处理函数中解析。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CwinMine2Dlg::OnBnClickedsaolei</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHWND hwnd = GetWindowHandle(<span class=\"string\">&quot;扫雷&quot;</span>, <span class=\"string\">&quot;扫雷&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hwnd)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= Y; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= X; j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> x = Firstx + Xgap * (j - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> y = Firsty + Ygap * (i - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tLPARAM lparam = MAKELPARAM(x, y);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((*(mapBuffer + i * <span class=\"number\">32</span> + j) &amp; <span class=\"number\">0x80</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONDOWN, <span class=\"number\">0</span> , lparam);</span><br><span class=\"line\">\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONUP, <span class=\"number\">0</span>, lparam);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(TEXT(<span class=\"string\">&quot;can&#x27;t find window&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现效果图:</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/ZlPVMbyE7OWsQoh.png\" alt=\"image-20240322195002615\"></p>\n<h2 id=\"dll注入调用call实现一键扫雷\"><a href=\"#dll注入调用call实现一键扫雷\" class=\"headerlink\" title=\"dll注入调用call实现一键扫雷\"></a>dll注入调用call实现一键扫雷</h2><p>通过简单的猜想可以知道,代码里肯定是会有一个函数去处理鼠标点击坐标进行判断结果的,所以可以去追溯查找一下鼠标点击坐标的引用,之前通过rand函数交叉引用到的函数继续溯源找到主要程序入口点位置</p>\n<p>继续通过交叉引用直出现到MFC程序轮廓代码,如下图</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/LBTk3RxvFI8NXSf.png\" alt=\"image-20240322210905951\"></p>\n<p>通过lpfnWndProc名字我们大概可以分析出sub_1001BC9函数应该是处理while(1)循环的函数,进去一探究竟</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/Nc5e6FQqpCmDhLS.png\" alt=\"image-20240322211222112\"></p>\n<p>在这块区域我们可以看到v4的高16位和低16位进行一些处理得到v12,v13,并且if循环里dword_1005334和dword_1005338我们之前分析得到这是宽和高,所以v12,v13应该就是处理过的x,y坐标,v4是原来鼠标点击的xy坐标</p>\n<p>通过调试验证猜想成功</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/jCYL4rF17wBWhgl.png\" alt=\"image-20240322211828927\"></p>\n<p>对这两个变量下读写断点,动调找到可能的call指令</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/neGv6WISF5qOrkg.png\" alt=\"image-20240325152954080\"></p>\n<p><img src=\"https://s2.loli.net/2024/03/25/PuU5i6ZeWO8LJgQ.png\" alt=\"image-20240325191620005\"></p>\n<p>动调发现分别是在sub_1002646和sub_1003512处发生雷块按下和抬起的动画,交叉引用找到调用他们的母函数,分别是在0x10031D4,0x10037E1处,利用汇编注入工具测试验证猜测</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/Iv9del4NSYu5V2P.png\" alt=\"image-20240325191951679\"></p>\n<p>验证猜测成功后开始写注入代码</p>\n<p>MFC辅助程序中添加控件和槽函数以及注入函数模版</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//槽函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CwinMine2Dlg::OnBnClickedZhuru</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD ProcessID = ProcessFind(_T(<span class=\"string\">&quot;saolei.exe&quot;</span>));</span><br><span class=\"line\">\tWCHAR WorkPath[MAX_PATH];                        <span class=\"comment\">//用于存放获取路径的信息    </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tGetModuleFileName(<span class=\"literal\">NULL</span>, WorkPath, MAX_PATH);</span><br><span class=\"line\">\tCString DllPath = WorkPath;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pos = DllPath.ReverseFind(<span class=\"string\">&#x27;\\\\&#x27;</span>);               <span class=\"comment\">// 查找倒数最后一个‘\\\\’符号</span></span><br><span class=\"line\">\tDllPath = DllPath.Left(pos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tDllPath += _T(<span class=\"string\">&quot;first.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">bool</span> IsInjected = InjectDll(ProcessID, DllPath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IsInjected)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(_T(<span class=\"string\">&quot;注入成功!&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(_T(<span class=\"string\">&quot;注入失败!&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//solve.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>, hThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tHMODULE hMod = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID pRemoteBuf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(TCHAR);</span><br><span class=\"line\">\tLPTHREAD_START_ROUTINE pThreadProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #1. 使用dwPID获取目标进程（notepad.exe）的HANDLE</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_tprintf(<span class=\"string\">L&quot;OpenProcess(%d) failed!!! [%d]\\n&quot;</span>, dwPID, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #2. 将szDllName大小的内存分配给目标进程（notepad.exe）内存。</span></span><br><span class=\"line\">\tpRemoteBuf = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #3. 在分配的内存中写入myhack.dll路径（&quot;c:\\\\myhack.dll&quot;）。</span></span><br><span class=\"line\">\tWriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #4. 获取LoadLibraryA() API地址。</span></span><br><span class=\"line\">\thMod = GetModuleHandle(<span class=\"string\">L&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\">\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, <span class=\"string\">&quot;LoadLibraryW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #5. 在notepad.exe进程中运行线程</span></span><br><span class=\"line\">\thThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, pThreadProc, pRemoteBuf, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hThread);</span><br><span class=\"line\">\tCloseHandle(hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DWORD <span class=\"title function_\">ProcessFind</span><span class=\"params\">(LPCTSTR Exename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPROCESSENTRY32 info;</span><br><span class=\"line\">\tinfo.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!Process32First(hProcess, &amp;info))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_tcscmp(info.szExeFile, Exename) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> info.th32ProcessID;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Process32Next(hProcess, &amp;info))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dll代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">    LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH: &#123;</span><br><span class=\"line\">        Saolei();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Saolei.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Saolei</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLPCVOID mapBaseAddr = (LPCVOID)<span class=\"number\">0x1005340</span>;</span><br><span class=\"line\">\tLPCVOID xAddr = (LPCVOID)<span class=\"number\">0x1005334</span>;</span><br><span class=\"line\">\tLPCVOID yAddr = (LPCVOID)<span class=\"number\">0x1005338</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> tempx = <span class=\"number\">0</span>, tempy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = *(<span class=\"type\">int</span>*)xAddr;</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = *(<span class=\"type\">int</span>*)yAddr;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= y; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= x; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((*((BYTE*)mapBaseAddr + i * <span class=\"number\">32</span> + j) &amp; <span class=\"number\">0x80</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttempx = i;</span><br><span class=\"line\">\t\t\t\ttempy = j;</span><br><span class=\"line\">\t\t\t\t__asm</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tpush tempx</span><br><span class=\"line\">\t\t\t\t\tpush tempy</span><br><span class=\"line\">\t\t\t\t\tmov eax, <span class=\"number\">0x10031D4</span></span><br><span class=\"line\">\t\t\t\t\tcall eax</span><br><span class=\"line\">\t\t\t\t\tmov eax, <span class=\"number\">0x10037E1</span></span><br><span class=\"line\">\t\t\t\t\tcall eax</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"number\">3</span> == *(<span class=\"type\">int</span>*)<span class=\"number\">0x1005160</span>) &#123;    <span class=\"comment\">// 判断当前游戏状态  0为正在游戏  2为扫雷失败  3为扫雷成功</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果图:</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png\" alt=\"image-20240325195025840\"></p>\n","site":{"data":{}},"excerpt":"<p>最近对游戏安全比较感兴趣,想往这方面深造,于是便开始看战队里在腾讯游戏安全工作的大佬的博客,以便熟悉一下大佬的学习思路,发现他会从扫雷这种简单的游戏外挂开始着手学习","more":",我也感兴趣的进行了一次扫雷辅助的实现</p>\n<h2 id=\"寻找地图首地址\"><a href=\"#寻找地图首地址\" class=\"headerlink\" title=\"寻找地图首地址\"></a>寻找地图首地址</h2><p>容易想到的是,扫雷游戏在代码中肯定是要有对雷和非雷的数字型描述,所以用CE不断翻开雷块应该可以轻松找到地图地址,但是为了脱离对CE的依赖并且提高自己的游戏代码的审计能力,还是决定麻烦点用IDA找到地图首地址</p>\n<p>打开IDA,发现iDa没有识别出winmain入口</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/ejyPnhRvYXc1wEO.png\" alt=\"image-20240322192117779\"></p>\n<p>于是开始从导入表中找是否有关键函数调用,找到了一个rand(),联想到rand函数可以随机化雷的x,y坐标,应该有点用,两轮交叉引用找到关键播种函数</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/tQs7c51CjGyLrPX.png\" alt=\"image-20240322192432870\"></p>\n<p>这里看到利用byte_1005340数组和宽高进行寻址赋值,貌似是地图首地址,下断点IDA动调一手,找到0x1005340处内存地址</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/74juUgMqSYxkaK5.png\" alt=\"image-20240322192721725\"></p>\n<p>点两个雷块确认这个是地图首地址,并且确认了整型数对应的雷块类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xF:  没有雷</span><br><span class=\"line\">0x8F: 雷</span><br><span class=\"line\">0x8a: 是地雷且格子被翻开</span><br><span class=\"line\">0x40: 格子被翻开且周围都没有雷</span><br><span class=\"line\">0x4X: 格子被翻开且周围有X个地雷</span><br></pre></td></tr></table></figure>\n\n<p>既然确认了雷块地址和整型数含义,我们就可以画出对应的地图实现透视</p>\n<h2 id=\"扫雷透视辅助代码实现\"><a href=\"#扫雷透视辅助代码实现\" class=\"headerlink\" title=\"扫雷透视辅助代码实现\"></a>扫雷透视辅助代码实现</h2><p>这里用MFC写了一个窗口,利用按钮的槽函数实现透视</p>\n<p>具体实现过程描述:spy++ 查看窗口类名,标题-&gt;GetWindowHandle获取窗口句柄-&gt;GetWindowThreadProcessId获取进程id-&gt;OpenProcess打开进程-&gt;ReadProcessMemory访问并读取内存-&gt;SetWindowText对edit control控件进行地图描绘</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CwinMine2Dlg::OnBnClickedgetmap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//spy++ 查看窗口类名,标题</span></span><br><span class=\"line\">\t\tHWND hwnd = <span class=\"built_in\">GetWindowHandle</span>(<span class=\"string\">&quot;扫雷&quot;</span>, <span class=\"string\">&quot;扫雷&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hwnd)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDWORD pid;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">GetWindowThreadProcessId</span>(hwnd, &amp;pid);</span><br><span class=\"line\">\t\t\tHANDLE handle = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class=\"literal\">false</span>, pid);</span><br><span class=\"line\">\t\t\tLPCVOID mapBaseAddr = (LPCVOID)<span class=\"number\">0x1005340</span>;</span><br><span class=\"line\">\t\t\tLPCVOID xAddr = (LPCVOID)<span class=\"number\">0x1005334</span>;</span><br><span class=\"line\">\t\t\tLPCVOID yAddr = (LPCVOID)<span class=\"number\">0x1005338</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ReadProcessMemory</span>(handle, mapBaseAddr, (LPVOID)mapBuffer, <span class=\"built_in\">sizeof</span>(mapBuffer), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ReadProcessMemory</span>(handle, xAddr, &amp;X, <span class=\"built_in\">sizeof</span>(X), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ReadProcessMemory</span>(handle, yAddr, &amp;Y, <span class=\"built_in\">sizeof</span>(Y), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\tm_data.<span class=\"built_in\">Empty</span>();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">PrintMap</span>(mapBuffer, X, Y, m_data);</span><br><span class=\"line\">\t\t\tmmap.<span class=\"built_in\">SetWindowText</span>(m_data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MessageBox</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;can&#x27;t find window&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里对FindWindowA进行了简单的封装</span></span><br><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">GetWindowHandle</span><span class=\"params\">(std::string className, std::string windowName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHWND hwnd = <span class=\"built_in\">FindWindowA</span>(className.<span class=\"built_in\">c_str</span>(), windowName.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hwnd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintMap</span><span class=\"params\">(byte* mapBuffer, <span class=\"type\">int</span> X, <span class=\"type\">int</span> Y,CString&amp; m_data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCString tmp = <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= Y; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= X; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((*(mapBuffer + i * <span class=\"number\">32</span> + j) &amp; <span class=\"number\">0x80</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttmp.<span class=\"built_in\">Format</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;1&quot;</span>));<span class=\"comment\">//1代表雷</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\ttmp.<span class=\"built_in\">Format</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;0&quot;</span>));<span class=\"comment\">//0代表非雷</span></span><br><span class=\"line\">\t\t\tm_data += tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm_data += <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;\\r\\n&quot;</span>);<span class=\"comment\">//一定要/r/n才能换行</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现效果图:</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/Oth8mNQcSlrwko6.png\" alt=\"image-20240322194907271\"></p>\n<p>光有透视可不行,进一步通过模拟鼠标点击实现一键扫雷才是关键</p>\n<h2 id=\"一键扫雷辅助代码实现\"><a href=\"#一键扫雷辅助代码实现\" class=\"headerlink\" title=\"一键扫雷辅助代码实现\"></a>一键扫雷辅助代码实现</h2><p>具体实现过程描述:spy++ 查看窗口类名,标题-&gt;GetWindowHandle获取窗口句柄-&gt;MAKELPARAM对鼠标坐标x,y进行封装-&gt;PostMessage向窗口传入WM_LBUTTONDOWN和WM_LBUTTONUP的消息</p>\n<p>坐标x,y可以用spy++来过滤日志消息对WM_LBUTTONDOWN和WM_LBUTTONUP落点进行粗略观察也可以进行ida代码分析得出</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/gGR4y3FImcMvEnq.png\" alt=\"image-20240322203634988\"></p>\n<p>这里应该是通过地图的宽高确定窗口的右边缘坐标和下边缘坐标,所以16应该是雷块间的间隔,24,67应该是第一个雷块的右边缘坐标和下边缘坐标</p>\n<p>这里对PostMessage以及MAKELPARAM函数做个简单的记录</p>\n<p><code>PostMessage</code> 是 MFC 中的一个函数，用于向指定的窗口发送消息。让我详细介绍一下这个函数：</p>\n<ol>\n<li><p><strong>功能</strong>：</p>\n<ul>\n<li><code>PostMessage</code> 函数将一个消息放入与创建窗口的线程相关联的消息队列中，并立即返回，不会阻塞当前线程。这使得它适用于异步消息传递。</li>\n</ul>\n</li>\n<li><p><strong>参数</strong>：</p>\n<ul>\n<li><code>hwnd</code>: 目标窗口的句柄。这是要接收消息的窗口。</li>\n<li><code>msg</code>: 要发送的消息类型，例如 <code>WM_USER</code> 或自定义消息。</li>\n<li><code>wParam</code> 和 <code>lParam</code>: 32 位的参数，用于传递额外的消息数据。这些参数的具体含义取决于消息类型。</li>\n</ul>\n</li>\n</ol>\n<p>第四个参数是 <code>lParam</code>，它是一个 32 位的整数值，用于传递额外的消息参数。在 <code>PostMessage</code> 函数中，我们通常使用它来传递鼠标点击的坐标。</p>\n<p>具体来说，对于鼠标消息，<code>lParam</code> 的高 16 位表示鼠标的 Y 坐标，低 16 位表示鼠标的 X 坐标。这样，我们可以将 X 和 Y 坐标合并到一个 32 位整数中，以便在消息处理函数中解析。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CwinMine2Dlg::OnBnClickedsaolei</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHWND hwnd = GetWindowHandle(<span class=\"string\">&quot;扫雷&quot;</span>, <span class=\"string\">&quot;扫雷&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hwnd)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= Y; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= X; j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> x = Firstx + Xgap * (j - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> y = Firsty + Ygap * (i - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tLPARAM lparam = MAKELPARAM(x, y);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((*(mapBuffer + i * <span class=\"number\">32</span> + j) &amp; <span class=\"number\">0x80</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONDOWN, <span class=\"number\">0</span> , lparam);</span><br><span class=\"line\">\t\t\t\t\t::PostMessage(hwnd, WM_LBUTTONUP, <span class=\"number\">0</span>, lparam);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(TEXT(<span class=\"string\">&quot;can&#x27;t find window&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现效果图:</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/ZlPVMbyE7OWsQoh.png\" alt=\"image-20240322195002615\"></p>\n<h2 id=\"dll注入调用call实现一键扫雷\"><a href=\"#dll注入调用call实现一键扫雷\" class=\"headerlink\" title=\"dll注入调用call实现一键扫雷\"></a>dll注入调用call实现一键扫雷</h2><p>通过简单的猜想可以知道,代码里肯定是会有一个函数去处理鼠标点击坐标进行判断结果的,所以可以去追溯查找一下鼠标点击坐标的引用,之前通过rand函数交叉引用到的函数继续溯源找到主要程序入口点位置</p>\n<p>继续通过交叉引用直出现到MFC程序轮廓代码,如下图</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/LBTk3RxvFI8NXSf.png\" alt=\"image-20240322210905951\"></p>\n<p>通过lpfnWndProc名字我们大概可以分析出sub_1001BC9函数应该是处理while(1)循环的函数,进去一探究竟</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/Nc5e6FQqpCmDhLS.png\" alt=\"image-20240322211222112\"></p>\n<p>在这块区域我们可以看到v4的高16位和低16位进行一些处理得到v12,v13,并且if循环里dword_1005334和dword_1005338我们之前分析得到这是宽和高,所以v12,v13应该就是处理过的x,y坐标,v4是原来鼠标点击的xy坐标</p>\n<p>通过调试验证猜想成功</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/jCYL4rF17wBWhgl.png\" alt=\"image-20240322211828927\"></p>\n<p>对这两个变量下读写断点,动调找到可能的call指令</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/neGv6WISF5qOrkg.png\" alt=\"image-20240325152954080\"></p>\n<p><img src=\"https://s2.loli.net/2024/03/25/PuU5i6ZeWO8LJgQ.png\" alt=\"image-20240325191620005\"></p>\n<p>动调发现分别是在sub_1002646和sub_1003512处发生雷块按下和抬起的动画,交叉引用找到调用他们的母函数,分别是在0x10031D4,0x10037E1处,利用汇编注入工具测试验证猜测</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/Iv9del4NSYu5V2P.png\" alt=\"image-20240325191951679\"></p>\n<p>验证猜测成功后开始写注入代码</p>\n<p>MFC辅助程序中添加控件和槽函数以及注入函数模版</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//槽函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CwinMine2Dlg::OnBnClickedZhuru</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD ProcessID = ProcessFind(_T(<span class=\"string\">&quot;saolei.exe&quot;</span>));</span><br><span class=\"line\">\tWCHAR WorkPath[MAX_PATH];                        <span class=\"comment\">//用于存放获取路径的信息    </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tGetModuleFileName(<span class=\"literal\">NULL</span>, WorkPath, MAX_PATH);</span><br><span class=\"line\">\tCString DllPath = WorkPath;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pos = DllPath.ReverseFind(<span class=\"string\">&#x27;\\\\&#x27;</span>);               <span class=\"comment\">// 查找倒数最后一个‘\\\\’符号</span></span><br><span class=\"line\">\tDllPath = DllPath.Left(pos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tDllPath += _T(<span class=\"string\">&quot;first.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">bool</span> IsInjected = InjectDll(ProcessID, DllPath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IsInjected)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(_T(<span class=\"string\">&quot;注入成功!&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(_T(<span class=\"string\">&quot;注入失败!&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//solve.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>, hThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tHMODULE hMod = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID pRemoteBuf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(TCHAR);</span><br><span class=\"line\">\tLPTHREAD_START_ROUTINE pThreadProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #1. 使用dwPID获取目标进程（notepad.exe）的HANDLE</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_tprintf(<span class=\"string\">L&quot;OpenProcess(%d) failed!!! [%d]\\n&quot;</span>, dwPID, GetLastError());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #2. 将szDllName大小的内存分配给目标进程（notepad.exe）内存。</span></span><br><span class=\"line\">\tpRemoteBuf = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #3. 在分配的内存中写入myhack.dll路径（&quot;c:\\\\myhack.dll&quot;）。</span></span><br><span class=\"line\">\tWriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #4. 获取LoadLibraryA() API地址。</span></span><br><span class=\"line\">\thMod = GetModuleHandle(<span class=\"string\">L&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\">\tpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, <span class=\"string\">&quot;LoadLibraryW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// #5. 在notepad.exe进程中运行线程</span></span><br><span class=\"line\">\thThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, pThreadProc, pRemoteBuf, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hThread);</span><br><span class=\"line\">\tCloseHandle(hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DWORD <span class=\"title function_\">ProcessFind</span><span class=\"params\">(LPCTSTR Exename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPROCESSENTRY32 info;</span><br><span class=\"line\">\tinfo.dwSize = <span class=\"keyword\">sizeof</span>(PROCESSENTRY32);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!Process32First(hProcess, &amp;info))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_tcscmp(info.szExeFile, Exename) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> info.th32ProcessID;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Process32Next(hProcess, &amp;info))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dll代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dllmain.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HMODULE hModule,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD  ul_reason_for_call,</span></span><br><span class=\"line\"><span class=\"params\">    LPVOID lpReserved</span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH: &#123;</span><br><span class=\"line\">        Saolei();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Saolei.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;solve.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Saolei</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLPCVOID mapBaseAddr = (LPCVOID)<span class=\"number\">0x1005340</span>;</span><br><span class=\"line\">\tLPCVOID xAddr = (LPCVOID)<span class=\"number\">0x1005334</span>;</span><br><span class=\"line\">\tLPCVOID yAddr = (LPCVOID)<span class=\"number\">0x1005338</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> tempx = <span class=\"number\">0</span>, tempy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = *(<span class=\"type\">int</span>*)xAddr;</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = *(<span class=\"type\">int</span>*)yAddr;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= y; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= x; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((*((BYTE*)mapBaseAddr + i * <span class=\"number\">32</span> + j) &amp; <span class=\"number\">0x80</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttempx = i;</span><br><span class=\"line\">\t\t\t\ttempy = j;</span><br><span class=\"line\">\t\t\t\t__asm</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tpush tempx</span><br><span class=\"line\">\t\t\t\t\tpush tempy</span><br><span class=\"line\">\t\t\t\t\tmov eax, <span class=\"number\">0x10031D4</span></span><br><span class=\"line\">\t\t\t\t\tcall eax</span><br><span class=\"line\">\t\t\t\t\tmov eax, <span class=\"number\">0x10037E1</span></span><br><span class=\"line\">\t\t\t\t\tcall eax</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"number\">3</span> == *(<span class=\"type\">int</span>*)<span class=\"number\">0x1005160</span>) &#123;    <span class=\"comment\">// 判断当前游戏状态  0为正在游戏  2为扫雷失败  3为扫雷成功</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果图:</p>\n<p><img src=\"https://s2.loli.net/2024/03/25/dcbH2D4yNX9rO6f.png\" alt=\"image-20240325195025840\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm1roa1380001ugie1e0l1drk","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13i000dugie6w5c7h82"},{"post_id":"cm1roa13g0007ugie4la7c6j9","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13j000hugie9j8u3fyz"},{"post_id":"cm1roa13h000augie6zmtbs1y","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13k000lugie8ecebboo"},{"post_id":"cm1roa13b0002ugie8cad2ysi","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13l000pugied116h32e"},{"post_id":"cm1roa13i000bugie7imgcsu5","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13m000sugie1pdu7spg"},{"post_id":"cm1roa13e0005ugie9a2f6qav","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13n000xugiehkec5dqo"},{"post_id":"cm1roa13k000jugieb6vf5dtc","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13n000zugie0sicbacv"},{"post_id":"cm1roa13l000ougie6bln7p12","category_id":"cm1roa13k000kugie1vp385jb","_id":"cm1roa13n0012ugiee2x9eaq7"},{"post_id":"cm1roa13f0006ugie0l2hhxvu","category_id":"cm1roa13k000kugie1vp385jb","_id":"cm1roa13n0014ugie4ixyfxe0"},{"post_id":"cm1roa13m000rugiec4cd7jj3","category_id":"cm1roa13k000kugie1vp385jb","_id":"cm1roa13o0017ugieewta5baa"},{"post_id":"cm1roa13m000wugie2yo56pog","category_id":"cm1roa13k000kugie1vp385jb","_id":"cm1roa13o0019ugie17da94ly"},{"post_id":"cm1roa13j000gugie1cqjf8w2","category_id":"cm1roa13k000kugie1vp385jb","_id":"cm1roa13o001cugiegggu8p1o"},{"post_id":"cm1roa13r001mugie3llxd7bt","category_id":"cm1roa13k000kugie1vp385jb","_id":"cm1roa13s001qugie1wmo2p52"},{"post_id":"cm1roa13r001nugieaeeh7wks","category_id":"cm1roa13d0003ugie23nyav87","_id":"cm1roa13s001sugiehey8c1qt"}],"PostTag":[{"post_id":"cm1roa13h000augie6zmtbs1y","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13j000fugie3f4d1hxc"},{"post_id":"cm1roa13h000augie6zmtbs1y","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13k000iugieaidq90cz"},{"post_id":"cm1roa1380001ugie1e0l1drk","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13l000nugie7p6t0fhw"},{"post_id":"cm1roa1380001ugie1e0l1drk","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13l000qugiebknef0od"},{"post_id":"cm1roa13i000bugie7imgcsu5","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13m000vugiec3vq3meq"},{"post_id":"cm1roa13i000bugie7imgcsu5","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13n000yugie08bo3nm9"},{"post_id":"cm1roa13j000gugie1cqjf8w2","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13n0011ugieg3mxdpc3"},{"post_id":"cm1roa13k000jugieb6vf5dtc","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13n0013ugie71fab12a"},{"post_id":"cm1roa13k000jugieb6vf5dtc","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13o0016ugie7ws87n9y"},{"post_id":"cm1roa13l000ougie6bln7p12","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13o0018ugie3w6y5zuv"},{"post_id":"cm1roa13b0002ugie8cad2ysi","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13o001bugiehh8g90mw"},{"post_id":"cm1roa13b0002ugie8cad2ysi","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13o001dugied1s1307h"},{"post_id":"cm1roa13m000wugie2yo56pog","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13o001fugieeowigzkq"},{"post_id":"cm1roa13e0005ugie9a2f6qav","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13o001gugie751i5juf"},{"post_id":"cm1roa13e0005ugie9a2f6qav","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13p001hugie06x58g7a"},{"post_id":"cm1roa13f0006ugie0l2hhxvu","tag_id":"cm1roa13n0015ugie69a8821p","_id":"cm1roa13p001iugie5x5ifdej"},{"post_id":"cm1roa13g0007ugie4la7c6j9","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13p001jugiehiv9brrg"},{"post_id":"cm1roa13g0007ugie4la7c6j9","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13p001kugie8rdmaxom"},{"post_id":"cm1roa13m000rugiec4cd7jj3","tag_id":"cm1roa13o001eugie77pod2yr","_id":"cm1roa13p001lugie7p0r5zn0"},{"post_id":"cm1roa13r001nugieaeeh7wks","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13s001pugie2vih60sx"},{"post_id":"cm1roa13r001nugieaeeh7wks","tag_id":"cm1roa13e0004ugiedighawtv","_id":"cm1roa13s001rugie8bnmecu2"},{"post_id":"cm1roa13r001mugie3llxd7bt","tag_id":"cm1roa13g0009ugie35uzbgtb","_id":"cm1roa13s001tugiedmmoeda4"},{"post_id":"cm1roa13r001mugie3llxd7bt","tag_id":"cm1roa13s001ougie3tuw1leq","_id":"cm1roa13s001uugiee1s0h30g"}],"Tag":[{"name":"破解","_id":"cm1roa13e0004ugiedighawtv"},{"name":"逆向","_id":"cm1roa13g0009ugie35uzbgtb"},{"name":"杂记","_id":"cm1roa13n0015ugie69a8821p"},{"name":"C++","_id":"cm1roa13o001eugie77pod2yr"},{"name":"驱动","_id":"cm1roa13s001ougie3tuw1leq"}]}}